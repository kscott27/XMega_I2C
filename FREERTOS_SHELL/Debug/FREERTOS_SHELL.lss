
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ad6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c6  00802000  00004ad6  00004b6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000010ce  008021c6  008021c6  00004d30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004d30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004d60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000998  00000000  00000000  00004da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00019b06  00000000  00000000  00005738  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006d2c  00000000  00000000  0001f23e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006233  00000000  00000000  00025f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001cc4  00000000  00000000  0002c1a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006e18  00000000  00000000  0002de64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009075  00000000  00000000  00034c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008e8  00000000  00000000  0003dcf1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 03 	jmp	0x66a	; 0x66a <__ctors_end>
       4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
       8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
       c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      10:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      14:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      18:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      1c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      20:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      24:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      28:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      2c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      30:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      34:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      38:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      3c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      40:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      44:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      48:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      4c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      50:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      54:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      58:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__vector_22>
      5c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      60:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      64:	0c 94 82 1f 	jmp	0x3f04	; 0x3f04 <__vector_25>
      68:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      6c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      70:	0c 94 e0 1f 	jmp	0x3fc0	; 0x3fc0 <__vector_28>
      74:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      78:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      7c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      80:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      84:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      88:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      8c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      90:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      94:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      98:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      9c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      a0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      a4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      a8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      ac:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      b0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      b4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      b8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      bc:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      c0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      c4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      c8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      cc:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      d0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      d4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      d8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      dc:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      e0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      e4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      e8:	0c 94 fa 20 	jmp	0x41f4	; 0x41f4 <__vector_58>
      ec:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      f0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      f4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      f8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      fc:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     100:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     104:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     108:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     10c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     110:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     114:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     118:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     11c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     120:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     124:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     128:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     12c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     130:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     134:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     138:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     13c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     140:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     144:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     148:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     14c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     150:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     154:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     158:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     15c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     160:	0c 94 3e 20 	jmp	0x407c	; 0x407c <__vector_88>
     164:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     168:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     16c:	0c 94 9c 20 	jmp	0x4138	; 0x4138 <__vector_91>
     170:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     174:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     178:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     17c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     180:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     184:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     188:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     18c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     190:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     194:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     198:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     19c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1a0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1a4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1a8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1ac:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1b0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1b4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1b8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1bc:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1c0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1c4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1c8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1cc:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1d0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1d4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1d8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1dc:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1e0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1e4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1e8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1ec:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1f0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1f4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1f8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1fc:	6e 1d       	adc	r22, r14
     1fe:	71 1d       	adc	r23, r1
     200:	74 1d       	adc	r23, r4
     202:	77 1d       	adc	r23, r7
     204:	7a 1d       	adc	r23, r10
     206:	7d 1d       	adc	r23, r13
     208:	7f 1d       	adc	r23, r15
     20a:	90 1d       	adc	r25, r0
     20c:	98 1d       	adc	r25, r8
     20e:	a2 1d       	adc	r26, r2
     210:	a0 1d       	adc	r26, r0

00000212 <__trampolines_start>:
     212:	0c 94 5f 21 	jmp	0x42be	; 0x42be <_ZN9frt_queueIjE13ISR_not_emptyEv>
     216:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <_ZN14frt_text_queue7getcharEv>
     21a:	0c 94 7b 21 	jmp	0x42f6	; 0x42f6 <_ZN9frt_queueIiE13ISR_not_emptyEv>
     21e:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <_ZN9task_user3runEv>
     222:	0c 94 77 1d 	jmp	0x3aee	; 0x3aee <_ZN8emstreamlsE15ser_manipulator+0x30>
     226:	0c 94 18 1d 	jmp	0x3a30	; 0x3a30 <_ZN8emstream12transmit_nowEv>
     22a:	0c 94 c0 1e 	jmp	0x3d80	; 0x3d80 <_ZN5rs2327getcharEv>
     22e:	0c 94 86 21 	jmp	0x430c	; 0x430c <_ZN9frt_queueIiE12ISR_is_emptyEv>
     232:	0c 94 7f 1d 	jmp	0x3afe	; 0x3afe <_ZN8emstreamlsE15ser_manipulator+0x40>
     236:	0c 94 39 08 	jmp	0x1072	; 0x1072 <_ZN9frt_queueIhE10get_a_copyERh>
     23a:	0c 94 4f 19 	jmp	0x329e	; 0x329e <_ZN8frt_task12print_statusER8emstream>
     23e:	0c 94 9c 1e 	jmp	0x3d38	; 0x3d38 <_ZN5rs2327putcharEc>
     242:	0c 94 97 21 	jmp	0x432e	; 0x432e <_ZN9frt_queueIjE9not_emptyEv>
     246:	0c 94 16 23 	jmp	0x462c	; 0x462c <_ZN9frt_queueIjE7butt_inERKj>
     24a:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <_ZN9I2CMaster8Receiver17PacketStatusState11serialDebugEv>
     24e:	0c 94 13 1d 	jmp	0x3a26	; 0x3a26 <_ZN8emstream7getcharEv>
     252:	0c 94 16 22 	jmp	0x442c	; 0x442c <_ZN9frt_queueIiE10get_a_copyERi>
     256:	0c 94 8d 12 	jmp	0x251a	; 0x251a <prvIdleTask>
     25a:	0c 94 a2 1d 	jmp	0x3b44	; 0x3b44 <_ZN8emstreamlsE15ser_manipulator+0x86>
     25e:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <_ZN9frt_queueIhE7butt_inERKh>
     262:	0c 94 6a 21 	jmp	0x42d4	; 0x42d4 <_ZN9frt_queueIjE12ISR_is_emptyEv>
     266:	0c 94 b3 21 	jmp	0x4366	; 0x4366 <_ZN9frt_queueIiE9not_emptyEv>
     26a:	0c 94 a8 04 	jmp	0x950	; 0x950 <_ZN9I2CMaster8Receiver13ExchangeState7executeER6Packet>
     26e:	0c 94 69 05 	jmp	0xad2	; 0xad2 <_ZN9I2CMaster8Receiver11StatusState11serialDebugEv>
     272:	0c 94 7e 05 	jmp	0xafc	; 0xafc <_ZN9I2CMaster11Transmitter11StatusState11serialDebugEv>
     276:	0c 94 08 08 	jmp	0x1010	; 0x1010 <_ZN9frt_queueIhE13ISR_not_emptyEv>
     27a:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <_ZN9frt_queueIhE7ISR_putERKh>
     27e:	0c 94 28 23 	jmp	0x4650	; 0x4650 <_ZN9frt_queueIjE3putERKj>
     282:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <_ZN9I2CMaster11Transmitter17PacketStatusState11serialDebugEv>
     286:	0c 94 d4 21 	jmp	0x43a8	; 0x43a8 <_ZN9frt_queueIjE10get_a_copyEv>
     28a:	0c 94 49 22 	jmp	0x4492	; 0x4492 <_ZN9frt_queueIiE3getEv>
     28e:	0c 94 74 1d 	jmp	0x3ae8	; 0x3ae8 <_ZN8emstreamlsE15ser_manipulator+0x2a>
     292:	0c 94 3a 23 	jmp	0x4674	; 0x4674 <_ZN9frt_queueIiE7butt_inERKi>
     296:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <_ZN9I2CMaster8Receiver13ExchangeState11serialDebugEv>
     29a:	0c 94 90 1d 	jmp	0x3b20	; 0x3b20 <_ZN8emstreamlsE15ser_manipulator+0x62>
     29e:	0c 94 58 21 	jmp	0x42b0	; 0x42b0 <_ZN9frt_queueIjE16ISR_num_items_inEv>
     2a2:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <_ZN9frt_queueIhE11ISR_butt_inERKh>
     2a6:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <_ZN9I2CMaster10StartState7executeER6Packet>
     2aa:	0c 94 8d 22 	jmp	0x451a	; 0x451a <_ZN9frt_queueIiE7ISR_getEPi>
     2ae:	0c 94 a2 21 	jmp	0x4344	; 0x4344 <_ZN9frt_queueIjE8is_emptyEv>
     2b2:	0c 94 16 04 	jmp	0x82c	; 0x82c <_ZN9I2CMaster11Transmitter11StatusState7executeER6Packet>
     2b6:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <_ZN14frt_text_queue14check_for_charEv>
     2ba:	0c 94 74 21 	jmp	0x42e8	; 0x42e8 <_ZN9frt_queueIiE16ISR_num_items_inEv>
     2be:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <_ZN8I2CAgent11resetPacketER6Packet>
     2c2:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <_ZN9frt_queueIhE3getEv>
     2c6:	0c 94 8d 03 	jmp	0x71a	; 0x71a <_ZN8I2CAgent7receiveEv>
     2ca:	0c 94 ef 21 	jmp	0x43de	; 0x43de <_ZN9frt_queueIjE3getEPj>
     2ce:	0c 94 01 08 	jmp	0x1002	; 0x1002 <_ZN9frt_queueIhE16ISR_num_items_inEv>
     2d2:	0c 94 be 21 	jmp	0x437c	; 0x437c <_ZN9frt_queueIiE8is_emptyEv>
     2d6:	0c 94 3d 22 	jmp	0x447a	; 0x447a <_ZN9frt_queueIiE3getEPi>
     2da:	0c 94 f7 23 	jmp	0x47ee	; 0x47ee <_GLOBAL__sub_I_counter>
     2de:	0c 94 a0 1d 	jmp	0x3b40	; 0x3b40 <_ZN8emstreamlsE15ser_manipulator+0x82>
     2e2:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <_ZN9I2CMaster10ErrorState7executeER6Packet>
     2e6:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <_ZN14frt_text_queue7putcharEc>
     2ea:	0c 94 75 22 	jmp	0x44ea	; 0x44ea <_ZN9frt_queueIjE7ISR_getEv>
     2ee:	0c 94 47 04 	jmp	0x88e	; 0x88e <_ZN9I2CMaster8Receiver11StatusState7executeER6Packet>
     2f2:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <_ZN9frt_queueIhE3putERKh>
     2f6:	0c 94 6e 1d 	jmp	0x3adc	; 0x3adc <_ZN8emstreamlsE15ser_manipulator+0x1e>
     2fa:	0c 94 2f 08 	jmp	0x105e	; 0x105e <_ZN9frt_queueIhE8is_emptyEv>
     2fe:	0c 94 b8 03 	jmp	0x770	; 0x770 <_ZN8I2CAgent11writePacketER7Command>
     302:	0c 94 7d 1d 	jmp	0x3afa	; 0x3afa <_ZN8emstreamlsE15ser_manipulator+0x3c>
     306:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <_ZN8emstream12clear_screenEv>
     30a:	0c 94 9e 22 	jmp	0x453c	; 0x453c <_ZN9frt_queueIiE7ISR_getEv>
     30e:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <_ZN9frt_queueIiE11ISR_butt_inERKi>
     312:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <_ZN9I2CMaster10ErrorState11serialDebugEv>
     316:	0c 94 f9 1e 	jmp	0x3df2	; 0x3df2 <_ZN5rs23212clear_screenEv>
     31a:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <_ZN8emstreamlsE15ser_manipulator+0x72>
     31e:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <_ZN8emstreamlsE15ser_manipulator+0x36>
     322:	0c 94 16 1d 	jmp	0x3a2c	; 0x3a2c <_ZN8emstream14check_for_charEv>
     326:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <_ZN9I2CMaster11Transmitter13ExchangeState7executeER6Packet>
     32a:	0c 94 22 22 	jmp	0x4444	; 0x4444 <_ZN9frt_queueIiE10get_a_copyEv>
     32e:	0c 94 1d 08 	jmp	0x103a	; 0x103a <_ZN9frt_queueIhE12num_items_inEv>
     332:	0c 94 b6 22 	jmp	0x456c	; 0x456c <_ZN9frt_queueIjE11ISR_butt_inERKj>
     336:	0c 94 ac 21 	jmp	0x4358	; 0x4358 <_ZN9frt_queueIiE12num_items_inEv>
     33a:	0c 94 c8 21 	jmp	0x4390	; 0x4390 <_ZN9frt_queueIjE10get_a_copyERj>
     33e:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <_ZN9I2CMaster11Transmitter13ExchangeState11serialDebugEv>
     342:	0c 94 6d 03 	jmp	0x6da	; 0x6da <_ZN8I2CAgent10readPacketEv>
     346:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <_ZN8emstreamlsE15ser_manipulator+0x24>
     34a:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <_ZN8emstream13ready_to_sendEv>
     34e:	0c 94 ce 22 	jmp	0x459c	; 0x459c <_ZN9frt_queueIjE7ISR_putERKj>
     352:	0c 94 32 03 	jmp	0x664	; 0x664 <_call_static_run_method>
     356:	0c 94 90 21 	jmp	0x4320	; 0x4320 <_ZN9frt_queueIjE12num_items_inEv>
     35a:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <_ZN9frt_queueIiE3putERKi>
     35e:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <_ZN10task_sonar3runEv>
     362:	0c 94 93 05 	jmp	0xb26	; 0xb26 <_ZN9I2CMaster10StartState11serialDebugEv>
     366:	0c 94 ce 04 	jmp	0x99c	; 0x99c <_ZN9I2CMaster11Transmitter17PacketStatusState7executeER6Packet>
     36a:	0c 94 7a 1c 	jmp	0x38f4	; 0x38f4 <__cxa_pure_virtual>
     36e:	0c 94 5d 08 	jmp	0x10ba	; 0x10ba <_ZN9frt_queueIhE3getEPh>
     372:	0c 94 24 08 	jmp	0x1048	; 0x1048 <_ZN9frt_queueIhE9not_emptyEv>
     376:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <_ZN9I2CMaster9DoneState7executeER6Packet>
     37a:	0c 94 fe 22 	jmp	0x45fc	; 0x45fc <_ZN9frt_queueIiE7ISR_putERKi>
     37e:	0c 94 00 05 	jmp	0xa00	; 0xa00 <_ZN9I2CMaster9DoneState11serialDebugEv>
     382:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <_ZN6MB120212RangeCommand11writePacketER9frt_queueIhE>
     386:	0c 94 81 08 	jmp	0x1102	; 0x1102 <_ZN9frt_queueIhE7ISR_getEPh>
     38a:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <_ZN5rs23214check_for_charEv>
     38e:	0c 94 13 08 	jmp	0x1026	; 0x1026 <_ZN9frt_queueIhE12ISR_is_emptyEv>
     392:	0c 94 fb 21 	jmp	0x43f6	; 0x43f6 <_ZN9frt_queueIjE3getEv>
     396:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <_ZN9I2CMaster8Receiver17PacketStatusState7executeER6Packet>
     39a:	0c 94 45 08 	jmp	0x108a	; 0x108a <_ZN9frt_queueIhE10get_a_copyEv>
     39e:	0c 94 92 08 	jmp	0x1124	; 0x1124 <_ZN9frt_queueIhE7ISR_getEv>
     3a2:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <_ZN8I2CAgent8transmitER7Command>
     3a6:	0c 94 64 22 	jmp	0x44c8	; 0x44c8 <_ZN9frt_queueIjE7ISR_getEPj>

000003aa <__trampolines_end>:
     3aa:	53 6f       	ori	r21, 0xF3	; 243
     3ac:	6e 61       	ori	r22, 0x1E	; 30
     3ae:	72 3a       	cpi	r23, 0xA2	; 162
     3b0:	20 00       	.word	0x0020	; ????

000003b2 <_ZZN9task_user11show_statusEvE3__c_4>:
     3b2:	2c 20 54 43 43 30 43 43 41 3d 00                    , TCC0CCA=.

000003bd <_ZZN9task_user11show_statusEvE3__c_3>:
     3bd:	2f 00                                               /.

000003bf <_ZZN9task_user11show_statusEvE3__c_2>:
     3bf:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

000003cd <_ZZN9task_user11show_statusEvE3__c_1>:
     3cd:	54 69 6d 65 3a 20 00                                Time: .

000003d4 <_ZZN9task_user11show_statusEvE3__c_0>:
     3d4:	4d 61 72 20 31 35 20 32 30 31 38 00                 Mar 15 2018.

000003e0 <_ZZN9task_user11show_statusEvE3__c>:
     3e0:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     3f0:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

000003ff <_ZZN9task_user18print_help_messageEvE3__c_10>:
     3ff:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

0000040e <_ZZN9task_user18print_help_messageEvE3__c_9>:
     40e:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     41e:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

00000429 <_ZZN9task_user18print_help_messageEvE3__c_8>:
     429:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     439:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

00000447 <_ZZN9task_user18print_help_messageEvE3__c_7>:
     447:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     457:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     467:	6d 61 74 69 6f 6e 00                                mation.

0000046e <_ZZN9task_user18print_help_messageEvE3__c_6>:
     46e:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     47e:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

0000048f <_ZZN9task_user18print_help_messageEvE3__c_5>:
     48f:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     49f:	65 20 6f 6e 6c 79 3a 00                             e only:.

000004a7 <_ZZN9task_user18print_help_messageEvE3__c_4>:
     4a7:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     4b7:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

000004c3 <_ZZN9task_user18print_help_messageEvE3__c_3>:
     4c3:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     4d3:	68 65 20 41 56 52 00                                he AVR.

000004da <_ZZN9task_user18print_help_messageEvE3__c_2>:
     4da:	20 68 65 6c 70 00                                    help.

000004e0 <_ZZN9task_user18print_help_messageEvE3__c_1>:
     4e0:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     4f0:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

000004ff <_ZZN9task_user18print_help_messageEvE3__c_0>:
     4ff:	1b 5b 33 30 6d 00                                   .[30m.

00000505 <_ZZN9task_user18print_help_messageEvE3__c>:
     505:	1b 5b 34 36 6d 00                                   .[46m.

0000050b <_ZZN9task_user3runEvE3__c_3>:
     50b:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     51b:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

00000528 <_ZZN9task_user3runEvE3__c_2>:
     528:	3a 57 54 46 3f 00                                   :WTF?.

0000052e <_ZZN9task_user3runEvE3__c_1>:
     52e:	45 78 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     Exit command mod
     53e:	65 00                                               e.

00000540 <_ZZN9task_user3runEvE3__c_0>:
     540:	52 65 73 65 74 74 69 6e 67 20 41 56 52 00           Resetting AVR.

0000054e <_ZZN9task_user3runEvE3__c>:
     54e:	50 72 65 73 73 20 43 74 72 6c 2d 41 20 66 6f 72     Press Ctrl-A for
     55e:	20 63 6f 6d 6d 61 6e 64 20 6d 6f 64 65 00            command mode.

0000056c <_ZZN8frt_task15emergency_resetEvE3__c_0>:
     56c:	52 65 73 65 74 74 69 6e 67 00                       Resetting.

00000576 <_ZZN8frt_task15emergency_resetEvE3__c>:
     576:	45 52 52 4f 52 20 69 6e 20 74 61 73 6b 20 00        ERROR in task .

00000585 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     585:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     595:	61 73 6b 20 00                                      ask .

0000059a <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     59a:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

000005a8 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     5a8:	20 63 72 65 61 74 65 64 00                           created.

000005b1 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     5b1:	54 61 73 6b 20 00                                   Task .

000005b7 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_1>:
     5b7:	1b 5b 32 32 6d 00                                   .[22m.

000005bd <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_0>:
     5bd:	54 61 73 6b 3a 20 00                                Task: .

000005c4 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c>:
     5c4:	1b 5b 31 6d 00                                      .[1m.

000005c9 <_ZZ17print_task_stacksP8emstreamE3__c_1>:
     5c9:	1b 5b 32 32 6d 00                                   .[22m.

000005cf <_ZZ17print_task_stacksP8emstreamE3__c_0>:
     5cf:	54 61 73 6b 3a 20 49 44 4c 45 00                    Task: IDLE.

000005da <_ZZ17print_task_stacksP8emstreamE3__c>:
     5da:	1b 5b 31 6d 00                                      .[1m.

000005df <_ZZ15print_task_listP8emstreamE3__c_9>:
     5df:	09 09 00                                            ...

000005e2 <_ZZ15print_task_listP8emstreamE3__c_8>:
     5e2:	2f 00                                               /.

000005e4 <_ZZ15print_task_listP8emstreamE3__c_7>:
     5e4:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

000005ef <_ZZ15print_task_listP8emstreamE3__c_6>:
     5ef:	09 2d 2d 2d 2d 00                                   .----.

000005f5 <_ZZ15print_task_listP8emstreamE3__c_5>:
     5f5:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

00000601 <_ZZ15print_task_listP8emstreamE3__c_4>:
     601:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

00000612 <_ZZ15print_task_listP8emstreamE3__c_3>:
     612:	09 52 75 6e 73 00                                   .Runs.

00000618 <_ZZ15print_task_listP8emstreamE3__c_2>:
     618:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

00000624 <_ZZ15print_task_listP8emstreamE3__c_1>:
     624:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

00000635 <_ZZ15print_task_listP8emstreamE3__c_0>:
     635:	09 53 74 61 63 6b 00                                .Stack.

0000063c <_ZZ15print_task_listP8emstreamE3__c>:
     63c:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

00000647 <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     647:	09 00                                               ..

00000649 <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     649:	09 00                                               ..

0000064b <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     64b:	2f 00                                               /.

0000064d <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     64d:	09 00                                               ..

0000064f <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     64f:	09 00                                               ..

00000651 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_2>:
     651:	1b 5b 32 32 6d 00                                   .[22m.

00000657 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_1>:
     657:	1b 5b 31 6d 00                                      .[1m.

0000065c <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_0>:
     65c:	1b 5b 31 6d 00                                      .[1m.

00000661 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c>:
     661:	20 20 00                                              .

00000664 <_call_static_run_method>:
 *                the pointer is used to find the task's static run method
 */

extern "C" inline void _call_static_run_method (frt_task* p_task)
{
	frt_task::_call_users_run_method (p_task);
     664:	0e 94 e7 17 	call	0x2fce	; 0x2fce <_ZN8frt_task22_call_users_run_methodEPS_>

00000668 <__ctors_start>:
     668:	f7 23       	and	r31, r23

0000066a <__ctors_end>:
     66a:	11 24       	eor	r1, r1
     66c:	1f be       	out	0x3f, r1	; 63
     66e:	cf ef       	ldi	r28, 0xFF	; 255
     670:	cd bf       	out	0x3d, r28	; 61
     672:	df e3       	ldi	r29, 0x3F	; 63
     674:	de bf       	out	0x3e, r29	; 62
     676:	00 e0       	ldi	r16, 0x00	; 0
     678:	0c bf       	out	0x3c, r16	; 60
     67a:	18 be       	out	0x38, r1	; 56
     67c:	19 be       	out	0x39, r1	; 57
     67e:	1a be       	out	0x3a, r1	; 58
     680:	1b be       	out	0x3b, r1	; 59

00000682 <__do_copy_data>:
     682:	11 e2       	ldi	r17, 0x21	; 33
     684:	a0 e0       	ldi	r26, 0x00	; 0
     686:	b0 e2       	ldi	r27, 0x20	; 32
     688:	e6 ed       	ldi	r30, 0xD6	; 214
     68a:	fa e4       	ldi	r31, 0x4A	; 74
     68c:	00 e0       	ldi	r16, 0x00	; 0
     68e:	0b bf       	out	0x3b, r16	; 59
     690:	02 c0       	rjmp	.+4      	; 0x696 <__do_copy_data+0x14>
     692:	07 90       	elpm	r0, Z+
     694:	0d 92       	st	X+, r0
     696:	a6 3c       	cpi	r26, 0xC6	; 198
     698:	b1 07       	cpc	r27, r17
     69a:	d9 f7       	brne	.-10     	; 0x692 <__do_copy_data+0x10>
     69c:	1b be       	out	0x3b, r1	; 59

0000069e <__do_clear_bss>:
     69e:	22 e3       	ldi	r18, 0x32	; 50
     6a0:	a6 ec       	ldi	r26, 0xC6	; 198
     6a2:	b1 e2       	ldi	r27, 0x21	; 33
     6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <.do_clear_bss_start>

000006a6 <.do_clear_bss_loop>:
     6a6:	1d 92       	st	X+, r1

000006a8 <.do_clear_bss_start>:
     6a8:	a4 39       	cpi	r26, 0x94	; 148
     6aa:	b2 07       	cpc	r27, r18
     6ac:	e1 f7       	brne	.-8      	; 0x6a6 <.do_clear_bss_loop>

000006ae <__do_global_ctors>:
     6ae:	13 e0       	ldi	r17, 0x03	; 3
     6b0:	c5 e3       	ldi	r28, 0x35	; 53
     6b2:	d3 e0       	ldi	r29, 0x03	; 3
     6b4:	00 e0       	ldi	r16, 0x00	; 0
     6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <__do_global_ctors+0x16>
     6b8:	21 97       	sbiw	r28, 0x01	; 1
     6ba:	01 09       	sbc	r16, r1
     6bc:	80 2f       	mov	r24, r16
     6be:	fe 01       	movw	r30, r28
     6c0:	0e 94 c5 24 	call	0x498a	; 0x498a <__tablejump2__>
     6c4:	c4 33       	cpi	r28, 0x34	; 52
     6c6:	d1 07       	cpc	r29, r17
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	08 07       	cpc	r16, r24
     6cc:	a9 f7       	brne	.-22     	; 0x6b8 <__do_global_ctors+0xa>
     6ce:	0e 94 73 23 	call	0x46e6	; 0x46e6 <main>
     6d2:	0c 94 69 25 	jmp	0x4ad2	; 0x4ad2 <_exit>

000006d6 <__bad_interrupt>:
     6d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006da <_ZN8I2CAgent10readPacketEv>:
  cmd.writePacket(outPacket_);
}

void I2CAgent::readPacket()
{
  resetPacket(inPacket_);
     6da:	bc 01       	movw	r22, r24
     6dc:	6e 5f       	subi	r22, 0xFE	; 254
     6de:	7f 4f       	sbci	r23, 0xFF	; 255
     6e0:	dc 01       	movw	r26, r24
     6e2:	ed 91       	ld	r30, X+
     6e4:	fc 91       	ld	r31, X
     6e6:	00 84       	ldd	r0, Z+8	; 0x08
     6e8:	f1 85       	ldd	r31, Z+9	; 0x09
     6ea:	e0 2d       	mov	r30, r0
     6ec:	19 95       	eicall
     6ee:	08 95       	ret

000006f0 <_ZN8I2CAgent8transmitER7Command>:
#include "I2CAgent.h"

bool I2CAgent::transmit( Command & cmd )
{
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	ec 01       	movw	r28, r24
  writePacket(cmd);
     6f6:	e8 81       	ld	r30, Y
     6f8:	f9 81       	ldd	r31, Y+1	; 0x01
     6fa:	04 80       	ldd	r0, Z+4	; 0x04
     6fc:	f5 81       	ldd	r31, Z+5	; 0x05
     6fe:	e0 2d       	mov	r30, r0
     700:	19 95       	eicall
  bool status = driver_->getTransmitter()->run(outPacket_);
     702:	be 01       	movw	r22, r28
     704:	63 5f       	subi	r22, 0xF3	; 243
     706:	7f 4f       	sbci	r23, 0xFF	; 255
  };
  
  I2CMaster(TWI_t * interface, uint32_t i2c_freq);
  I2CMaster(TWI_t * interface, uint32_t i2c_freq, emstream * s);

  Transmitter * getTransmitter()  { return transmitter_; }
     708:	e8 8d       	ldd	r30, Y+24	; 0x18
     70a:	f9 8d       	ldd	r31, Y+25	; 0x19
     70c:	80 81       	ld	r24, Z
     70e:	91 81       	ldd	r25, Z+1	; 0x01
     710:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN9I2CMaster11Transmitter3runER6Packet>
  return status;
}
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	08 95       	ret

0000071a <_ZN8I2CAgent7receiveEv>:

Packet & I2CAgent::receive()
{
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	ec 01       	movw	r28, r24
  resetPacket(inPacket_);
     726:	7c 01       	movw	r14, r24
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	e8 0e       	add	r14, r24
     72c:	f1 1c       	adc	r15, r1
     72e:	e8 81       	ld	r30, Y
     730:	f9 81       	ldd	r31, Y+1	; 0x01
     732:	00 84       	ldd	r0, Z+8	; 0x08
     734:	f1 85       	ldd	r31, Z+9	; 0x09
     736:	e0 2d       	mov	r30, r0
     738:	b7 01       	movw	r22, r14
     73a:	ce 01       	movw	r24, r28
     73c:	19 95       	eicall
		 *  @param item Reference to the item which is going to be put into the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool put (const data_type& item)
		{
			return ((bool)(xQueueSendToBack (handle, &item, ticks_to_wait)));
     73e:	28 85       	ldd	r18, Y+8	; 0x08
     740:	39 85       	ldd	r19, Y+9	; 0x09
     742:	4a 85       	ldd	r20, Y+10	; 0x0a
     744:	5b 85       	ldd	r21, Y+11	; 0x0b
  inPacket_.put(readCommand_);
     746:	be 01       	movw	r22, r28
     748:	64 5e       	subi	r22, 0xE4	; 228
     74a:	7f 4f       	sbci	r23, 0xFF	; 255
     74c:	00 e0       	ldi	r16, 0x00	; 0
     74e:	8e 81       	ldd	r24, Y+6	; 0x06
     750:	9f 81       	ldd	r25, Y+7	; 0x07
     752:	0e 94 ca 10 	call	0x2194	; 0x2194 <xQueueGenericSend>
  Receiver *    getReceiver()     { return receiver_; }
     756:	e8 8d       	ldd	r30, Y+24	; 0x18
     758:	f9 8d       	ldd	r31, Y+25	; 0x19
  return driver_->getReceiver()->run(inPacket_);
     75a:	b7 01       	movw	r22, r14
     75c:	82 81       	ldd	r24, Z+2	; 0x02
     75e:	93 81       	ldd	r25, Z+3	; 0x03
     760:	0e 94 3b 07 	call	0xe76	; 0xe76 <_ZN9I2CMaster8Receiver3runER6Packet>
}
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	0f 91       	pop	r16
     76a:	ff 90       	pop	r15
     76c:	ef 90       	pop	r14
     76e:	08 95       	ret

00000770 <_ZN8I2CAgent11writePacketER7Command>:
  writeCommand_ = addr << 1;
  readCommand_ = addr << 1 | 1 << 0;
}

void I2CAgent::writePacket( Command & cmd )
{
     770:	cf 92       	push	r12
     772:	df 92       	push	r13
     774:	ef 92       	push	r14
     776:	ff 92       	push	r15
     778:	0f 93       	push	r16
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	ec 01       	movw	r28, r24
     780:	7b 01       	movw	r14, r22
  resetPacket(outPacket_);
     782:	6c 01       	movw	r12, r24
     784:	8d e0       	ldi	r24, 0x0D	; 13
     786:	c8 0e       	add	r12, r24
     788:	d1 1c       	adc	r13, r1
     78a:	e8 81       	ld	r30, Y
     78c:	f9 81       	ldd	r31, Y+1	; 0x01
     78e:	00 84       	ldd	r0, Z+8	; 0x08
     790:	f1 85       	ldd	r31, Z+9	; 0x09
     792:	e0 2d       	mov	r30, r0
     794:	b6 01       	movw	r22, r12
     796:	ce 01       	movw	r24, r28
     798:	19 95       	eicall
     79a:	2b 89       	ldd	r18, Y+19	; 0x13
     79c:	3c 89       	ldd	r19, Y+20	; 0x14
     79e:	4d 89       	ldd	r20, Y+21	; 0x15
     7a0:	5e 89       	ldd	r21, Y+22	; 0x16
  outPacket_.put(writeCommand_);
     7a2:	be 01       	movw	r22, r28
     7a4:	65 5e       	subi	r22, 0xE5	; 229
     7a6:	7f 4f       	sbci	r23, 0xFF	; 255
     7a8:	00 e0       	ldi	r16, 0x00	; 0
     7aa:	89 89       	ldd	r24, Y+17	; 0x11
     7ac:	9a 89       	ldd	r25, Y+18	; 0x12
     7ae:	0e 94 ca 10 	call	0x2194	; 0x2194 <xQueueGenericSend>
  cmd.writePacket(outPacket_);
     7b2:	d7 01       	movw	r26, r14
     7b4:	ed 91       	ld	r30, X+
     7b6:	fc 91       	ld	r31, X
     7b8:	01 90       	ld	r0, Z+
     7ba:	f0 81       	ld	r31, Z
     7bc:	e0 2d       	mov	r30, r0
     7be:	b6 01       	movw	r22, r12
     7c0:	c7 01       	movw	r24, r14
     7c2:	19 95       	eicall
}
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	df 90       	pop	r13
     7d0:	cf 90       	pop	r12
     7d2:	08 95       	ret

000007d4 <_ZN8I2CAgent11resetPacketER6Packet>:
{
  resetPacket(inPacket_);
}

void I2CAgent::resetPacket( Packet & packet )
{
     7d4:	cb 01       	movw	r24, r22
  packet.resetContent();
     7d6:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <_ZN6Packet12resetContentEv>
     7da:	08 95       	ret

000007dc <_ZN8I2CAgent12setSlaveAddrEh>:
  inPacket_.put(readCommand_);
  return driver_->getReceiver()->run(inPacket_);
}

void I2CAgent::setSlaveAddr( uint8_t addr )
{
     7dc:	fc 01       	movw	r30, r24
  slaveAddr_ = addr;
     7de:	62 8f       	std	Z+26, r22	; 0x1a
  writeCommand_ = addr << 1;
     7e0:	86 2f       	mov	r24, r22
     7e2:	88 0f       	add	r24, r24
     7e4:	83 8f       	std	Z+27, r24	; 0x1b
  readCommand_ = addr << 1 | 1 << 0;
     7e6:	68 2f       	mov	r22, r24
     7e8:	61 60       	ori	r22, 0x01	; 1
     7ea:	64 8f       	std	Z+28, r22	; 0x1c
     7ec:	08 95       	ret

000007ee <_ZN9I2CMaster10StartState7executeER6Packet>:
//  ptwiport->MASTER.CTRLC = 0x00; //initially send ACK and no CMD selected

  interface->MASTER.STATUS |= TWI_MASTER_RIF_bm | TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm | TWI_MASTER_BUSERR_bm | TWI_MASTER_BUSSTATE_IDLE_gc; //clear all flags initially and select bus state IDLE

  interface->MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	ec 01       	movw	r28, r24
     7f8:	cb 01       	movw	r24, r22
     7fa:	db 01       	movw	r26, r22
     7fc:	ed 91       	ld	r30, X+
     7fe:	fc 91       	ld	r31, X
     800:	02 84       	ldd	r0, Z+10	; 0x0a
     802:	f3 85       	ldd	r31, Z+11	; 0x0b
     804:	e0 2d       	mov	r30, r0
     806:	00 e0       	ldi	r16, 0x00	; 0
     808:	10 e0       	ldi	r17, 0x00	; 0
     80a:	b8 01       	movw	r22, r16
     80c:	19 95       	eicall
     80e:	ef 81       	ldd	r30, Y+7	; 0x07
     810:	f8 85       	ldd	r31, Y+8	; 0x08
     812:	04 80       	ldd	r0, Z+4	; 0x04
     814:	f5 81       	ldd	r31, Z+5	; 0x05
     816:	e0 2d       	mov	r30, r0
     818:	d8 01       	movw	r26, r16
     81a:	8c 91       	ld	r24, X
     81c:	86 83       	std	Z+6, r24	; 0x06
     81e:	8a 81       	ldd	r24, Y+2	; 0x02
     820:	9b 81       	ldd	r25, Y+3	; 0x03
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	08 95       	ret

0000082c <_ZN9I2CMaster11Transmitter11StatusState7executeER6Packet>:
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	1f 92       	push	r1
     832:	1f 92       	push	r1
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	dc 01       	movw	r26, r24
     83a:	19 96       	adiw	r26, 0x09	; 9
     83c:	8d 91       	ld	r24, X+
     83e:	9c 91       	ld	r25, X
     840:	1a 97       	sbiw	r26, 0x0a	; 10
     842:	89 83       	std	Y+1, r24	; 0x01
     844:	9a 83       	std	Y+2, r25	; 0x02
     846:	29 81       	ldd	r18, Y+1	; 0x01
     848:	3a 81       	ldd	r19, Y+2	; 0x02
     84a:	21 50       	subi	r18, 0x01	; 1
     84c:	31 09       	sbc	r19, r1
     84e:	29 83       	std	Y+1, r18	; 0x01
     850:	3a 83       	std	Y+2, r19	; 0x02
     852:	23 2b       	or	r18, r19
     854:	51 f0       	breq	.+20     	; 0x86a <_ZN9I2CMaster11Transmitter11StatusState7executeER6Packet+0x3e>
     856:	17 96       	adiw	r26, 0x07	; 7
     858:	ed 91       	ld	r30, X+
     85a:	fc 91       	ld	r31, X
     85c:	18 97       	sbiw	r26, 0x08	; 8
     85e:	04 80       	ldd	r0, Z+4	; 0x04
     860:	f5 81       	ldd	r31, Z+5	; 0x05
     862:	e0 2d       	mov	r30, r0
     864:	94 81       	ldd	r25, Z+4	; 0x04
     866:	90 75       	andi	r25, 0x50	; 80
     868:	71 f7       	brne	.-36     	; 0x846 <_ZN9I2CMaster11Transmitter11StatusState7executeER6Packet+0x1a>
     86a:	89 81       	ldd	r24, Y+1	; 0x01
     86c:	9a 81       	ldd	r25, Y+2	; 0x02
     86e:	89 2b       	or	r24, r25
     870:	29 f4       	brne	.+10     	; 0x87c <_ZN9I2CMaster11Transmitter11StatusState7executeER6Packet+0x50>
     872:	14 96       	adiw	r26, 0x04	; 4
     874:	8d 91       	ld	r24, X+
     876:	9c 91       	ld	r25, X
     878:	15 97       	sbiw	r26, 0x05	; 5
     87a:	04 c0       	rjmp	.+8      	; 0x884 <_ZN9I2CMaster11Transmitter11StatusState7executeER6Packet+0x58>
     87c:	12 96       	adiw	r26, 0x02	; 2
     87e:	8d 91       	ld	r24, X+
     880:	9c 91       	ld	r25, X
     882:	13 97       	sbiw	r26, 0x03	; 3
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <_ZN9I2CMaster8Receiver11StatusState7executeER6Packet>:
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	1f 92       	push	r1
     894:	1f 92       	push	r1
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
     89a:	dc 01       	movw	r26, r24
     89c:	19 96       	adiw	r26, 0x09	; 9
     89e:	8d 91       	ld	r24, X+
     8a0:	9c 91       	ld	r25, X
     8a2:	1a 97       	sbiw	r26, 0x0a	; 10
     8a4:	89 83       	std	Y+1, r24	; 0x01
     8a6:	9a 83       	std	Y+2, r25	; 0x02
     8a8:	29 81       	ldd	r18, Y+1	; 0x01
     8aa:	3a 81       	ldd	r19, Y+2	; 0x02
     8ac:	21 50       	subi	r18, 0x01	; 1
     8ae:	31 09       	sbc	r19, r1
     8b0:	29 83       	std	Y+1, r18	; 0x01
     8b2:	3a 83       	std	Y+2, r19	; 0x02
     8b4:	23 2b       	or	r18, r19
     8b6:	51 f0       	breq	.+20     	; 0x8cc <_ZN9I2CMaster8Receiver11StatusState7executeER6Packet+0x3e>
     8b8:	17 96       	adiw	r26, 0x07	; 7
     8ba:	ed 91       	ld	r30, X+
     8bc:	fc 91       	ld	r31, X
     8be:	18 97       	sbiw	r26, 0x08	; 8
     8c0:	04 80       	ldd	r0, Z+4	; 0x04
     8c2:	f5 81       	ldd	r31, Z+5	; 0x05
     8c4:	e0 2d       	mov	r30, r0
     8c6:	94 81       	ldd	r25, Z+4	; 0x04
     8c8:	90 79       	andi	r25, 0x90	; 144
     8ca:	71 f7       	brne	.-36     	; 0x8a8 <_ZN9I2CMaster8Receiver11StatusState7executeER6Packet+0x1a>
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
     8ce:	9a 81       	ldd	r25, Y+2	; 0x02
     8d0:	89 2b       	or	r24, r25
     8d2:	29 f4       	brne	.+10     	; 0x8de <_ZN9I2CMaster8Receiver11StatusState7executeER6Packet+0x50>
     8d4:	14 96       	adiw	r26, 0x04	; 4
     8d6:	8d 91       	ld	r24, X+
     8d8:	9c 91       	ld	r25, X
     8da:	15 97       	sbiw	r26, 0x05	; 5
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <_ZN9I2CMaster8Receiver11StatusState7executeER6Packet+0x58>
     8de:	12 96       	adiw	r26, 0x02	; 2
     8e0:	8d 91       	ld	r24, X+
     8e2:	9c 91       	ld	r25, X
     8e4:	13 97       	sbiw	r26, 0x03	; 3
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	08 95       	ret

000008f0 <_ZN9I2CMaster11Transmitter13ExchangeState7executeER6Packet>:
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	8c 01       	movw	r16, r24
     8fe:	eb 01       	movw	r28, r22
     900:	e8 81       	ld	r30, Y
     902:	f9 81       	ldd	r31, Y+1	; 0x01
     904:	00 8c       	ldd	r0, Z+24	; 0x18
     906:	f1 8d       	ldd	r31, Z+25	; 0x19
     908:	e0 2d       	mov	r30, r0
     90a:	cb 01       	movw	r24, r22
     90c:	19 95       	eicall
     90e:	88 23       	and	r24, r24
     910:	a9 f0       	breq	.+42     	; 0x93c <_ZN9I2CMaster11Transmitter13ExchangeState7executeER6Packet+0x4c>
     912:	e8 81       	ld	r30, Y
     914:	f9 81       	ldd	r31, Y+1	; 0x01
     916:	02 84       	ldd	r0, Z+10	; 0x0a
     918:	f3 85       	ldd	r31, Z+11	; 0x0b
     91a:	e0 2d       	mov	r30, r0
     91c:	e1 2c       	mov	r14, r1
     91e:	f1 2c       	mov	r15, r1
     920:	b7 01       	movw	r22, r14
     922:	ce 01       	movw	r24, r28
     924:	19 95       	eicall
     926:	d8 01       	movw	r26, r16
     928:	17 96       	adiw	r26, 0x07	; 7
     92a:	ed 91       	ld	r30, X+
     92c:	fc 91       	ld	r31, X
     92e:	18 97       	sbiw	r26, 0x08	; 8
     930:	04 80       	ldd	r0, Z+4	; 0x04
     932:	f5 81       	ldd	r31, Z+5	; 0x05
     934:	e0 2d       	mov	r30, r0
     936:	d7 01       	movw	r26, r14
     938:	8c 91       	ld	r24, X
     93a:	87 83       	std	Z+7, r24	; 0x07
     93c:	f8 01       	movw	r30, r16
     93e:	82 81       	ldd	r24, Z+2	; 0x02
     940:	93 81       	ldd	r25, Z+3	; 0x03
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	1f 91       	pop	r17
     948:	0f 91       	pop	r16
     94a:	ff 90       	pop	r15
     94c:	ef 90       	pop	r14
     94e:	08 95       	ret

00000950 <_ZN9I2CMaster8Receiver13ExchangeState7executeER6Packet>:
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	1f 92       	push	r1
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	8c 01       	movw	r16, r24
     960:	cb 01       	movw	r24, r22
     962:	d8 01       	movw	r26, r16
     964:	17 96       	adiw	r26, 0x07	; 7
     966:	ed 91       	ld	r30, X+
     968:	fc 91       	ld	r31, X
     96a:	18 97       	sbiw	r26, 0x08	; 8
     96c:	04 80       	ldd	r0, Z+4	; 0x04
     96e:	f5 81       	ldd	r31, Z+5	; 0x05
     970:	e0 2d       	mov	r30, r0
     972:	27 81       	ldd	r18, Z+7	; 0x07
     974:	29 83       	std	Y+1, r18	; 0x01
     976:	db 01       	movw	r26, r22
     978:	ed 91       	ld	r30, X+
     97a:	fc 91       	ld	r31, X
     97c:	01 90       	ld	r0, Z+
     97e:	f0 81       	ld	r31, Z
     980:	e0 2d       	mov	r30, r0
     982:	be 01       	movw	r22, r28
     984:	6f 5f       	subi	r22, 0xFF	; 255
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	19 95       	eicall
     98a:	f8 01       	movw	r30, r16
     98c:	82 81       	ldd	r24, Z+2	; 0x02
     98e:	93 81       	ldd	r25, Z+3	; 0x03
     990:	0f 90       	pop	r0
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	08 95       	ret

0000099c <_ZN9I2CMaster11Transmitter17PacketStatusState7executeER6Packet>:
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	ec 01       	movw	r28, r24
     9a2:	cb 01       	movw	r24, r22
     9a4:	db 01       	movw	r26, r22
     9a6:	ed 91       	ld	r30, X+
     9a8:	fc 91       	ld	r31, X
     9aa:	04 88       	ldd	r0, Z+20	; 0x14
     9ac:	f5 89       	ldd	r31, Z+21	; 0x15
     9ae:	e0 2d       	mov	r30, r0
     9b0:	19 95       	eicall
     9b2:	88 23       	and	r24, r24
     9b4:	19 f0       	breq	.+6      	; 0x9bc <_ZN9I2CMaster11Transmitter17PacketStatusState7executeER6Packet+0x20>
     9b6:	8a 81       	ldd	r24, Y+2	; 0x02
     9b8:	9b 81       	ldd	r25, Y+3	; 0x03
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <_ZN9I2CMaster11Transmitter17PacketStatusState7executeER6Packet+0x24>
     9bc:	8c 81       	ldd	r24, Y+4	; 0x04
     9be:	9d 81       	ldd	r25, Y+5	; 0x05
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <_ZN9I2CMaster9DoneState7executeER6Packet>:
     9c6:	fc 01       	movw	r30, r24
     9c8:	82 81       	ldd	r24, Z+2	; 0x02
     9ca:	93 81       	ldd	r25, Z+3	; 0x03
     9cc:	08 95       	ret

000009ce <_ZN9I2CMaster10ErrorState7executeER6Packet>:
     9ce:	fc 01       	movw	r30, r24
     9d0:	82 81       	ldd	r24, Z+2	; 0x02
     9d2:	93 81       	ldd	r25, Z+3	; 0x03
     9d4:	08 95       	ret

000009d6 <_ZN9I2CMaster10ErrorState11serialDebugEv>:
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	dc 01       	movw	r26, r24
     9dc:	17 96       	adiw	r26, 0x07	; 7
     9de:	ed 91       	ld	r30, X+
     9e0:	fc 91       	ld	r31, X
     9e2:	18 97       	sbiw	r26, 0x08	; 8
     9e4:	c6 81       	ldd	r28, Z+6	; 0x06
     9e6:	d7 81       	ldd	r29, Z+7	; 0x07
     9e8:	64 e1       	ldi	r22, 0x14	; 20
     9ea:	70 e2       	ldi	r23, 0x20	; 32
     9ec:	ce 01       	movw	r24, r28
     9ee:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
     9f2:	66 e0       	ldi	r22, 0x06	; 6
     9f4:	ce 01       	movw	r24, r28
     9f6:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	08 95       	ret

00000a00 <_ZN9I2CMaster9DoneState11serialDebugEv>:
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	dc 01       	movw	r26, r24
     a06:	17 96       	adiw	r26, 0x07	; 7
     a08:	ed 91       	ld	r30, X+
     a0a:	fc 91       	ld	r31, X
     a0c:	18 97       	sbiw	r26, 0x08	; 8
     a0e:	c6 81       	ldd	r28, Z+6	; 0x06
     a10:	d7 81       	ldd	r29, Z+7	; 0x07
     a12:	6a e1       	ldi	r22, 0x1A	; 26
     a14:	70 e2       	ldi	r23, 0x20	; 32
     a16:	ce 01       	movw	r24, r28
     a18:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
     a1c:	66 e0       	ldi	r22, 0x06	; 6
     a1e:	ce 01       	movw	r24, r28
     a20:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	08 95       	ret

00000a2a <_ZN9I2CMaster8Receiver17PacketStatusState11serialDebugEv>:
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	dc 01       	movw	r26, r24
     a30:	17 96       	adiw	r26, 0x07	; 7
     a32:	ed 91       	ld	r30, X+
     a34:	fc 91       	ld	r31, X
     a36:	18 97       	sbiw	r26, 0x08	; 8
     a38:	c6 81       	ldd	r28, Z+6	; 0x06
     a3a:	d7 81       	ldd	r29, Z+7	; 0x07
     a3c:	6f e1       	ldi	r22, 0x1F	; 31
     a3e:	70 e2       	ldi	r23, 0x20	; 32
     a40:	ce 01       	movw	r24, r28
     a42:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
     a46:	66 e0       	ldi	r22, 0x06	; 6
     a48:	ce 01       	movw	r24, r28
     a4a:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	08 95       	ret

00000a54 <_ZN9I2CMaster11Transmitter17PacketStatusState11serialDebugEv>:
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	dc 01       	movw	r26, r24
     a5a:	17 96       	adiw	r26, 0x07	; 7
     a5c:	ed 91       	ld	r30, X+
     a5e:	fc 91       	ld	r31, X
     a60:	18 97       	sbiw	r26, 0x08	; 8
     a62:	c6 81       	ldd	r28, Z+6	; 0x06
     a64:	d7 81       	ldd	r29, Z+7	; 0x07
     a66:	68 e2       	ldi	r22, 0x28	; 40
     a68:	70 e2       	ldi	r23, 0x20	; 32
     a6a:	ce 01       	movw	r24, r28
     a6c:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
     a70:	66 e0       	ldi	r22, 0x06	; 6
     a72:	ce 01       	movw	r24, r28
     a74:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <_ZN9I2CMaster8Receiver13ExchangeState11serialDebugEv>:
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	dc 01       	movw	r26, r24
     a84:	17 96       	adiw	r26, 0x07	; 7
     a86:	ed 91       	ld	r30, X+
     a88:	fc 91       	ld	r31, X
     a8a:	18 97       	sbiw	r26, 0x08	; 8
     a8c:	c6 81       	ldd	r28, Z+6	; 0x06
     a8e:	d7 81       	ldd	r29, Z+7	; 0x07
     a90:	61 e3       	ldi	r22, 0x31	; 49
     a92:	70 e2       	ldi	r23, 0x20	; 32
     a94:	ce 01       	movw	r24, r28
     a96:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
     a9a:	66 e0       	ldi	r22, 0x06	; 6
     a9c:	ce 01       	movw	r24, r28
     a9e:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <_ZN9I2CMaster11Transmitter13ExchangeState11serialDebugEv>:
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	dc 01       	movw	r26, r24
     aae:	17 96       	adiw	r26, 0x07	; 7
     ab0:	ed 91       	ld	r30, X+
     ab2:	fc 91       	ld	r31, X
     ab4:	18 97       	sbiw	r26, 0x08	; 8
     ab6:	c6 81       	ldd	r28, Z+6	; 0x06
     ab8:	d7 81       	ldd	r29, Z+7	; 0x07
     aba:	6c e3       	ldi	r22, 0x3C	; 60
     abc:	70 e2       	ldi	r23, 0x20	; 32
     abe:	ce 01       	movw	r24, r28
     ac0:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
     ac4:	66 e0       	ldi	r22, 0x06	; 6
     ac6:	ce 01       	movw	r24, r28
     ac8:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	08 95       	ret

00000ad2 <_ZN9I2CMaster8Receiver11StatusState11serialDebugEv>:
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	dc 01       	movw	r26, r24
     ad8:	17 96       	adiw	r26, 0x07	; 7
     ada:	ed 91       	ld	r30, X+
     adc:	fc 91       	ld	r31, X
     ade:	18 97       	sbiw	r26, 0x08	; 8
     ae0:	c6 81       	ldd	r28, Z+6	; 0x06
     ae2:	d7 81       	ldd	r29, Z+7	; 0x07
     ae4:	67 e4       	ldi	r22, 0x47	; 71
     ae6:	70 e2       	ldi	r23, 0x20	; 32
     ae8:	ce 01       	movw	r24, r28
     aea:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
     aee:	66 e0       	ldi	r22, 0x06	; 6
     af0:	ce 01       	movw	r24, r28
     af2:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	08 95       	ret

00000afc <_ZN9I2CMaster11Transmitter11StatusState11serialDebugEv>:
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	dc 01       	movw	r26, r24
     b02:	17 96       	adiw	r26, 0x07	; 7
     b04:	ed 91       	ld	r30, X+
     b06:	fc 91       	ld	r31, X
     b08:	18 97       	sbiw	r26, 0x08	; 8
     b0a:	c6 81       	ldd	r28, Z+6	; 0x06
     b0c:	d7 81       	ldd	r29, Z+7	; 0x07
     b0e:	60 e5       	ldi	r22, 0x50	; 80
     b10:	70 e2       	ldi	r23, 0x20	; 32
     b12:	ce 01       	movw	r24, r28
     b14:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
     b18:	66 e0       	ldi	r22, 0x06	; 6
     b1a:	ce 01       	movw	r24, r28
     b1c:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	08 95       	ret

00000b26 <_ZN9I2CMaster10StartState11serialDebugEv>:
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	dc 01       	movw	r26, r24
     b2c:	17 96       	adiw	r26, 0x07	; 7
     b2e:	ed 91       	ld	r30, X+
     b30:	fc 91       	ld	r31, X
     b32:	18 97       	sbiw	r26, 0x08	; 8
     b34:	c6 81       	ldd	r28, Z+6	; 0x06
     b36:	d7 81       	ldd	r29, Z+7	; 0x07
     b38:	69 e5       	ldi	r22, 0x59	; 89
     b3a:	70 e2       	ldi	r23, 0x20	; 32
     b3c:	ce 01       	movw	r24, r28
     b3e:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
     b42:	66 e0       	ldi	r22, 0x06	; 6
     b44:	ce 01       	movw	r24, r28
     b46:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	08 95       	ret

00000b50 <_ZN9I2CMaster8Receiver17PacketStatusState7executeER6Packet>:
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	8c 01       	movw	r16, r24
     b5a:	eb 01       	movw	r28, r22
     b5c:	e8 81       	ld	r30, Y
     b5e:	f9 81       	ldd	r31, Y+1	; 0x01
     b60:	04 8c       	ldd	r0, Z+28	; 0x1c
     b62:	f5 8d       	ldd	r31, Z+29	; 0x1d
     b64:	e0 2d       	mov	r30, r0
     b66:	cb 01       	movw	r24, r22
     b68:	19 95       	eicall
     b6a:	2a 85       	ldd	r18, Y+10	; 0x0a
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	82 17       	cp	r24, r18
     b70:	93 07       	cpc	r25, r19
     b72:	79 f4       	brne	.+30     	; 0xb92 <_ZN9I2CMaster8Receiver17PacketStatusState7executeER6Packet+0x42>
     b74:	d8 01       	movw	r26, r16
     b76:	17 96       	adiw	r26, 0x07	; 7
     b78:	ed 91       	ld	r30, X+
     b7a:	fc 91       	ld	r31, X
     b7c:	18 97       	sbiw	r26, 0x08	; 8
     b7e:	04 80       	ldd	r0, Z+4	; 0x04
     b80:	f5 81       	ldd	r31, Z+5	; 0x05
     b82:	e0 2d       	mov	r30, r0
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	83 83       	std	Z+3, r24	; 0x03
     b88:	12 96       	adiw	r26, 0x02	; 2
     b8a:	8d 91       	ld	r24, X+
     b8c:	9c 91       	ld	r25, X
     b8e:	13 97       	sbiw	r26, 0x03	; 3
     b90:	0e c0       	rjmp	.+28     	; 0xbae <_ZN9I2CMaster8Receiver17PacketStatusState7executeER6Packet+0x5e>
     b92:	d8 01       	movw	r26, r16
     b94:	17 96       	adiw	r26, 0x07	; 7
     b96:	ed 91       	ld	r30, X+
     b98:	fc 91       	ld	r31, X
     b9a:	18 97       	sbiw	r26, 0x08	; 8
     b9c:	04 80       	ldd	r0, Z+4	; 0x04
     b9e:	f5 81       	ldd	r31, Z+5	; 0x05
     ba0:	e0 2d       	mov	r30, r0
     ba2:	82 e0       	ldi	r24, 0x02	; 2
     ba4:	83 83       	std	Z+3, r24	; 0x03
     ba6:	14 96       	adiw	r26, 0x04	; 4
     ba8:	8d 91       	ld	r24, X+
     baa:	9c 91       	ld	r25, X
     bac:	15 97       	sbiw	r26, 0x05	; 5
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	1f 91       	pop	r17
     bb4:	0f 91       	pop	r16
     bb6:	08 95       	ret

00000bb8 <_ZN9I2CMaster11TransmitterC1EPS_>:
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	ec 01       	movw	r28, r24
     bc2:	8b 01       	movw	r16, r22
     bc4:	68 83       	st	Y, r22
     bc6:	79 83       	std	Y+1, r23	; 0x01
     bc8:	89 e0       	ldi	r24, 0x09	; 9
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Znwj>
     bd0:	fc 01       	movw	r30, r24
     bd2:	16 82       	std	Z+6, r1	; 0x06
     bd4:	83 e6       	ldi	r24, 0x63	; 99
     bd6:	90 e2       	ldi	r25, 0x20	; 32
     bd8:	80 83       	st	Z, r24
     bda:	91 83       	std	Z+1, r25	; 0x01
     bdc:	07 83       	std	Z+7, r16	; 0x07
     bde:	10 87       	std	Z+8, r17	; 0x08
     be0:	ec 83       	std	Y+4, r30	; 0x04
     be2:	fd 83       	std	Y+5, r31	; 0x05
     be4:	8b e0       	ldi	r24, 0x0B	; 11
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Znwj>
     bec:	fc 01       	movw	r30, r24
     bee:	8b 89       	ldd	r24, Y+19	; 0x13
     bf0:	9c 89       	ldd	r25, Y+20	; 0x14
     bf2:	16 82       	std	Z+6, r1	; 0x06
     bf4:	2b e6       	ldi	r18, 0x6B	; 107
     bf6:	30 e2       	ldi	r19, 0x20	; 32
     bf8:	20 83       	st	Z, r18
     bfa:	31 83       	std	Z+1, r19	; 0x01
     bfc:	07 83       	std	Z+7, r16	; 0x07
     bfe:	10 87       	std	Z+8, r17	; 0x08
     c00:	81 87       	std	Z+9, r24	; 0x09
     c02:	92 87       	std	Z+10, r25	; 0x0a
     c04:	ee 83       	std	Y+6, r30	; 0x06
     c06:	ff 83       	std	Y+7, r31	; 0x07
     c08:	89 e0       	ldi	r24, 0x09	; 9
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Znwj>
     c10:	fc 01       	movw	r30, r24
     c12:	16 82       	std	Z+6, r1	; 0x06
     c14:	8b e7       	ldi	r24, 0x7B	; 123
     c16:	90 e2       	ldi	r25, 0x20	; 32
     c18:	80 83       	st	Z, r24
     c1a:	91 83       	std	Z+1, r25	; 0x01
     c1c:	07 83       	std	Z+7, r16	; 0x07
     c1e:	10 87       	std	Z+8, r17	; 0x08
     c20:	e8 87       	std	Y+8, r30	; 0x08
     c22:	f9 87       	std	Y+9, r31	; 0x09
     c24:	89 e0       	ldi	r24, 0x09	; 9
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Znwj>
     c2c:	fc 01       	movw	r30, r24
     c2e:	16 82       	std	Z+6, r1	; 0x06
     c30:	8b e8       	ldi	r24, 0x8B	; 139
     c32:	90 e2       	ldi	r25, 0x20	; 32
     c34:	80 83       	st	Z, r24
     c36:	91 83       	std	Z+1, r25	; 0x01
     c38:	07 83       	std	Z+7, r16	; 0x07
     c3a:	10 87       	std	Z+8, r17	; 0x08
     c3c:	ea 87       	std	Y+10, r30	; 0x0a
     c3e:	fb 87       	std	Y+11, r31	; 0x0b
     c40:	89 e0       	ldi	r24, 0x09	; 9
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Znwj>
     c48:	fc 01       	movw	r30, r24
     c4a:	16 82       	std	Z+6, r1	; 0x06
     c4c:	83 ea       	ldi	r24, 0xA3	; 163
     c4e:	90 e2       	ldi	r25, 0x20	; 32
     c50:	80 83       	st	Z, r24
     c52:	91 83       	std	Z+1, r25	; 0x01
     c54:	07 83       	std	Z+7, r16	; 0x07
     c56:	10 87       	std	Z+8, r17	; 0x08
     c58:	ec 87       	std	Y+12, r30	; 0x0c
     c5a:	fd 87       	std	Y+13, r31	; 0x0d
     c5c:	89 e0       	ldi	r24, 0x09	; 9
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Znwj>
     c64:	fc 01       	movw	r30, r24
     c66:	16 82       	std	Z+6, r1	; 0x06
     c68:	8b e9       	ldi	r24, 0x9B	; 155
     c6a:	90 e2       	ldi	r25, 0x20	; 32
     c6c:	80 83       	st	Z, r24
     c6e:	91 83       	std	Z+1, r25	; 0x01
     c70:	07 83       	std	Z+7, r16	; 0x07
     c72:	10 87       	std	Z+8, r17	; 0x08
     c74:	ee 87       	std	Y+14, r30	; 0x0e
     c76:	ff 87       	std	Y+15, r31	; 0x0f
     c78:	80 e1       	ldi	r24, 0x10	; 16
     c7a:	97 e2       	ldi	r25, 0x27	; 39
     c7c:	8b 8b       	std	Y+19, r24	; 0x13
     c7e:	9c 8b       	std	Y+20, r25	; 0x14
     c80:	8e 81       	ldd	r24, Y+6	; 0x06
     c82:	9f 81       	ldd	r25, Y+7	; 0x07
     c84:	ec 81       	ldd	r30, Y+4	; 0x04
     c86:	fd 81       	ldd	r31, Y+5	; 0x05
     c88:	82 83       	std	Z+2, r24	; 0x02
     c8a:	93 83       	std	Z+3, r25	; 0x03
     c8c:	84 83       	std	Z+4, r24	; 0x04
     c8e:	95 83       	std	Z+5, r25	; 0x05
     c90:	8c 85       	ldd	r24, Y+12	; 0x0c
     c92:	9d 85       	ldd	r25, Y+13	; 0x0d
     c94:	28 85       	ldd	r18, Y+8	; 0x08
     c96:	39 85       	ldd	r19, Y+9	; 0x09
     c98:	ee 81       	ldd	r30, Y+6	; 0x06
     c9a:	ff 81       	ldd	r31, Y+7	; 0x07
     c9c:	22 83       	std	Z+2, r18	; 0x02
     c9e:	33 83       	std	Z+3, r19	; 0x03
     ca0:	84 83       	std	Z+4, r24	; 0x04
     ca2:	95 83       	std	Z+5, r25	; 0x05
     ca4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ca6:	9b 85       	ldd	r25, Y+11	; 0x0b
     ca8:	e8 85       	ldd	r30, Y+8	; 0x08
     caa:	f9 85       	ldd	r31, Y+9	; 0x09
     cac:	82 83       	std	Z+2, r24	; 0x02
     cae:	93 83       	std	Z+3, r25	; 0x03
     cb0:	84 83       	std	Z+4, r24	; 0x04
     cb2:	95 83       	std	Z+5, r25	; 0x05
     cb4:	8e 81       	ldd	r24, Y+6	; 0x06
     cb6:	9f 81       	ldd	r25, Y+7	; 0x07
     cb8:	2e 85       	ldd	r18, Y+14	; 0x0e
     cba:	3f 85       	ldd	r19, Y+15	; 0x0f
     cbc:	ea 85       	ldd	r30, Y+10	; 0x0a
     cbe:	fb 85       	ldd	r31, Y+11	; 0x0b
     cc0:	22 83       	std	Z+2, r18	; 0x02
     cc2:	33 83       	std	Z+3, r19	; 0x03
     cc4:	84 83       	std	Z+4, r24	; 0x04
     cc6:	95 83       	std	Z+5, r25	; 0x05
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	08 95       	ret

00000cd2 <_ZN9I2CMaster8ReceiverC1EPS_>:
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	ec 01       	movw	r28, r24
     cdc:	8b 01       	movw	r16, r22
     cde:	68 83       	st	Y, r22
     ce0:	79 83       	std	Y+1, r23	; 0x01
     ce2:	89 e0       	ldi	r24, 0x09	; 9
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Znwj>
     cea:	fc 01       	movw	r30, r24
     cec:	16 82       	std	Z+6, r1	; 0x06
     cee:	83 e6       	ldi	r24, 0x63	; 99
     cf0:	90 e2       	ldi	r25, 0x20	; 32
     cf2:	80 83       	st	Z, r24
     cf4:	91 83       	std	Z+1, r25	; 0x01
     cf6:	07 83       	std	Z+7, r16	; 0x07
     cf8:	10 87       	std	Z+8, r17	; 0x08
     cfa:	ec 83       	std	Y+4, r30	; 0x04
     cfc:	fd 83       	std	Y+5, r31	; 0x05
     cfe:	8b e0       	ldi	r24, 0x0B	; 11
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Znwj>
     d06:	fc 01       	movw	r30, r24
     d08:	8b 89       	ldd	r24, Y+19	; 0x13
     d0a:	9c 89       	ldd	r25, Y+20	; 0x14
     d0c:	16 82       	std	Z+6, r1	; 0x06
     d0e:	23 e7       	ldi	r18, 0x73	; 115
     d10:	30 e2       	ldi	r19, 0x20	; 32
     d12:	20 83       	st	Z, r18
     d14:	31 83       	std	Z+1, r19	; 0x01
     d16:	07 83       	std	Z+7, r16	; 0x07
     d18:	10 87       	std	Z+8, r17	; 0x08
     d1a:	81 87       	std	Z+9, r24	; 0x09
     d1c:	92 87       	std	Z+10, r25	; 0x0a
     d1e:	ee 83       	std	Y+6, r30	; 0x06
     d20:	ff 83       	std	Y+7, r31	; 0x07
     d22:	89 e0       	ldi	r24, 0x09	; 9
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Znwj>
     d2a:	fc 01       	movw	r30, r24
     d2c:	16 82       	std	Z+6, r1	; 0x06
     d2e:	83 e8       	ldi	r24, 0x83	; 131
     d30:	90 e2       	ldi	r25, 0x20	; 32
     d32:	80 83       	st	Z, r24
     d34:	91 83       	std	Z+1, r25	; 0x01
     d36:	07 83       	std	Z+7, r16	; 0x07
     d38:	10 87       	std	Z+8, r17	; 0x08
     d3a:	e8 87       	std	Y+8, r30	; 0x08
     d3c:	f9 87       	std	Y+9, r31	; 0x09
     d3e:	89 e0       	ldi	r24, 0x09	; 9
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Znwj>
     d46:	fc 01       	movw	r30, r24
     d48:	16 82       	std	Z+6, r1	; 0x06
     d4a:	83 e9       	ldi	r24, 0x93	; 147
     d4c:	90 e2       	ldi	r25, 0x20	; 32
     d4e:	80 83       	st	Z, r24
     d50:	91 83       	std	Z+1, r25	; 0x01
     d52:	07 83       	std	Z+7, r16	; 0x07
     d54:	10 87       	std	Z+8, r17	; 0x08
     d56:	ea 87       	std	Y+10, r30	; 0x0a
     d58:	fb 87       	std	Y+11, r31	; 0x0b
     d5a:	89 e0       	ldi	r24, 0x09	; 9
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Znwj>
     d62:	fc 01       	movw	r30, r24
     d64:	16 82       	std	Z+6, r1	; 0x06
     d66:	83 ea       	ldi	r24, 0xA3	; 163
     d68:	90 e2       	ldi	r25, 0x20	; 32
     d6a:	80 83       	st	Z, r24
     d6c:	91 83       	std	Z+1, r25	; 0x01
     d6e:	07 83       	std	Z+7, r16	; 0x07
     d70:	10 87       	std	Z+8, r17	; 0x08
     d72:	ec 87       	std	Y+12, r30	; 0x0c
     d74:	fd 87       	std	Y+13, r31	; 0x0d
     d76:	89 e0       	ldi	r24, 0x09	; 9
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Znwj>
     d7e:	fc 01       	movw	r30, r24
     d80:	16 82       	std	Z+6, r1	; 0x06
     d82:	8b e9       	ldi	r24, 0x9B	; 155
     d84:	90 e2       	ldi	r25, 0x20	; 32
     d86:	80 83       	st	Z, r24
     d88:	91 83       	std	Z+1, r25	; 0x01
     d8a:	07 83       	std	Z+7, r16	; 0x07
     d8c:	10 87       	std	Z+8, r17	; 0x08
     d8e:	ee 87       	std	Y+14, r30	; 0x0e
     d90:	ff 87       	std	Y+15, r31	; 0x0f
     d92:	80 e1       	ldi	r24, 0x10	; 16
     d94:	97 e2       	ldi	r25, 0x27	; 39
     d96:	8b 8b       	std	Y+19, r24	; 0x13
     d98:	9c 8b       	std	Y+20, r25	; 0x14
     d9a:	8e 81       	ldd	r24, Y+6	; 0x06
     d9c:	9f 81       	ldd	r25, Y+7	; 0x07
     d9e:	ec 81       	ldd	r30, Y+4	; 0x04
     da0:	fd 81       	ldd	r31, Y+5	; 0x05
     da2:	82 83       	std	Z+2, r24	; 0x02
     da4:	93 83       	std	Z+3, r25	; 0x03
     da6:	84 83       	std	Z+4, r24	; 0x04
     da8:	95 83       	std	Z+5, r25	; 0x05
     daa:	8c 85       	ldd	r24, Y+12	; 0x0c
     dac:	9d 85       	ldd	r25, Y+13	; 0x0d
     dae:	28 85       	ldd	r18, Y+8	; 0x08
     db0:	39 85       	ldd	r19, Y+9	; 0x09
     db2:	ee 81       	ldd	r30, Y+6	; 0x06
     db4:	ff 81       	ldd	r31, Y+7	; 0x07
     db6:	22 83       	std	Z+2, r18	; 0x02
     db8:	33 83       	std	Z+3, r19	; 0x03
     dba:	84 83       	std	Z+4, r24	; 0x04
     dbc:	95 83       	std	Z+5, r25	; 0x05
     dbe:	8a 85       	ldd	r24, Y+10	; 0x0a
     dc0:	9b 85       	ldd	r25, Y+11	; 0x0b
     dc2:	e8 85       	ldd	r30, Y+8	; 0x08
     dc4:	f9 85       	ldd	r31, Y+9	; 0x09
     dc6:	82 83       	std	Z+2, r24	; 0x02
     dc8:	93 83       	std	Z+3, r25	; 0x03
     dca:	84 83       	std	Z+4, r24	; 0x04
     dcc:	95 83       	std	Z+5, r25	; 0x05
     dce:	8e 81       	ldd	r24, Y+6	; 0x06
     dd0:	9f 81       	ldd	r25, Y+7	; 0x07
     dd2:	2e 85       	ldd	r18, Y+14	; 0x0e
     dd4:	3f 85       	ldd	r19, Y+15	; 0x0f
     dd6:	ea 85       	ldd	r30, Y+10	; 0x0a
     dd8:	fb 85       	ldd	r31, Y+11	; 0x0b
     dda:	22 83       	std	Z+2, r18	; 0x02
     ddc:	33 83       	std	Z+3, r19	; 0x03
     dde:	84 83       	std	Z+4, r24	; 0x04
     de0:	95 83       	std	Z+5, r25	; 0x05
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	08 95       	ret

00000dec <_ZN9I2CMaster11Transmitter3runER6Packet>:
     dec:	ef 92       	push	r14
     dee:	ff 92       	push	r15
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	ec 01       	movw	r28, r24
     dfa:	7b 01       	movw	r14, r22
     dfc:	8c 81       	ldd	r24, Y+4	; 0x04
     dfe:	9d 81       	ldd	r25, Y+5	; 0x05
     e00:	8a 83       	std	Y+2, r24	; 0x02
     e02:	9b 83       	std	Y+3, r25	; 0x03
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	9b 81       	ldd	r25, Y+3	; 0x03
     e08:	2e 85       	ldd	r18, Y+14	; 0x0e
     e0a:	3f 85       	ldd	r19, Y+15	; 0x0f
     e0c:	82 17       	cp	r24, r18
     e0e:	93 07       	cpc	r25, r19
     e10:	29 f4       	brne	.+10     	; 0xe1c <_ZN9I2CMaster11Transmitter3runER6Packet+0x30>
     e12:	ac 85       	ldd	r26, Y+12	; 0x0c
     e14:	bd 85       	ldd	r27, Y+13	; 0x0d
     e16:	8a 17       	cp	r24, r26
     e18:	9b 07       	cpc	r25, r27
     e1a:	a9 f0       	breq	.+42     	; 0xe46 <_ZN9I2CMaster11Transmitter3runER6Packet+0x5a>
     e1c:	dc 01       	movw	r26, r24
     e1e:	ed 91       	ld	r30, X+
     e20:	fc 91       	ld	r31, X
     e22:	01 90       	ld	r0, Z+
     e24:	f0 81       	ld	r31, Z
     e26:	e0 2d       	mov	r30, r0
     e28:	b7 01       	movw	r22, r14
     e2a:	19 95       	eicall
     e2c:	8c 01       	movw	r16, r24
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	9b 81       	ldd	r25, Y+3	; 0x03
     e32:	dc 01       	movw	r26, r24
     e34:	ed 91       	ld	r30, X+
     e36:	fc 91       	ld	r31, X
     e38:	02 80       	ldd	r0, Z+2	; 0x02
     e3a:	f3 81       	ldd	r31, Z+3	; 0x03
     e3c:	e0 2d       	mov	r30, r0
     e3e:	19 95       	eicall
     e40:	0a 83       	std	Y+2, r16	; 0x02
     e42:	1b 83       	std	Y+3, r17	; 0x03
     e44:	df cf       	rjmp	.-66     	; 0xe04 <_ZN9I2CMaster11Transmitter3runER6Packet+0x18>
     e46:	ed 91       	ld	r30, X+
     e48:	fc 91       	ld	r31, X
     e4a:	11 97       	sbiw	r26, 0x01	; 1
     e4c:	02 80       	ldd	r0, Z+2	; 0x02
     e4e:	f3 81       	ldd	r31, Z+3	; 0x03
     e50:	e0 2d       	mov	r30, r0
     e52:	cd 01       	movw	r24, r26
     e54:	19 95       	eicall
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	4a 81       	ldd	r20, Y+2	; 0x02
     e5a:	5b 81       	ldd	r21, Y+3	; 0x03
     e5c:	2e 85       	ldd	r18, Y+14	; 0x0e
     e5e:	3f 85       	ldd	r19, Y+15	; 0x0f
     e60:	42 17       	cp	r20, r18
     e62:	53 07       	cpc	r21, r19
     e64:	09 f0       	breq	.+2      	; 0xe68 <_ZN9I2CMaster11Transmitter3runER6Packet+0x7c>
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	08 95       	ret

00000e76 <_ZN9I2CMaster8Receiver3runER6Packet>:
     e76:	ef 92       	push	r14
     e78:	ff 92       	push	r15
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	ec 01       	movw	r28, r24
     e84:	7b 01       	movw	r14, r22
     e86:	8c 81       	ldd	r24, Y+4	; 0x04
     e88:	9d 81       	ldd	r25, Y+5	; 0x05
     e8a:	8a 83       	std	Y+2, r24	; 0x02
     e8c:	9b 83       	std	Y+3, r25	; 0x03
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	9b 81       	ldd	r25, Y+3	; 0x03
     e92:	2e 85       	ldd	r18, Y+14	; 0x0e
     e94:	3f 85       	ldd	r19, Y+15	; 0x0f
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	29 f4       	brne	.+10     	; 0xea6 <_ZN9I2CMaster8Receiver3runER6Packet+0x30>
     e9c:	ac 85       	ldd	r26, Y+12	; 0x0c
     e9e:	bd 85       	ldd	r27, Y+13	; 0x0d
     ea0:	8a 17       	cp	r24, r26
     ea2:	9b 07       	cpc	r25, r27
     ea4:	a9 f0       	breq	.+42     	; 0xed0 <_ZN9I2CMaster8Receiver3runER6Packet+0x5a>
     ea6:	dc 01       	movw	r26, r24
     ea8:	ed 91       	ld	r30, X+
     eaa:	fc 91       	ld	r31, X
     eac:	01 90       	ld	r0, Z+
     eae:	f0 81       	ld	r31, Z
     eb0:	e0 2d       	mov	r30, r0
     eb2:	b7 01       	movw	r22, r14
     eb4:	19 95       	eicall
     eb6:	8c 01       	movw	r16, r24
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	9b 81       	ldd	r25, Y+3	; 0x03
     ebc:	dc 01       	movw	r26, r24
     ebe:	ed 91       	ld	r30, X+
     ec0:	fc 91       	ld	r31, X
     ec2:	02 80       	ldd	r0, Z+2	; 0x02
     ec4:	f3 81       	ldd	r31, Z+3	; 0x03
     ec6:	e0 2d       	mov	r30, r0
     ec8:	19 95       	eicall
     eca:	0a 83       	std	Y+2, r16	; 0x02
     ecc:	1b 83       	std	Y+3, r17	; 0x03
     ece:	df cf       	rjmp	.-66     	; 0xe8e <_ZN9I2CMaster8Receiver3runER6Packet+0x18>
     ed0:	ed 91       	ld	r30, X+
     ed2:	fc 91       	ld	r31, X
     ed4:	11 97       	sbiw	r26, 0x01	; 1
     ed6:	02 80       	ldd	r0, Z+2	; 0x02
     ed8:	f3 81       	ldd	r31, Z+3	; 0x03
     eda:	e0 2d       	mov	r30, r0
     edc:	cd 01       	movw	r24, r26
     ede:	19 95       	eicall
     ee0:	c7 01       	movw	r24, r14
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	ff 90       	pop	r15
     eec:	ef 90       	pop	r14
     eee:	08 95       	ret

00000ef0 <_ZN9I2CMaster12set_baudrateEm>:
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	ec 01       	movw	r28, r24
     ef6:	9a 01       	movw	r18, r20
     ef8:	ab 01       	movw	r20, r22
     efa:	22 0f       	add	r18, r18
     efc:	33 1f       	adc	r19, r19
     efe:	44 1f       	adc	r20, r20
     f00:	55 1f       	adc	r21, r21
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	78 e4       	ldi	r23, 0x48	; 72
     f06:	88 ee       	ldi	r24, 0xE8	; 232
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	0e 94 84 24 	call	0x4908	; 0x4908 <__udivmodsi4>
     f0e:	25 50       	subi	r18, 0x05	; 5
     f10:	2a 87       	std	Y+10, r18	; 0x0a
     f12:	ec 81       	ldd	r30, Y+4	; 0x04
     f14:	fd 81       	ldd	r31, Y+5	; 0x05
     f16:	25 83       	std	Z+5, r18	; 0x05
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	08 95       	ret

00000f1e <_ZN9I2CMasterC1EP10TWI_structmP8emstream>:

I2CMaster::I2CMaster(TWI_t * interface, uint32_t i2c_freq, emstream * s)
     f1e:	8f 92       	push	r8
     f20:	9f 92       	push	r9
     f22:	af 92       	push	r10
     f24:	bf 92       	push	r11
     f26:	cf 92       	push	r12
     f28:	df 92       	push	r13
     f2a:	ef 92       	push	r14
     f2c:	ff 92       	push	r15
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	ec 01       	movw	r28, r24
     f38:	7b 01       	movw	r14, r22
     f3a:	49 01       	movw	r8, r18
     f3c:	5a 01       	movw	r10, r20
  : interface_(interface), 
    i2c_freq(i2c_freq),
    transmitter_(new Transmitter(this)),
    receiver_(new Receiver(this)),
    p_serial(s)
     f3e:	85 e1       	ldi	r24, 0x15	; 21
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Znwj>
     f46:	6c 01       	movw	r12, r24
}

I2CMaster::I2CMaster(TWI_t * interface, uint32_t i2c_freq, emstream * s)
  : interface_(interface), 
    i2c_freq(i2c_freq),
    transmitter_(new Transmitter(this)),
     f48:	be 01       	movw	r22, r28
     f4a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_ZN9I2CMaster11TransmitterC1EPS_>
    receiver_(new Receiver(this)),
    p_serial(s)
     f4e:	c8 82       	st	Y, r12
     f50:	d9 82       	std	Y+1, r13	; 0x01
     f52:	86 e1       	ldi	r24, 0x16	; 22
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Znwj>
     f5a:	6c 01       	movw	r12, r24

I2CMaster::I2CMaster(TWI_t * interface, uint32_t i2c_freq, emstream * s)
  : interface_(interface), 
    i2c_freq(i2c_freq),
    transmitter_(new Transmitter(this)),
    receiver_(new Receiver(this)),
     f5c:	be 01       	movw	r22, r28
     f5e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <_ZN9I2CMaster8ReceiverC1EPS_>
    p_serial(s)
     f62:	ca 82       	std	Y+2, r12	; 0x02
     f64:	db 82       	std	Y+3, r13	; 0x03
     f66:	ec 82       	std	Y+4, r14	; 0x04
     f68:	fd 82       	std	Y+5, r15	; 0x05
     f6a:	0e 83       	std	Y+6, r16	; 0x06
     f6c:	1f 83       	std	Y+7, r17	; 0x07
     f6e:	8b 86       	std	Y+11, r8	; 0x0b
     f70:	9c 86       	std	Y+12, r9	; 0x0c
     f72:	ad 86       	std	Y+13, r10	; 0x0d
     f74:	be 86       	std	Y+14, r11	; 0x0e
{ 
  if (interface == &TWIC)
     f76:	80 e8       	ldi	r24, 0x80	; 128
     f78:	e8 16       	cp	r14, r24
     f7a:	84 e0       	ldi	r24, 0x04	; 4
     f7c:	f8 06       	cpc	r15, r24
     f7e:	29 f4       	brne	.+10     	; 0xf8a <_ZN9I2CMasterC1EP10TWI_structmP8emstream+0x6c>
  {
    bus_port = &PORTC;
     f80:	80 e4       	ldi	r24, 0x40	; 64
     f82:	96 e0       	ldi	r25, 0x06	; 6
     f84:	88 87       	std	Y+8, r24	; 0x08
     f86:	99 87       	std	Y+9, r25	; 0x09
     f88:	09 c0       	rjmp	.+18     	; 0xf9c <_ZN9I2CMasterC1EP10TWI_structmP8emstream+0x7e>
  }
  if (interface == &TWIE)
     f8a:	e0 ea       	ldi	r30, 0xA0	; 160
     f8c:	ee 16       	cp	r14, r30
     f8e:	e4 e0       	ldi	r30, 0x04	; 4
     f90:	fe 06       	cpc	r15, r30
     f92:	21 f4       	brne	.+8      	; 0xf9c <_ZN9I2CMasterC1EP10TWI_structmP8emstream+0x7e>
  {
    bus_port = &PORTE;
     f94:	80 e8       	ldi	r24, 0x80	; 128
     f96:	96 e0       	ldi	r25, 0x06	; 6
     f98:	88 87       	std	Y+8, r24	; 0x08
     f9a:	99 87       	std	Y+9, r25	; 0x09
  }
  
  bus_port->DIRSET = PIN0_bm | PIN1_bm;
     f9c:	e8 85       	ldd	r30, Y+8	; 0x08
     f9e:	f9 85       	ldd	r31, Y+9	; 0x09
     fa0:	83 e0       	ldi	r24, 0x03	; 3
     fa2:	81 83       	std	Z+1, r24	; 0x01
  bus_port->PIN0CTRL = PORT_OPC_WIREDANDPULL_gc; //SDA pull up output
     fa4:	e8 85       	ldd	r30, Y+8	; 0x08
     fa6:	f9 85       	ldd	r31, Y+9	; 0x09
     fa8:	88 e3       	ldi	r24, 0x38	; 56
     faa:	80 8b       	std	Z+16, r24	; 0x10
  bus_port->PIN1CTRL = PORT_OPC_WIREDANDPULL_gc; //SCL pull up output
     fac:	e8 85       	ldd	r30, Y+8	; 0x08
     fae:	f9 85       	ldd	r31, Y+9	; 0x09
     fb0:	81 8b       	std	Z+17, r24	; 0x11
  
  interface->MASTER.CTRLB = 1 << 1;
     fb2:	82 e0       	ldi	r24, 0x02	; 2
     fb4:	f7 01       	movw	r30, r14
     fb6:	82 83       	std	Z+2, r24	; 0x02
  
  set_baudrate(i2c_freq); //baud rate is set such that TWI freq=100KHz
     fb8:	b5 01       	movw	r22, r10
     fba:	a4 01       	movw	r20, r8
     fbc:	ce 01       	movw	r24, r28
     fbe:	0e 94 78 07 	call	0xef0	; 0xef0 <_ZN9I2CMaster12set_baudrateEm>
  
//  ptwiport->MASTER.CTRLB = 0x00; //TWI_MASTER_QCEN_bm; //no inactive bus timeout, quick command and smart mode enabled
  
//  ptwiport->MASTER.CTRLC = 0x00; //initially send ACK and no CMD selected

  interface->MASTER.STATUS |= TWI_MASTER_RIF_bm | TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm | TWI_MASTER_BUSERR_bm | TWI_MASTER_BUSSTATE_IDLE_gc; //clear all flags initially and select bus state IDLE
     fc2:	f7 01       	movw	r30, r14
     fc4:	84 81       	ldd	r24, Z+4	; 0x04
     fc6:	8d 6c       	ori	r24, 0xCD	; 205
     fc8:	84 83       	std	Z+4, r24	; 0x04

  interface->MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
     fca:	88 e0       	ldi	r24, 0x08	; 8
     fcc:	81 83       	std	Z+1, r24	; 0x01
}
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	1f 91       	pop	r17
     fd4:	0f 91       	pop	r16
     fd6:	ff 90       	pop	r15
     fd8:	ef 90       	pop	r14
     fda:	df 90       	pop	r13
     fdc:	cf 90       	pop	r12
     fde:	bf 90       	pop	r11
     fe0:	af 90       	pop	r10
     fe2:	9f 90       	pop	r9
     fe4:	8f 90       	pop	r8
     fe6:	08 95       	ret

00000fe8 <_ZN6MB120212RangeCommand11writePacketER9frt_queueIhE>:
}

bool MB1202::is_ready()
{
	return driver_->is_ready(slaveAddr_);
}
     fe8:	db 01       	movw	r26, r22
     fea:	bc 01       	movw	r22, r24
     fec:	6e 5f       	subi	r22, 0xFE	; 254
     fee:	7f 4f       	sbci	r23, 0xFF	; 255
     ff0:	ed 91       	ld	r30, X+
     ff2:	fc 91       	ld	r31, X
     ff4:	11 97       	sbiw	r26, 0x01	; 1
     ff6:	01 90       	ld	r0, Z+
     ff8:	f0 81       	ld	r31, Z
     ffa:	e0 2d       	mov	r30, r0
     ffc:	cd 01       	movw	r24, r26
     ffe:	19 95       	eicall
    1000:	08 95       	ret

00001002 <_ZN9frt_queueIhE16ISR_num_items_inEv>:
    1002:	fc 01       	movw	r30, r24
    1004:	84 81       	ldd	r24, Z+4	; 0x04
    1006:	95 81       	ldd	r25, Z+5	; 0x05
    1008:	0e 94 8a 12 	call	0x2514	; 0x2514 <uxQueueMessagesWaitingFromISR>
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	08 95       	ret

00001010 <_ZN9frt_queueIhE13ISR_not_emptyEv>:
    1010:	fc 01       	movw	r30, r24
    1012:	84 81       	ldd	r24, Z+4	; 0x04
    1014:	95 81       	ldd	r25, Z+5	; 0x05
    1016:	0e 94 8a 12 	call	0x2514	; 0x2514 <uxQueueMessagesWaitingFromISR>
    101a:	91 e0       	ldi	r25, 0x01	; 1
    101c:	81 11       	cpse	r24, r1
    101e:	01 c0       	rjmp	.+2      	; 0x1022 <_ZN9frt_queueIhE13ISR_not_emptyEv+0x12>
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	89 2f       	mov	r24, r25
    1024:	08 95       	ret

00001026 <_ZN9frt_queueIhE12ISR_is_emptyEv>:
    1026:	fc 01       	movw	r30, r24
    1028:	84 81       	ldd	r24, Z+4	; 0x04
    102a:	95 81       	ldd	r25, Z+5	; 0x05
    102c:	0e 94 8a 12 	call	0x2514	; 0x2514 <uxQueueMessagesWaitingFromISR>
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	81 11       	cpse	r24, r1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	89 2f       	mov	r24, r25
    1038:	08 95       	ret

0000103a <_ZN9frt_queueIhE12num_items_inEv>:
    103a:	fc 01       	movw	r30, r24
    103c:	84 81       	ldd	r24, Z+4	; 0x04
    103e:	95 81       	ldd	r25, Z+5	; 0x05
    1040:	0e 94 82 12 	call	0x2504	; 0x2504 <uxQueueMessagesWaiting>
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	08 95       	ret

00001048 <_ZN9frt_queueIhE9not_emptyEv>:
    1048:	fc 01       	movw	r30, r24
    104a:	84 81       	ldd	r24, Z+4	; 0x04
    104c:	95 81       	ldd	r25, Z+5	; 0x05
    104e:	0e 94 82 12 	call	0x2504	; 0x2504 <uxQueueMessagesWaiting>
    1052:	91 e0       	ldi	r25, 0x01	; 1
    1054:	81 11       	cpse	r24, r1
    1056:	01 c0       	rjmp	.+2      	; 0x105a <_ZN9frt_queueIhE9not_emptyEv+0x12>
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	89 2f       	mov	r24, r25
    105c:	08 95       	ret

0000105e <_ZN9frt_queueIhE8is_emptyEv>:
    105e:	fc 01       	movw	r30, r24
    1060:	84 81       	ldd	r24, Z+4	; 0x04
    1062:	95 81       	ldd	r25, Z+5	; 0x05
    1064:	0e 94 82 12 	call	0x2504	; 0x2504 <uxQueueMessagesWaiting>
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	81 11       	cpse	r24, r1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	89 2f       	mov	r24, r25
    1070:	08 95       	ret

00001072 <_ZN9frt_queueIhE10get_a_copyERh>:
    1072:	0f 93       	push	r16
    1074:	01 e0       	ldi	r16, 0x01	; 1
    1076:	2f ef       	ldi	r18, 0xFF	; 255
    1078:	3f ef       	ldi	r19, 0xFF	; 255
    107a:	a9 01       	movw	r20, r18
    107c:	fc 01       	movw	r30, r24
    107e:	84 81       	ldd	r24, Z+4	; 0x04
    1080:	95 81       	ldd	r25, Z+5	; 0x05
    1082:	0e 94 91 11 	call	0x2322	; 0x2322 <xQueueGenericReceive>
    1086:	0f 91       	pop	r16
    1088:	08 95       	ret

0000108a <_ZN9frt_queueIhE10get_a_copyEv>:
    108a:	0f 93       	push	r16
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	1f 92       	push	r1
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	01 e0       	ldi	r16, 0x01	; 1
    1098:	2f ef       	ldi	r18, 0xFF	; 255
    109a:	3f ef       	ldi	r19, 0xFF	; 255
    109c:	a9 01       	movw	r20, r18
    109e:	be 01       	movw	r22, r28
    10a0:	6f 5f       	subi	r22, 0xFF	; 255
    10a2:	7f 4f       	sbci	r23, 0xFF	; 255
    10a4:	fc 01       	movw	r30, r24
    10a6:	84 81       	ldd	r24, Z+4	; 0x04
    10a8:	95 81       	ldd	r25, Z+5	; 0x05
    10aa:	0e 94 91 11 	call	0x2322	; 0x2322 <xQueueGenericReceive>
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	0f 90       	pop	r0
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	0f 91       	pop	r16
    10b8:	08 95       	ret

000010ba <_ZN9frt_queueIhE3getEPh>:
    10ba:	0f 93       	push	r16
    10bc:	00 e0       	ldi	r16, 0x00	; 0
    10be:	2f ef       	ldi	r18, 0xFF	; 255
    10c0:	3f ef       	ldi	r19, 0xFF	; 255
    10c2:	a9 01       	movw	r20, r18
    10c4:	fc 01       	movw	r30, r24
    10c6:	84 81       	ldd	r24, Z+4	; 0x04
    10c8:	95 81       	ldd	r25, Z+5	; 0x05
    10ca:	0e 94 91 11 	call	0x2322	; 0x2322 <xQueueGenericReceive>
    10ce:	0f 91       	pop	r16
    10d0:	08 95       	ret

000010d2 <_ZN9frt_queueIhE3getEv>:
    10d2:	0f 93       	push	r16
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	1f 92       	push	r1
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	00 e0       	ldi	r16, 0x00	; 0
    10e0:	2f ef       	ldi	r18, 0xFF	; 255
    10e2:	3f ef       	ldi	r19, 0xFF	; 255
    10e4:	a9 01       	movw	r20, r18
    10e6:	be 01       	movw	r22, r28
    10e8:	6f 5f       	subi	r22, 0xFF	; 255
    10ea:	7f 4f       	sbci	r23, 0xFF	; 255
    10ec:	fc 01       	movw	r30, r24
    10ee:	84 81       	ldd	r24, Z+4	; 0x04
    10f0:	95 81       	ldd	r25, Z+5	; 0x05
    10f2:	0e 94 91 11 	call	0x2322	; 0x2322 <xQueueGenericReceive>
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	0f 90       	pop	r0
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	0f 91       	pop	r16
    1100:	08 95       	ret

00001102 <_ZN9frt_queueIhE7ISR_getEPh>:
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	1f 92       	push	r1
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	ae 01       	movw	r20, r28
    110e:	4f 5f       	subi	r20, 0xFF	; 255
    1110:	5f 4f       	sbci	r21, 0xFF	; 255
    1112:	fc 01       	movw	r30, r24
    1114:	84 81       	ldd	r24, Z+4	; 0x04
    1116:	95 81       	ldd	r25, Z+5	; 0x05
    1118:	0e 94 55 12 	call	0x24aa	; 0x24aa <xQueueReceiveFromISR>
    111c:	0f 90       	pop	r0
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	08 95       	ret

00001124 <_ZN9frt_queueIhE7ISR_getEv>:
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	1f 92       	push	r1
    112a:	1f 92       	push	r1
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	ae 01       	movw	r20, r28
    1132:	4e 5f       	subi	r20, 0xFE	; 254
    1134:	5f 4f       	sbci	r21, 0xFF	; 255
    1136:	be 01       	movw	r22, r28
    1138:	6f 5f       	subi	r22, 0xFF	; 255
    113a:	7f 4f       	sbci	r23, 0xFF	; 255
    113c:	fc 01       	movw	r30, r24
    113e:	84 81       	ldd	r24, Z+4	; 0x04
    1140:	95 81       	ldd	r25, Z+5	; 0x05
    1142:	0e 94 55 12 	call	0x24aa	; 0x24aa <xQueueReceiveFromISR>
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	08 95       	ret

00001152 <_ZN9frt_queueIhE11ISR_butt_inERKh>:
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	1f 92       	push	r1
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	19 82       	std	Y+1, r1	; 0x01
    115e:	21 e0       	ldi	r18, 0x01	; 1
    1160:	ae 01       	movw	r20, r28
    1162:	4f 5f       	subi	r20, 0xFF	; 255
    1164:	5f 4f       	sbci	r21, 0xFF	; 255
    1166:	fc 01       	movw	r30, r24
    1168:	84 81       	ldd	r24, Z+4	; 0x04
    116a:	95 81       	ldd	r25, Z+5	; 0x05
    116c:	0e 94 65 11 	call	0x22ca	; 0x22ca <xQueueGenericSendFromISR>
    1170:	91 e0       	ldi	r25, 0x01	; 1
    1172:	81 11       	cpse	r24, r1
    1174:	01 c0       	rjmp	.+2      	; 0x1178 <_ZN9frt_queueIhE11ISR_butt_inERKh+0x26>
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	89 2f       	mov	r24, r25
    117a:	0f 90       	pop	r0
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <_ZN9frt_queueIhE7ISR_putERKh>:
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	1f 92       	push	r1
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	19 82       	std	Y+1, r1	; 0x01
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	ae 01       	movw	r20, r28
    1192:	4f 5f       	subi	r20, 0xFF	; 255
    1194:	5f 4f       	sbci	r21, 0xFF	; 255
    1196:	fc 01       	movw	r30, r24
    1198:	84 81       	ldd	r24, Z+4	; 0x04
    119a:	95 81       	ldd	r25, Z+5	; 0x05
    119c:	0e 94 65 11 	call	0x22ca	; 0x22ca <xQueueGenericSendFromISR>
    11a0:	91 e0       	ldi	r25, 0x01	; 1
    11a2:	81 11       	cpse	r24, r1
    11a4:	01 c0       	rjmp	.+2      	; 0x11a8 <_ZN9frt_queueIhE7ISR_putERKh+0x26>
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	89 2f       	mov	r24, r25
    11aa:	0f 90       	pop	r0
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	08 95       	ret

000011b2 <_ZN9frt_queueIhE7butt_inERKh>:
    11b2:	0f 93       	push	r16
    11b4:	fc 01       	movw	r30, r24
    11b6:	26 81       	ldd	r18, Z+6	; 0x06
    11b8:	37 81       	ldd	r19, Z+7	; 0x07
    11ba:	40 85       	ldd	r20, Z+8	; 0x08
    11bc:	51 85       	ldd	r21, Z+9	; 0x09
    11be:	01 e0       	ldi	r16, 0x01	; 1
    11c0:	84 81       	ldd	r24, Z+4	; 0x04
    11c2:	95 81       	ldd	r25, Z+5	; 0x05
    11c4:	0e 94 ca 10 	call	0x2194	; 0x2194 <xQueueGenericSend>
    11c8:	91 e0       	ldi	r25, 0x01	; 1
    11ca:	81 11       	cpse	r24, r1
    11cc:	01 c0       	rjmp	.+2      	; 0x11d0 <_ZN9frt_queueIhE7butt_inERKh+0x1e>
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	89 2f       	mov	r24, r25
    11d2:	0f 91       	pop	r16
    11d4:	08 95       	ret

000011d6 <_ZN9frt_queueIhE3putERKh>:
    11d6:	0f 93       	push	r16
    11d8:	fc 01       	movw	r30, r24
    11da:	26 81       	ldd	r18, Z+6	; 0x06
    11dc:	37 81       	ldd	r19, Z+7	; 0x07
    11de:	40 85       	ldd	r20, Z+8	; 0x08
    11e0:	51 85       	ldd	r21, Z+9	; 0x09
    11e2:	00 e0       	ldi	r16, 0x00	; 0
    11e4:	84 81       	ldd	r24, Z+4	; 0x04
    11e6:	95 81       	ldd	r25, Z+5	; 0x05
    11e8:	0e 94 ca 10 	call	0x2194	; 0x2194 <xQueueGenericSend>
    11ec:	91 e0       	ldi	r25, 0x01	; 1
    11ee:	81 11       	cpse	r24, r1
    11f0:	01 c0       	rjmp	.+2      	; 0x11f4 <_ZN9frt_queueIhE3putERKh+0x1e>
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	89 2f       	mov	r24, r25
    11f6:	0f 91       	pop	r16
    11f8:	08 95       	ret

000011fa <_ZN6MB1202C1EP9I2CMaster>:
    11fa:	4f 92       	push	r4
    11fc:	5f 92       	push	r5
    11fe:	6f 92       	push	r6
    1200:	7f 92       	push	r7
    1202:	8f 92       	push	r8
    1204:	9f 92       	push	r9
    1206:	af 92       	push	r10
    1208:	bf 92       	push	r11
    120a:	df 92       	push	r13
    120c:	ef 92       	push	r14
    120e:	ff 92       	push	r15
    1210:	0f 93       	push	r16
    1212:	1f 93       	push	r17
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	8c 01       	movw	r16, r24
    121a:	7b 01       	movw	r14, r22
    121c:	dc 01       	movw	r26, r24
    121e:	6d 93       	st	X+, r22
    1220:	7c 93       	st	X, r23
    1222:	8d e1       	ldi	r24, 0x1D	; 29
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Znwj>
    122a:	ec 01       	movw	r28, r24
    122c:	83 ef       	ldi	r24, 0xF3	; 243
    122e:	90 e2       	ldi	r25, 0x20	; 32
    1230:	88 83       	st	Y, r24
    1232:	99 83       	std	Y+1, r25	; 0x01
    1234:	1c 82       	std	Y+4, r1	; 0x04
    1236:	1d 82       	std	Y+5, r1	; 0x05
    1238:	0f 2e       	mov	r0, r31
    123a:	fb ea       	ldi	r31, 0xAB	; 171
    123c:	8f 2e       	mov	r8, r31
    123e:	f0 e2       	ldi	r31, 0x20	; 32
    1240:	9f 2e       	mov	r9, r31
    1242:	f0 2d       	mov	r31, r0
    1244:	8a 82       	std	Y+2, r8	; 0x02
    1246:	9b 82       	std	Y+3, r9	; 0x03
    1248:	40 e0       	ldi	r20, 0x00	; 0
    124a:	61 e0       	ldi	r22, 0x01	; 1
    124c:	82 e0       	ldi	r24, 0x02	; 2
    124e:	0e 94 9c 10 	call	0x2138	; 0x2138 <xQueueGenericCreate>
    1252:	8e 83       	std	Y+6, r24	; 0x06
    1254:	9f 83       	std	Y+7, r25	; 0x07
    1256:	0f 2e       	mov	r0, r31
    1258:	fa e0       	ldi	r31, 0x0A	; 10
    125a:	4f 2e       	mov	r4, r31
    125c:	51 2c       	mov	r5, r1
    125e:	61 2c       	mov	r6, r1
    1260:	71 2c       	mov	r7, r1
    1262:	f0 2d       	mov	r31, r0
    1264:	48 86       	std	Y+8, r4	; 0x08
    1266:	59 86       	std	Y+9, r5	; 0x09
    1268:	6a 86       	std	Y+10, r6	; 0x0a
    126a:	7b 86       	std	Y+11, r7	; 0x0b
    126c:	0f 2e       	mov	r0, r31
    126e:	ff ec       	ldi	r31, 0xCF	; 207
    1270:	af 2e       	mov	r10, r31
    1272:	f0 e2       	ldi	r31, 0x20	; 32
    1274:	bf 2e       	mov	r11, r31
    1276:	f0 2d       	mov	r31, r0
    1278:	aa 82       	std	Y+2, r10	; 0x02
    127a:	bb 82       	std	Y+3, r11	; 0x03
    127c:	68 94       	set
    127e:	dd 24       	eor	r13, r13
    1280:	d1 f8       	bld	r13, 1
    1282:	dc 86       	std	Y+12, r13	; 0x0c
    1284:	1f 86       	std	Y+15, r1	; 0x0f
    1286:	18 8a       	std	Y+16, r1	; 0x10
    1288:	8d 86       	std	Y+13, r8	; 0x0d
    128a:	9e 86       	std	Y+14, r9	; 0x0e
    128c:	40 e0       	ldi	r20, 0x00	; 0
    128e:	61 e0       	ldi	r22, 0x01	; 1
    1290:	82 e0       	ldi	r24, 0x02	; 2
    1292:	0e 94 9c 10 	call	0x2138	; 0x2138 <xQueueGenericCreate>
    1296:	89 8b       	std	Y+17, r24	; 0x11
    1298:	9a 8b       	std	Y+18, r25	; 0x12
    129a:	4b 8a       	std	Y+19, r4	; 0x13
    129c:	5c 8a       	std	Y+20, r5	; 0x14
    129e:	6d 8a       	std	Y+21, r6	; 0x15
    12a0:	7e 8a       	std	Y+22, r7	; 0x16
    12a2:	ad 86       	std	Y+13, r10	; 0x0d
    12a4:	be 86       	std	Y+14, r11	; 0x0e
    12a6:	df 8a       	std	Y+23, r13	; 0x17
    12a8:	8a e0       	ldi	r24, 0x0A	; 10
    12aa:	90 e2       	ldi	r25, 0x20	; 32
    12ac:	88 83       	st	Y, r24
    12ae:	99 83       	std	Y+1, r25	; 0x01
    12b0:	f8 01       	movw	r30, r16
    12b2:	c2 83       	std	Z+2, r28	; 0x02
    12b4:	d3 83       	std	Z+3, r29	; 0x03
    12b6:	80 e7       	ldi	r24, 0x70	; 112
    12b8:	84 83       	std	Z+4, r24	; 0x04
    12ba:	16 82       	std	Z+6, r1	; 0x06
    12bc:	17 82       	std	Z+7, r1	; 0x07
    12be:	10 86       	std	Z+8, r1	; 0x08
    12c0:	11 86       	std	Z+9, r1	; 0x09
    12c2:	12 86       	std	Z+10, r1	; 0x0a
    12c4:	83 e0       	ldi	r24, 0x03	; 3
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Znwj>
    12cc:	21 e0       	ldi	r18, 0x01	; 1
    12ce:	31 e2       	ldi	r19, 0x21	; 33
    12d0:	fc 01       	movw	r30, r24
    12d2:	20 83       	st	Z, r18
    12d4:	31 83       	std	Z+1, r19	; 0x01
    12d6:	c1 e5       	ldi	r28, 0x51	; 81
    12d8:	c2 83       	std	Z+2, r28	; 0x02
    12da:	d8 01       	movw	r26, r16
    12dc:	1d 96       	adiw	r26, 0x0d	; 13
    12de:	8d 93       	st	X+, r24
    12e0:	9c 93       	st	X, r25
    12e2:	1e 97       	sbiw	r26, 0x0e	; 14
    12e4:	12 96       	adiw	r26, 0x02	; 2
    12e6:	ed 91       	ld	r30, X+
    12e8:	fc 91       	ld	r31, X
    12ea:	13 97       	sbiw	r26, 0x03	; 3
    12ec:	e0 8e       	std	Z+24, r14	; 0x18
    12ee:	f1 8e       	std	Z+25, r15	; 0x19
    12f0:	14 96       	adiw	r26, 0x04	; 4
    12f2:	6c 91       	ld	r22, X
    12f4:	14 97       	sbiw	r26, 0x04	; 4
    12f6:	12 96       	adiw	r26, 0x02	; 2
    12f8:	8d 91       	ld	r24, X+
    12fa:	9c 91       	ld	r25, X
    12fc:	13 97       	sbiw	r26, 0x03	; 3
    12fe:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_ZN8I2CAgent12setSlaveAddrEh>
    1302:	f8 01       	movw	r30, r16
    1304:	c5 83       	std	Z+5, r28	; 0x05
    1306:	8a ea       	ldi	r24, 0xAA	; 170
    1308:	86 83       	std	Z+6, r24	; 0x06
    130a:	85 ea       	ldi	r24, 0xA5	; 165
    130c:	87 83       	std	Z+7, r24	; 0x07
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	ff 90       	pop	r15
    1318:	ef 90       	pop	r14
    131a:	df 90       	pop	r13
    131c:	bf 90       	pop	r11
    131e:	af 90       	pop	r10
    1320:	9f 90       	pop	r9
    1322:	8f 90       	pop	r8
    1324:	7f 90       	pop	r7
    1326:	6f 90       	pop	r6
    1328:	5f 90       	pop	r5
    132a:	4f 90       	pop	r4
    132c:	08 95       	ret

0000132e <_ZN6MB120211takeReadingEv>:

bool MB1202::takeReading()
{
	return i2cAgent_->transmit(*rangeCommand_);
    132e:	fc 01       	movw	r30, r24
    1330:	a2 81       	ldd	r26, Z+2	; 0x02
    1332:	b3 81       	ldd	r27, Z+3	; 0x03
    1334:	65 85       	ldd	r22, Z+13	; 0x0d
    1336:	76 85       	ldd	r23, Z+14	; 0x0e
    1338:	ed 91       	ld	r30, X+
    133a:	fc 91       	ld	r31, X
    133c:	11 97       	sbiw	r26, 0x01	; 1
    133e:	01 90       	ld	r0, Z+
    1340:	f0 81       	ld	r31, Z
    1342:	e0 2d       	mov	r30, r0
    1344:	cd 01       	movw	r24, r26
    1346:	19 95       	eicall
}
    1348:	08 95       	ret

0000134a <_ZN6MB120210getReadingEv>:

uint16_t MB1202::getReading()
{
    134a:	ff 92       	push	r15
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	ec 01       	movw	r28, r24
	Packet & data = i2cAgent_->receive();
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	9b 81       	ldd	r25, Y+3	; 0x03
    135a:	dc 01       	movw	r26, r24
    135c:	ed 91       	ld	r30, X+
    135e:	fc 91       	ld	r31, X
    1360:	02 80       	ldd	r0, Z+2	; 0x02
    1362:	f3 81       	ldd	r31, Z+3	; 0x03
    1364:	e0 2d       	mov	r30, r0
    1366:	19 95       	eicall
    1368:	8c 01       	movw	r16, r24
	rangeReading_ = ((uint16_t) data.get() << 8) | ((uint16_t) data.get());
    136a:	dc 01       	movw	r26, r24
    136c:	ed 91       	ld	r30, X+
    136e:	fc 91       	ld	r31, X
    1370:	00 84       	ldd	r0, Z+8	; 0x08
    1372:	f1 85       	ldd	r31, Z+9	; 0x09
    1374:	e0 2d       	mov	r30, r0
    1376:	19 95       	eicall
    1378:	f8 2e       	mov	r15, r24
    137a:	d8 01       	movw	r26, r16
    137c:	ed 91       	ld	r30, X+
    137e:	fc 91       	ld	r31, X
    1380:	00 84       	ldd	r0, Z+8	; 0x08
    1382:	f1 85       	ldd	r31, Z+9	; 0x09
    1384:	e0 2d       	mov	r30, r0
    1386:	c8 01       	movw	r24, r16
    1388:	19 95       	eicall
    138a:	2f 2d       	mov	r18, r15
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	32 2f       	mov	r19, r18
    1390:	22 27       	eor	r18, r18
    1392:	a9 01       	movw	r20, r18
    1394:	48 2b       	or	r20, r24
    1396:	ca 01       	movw	r24, r20
    1398:	8b 87       	std	Y+11, r24	; 0x0b
    139a:	9c 87       	std	Y+12, r25	; 0x0c
	return rangeReading_;
}
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	ff 90       	pop	r15
    13a6:	08 95       	ret

000013a8 <_ZN6Packet12resetContentEv>:
#include "Packet.h"

void Packet::resetContent()
{
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	ec 01       	movw	r28, r24
  while( not_empty() )
    13ae:	e8 81       	ld	r30, Y
    13b0:	f9 81       	ldd	r31, Y+1	; 0x01
    13b2:	00 8c       	ldd	r0, Z+24	; 0x18
    13b4:	f1 8d       	ldd	r31, Z+25	; 0x19
    13b6:	e0 2d       	mov	r30, r0
    13b8:	ce 01       	movw	r24, r28
    13ba:	19 95       	eicall
    13bc:	88 23       	and	r24, r24
    13be:	41 f0       	breq	.+16     	; 0x13d0 <_ZN6Packet12resetContentEv+0x28>
  {
    get();
    13c0:	e8 81       	ld	r30, Y
    13c2:	f9 81       	ldd	r31, Y+1	; 0x01
    13c4:	00 84       	ldd	r0, Z+8	; 0x08
    13c6:	f1 85       	ldd	r31, Z+9	; 0x09
    13c8:	e0 2d       	mov	r30, r0
    13ca:	ce 01       	movw	r24, r28
    13cc:	19 95       	eicall
#include "Packet.h"

void Packet::resetContent()
{
  while( not_empty() )
    13ce:	ef cf       	rjmp	.-34     	; 0x13ae <_ZN6Packet12resetContentEv+0x6>
  {
    get();
  }
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	08 95       	ret

000013d6 <_ZN10task_sonar3runEv>:
 *  is just following the modern government model of "This is the land of the free...
 *  free to do exactly what you're told." 
 */

void task_sonar::run (void)
{
    13d6:	ec 01       	movw	r28, r24
	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
	{
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
    13d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    13da:	88 23       	and	r24, r24
    13dc:	19 f0       	breq	.+6      	; 0x13e4 <_ZN10task_sonar3runEv+0xe>
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	51 f0       	breq	.+20     	; 0x13f6 <_ZN10task_sonar3runEv+0x20>
    13e2:	25 c0       	rjmp	.+74     	; 0x142e <_ZN10task_sonar3runEv+0x58>
			// In state 0, the motor task is waiting for the user to enter data before 
			// proceeding to its routine.
			case (0):
			    
				//*p_serial << PMS ("Sonar ready: ") << mb1202->take_reading() << endl;
				mb1202_->takeReading();	
    13e4:	8c 89       	ldd	r24, Y+20	; 0x14
    13e6:	9d 89       	ldd	r25, Y+21	; 0x15
    13e8:	0e 94 97 09 	call	0x132e	; 0x132e <_ZN6MB120211takeReadingEv>
				
				transition_to(1);			
    13ec:	61 e0       	ldi	r22, 0x01	; 1
    13ee:	ce 01       	movw	r24, r28
    13f0:	0e 94 f6 17 	call	0x2fec	; 0x2fec <_ZN8frt_task13transition_toEh>
			
			    break;
    13f4:	1c c0       	rjmp	.+56     	; 0x142e <_ZN10task_sonar3runEv+0x58>
				
			case (1):
			
				rangeReading_ = mb1202_->getReading();
    13f6:	8c 89       	ldd	r24, Y+20	; 0x14
    13f8:	9d 89       	ldd	r25, Y+21	; 0x15
    13fa:	0e 94 a5 09 	call	0x134a	; 0x134a <_ZN6MB120210getReadingEv>
    13fe:	7c 01       	movw	r14, r24
    1400:	8a 8b       	std	Y+18, r24	; 0x12
    1402:	9b 8b       	std	Y+19, r25	; 0x13
				*p_serial << PMS ("Sonar: ") << rangeReading_ << endl;
    1404:	6a e0       	ldi	r22, 0x0A	; 10
    1406:	8e 81       	ldd	r24, Y+6	; 0x06
    1408:	9f 81       	ldd	r25, Y+7	; 0x07
    140a:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    140e:	8c 01       	movw	r16, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    1410:	6a ea       	ldi	r22, 0xAA	; 170
    1412:	73 e0       	ldi	r23, 0x03	; 3
    1414:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    1418:	b7 01       	movw	r22, r14
    141a:	c8 01       	movw	r24, r16
    141c:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN8emstreamlsEj>
    1420:	66 e0       	ldi	r22, 0x06	; 6
    1422:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
				
				transition_to(0);
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	ce 01       	movw	r24, r28
    142a:	0e 94 f6 17 	call	0x2fec	; 0x2fec <_ZN8frt_task13transition_toEh>
				break;
			

		} // End switch state

		runs++;                             // Increment counter for debugging
    142e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1430:	9f 85       	ldd	r25, Y+15	; 0x0f
    1432:	a8 89       	ldd	r26, Y+16	; 0x10
    1434:	b9 89       	ldd	r27, Y+17	; 0x11
    1436:	01 96       	adiw	r24, 0x01	; 1
    1438:	a1 1d       	adc	r26, r1
    143a:	b1 1d       	adc	r27, r1
    143c:	8e 87       	std	Y+14, r24	; 0x0e
    143e:	9f 87       	std	Y+15, r25	; 0x0f
    1440:	a8 8b       	std	Y+16, r26	; 0x10
    1442:	b9 8b       	std	Y+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (500));
    1444:	64 ef       	ldi	r22, 0xF4	; 244
    1446:	71 e0       	ldi	r23, 0x01	; 1
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <vTaskDelay>
	uint8_t addrs[10];
	

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
    1450:	c3 cf       	rjmp	.-122    	; 0x13d8 <_ZN10task_sonar3runEv+0x2>

00001452 <_ZN10task_sonarC1EPKchjP8emstreamP6MB1202>:
 *                      (default: configMINIMAL_STACK_SIZE)
 *  @param p_ser_dev Pointer to a serial device (port, radio, SD card, etc.) which can
 *                   be used by this task to communicate (default: NULL)
 */

task_sonar::task_sonar (const char* a_name, 
    1452:	cf 92       	push	r12
    1454:	df 92       	push	r13
    1456:	ef 92       	push	r14
    1458:	ff 92       	push	r15
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	ec 01       	movw	r28, r24
    1464:	6b 01       	movw	r12, r22
					  size_t a_stack_size,
					  emstream* p_ser_dev,
					  MB1202* mb1202
					 )
	: frt_task (a_name, a_priority, a_stack_size, p_ser_dev), 
		mb1202_(mb1202)
    1466:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <_ZN8frt_taskC1EPKchjP8emstream>
    146a:	87 e0       	ldi	r24, 0x07	; 7
    146c:	91 e2       	ldi	r25, 0x21	; 33
    146e:	88 83       	st	Y, r24
    1470:	99 83       	std	Y+1, r25	; 0x01
    1472:	ec 8a       	std	Y+20, r14	; 0x14
    1474:	fd 8a       	std	Y+21, r15	; 0x15
{
	task_name = a_name;
    1476:	ce 8a       	std	Y+22, r12	; 0x16
    1478:	df 8a       	std	Y+23, r13	; 0x17
}
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	1f 91       	pop	r17
    1480:	0f 91       	pop	r16
    1482:	ff 90       	pop	r15
    1484:	ef 90       	pop	r14
    1486:	df 90       	pop	r13
    1488:	cf 90       	pop	r12
    148a:	08 95       	ret

0000148c <_ZN9task_userC1EPKchjP8emstream>:
 *                      (default: configMINIMAL_STACK_SIZE)
 *  @param p_ser_dev Pointer to a serial device (port, radio, SD card, etc.) which can
 *                   be used by this task to communicate (default: NULL)
 */

task_user::task_user (const char* a_name, 
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	ec 01       	movw	r28, r24
					  unsigned portBASE_TYPE a_priority, 
					  size_t a_stack_size,
					  emstream* p_ser_dev
					 )
	: frt_task (a_name, a_priority, a_stack_size, p_ser_dev)
    1496:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <_ZN8frt_taskC1EPKchjP8emstream>
    149a:	8f e0       	ldi	r24, 0x0F	; 15
    149c:	91 e2       	ldi	r25, 0x21	; 33
    149e:	88 83       	st	Y, r24
    14a0:	99 83       	std	Y+1, r25	; 0x01
{
	// Nothing is done in the body of this constructor. All the work is done in the
	// call to the frt_task constructor on the line just above this one
}
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	1f 91       	pop	r17
    14a8:	0f 91       	pop	r16
    14aa:	08 95       	ret

000014ac <_ZN9task_user18print_help_messageEv>:
//-------------------------------------------------------------------------------------
/** This method prints a simple help message.
 */

void task_user::print_help_message (void)
{
    14ac:	0f 93       	push	r16
    14ae:	1f 93       	push	r17
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29
    14b4:	ec 01       	movw	r28, r24
	*p_serial << ATERM_BKG_CYAN << ATERM_TXT_BLACK << clrscr;
    14b6:	6a e0       	ldi	r22, 0x0A	; 10
    14b8:	8e 81       	ldd	r24, Y+6	; 0x06
    14ba:	9f 81       	ldd	r25, Y+7	; 0x07
    14bc:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    14c0:	8c 01       	movw	r16, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    14c2:	65 e0       	ldi	r22, 0x05	; 5
    14c4:	75 e0       	ldi	r23, 0x05	; 5
    14c6:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    14ca:	6a e0       	ldi	r22, 0x0A	; 10
    14cc:	c8 01       	movw	r24, r16
    14ce:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    14d2:	8c 01       	movw	r16, r24
    14d4:	6f ef       	ldi	r22, 0xFF	; 255
    14d6:	74 e0       	ldi	r23, 0x04	; 4
    14d8:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    14dc:	67 e0       	ldi	r22, 0x07	; 7
    14de:	c8 01       	movw	r24, r16
    14e0:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PROGRAM_VERSION << PMS (" help") << endl;
    14e4:	6a e0       	ldi	r22, 0x0A	; 10
    14e6:	8e 81       	ldd	r24, Y+6	; 0x06
    14e8:	9f 81       	ldd	r25, Y+7	; 0x07
    14ea:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    14ee:	8c 01       	movw	r16, r24
    14f0:	60 ee       	ldi	r22, 0xE0	; 224
    14f2:	74 e0       	ldi	r23, 0x04	; 4
    14f4:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    14f8:	6a e0       	ldi	r22, 0x0A	; 10
    14fa:	c8 01       	movw	r24, r16
    14fc:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    1500:	8c 01       	movw	r16, r24
    1502:	6a ed       	ldi	r22, 0xDA	; 218
    1504:	74 e0       	ldi	r23, 0x04	; 4
    1506:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    150a:	66 e0       	ldi	r22, 0x06	; 6
    150c:	c8 01       	movw	r24, r16
    150e:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("  Ctl-C: Reset the AVR") << endl;
    1512:	6a e0       	ldi	r22, 0x0A	; 10
    1514:	8e 81       	ldd	r24, Y+6	; 0x06
    1516:	9f 81       	ldd	r25, Y+7	; 0x07
    1518:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    151c:	8c 01       	movw	r16, r24
    151e:	63 ec       	ldi	r22, 0xC3	; 195
    1520:	74 e0       	ldi	r23, 0x04	; 4
    1522:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    1526:	66 e0       	ldi	r22, 0x06	; 6
    1528:	c8 01       	movw	r24, r16
    152a:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("  Ctl-A: Enter command mode") << endl;
    152e:	6a e0       	ldi	r22, 0x0A	; 10
    1530:	8e 81       	ldd	r24, Y+6	; 0x06
    1532:	9f 81       	ldd	r25, Y+7	; 0x07
    1534:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    1538:	8c 01       	movw	r16, r24
    153a:	67 ea       	ldi	r22, 0xA7	; 167
    153c:	74 e0       	ldi	r23, 0x04	; 4
    153e:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    1542:	66 e0       	ldi	r22, 0x06	; 6
    1544:	c8 01       	movw	r24, r16
    1546:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("  In command mode only:") << endl;
    154a:	6a e0       	ldi	r22, 0x0A	; 10
    154c:	8e 81       	ldd	r24, Y+6	; 0x06
    154e:	9f 81       	ldd	r25, Y+7	; 0x07
    1550:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    1554:	8c 01       	movw	r16, r24
    1556:	6f e8       	ldi	r22, 0x8F	; 143
    1558:	74 e0       	ldi	r23, 0x04	; 4
    155a:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    155e:	66 e0       	ldi	r22, 0x06	; 6
    1560:	c8 01       	movw	r24, r16
    1562:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    n:   Show the time right now") << endl;
    1566:	6a e0       	ldi	r22, 0x0A	; 10
    1568:	8e 81       	ldd	r24, Y+6	; 0x06
    156a:	9f 81       	ldd	r25, Y+7	; 0x07
    156c:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    1570:	8c 01       	movw	r16, r24
    1572:	6e e6       	ldi	r22, 0x6E	; 110
    1574:	74 e0       	ldi	r23, 0x04	; 4
    1576:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    157a:	66 e0       	ldi	r22, 0x06	; 6
    157c:	c8 01       	movw	r24, r16
    157e:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    v:   Version and setup information") << endl;
    1582:	6a e0       	ldi	r22, 0x0A	; 10
    1584:	8e 81       	ldd	r24, Y+6	; 0x06
    1586:	9f 81       	ldd	r25, Y+7	; 0x07
    1588:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    158c:	8c 01       	movw	r16, r24
    158e:	67 e4       	ldi	r22, 0x47	; 71
    1590:	74 e0       	ldi	r23, 0x04	; 4
    1592:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    1596:	66 e0       	ldi	r22, 0x06	; 6
    1598:	c8 01       	movw	r24, r16
    159a:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    s:   Stack dump for tasks") << endl;
    159e:	6a e0       	ldi	r22, 0x0A	; 10
    15a0:	8e 81       	ldd	r24, Y+6	; 0x06
    15a2:	9f 81       	ldd	r25, Y+7	; 0x07
    15a4:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    15a8:	8c 01       	movw	r16, r24
    15aa:	69 e2       	ldi	r22, 0x29	; 41
    15ac:	74 e0       	ldi	r23, 0x04	; 4
    15ae:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    15b2:	66 e0       	ldi	r22, 0x06	; 6
    15b4:	c8 01       	movw	r24, r16
    15b6:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    e:   Exit command mode") << endl;
    15ba:	6a e0       	ldi	r22, 0x0A	; 10
    15bc:	8e 81       	ldd	r24, Y+6	; 0x06
    15be:	9f 81       	ldd	r25, Y+7	; 0x07
    15c0:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    15c4:	8c 01       	movw	r16, r24
    15c6:	6e e0       	ldi	r22, 0x0E	; 14
    15c8:	74 e0       	ldi	r23, 0x04	; 4
    15ca:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    15ce:	66 e0       	ldi	r22, 0x06	; 6
    15d0:	c8 01       	movw	r24, r16
    15d2:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    h:   HALP!") << endl;
    15d6:	6a e0       	ldi	r22, 0x0A	; 10
    15d8:	8e 81       	ldd	r24, Y+6	; 0x06
    15da:	9f 81       	ldd	r25, Y+7	; 0x07
    15dc:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    15e0:	ec 01       	movw	r28, r24
    15e2:	6f ef       	ldi	r22, 0xFF	; 255
    15e4:	73 e0       	ldi	r23, 0x03	; 3
    15e6:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    15ea:	66 e0       	ldi	r22, 0x06	; 6
    15ec:	ce 01       	movw	r24, r28
    15ee:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
}
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	08 95       	ret

000015fc <_ZN9task_user11show_statusEv>:
 *    \li Processor cycles used by each task
 *    \li Amount of heap space free and setting of RTOS tick timer
 */

void task_user::show_status (void)
{
    15fc:	af 92       	push	r10
    15fe:	bf 92       	push	r11
    1600:	cf 92       	push	r12
    1602:	df 92       	push	r13
    1604:	ef 92       	push	r14
    1606:	ff 92       	push	r15
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	00 d0       	rcall	.+0      	; 0x1612 <_ZN9task_user11show_statusEv+0x16>
    1612:	00 d0       	rcall	.+0      	; 0x1614 <_ZN9task_user11show_statusEv+0x18>
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	8c 01       	movw	r16, r24
	public:
		/** This constructor creates a time stamp with its time set to zero.
		 */
		time_stamp (void)
		{
			tick_count = 0;
    161a:	19 82       	std	Y+1, r1	; 0x01
    161c:	1a 82       	std	Y+2, r1	; 0x02
    161e:	1b 82       	std	Y+3, r1	; 0x03
    1620:	1c 82       	std	Y+4, r1	; 0x04
			hardware_count = 0;
    1622:	1d 82       	std	Y+5, r1	; 0x05
    1624:	1e 82       	std	Y+6, r1	; 0x06
		 *  means that the number returned is how many bytes are currently unused. 
		 *  @return The approximate number of bytes left for use in the heap
		 */
		size_t heap_left (void)
		{
			return (xPortGetFreeHeapSize ());
    1626:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <xPortGetFreeHeapSize>
    162a:	6c 01       	movw	r12, r24
	time_stamp the_time;					// Holds current time for printing

	// Show program vesion, time, and free heap space
	*p_serial << endl << PROGRAM_VERSION << PMS (__DATE__) << endl 
			  << PMS ("Time: ") << the_time.set_to_now ()
    162c:	ce 01       	movw	r24, r28
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	0e 94 ab 1b 	call	0x3756	; 0x3756 <_ZN10time_stamp10set_to_nowEv>
    1634:	5c 01       	movw	r10, r24
void task_user::show_status (void)
{
	time_stamp the_time;					// Holds current time for printing

	// Show program vesion, time, and free heap space
	*p_serial << endl << PROGRAM_VERSION << PMS (__DATE__) << endl 
    1636:	66 e0       	ldi	r22, 0x06	; 6
    1638:	f8 01       	movw	r30, r16
    163a:	86 81       	ldd	r24, Z+6	; 0x06
    163c:	97 81       	ldd	r25, Z+7	; 0x07
    163e:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    1642:	6a e0       	ldi	r22, 0x0A	; 10
    1644:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    1648:	7c 01       	movw	r14, r24
    164a:	60 ee       	ldi	r22, 0xE0	; 224
    164c:	73 e0       	ldi	r23, 0x03	; 3
    164e:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    1652:	6a e0       	ldi	r22, 0x0A	; 10
    1654:	c7 01       	movw	r24, r14
    1656:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    165a:	7c 01       	movw	r14, r24
    165c:	64 ed       	ldi	r22, 0xD4	; 212
    165e:	73 e0       	ldi	r23, 0x03	; 3
    1660:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    1664:	66 e0       	ldi	r22, 0x06	; 6
    1666:	c7 01       	movw	r24, r14
    1668:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
			  << PMS ("Time: ") << the_time.set_to_now ()
    166c:	6a e0       	ldi	r22, 0x0A	; 10
    166e:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    1672:	7c 01       	movw	r14, r24
    1674:	6d ec       	ldi	r22, 0xCD	; 205
    1676:	73 e0       	ldi	r23, 0x03	; 3
    1678:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    167c:	b5 01       	movw	r22, r10
    167e:	c7 01       	movw	r24, r14
    1680:	0e 94 4f 1b 	call	0x369e	; 0x369e <_ZlsR8emstreamR10time_stamp>
			  << PMS (", Heap free: ") << heap_left() << PMS ("/") 
    1684:	6a e0       	ldi	r22, 0x0A	; 10
    1686:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    168a:	7c 01       	movw	r14, r24
    168c:	6f eb       	ldi	r22, 0xBF	; 191
    168e:	73 e0       	ldi	r23, 0x03	; 3
    1690:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    1694:	b6 01       	movw	r22, r12
    1696:	c7 01       	movw	r24, r14
    1698:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN8emstreamlsEj>
    169c:	6a e0       	ldi	r22, 0x0A	; 10
    169e:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    16a2:	7c 01       	movw	r14, r24
    16a4:	6d eb       	ldi	r22, 0xBD	; 189
    16a6:	73 e0       	ldi	r23, 0x03	; 3
    16a8:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
			  << configTOTAL_HEAP_SIZE;
    16ac:	4f ef       	ldi	r20, 0xFF	; 255
    16ae:	5f e0       	ldi	r21, 0x0F	; 15
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	c7 01       	movw	r24, r14
    16b6:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <_ZN8emstreamlsEm>

	// Show how the timer/counter is set up to cause RTOS timer ticks
	*p_serial << PMS (", TCC0CCA=") << TCC0.CCA << endl << endl;
    16ba:	c0 90 28 08 	lds	r12, 0x0828	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    16be:	d0 90 29 08 	lds	r13, 0x0829	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    16c2:	6a e0       	ldi	r22, 0x0A	; 10
    16c4:	f8 01       	movw	r30, r16
    16c6:	86 81       	ldd	r24, Z+6	; 0x06
    16c8:	97 81       	ldd	r25, Z+7	; 0x07
    16ca:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    16ce:	7c 01       	movw	r14, r24
    16d0:	62 eb       	ldi	r22, 0xB2	; 178
    16d2:	73 e0       	ldi	r23, 0x03	; 3
    16d4:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    16d8:	b6 01       	movw	r22, r12
    16da:	c7 01       	movw	r24, r14
    16dc:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN8emstreamlsEj>
    16e0:	66 e0       	ldi	r22, 0x06	; 6
    16e2:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    16e6:	66 e0       	ldi	r22, 0x06	; 6
    16e8:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>

	// Have the tasks print their status
	print_task_list (p_serial);
    16ec:	f8 01       	movw	r30, r16
    16ee:	86 81       	ldd	r24, Z+6	; 0x06
    16f0:	97 81       	ldd	r25, Z+7	; 0x07
    16f2:	0e 94 08 1a 	call	0x3410	; 0x3410 <_Z15print_task_listP8emstream>
}
    16f6:	26 96       	adiw	r28, 0x06	; 6
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	1f 91       	pop	r17
    1702:	0f 91       	pop	r16
    1704:	ff 90       	pop	r15
    1706:	ef 90       	pop	r14
    1708:	df 90       	pop	r13
    170a:	cf 90       	pop	r12
    170c:	bf 90       	pop	r11
    170e:	af 90       	pop	r10
    1710:	08 95       	ret

00001712 <_ZN9task_user3runEv>:
 *  is just following the modern government model of "This is the land of the free...
 *  free to do exactly what you're told." 
 */

void task_user::run (void)
{
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	00 d0       	rcall	.+0      	; 0x1718 <_ZN9task_user3runEv+0x6>
    1718:	00 d0       	rcall	.+0      	; 0x171a <_ZN9task_user3runEv+0x8>
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	8c 01       	movw	r16, r24
	public:
		/** This constructor creates a time stamp with its time set to zero.
		 */
		time_stamp (void)
		{
			tick_count = 0;
    1720:	19 82       	std	Y+1, r1	; 0x01
    1722:	1a 82       	std	Y+2, r1	; 0x02
    1724:	1b 82       	std	Y+3, r1	; 0x03
    1726:	1c 82       	std	Y+4, r1	; 0x04
			hardware_count = 0;
    1728:	1d 82       	std	Y+5, r1	; 0x05
    172a:	1e 82       	std	Y+6, r1	; 0x06
	char char_in;                           // Character read from serial device
	time_stamp a_time;                      // Holds the time so it can be displayed

	// Tell the user how to get into command mode (state 1), where the user interface
	// task does interesting things such as diagnostic printouts
	*p_serial << PMS ("Press Ctrl-A for command mode") << endl;
    172c:	6a e0       	ldi	r22, 0x0A	; 10
    172e:	dc 01       	movw	r26, r24
    1730:	16 96       	adiw	r26, 0x06	; 6
    1732:	8d 91       	ld	r24, X+
    1734:	9c 91       	ld	r25, X
    1736:	17 97       	sbiw	r26, 0x07	; 7
    1738:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    173c:	7c 01       	movw	r14, r24
    173e:	6e e4       	ldi	r22, 0x4E	; 78
    1740:	75 e0       	ldi	r23, 0x05	; 5
    1742:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    1746:	66 e0       	ldi	r22, 0x06	; 6
    1748:	c7 01       	movw	r24, r14
    174a:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
	{
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
    174e:	f8 01       	movw	r30, r16
    1750:	84 85       	ldd	r24, Z+12	; 0x0c
    1752:	88 23       	and	r24, r24
    1754:	21 f0       	breq	.+8      	; 0x175e <_ZN9task_user3runEv+0x4c>
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	09 f4       	brne	.+2      	; 0x175c <_ZN9task_user3runEv+0x4a>
    175a:	5d c0       	rjmp	.+186    	; 0x1816 <_ZN9task_user3runEv+0x104>
    175c:	d8 c0       	rjmp	.+432    	; 0x190e <_ZN9task_user3runEv+0x1fc>
		{
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 0, we transparently relay characters from the radio to the USB 
			// serial port and vice versa but watch for certain control characters
			case (0):
				if (p_serial->check_for_char ())        // If the user typed a
    175e:	86 81       	ldd	r24, Z+6	; 0x06
    1760:	97 81       	ldd	r25, Z+7	; 0x07
    1762:	dc 01       	movw	r26, r24
    1764:	ed 91       	ld	r30, X+
    1766:	fc 91       	ld	r31, X
    1768:	04 80       	ldd	r0, Z+4	; 0x04
    176a:	f5 81       	ldd	r31, Z+5	; 0x05
    176c:	e0 2d       	mov	r30, r0
    176e:	19 95       	eicall
    1770:	88 23       	and	r24, r24
    1772:	a9 f1       	breq	.+106    	; 0x17de <_ZN9task_user3runEv+0xcc>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    1774:	f8 01       	movw	r30, r16
    1776:	86 81       	ldd	r24, Z+6	; 0x06
    1778:	97 81       	ldd	r25, Z+7	; 0x07
    177a:	dc 01       	movw	r26, r24
    177c:	ed 91       	ld	r30, X+
    177e:	fc 91       	ld	r31, X
    1780:	06 80       	ldd	r0, Z+6	; 0x06
    1782:	f7 81       	ldd	r31, Z+7	; 0x07
    1784:	e0 2d       	mov	r30, r0
    1786:	19 95       	eicall

					// In this switch statement, we respond to different characters
					switch (char_in)
    1788:	99 27       	eor	r25, r25
    178a:	81 30       	cpi	r24, 0x01	; 1
    178c:	91 05       	cpc	r25, r1
    178e:	f9 f0       	breq	.+62     	; 0x17ce <_ZN9task_user3runEv+0xbc>
    1790:	03 97       	sbiw	r24, 0x03	; 3
    1792:	09 f0       	breq	.+2      	; 0x1796 <_ZN9task_user3runEv+0x84>
    1794:	d8 c0       	rjmp	.+432    	; 0x1946 <_ZN9task_user3runEv+0x234>
					{
						// Control-C means reset the AVR computer
						case (3):
							*p_serial << PMS ("Resetting AVR") << endl;
    1796:	6a e0       	ldi	r22, 0x0A	; 10
    1798:	f8 01       	movw	r30, r16
    179a:	86 81       	ldd	r24, Z+6	; 0x06
    179c:	97 81       	ldd	r25, Z+7	; 0x07
    179e:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    17a2:	8c 01       	movw	r16, r24
    17a4:	60 e4       	ldi	r22, 0x40	; 64
    17a6:	75 e0       	ldi	r23, 0x05	; 5
    17a8:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    17ac:	66 e0       	ldi	r22, 0x06	; 6
    17ae:	c8 01       	movw	r24, r16
    17b0:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
							wdt_enable (WDTO_120MS);
    17b4:	93 e0       	ldi	r25, 0x03	; 3
    17b6:	88 ed       	ldi	r24, 0xD8	; 216
    17b8:	08 b6       	in	r0, 0x38	; 56
    17ba:	18 be       	out	0x38, r1	; 56
    17bc:	84 bf       	out	0x34, r24	; 52
    17be:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    17c2:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    17c6:	81 fd       	sbrc	r24, 1
    17c8:	fc cf       	rjmp	.-8      	; 0x17c2 <_ZN9task_user3runEv+0xb0>
    17ca:	08 be       	out	0x38, r0	; 56
    17cc:	ff cf       	rjmp	.-2      	; 0x17cc <_ZN9task_user3runEv+0xba>
							for (;;);
							break;

						// Control-A puts this task in command mode
						case (1):
							print_help_message ();
    17ce:	c8 01       	movw	r24, r16
    17d0:	0e 94 56 0a 	call	0x14ac	; 0x14ac <_ZN9task_user18print_help_messageEv>
							transition_to (1);
    17d4:	61 e0       	ldi	r22, 0x01	; 1
    17d6:	c8 01       	movw	r24, r16
    17d8:	0e 94 f6 17 	call	0x2fec	; 0x2fec <_ZN8frt_task13transition_toEh>
							break;
    17dc:	b4 c0       	rjmp	.+360    	; 0x1946 <_ZN9task_user3runEv+0x234>
					};
				}

				// Check the print queue to see if another task has sent this task 
				// something to be printed
				else if (print_ser_queue.check_for_char ())
    17de:	82 e8       	ldi	r24, 0x82	; 130
    17e0:	92 e3       	ldi	r25, 0x32	; 50
    17e2:	0e 94 b7 1a 	call	0x356e	; 0x356e <_ZN14frt_text_queue14check_for_charEv>
    17e6:	88 23       	and	r24, r24
    17e8:	09 f4       	brne	.+2      	; 0x17ec <_ZN9task_user3runEv+0xda>
    17ea:	ad c0       	rjmp	.+346    	; 0x1946 <_ZN9task_user3runEv+0x234>
				{
					p_serial->putchar (print_ser_queue.getchar ());
    17ec:	d8 01       	movw	r26, r16
    17ee:	16 96       	adiw	r26, 0x06	; 6
    17f0:	ed 91       	ld	r30, X+
    17f2:	fc 91       	ld	r31, X
    17f4:	17 97       	sbiw	r26, 0x07	; 7
    17f6:	01 90       	ld	r0, Z+
    17f8:	f0 81       	ld	r31, Z
    17fa:	e0 2d       	mov	r30, r0
    17fc:	e2 80       	ldd	r14, Z+2	; 0x02
    17fe:	f3 80       	ldd	r15, Z+3	; 0x03
    1800:	82 e8       	ldi	r24, 0x82	; 130
    1802:	92 e3       	ldi	r25, 0x32	; 50
    1804:	0e 94 99 1a 	call	0x3532	; 0x3532 <_ZN14frt_text_queue7getcharEv>
    1808:	68 2f       	mov	r22, r24
    180a:	f8 01       	movw	r30, r16
    180c:	86 81       	ldd	r24, Z+6	; 0x06
    180e:	97 81       	ldd	r25, Z+7	; 0x07
    1810:	f7 01       	movw	r30, r14
    1812:	19 95       	eicall
    1814:	98 c0       	rjmp	.+304    	; 0x1946 <_ZN9task_user3runEv+0x234>

			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 1, we're in command mode, so when the user types characters, the
			// characters are interpreted as commands to do something
			case (1):
				if (p_serial->check_for_char ())				// If the user typed a
    1816:	86 81       	ldd	r24, Z+6	; 0x06
    1818:	97 81       	ldd	r25, Z+7	; 0x07
    181a:	dc 01       	movw	r26, r24
    181c:	ed 91       	ld	r30, X+
    181e:	fc 91       	ld	r31, X
    1820:	04 80       	ldd	r0, Z+4	; 0x04
    1822:	f5 81       	ldd	r31, Z+5	; 0x05
    1824:	e0 2d       	mov	r30, r0
    1826:	19 95       	eicall
    1828:	88 23       	and	r24, r24
    182a:	09 f4       	brne	.+2      	; 0x182e <_ZN9task_user3runEv+0x11c>
    182c:	8c c0       	rjmp	.+280    	; 0x1946 <_ZN9task_user3runEv+0x234>
				{											// character, read
					char_in = p_serial->getchar ();			// the character
    182e:	f8 01       	movw	r30, r16
    1830:	86 81       	ldd	r24, Z+6	; 0x06
    1832:	97 81       	ldd	r25, Z+7	; 0x07
    1834:	dc 01       	movw	r26, r24
    1836:	ed 91       	ld	r30, X+
    1838:	fc 91       	ld	r31, X
    183a:	06 80       	ldd	r0, Z+6	; 0x06
    183c:	f7 81       	ldd	r31, Z+7	; 0x07
    183e:	e0 2d       	mov	r30, r0
    1840:	19 95       	eicall

					// In this switch statement, we respond to different characters as
					// commands typed in by the user
					switch (char_in)
    1842:	9c 01       	movw	r18, r24
    1844:	33 27       	eor	r19, r19
    1846:	28 36       	cpi	r18, 0x68	; 104
    1848:	31 05       	cpc	r19, r1
    184a:	59 f1       	breq	.+86     	; 0x18a2 <_ZN9task_user3runEv+0x190>
    184c:	3c f4       	brge	.+14     	; 0x185c <_ZN9task_user3runEv+0x14a>
    184e:	2b 31       	cpi	r18, 0x1B	; 27
    1850:	31 05       	cpc	r19, r1
    1852:	59 f1       	breq	.+86     	; 0x18aa <_ZN9task_user3runEv+0x198>
    1854:	25 36       	cpi	r18, 0x65	; 101
    1856:	31 05       	cpc	r19, r1
    1858:	41 f1       	breq	.+80     	; 0x18aa <_ZN9task_user3runEv+0x198>
    185a:	3b c0       	rjmp	.+118    	; 0x18d2 <_ZN9task_user3runEv+0x1c0>
    185c:	23 37       	cpi	r18, 0x73	; 115
    185e:	31 05       	cpc	r19, r1
    1860:	c1 f0       	breq	.+48     	; 0x1892 <_ZN9task_user3runEv+0x180>
    1862:	26 37       	cpi	r18, 0x76	; 118
    1864:	31 05       	cpc	r19, r1
    1866:	89 f0       	breq	.+34     	; 0x188a <_ZN9task_user3runEv+0x178>
    1868:	2e 36       	cpi	r18, 0x6E	; 110
    186a:	31 05       	cpc	r19, r1
    186c:	91 f5       	brne	.+100    	; 0x18d2 <_ZN9task_user3runEv+0x1c0>
					{
						// The 'n' command asks what time it is right now
						case ('n'):
							*p_serial << (a_time.set_to_now ()) << endl;
    186e:	ce 01       	movw	r24, r28
    1870:	01 96       	adiw	r24, 0x01	; 1
    1872:	0e 94 ab 1b 	call	0x3756	; 0x3756 <_ZN10time_stamp10set_to_nowEv>
    1876:	bc 01       	movw	r22, r24
    1878:	f8 01       	movw	r30, r16
    187a:	86 81       	ldd	r24, Z+6	; 0x06
    187c:	97 81       	ldd	r25, Z+7	; 0x07
    187e:	0e 94 4f 1b 	call	0x369e	; 0x369e <_ZlsR8emstreamR10time_stamp>
    1882:	66 e0       	ldi	r22, 0x06	; 6
    1884:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
							break;
    1888:	5e c0       	rjmp	.+188    	; 0x1946 <_ZN9task_user3runEv+0x234>

						// The 'v' command asks for version and status information
						case ('v'):
							show_status ();
    188a:	c8 01       	movw	r24, r16
    188c:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN9task_user11show_statusEv>
							break;
    1890:	5a c0       	rjmp	.+180    	; 0x1946 <_ZN9task_user3runEv+0x234>

						// The 's' command has all the tasks dump their stacks
						case ('s'):
							print_task_stacks (p_serial);
    1892:	d8 01       	movw	r26, r16
    1894:	16 96       	adiw	r26, 0x06	; 6
    1896:	8d 91       	ld	r24, X+
    1898:	9c 91       	ld	r25, X
    189a:	17 97       	sbiw	r26, 0x07	; 7
    189c:	0e 94 0f 19 	call	0x321e	; 0x321e <_Z17print_task_stacksP8emstream>
							break;
    18a0:	52 c0       	rjmp	.+164    	; 0x1946 <_ZN9task_user3runEv+0x234>

						// The 'h' command is a plea for help
						case ('h'):
							print_help_message ();
    18a2:	c8 01       	movw	r24, r16
    18a4:	0e 94 56 0a 	call	0x14ac	; 0x14ac <_ZN9task_user18print_help_messageEv>
							break;
    18a8:	4e c0       	rjmp	.+156    	; 0x1946 <_ZN9task_user3runEv+0x234>

						// The escape key or 'e' key go back to non-command mode
						case (27):
						case ('e'):
							*p_serial << PMS ("Exit command mode") << endl;
    18aa:	6a e0       	ldi	r22, 0x0A	; 10
    18ac:	f8 01       	movw	r30, r16
    18ae:	86 81       	ldd	r24, Z+6	; 0x06
    18b0:	97 81       	ldd	r25, Z+7	; 0x07
    18b2:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    18b6:	7c 01       	movw	r14, r24
    18b8:	6e e2       	ldi	r22, 0x2E	; 46
    18ba:	75 e0       	ldi	r23, 0x05	; 5
    18bc:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    18c0:	66 e0       	ldi	r22, 0x06	; 6
    18c2:	c7 01       	movw	r24, r14
    18c4:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
							transition_to (0);
    18c8:	60 e0       	ldi	r22, 0x00	; 0
    18ca:	c8 01       	movw	r24, r16
    18cc:	0e 94 f6 17 	call	0x2fec	; 0x2fec <_ZN8frt_task13transition_toEh>
							break;
    18d0:	3a c0       	rjmp	.+116    	; 0x1946 <_ZN9task_user3runEv+0x234>

						// If the character isn't recognized, ask: What's That Function?
						default:
							p_serial->putchar (char_in);
    18d2:	f8 01       	movw	r30, r16
    18d4:	a6 81       	ldd	r26, Z+6	; 0x06
    18d6:	b7 81       	ldd	r27, Z+7	; 0x07
    18d8:	ed 91       	ld	r30, X+
    18da:	fc 91       	ld	r31, X
    18dc:	11 97       	sbiw	r26, 0x01	; 1
    18de:	02 80       	ldd	r0, Z+2	; 0x02
    18e0:	f3 81       	ldd	r31, Z+3	; 0x03
    18e2:	e0 2d       	mov	r30, r0
    18e4:	68 2f       	mov	r22, r24
    18e6:	cd 01       	movw	r24, r26
    18e8:	19 95       	eicall
							*p_serial << PMS (":WTF?") << endl;
    18ea:	6a e0       	ldi	r22, 0x0A	; 10
    18ec:	d8 01       	movw	r26, r16
    18ee:	16 96       	adiw	r26, 0x06	; 6
    18f0:	8d 91       	ld	r24, X+
    18f2:	9c 91       	ld	r25, X
    18f4:	17 97       	sbiw	r26, 0x07	; 7
    18f6:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    18fa:	7c 01       	movw	r14, r24
    18fc:	68 e2       	ldi	r22, 0x28	; 40
    18fe:	75 e0       	ldi	r23, 0x05	; 5
    1900:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    1904:	66 e0       	ldi	r22, 0x06	; 6
    1906:	c7 01       	movw	r24, r14
    1908:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
							break;
    190c:	1c c0       	rjmp	.+56     	; 0x1946 <_ZN9task_user3runEv+0x234>
				break; // End of state 1

			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// We should never get to the default state. If we do, complain and restart
			default:
				*p_serial << PMS ("Illegal state! Resetting AVR") << endl;
    190e:	6a e0       	ldi	r22, 0x0A	; 10
    1910:	f8 01       	movw	r30, r16
    1912:	86 81       	ldd	r24, Z+6	; 0x06
    1914:	97 81       	ldd	r25, Z+7	; 0x07
    1916:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    191a:	8c 01       	movw	r16, r24
    191c:	6b e0       	ldi	r22, 0x0B	; 11
    191e:	75 e0       	ldi	r23, 0x05	; 5
    1920:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    1924:	66 e0       	ldi	r22, 0x06	; 6
    1926:	c8 01       	movw	r24, r16
    1928:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
				wdt_enable (WDTO_120MS);
    192c:	93 e0       	ldi	r25, 0x03	; 3
    192e:	88 ed       	ldi	r24, 0xD8	; 216
    1930:	08 b6       	in	r0, 0x38	; 56
    1932:	18 be       	out	0x38, r1	; 56
    1934:	84 bf       	out	0x34, r24	; 52
    1936:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    193a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    193e:	81 fd       	sbrc	r24, 1
    1940:	fc cf       	rjmp	.-8      	; 0x193a <_ZN9task_user3runEv+0x228>
    1942:	08 be       	out	0x38, r0	; 56
    1944:	ff cf       	rjmp	.-2      	; 0x1944 <_ZN9task_user3runEv+0x232>
				for (;;);
				break;

		} // End switch state

		runs++;                             // Increment counter for debugging
    1946:	f8 01       	movw	r30, r16
    1948:	86 85       	ldd	r24, Z+14	; 0x0e
    194a:	97 85       	ldd	r25, Z+15	; 0x0f
    194c:	a0 89       	ldd	r26, Z+16	; 0x10
    194e:	b1 89       	ldd	r27, Z+17	; 0x11
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	a1 1d       	adc	r26, r1
    1954:	b1 1d       	adc	r27, r1
    1956:	86 87       	std	Z+14, r24	; 0x0e
    1958:	97 87       	std	Z+15, r25	; 0x0f
    195a:	a0 8b       	std	Z+16, r26	; 0x10
    195c:	b1 8b       	std	Z+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (1));
    195e:	61 e0       	ldi	r22, 0x01	; 1
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <vTaskDelay>
	// task does interesting things such as diagnostic printouts
	*p_serial << PMS ("Press Ctrl-A for command mode") << endl;

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
    196a:	f1 ce       	rjmp	.-542    	; 0x174e <_ZN9task_user3runEv+0x3c>

0000196c <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	ec 01       	movw	r28, r24
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    1976:	0e 94 26 14 	call	0x284c	; 0x284c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    197a:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <__data_end>
    197e:	81 11       	cpse	r24, r1
    1980:	1d c0       	rjmp	.+58     	; 0x19bc <pvPortMalloc+0x50>
		{
			prvHeapInit();
    1982:	ab ec       	ldi	r26, 0xCB	; 203
    1984:	b1 e2       	ldi	r27, 0x21	; 33
    1986:	ef ec       	ldi	r30, 0xCF	; 207
    1988:	f1 e2       	ldi	r31, 0x21	; 33
    198a:	ed 93       	st	X+, r30
    198c:	fc 93       	st	X, r31
    198e:	11 97       	sbiw	r26, 0x01	; 1
    1990:	12 96       	adiw	r26, 0x02	; 2
    1992:	1d 92       	st	X+, r1
    1994:	1c 92       	st	X, r1
    1996:	13 97       	sbiw	r26, 0x03	; 3
    1998:	a7 ec       	ldi	r26, 0xC7	; 199
    199a:	b1 e2       	ldi	r27, 0x21	; 33
    199c:	8f ef       	ldi	r24, 0xFF	; 255
    199e:	9f e0       	ldi	r25, 0x0F	; 15
    19a0:	12 96       	adiw	r26, 0x02	; 2
    19a2:	8d 93       	st	X+, r24
    19a4:	9c 93       	st	X, r25
    19a6:	13 97       	sbiw	r26, 0x03	; 3
    19a8:	1d 92       	st	X+, r1
    19aa:	1c 92       	st	X, r1
    19ac:	11 97       	sbiw	r26, 0x01	; 1
    19ae:	82 83       	std	Z+2, r24	; 0x02
    19b0:	93 83       	std	Z+3, r25	; 0x03
    19b2:	a0 83       	st	Z, r26
    19b4:	b1 83       	std	Z+1, r27	; 0x01
			xHeapHasBeenInitialised = pdTRUE;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <__data_end>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    19bc:	20 97       	sbiw	r28, 0x00	; 0
    19be:	09 f4       	brne	.+2      	; 0x19c2 <pvPortMalloc+0x56>
    19c0:	5f c0       	rjmp	.+190    	; 0x1a80 <pvPortMalloc+0x114>
		{
			xWantedSize += heapSTRUCT_SIZE;
    19c2:	9e 01       	movw	r18, r28
    19c4:	2b 5f       	subi	r18, 0xFB	; 251
    19c6:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    19c8:	24 96       	adiw	r28, 0x04	; 4
    19ca:	ce 3f       	cpi	r28, 0xFE	; 254
    19cc:	df 40       	sbci	r29, 0x0F	; 15
    19ce:	08 f0       	brcs	.+2      	; 0x19d2 <pvPortMalloc+0x66>
    19d0:	5a c0       	rjmp	.+180    	; 0x1a86 <pvPortMalloc+0x11a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    19d2:	e0 91 cb 21 	lds	r30, 0x21CB	; 0x8021cb <xStart>
    19d6:	f0 91 cc 21 	lds	r31, 0x21CC	; 0x8021cc <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    19da:	ab ec       	ldi	r26, 0xCB	; 203
    19dc:	b1 e2       	ldi	r27, 0x21	; 33
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <pvPortMalloc+0x78>
    19e0:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
    19e2:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    19e4:	82 81       	ldd	r24, Z+2	; 0x02
    19e6:	93 81       	ldd	r25, Z+3	; 0x03
    19e8:	82 17       	cp	r24, r18
    19ea:	93 07       	cpc	r25, r19
    19ec:	20 f4       	brcc	.+8      	; 0x19f6 <pvPortMalloc+0x8a>
    19ee:	80 81       	ld	r24, Z
    19f0:	91 81       	ldd	r25, Z+1	; 0x01
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	a9 f7       	brne	.-22     	; 0x19e0 <pvPortMalloc+0x74>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    19f6:	c1 e2       	ldi	r28, 0x21	; 33
    19f8:	e7 3c       	cpi	r30, 0xC7	; 199
    19fa:	fc 07       	cpc	r31, r28
    19fc:	09 f4       	brne	.+2      	; 0x1a00 <pvPortMalloc+0x94>
    19fe:	46 c0       	rjmp	.+140    	; 0x1a8c <pvPortMalloc+0x120>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    1a00:	cd 91       	ld	r28, X+
    1a02:	dc 91       	ld	r29, X
    1a04:	11 97       	sbiw	r26, 0x01	; 1
    1a06:	8e 01       	movw	r16, r28
    1a08:	0b 5f       	subi	r16, 0xFB	; 251
    1a0a:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1a0c:	80 81       	ld	r24, Z
    1a0e:	91 81       	ldd	r25, Z+1	; 0x01
    1a10:	8d 93       	st	X+, r24
    1a12:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1a14:	82 81       	ldd	r24, Z+2	; 0x02
    1a16:	93 81       	ldd	r25, Z+3	; 0x03
    1a18:	82 1b       	sub	r24, r18
    1a1a:	93 0b       	sbc	r25, r19
    1a1c:	8b 30       	cpi	r24, 0x0B	; 11
    1a1e:	91 05       	cpc	r25, r1
    1a20:	10 f1       	brcs	.+68     	; 0x1a66 <pvPortMalloc+0xfa>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    1a22:	bf 01       	movw	r22, r30
    1a24:	62 0f       	add	r22, r18
    1a26:	73 1f       	adc	r23, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1a28:	db 01       	movw	r26, r22
    1a2a:	12 96       	adiw	r26, 0x02	; 2
    1a2c:	8d 93       	st	X+, r24
    1a2e:	9c 93       	st	X, r25
    1a30:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
    1a32:	22 83       	std	Z+2, r18	; 0x02
    1a34:	33 83       	std	Z+3, r19	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    1a36:	12 96       	adiw	r26, 0x02	; 2
    1a38:	4d 91       	ld	r20, X+
    1a3a:	5c 91       	ld	r21, X
    1a3c:	13 97       	sbiw	r26, 0x03	; 3
    1a3e:	8b ec       	ldi	r24, 0xCB	; 203
    1a40:	91 e2       	ldi	r25, 0x21	; 33
    1a42:	01 c0       	rjmp	.+2      	; 0x1a46 <pvPortMalloc+0xda>
    1a44:	cd 01       	movw	r24, r26
    1a46:	ec 01       	movw	r28, r24
    1a48:	a8 81       	ld	r26, Y
    1a4a:	b9 81       	ldd	r27, Y+1	; 0x01
    1a4c:	12 96       	adiw	r26, 0x02	; 2
    1a4e:	2d 91       	ld	r18, X+
    1a50:	3c 91       	ld	r19, X
    1a52:	13 97       	sbiw	r26, 0x03	; 3
    1a54:	24 17       	cp	r18, r20
    1a56:	35 07       	cpc	r19, r21
    1a58:	a8 f3       	brcs	.-22     	; 0x1a44 <pvPortMalloc+0xd8>
    1a5a:	eb 01       	movw	r28, r22
    1a5c:	a8 83       	st	Y, r26
    1a5e:	b9 83       	std	Y+1, r27	; 0x01
    1a60:	dc 01       	movw	r26, r24
    1a62:	6d 93       	st	X+, r22
    1a64:	7c 93       	st	X, r23
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    1a66:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    1a6a:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    1a6e:	22 81       	ldd	r18, Z+2	; 0x02
    1a70:	33 81       	ldd	r19, Z+3	; 0x03
    1a72:	82 1b       	sub	r24, r18
    1a74:	93 0b       	sbc	r25, r19
    1a76:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    1a7a:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    1a7e:	08 c0       	rjmp	.+16     	; 0x1a90 <pvPortMalloc+0x124>

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    1a80:	00 e0       	ldi	r16, 0x00	; 0
    1a82:	10 e0       	ldi	r17, 0x00	; 0
    1a84:	05 c0       	rjmp	.+10     	; 0x1a90 <pvPortMalloc+0x124>
    1a86:	00 e0       	ldi	r16, 0x00	; 0
    1a88:	10 e0       	ldi	r17, 0x00	; 0
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <pvPortMalloc+0x124>
    1a8c:	00 e0       	ldi	r16, 0x00	; 0
    1a8e:	10 e0       	ldi	r17, 0x00	; 0
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
    1a90:	0e 94 48 15 	call	0x2a90	; 0x2a90 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    1a94:	c8 01       	movw	r24, r16
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	1f 91       	pop	r17
    1a9c:	0f 91       	pop	r16
    1a9e:	08 95       	ret

00001aa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1aa0:	0f 93       	push	r16
    1aa2:	1f 93       	push	r17
    1aa4:	cf 93       	push	r28
    1aa6:	df 93       	push	r29
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv )
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	41 f1       	breq	.+80     	; 0x1afc <vPortFree+0x5c>
    1aac:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    1aae:	8c 01       	movw	r16, r24
    1ab0:	05 50       	subi	r16, 0x05	; 5
    1ab2:	11 09       	sbc	r17, r1

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
    1ab4:	0e 94 26 14 	call	0x284c	; 0x284c <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    1ab8:	f8 01       	movw	r30, r16
    1aba:	42 81       	ldd	r20, Z+2	; 0x02
    1abc:	53 81       	ldd	r21, Z+3	; 0x03
    1abe:	ab ec       	ldi	r26, 0xCB	; 203
    1ac0:	b1 e2       	ldi	r27, 0x21	; 33
    1ac2:	01 c0       	rjmp	.+2      	; 0x1ac6 <vPortFree+0x26>
    1ac4:	df 01       	movw	r26, r30
    1ac6:	ed 91       	ld	r30, X+
    1ac8:	fc 91       	ld	r31, X
    1aca:	11 97       	sbiw	r26, 0x01	; 1
    1acc:	22 81       	ldd	r18, Z+2	; 0x02
    1ace:	33 81       	ldd	r19, Z+3	; 0x03
    1ad0:	24 17       	cp	r18, r20
    1ad2:	35 07       	cpc	r19, r21
    1ad4:	b8 f3       	brcs	.-18     	; 0x1ac4 <vPortFree+0x24>
    1ad6:	25 97       	sbiw	r28, 0x05	; 5
    1ad8:	e8 83       	st	Y, r30
    1ada:	f9 83       	std	Y+1, r31	; 0x01
    1adc:	0d 93       	st	X+, r16
    1ade:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
    1ae0:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    1ae4:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	9b 81       	ldd	r25, Y+3	; 0x03
    1aec:	82 0f       	add	r24, r18
    1aee:	93 1f       	adc	r25, r19
    1af0:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    1af4:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
		}
		xTaskResumeAll();
    1af8:	0e 94 48 15 	call	0x2a90	; 0x2a90 <xTaskResumeAll>
	}
}
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	1f 91       	pop	r17
    1b02:	0f 91       	pop	r16
    1b04:	08 95       	ret

00001b06 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
    1b06:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    1b0a:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    1b0e:	08 95       	ret

00001b10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    1b10:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    1b12:	03 96       	adiw	r24, 0x03	; 3
    1b14:	81 83       	std	Z+1, r24	; 0x01
    1b16:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1b18:	4f ef       	ldi	r20, 0xFF	; 255
    1b1a:	5f ef       	ldi	r21, 0xFF	; 255
    1b1c:	ba 01       	movw	r22, r20
    1b1e:	43 83       	std	Z+3, r20	; 0x03
    1b20:	54 83       	std	Z+4, r21	; 0x04
    1b22:	65 83       	std	Z+5, r22	; 0x05
    1b24:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    1b26:	87 83       	std	Z+7, r24	; 0x07
    1b28:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    1b2a:	81 87       	std	Z+9, r24	; 0x09
    1b2c:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    1b2e:	10 82       	st	Z, r1
    1b30:	08 95       	ret

00001b32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1b32:	fc 01       	movw	r30, r24
    1b34:	12 86       	std	Z+10, r1	; 0x0a
    1b36:	13 86       	std	Z+11, r1	; 0x0b
    1b38:	08 95       	ret

00001b3a <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	fc 01       	movw	r30, r24
    1b40:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    1b42:	21 81       	ldd	r18, Z+1	; 0x01
    1b44:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    1b46:	e9 01       	movw	r28, r18
    1b48:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4c:	14 96       	adiw	r26, 0x04	; 4
    1b4e:	8d 93       	st	X+, r24
    1b50:	9c 93       	st	X, r25
    1b52:	15 97       	sbiw	r26, 0x05	; 5
	pxNewListItem->pxPrevious = pxList->pxIndex;
    1b54:	81 81       	ldd	r24, Z+1	; 0x01
    1b56:	92 81       	ldd	r25, Z+2	; 0x02
    1b58:	16 96       	adiw	r26, 0x06	; 6
    1b5a:	8d 93       	st	X+, r24
    1b5c:	9c 93       	st	X, r25
    1b5e:	17 97       	sbiw	r26, 0x07	; 7
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1b60:	8c 81       	ldd	r24, Y+4	; 0x04
    1b62:	9d 81       	ldd	r25, Y+5	; 0x05
    1b64:	ec 01       	movw	r28, r24
    1b66:	6e 83       	std	Y+6, r22	; 0x06
    1b68:	7f 83       	std	Y+7, r23	; 0x07
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    1b6a:	e9 01       	movw	r28, r18
    1b6c:	6c 83       	std	Y+4, r22	; 0x04
    1b6e:	7d 83       	std	Y+5, r23	; 0x05
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    1b70:	61 83       	std	Z+1, r22	; 0x01
    1b72:	72 83       	std	Z+2, r23	; 0x02

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1b74:	1a 96       	adiw	r26, 0x0a	; 10
    1b76:	ed 93       	st	X+, r30
    1b78:	fc 93       	st	X, r31
    1b7a:	1b 97       	sbiw	r26, 0x0b	; 11

	( pxList->uxNumberOfItems )++;
    1b7c:	80 81       	ld	r24, Z
    1b7e:	8f 5f       	subi	r24, 0xFF	; 255
    1b80:	80 83       	st	Z, r24
}
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	08 95       	ret

00001b88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    1b88:	0f 93       	push	r16
    1b8a:	1f 93       	push	r17
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    1b92:	08 81       	ld	r16, Y
    1b94:	19 81       	ldd	r17, Y+1	; 0x01
    1b96:	2a 81       	ldd	r18, Y+2	; 0x02
    1b98:	3b 81       	ldd	r19, Y+3	; 0x03
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1b9a:	0f 3f       	cpi	r16, 0xFF	; 255
    1b9c:	4f ef       	ldi	r20, 0xFF	; 255
    1b9e:	14 07       	cpc	r17, r20
    1ba0:	24 07       	cpc	r18, r20
    1ba2:	34 07       	cpc	r19, r20
    1ba4:	31 f4       	brne	.+12     	; 0x1bb2 <vListInsert+0x2a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	19 96       	adiw	r26, 0x09	; 9
    1baa:	ed 91       	ld	r30, X+
    1bac:	fc 91       	ld	r31, X
    1bae:	1a 97       	sbiw	r26, 0x0a	; 10
    1bb0:	1f c0       	rjmp	.+62     	; 0x1bf0 <vListInsert+0x68>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	33 96       	adiw	r30, 0x03	; 3
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	17 96       	adiw	r26, 0x07	; 7
    1bba:	4d 91       	ld	r20, X+
    1bbc:	5c 91       	ld	r21, X
    1bbe:	18 97       	sbiw	r26, 0x08	; 8
    1bc0:	da 01       	movw	r26, r20
    1bc2:	4d 91       	ld	r20, X+
    1bc4:	5d 91       	ld	r21, X+
    1bc6:	6d 91       	ld	r22, X+
    1bc8:	7c 91       	ld	r23, X
    1bca:	04 17       	cp	r16, r20
    1bcc:	15 07       	cpc	r17, r21
    1bce:	26 07       	cpc	r18, r22
    1bd0:	37 07       	cpc	r19, r23
    1bd2:	70 f0       	brcs	.+28     	; 0x1bf0 <vListInsert+0x68>
    1bd4:	04 80       	ldd	r0, Z+4	; 0x04
    1bd6:	f5 81       	ldd	r31, Z+5	; 0x05
    1bd8:	e0 2d       	mov	r30, r0
    1bda:	a4 81       	ldd	r26, Z+4	; 0x04
    1bdc:	b5 81       	ldd	r27, Z+5	; 0x05
    1bde:	4d 91       	ld	r20, X+
    1be0:	5d 91       	ld	r21, X+
    1be2:	6d 91       	ld	r22, X+
    1be4:	7c 91       	ld	r23, X
    1be6:	04 17       	cp	r16, r20
    1be8:	15 07       	cpc	r17, r21
    1bea:	26 07       	cpc	r18, r22
    1bec:	37 07       	cpc	r19, r23
    1bee:	90 f7       	brcc	.-28     	; 0x1bd4 <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1bf0:	a4 81       	ldd	r26, Z+4	; 0x04
    1bf2:	b5 81       	ldd	r27, Z+5	; 0x05
    1bf4:	ac 83       	std	Y+4, r26	; 0x04
    1bf6:	bd 83       	std	Y+5, r27	; 0x05
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1bf8:	16 96       	adiw	r26, 0x06	; 6
    1bfa:	cd 93       	st	X+, r28
    1bfc:	dc 93       	st	X, r29
    1bfe:	17 97       	sbiw	r26, 0x07	; 7
	pxNewListItem->pxPrevious = pxIterator;
    1c00:	ee 83       	std	Y+6, r30	; 0x06
    1c02:	ff 83       	std	Y+7, r31	; 0x07
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    1c04:	c4 83       	std	Z+4, r28	; 0x04
    1c06:	d5 83       	std	Z+5, r29	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1c08:	8a 87       	std	Y+10, r24	; 0x0a
    1c0a:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	20 81       	ld	r18, Z
    1c10:	2f 5f       	subi	r18, 0xFF	; 255
    1c12:	20 83       	st	Z, r18
}
    1c14:	df 91       	pop	r29
    1c16:	cf 91       	pop	r28
    1c18:	1f 91       	pop	r17
    1c1a:	0f 91       	pop	r16
    1c1c:	08 95       	ret

00001c1e <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    1c1e:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1c20:	a4 81       	ldd	r26, Z+4	; 0x04
    1c22:	b5 81       	ldd	r27, Z+5	; 0x05
    1c24:	86 81       	ldd	r24, Z+6	; 0x06
    1c26:	97 81       	ldd	r25, Z+7	; 0x07
    1c28:	16 96       	adiw	r26, 0x06	; 6
    1c2a:	8d 93       	st	X+, r24
    1c2c:	9c 93       	st	X, r25
    1c2e:	17 97       	sbiw	r26, 0x07	; 7
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1c30:	a6 81       	ldd	r26, Z+6	; 0x06
    1c32:	b7 81       	ldd	r27, Z+7	; 0x07
    1c34:	84 81       	ldd	r24, Z+4	; 0x04
    1c36:	95 81       	ldd	r25, Z+5	; 0x05
    1c38:	14 96       	adiw	r26, 0x04	; 4
    1c3a:	8d 93       	st	X+, r24
    1c3c:	9c 93       	st	X, r25
    1c3e:	15 97       	sbiw	r26, 0x05	; 5
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    1c40:	a2 85       	ldd	r26, Z+10	; 0x0a
    1c42:	b3 85       	ldd	r27, Z+11	; 0x0b

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1c44:	11 96       	adiw	r26, 0x01	; 1
    1c46:	8d 91       	ld	r24, X+
    1c48:	9c 91       	ld	r25, X
    1c4a:	12 97       	sbiw	r26, 0x02	; 2
    1c4c:	e8 17       	cp	r30, r24
    1c4e:	f9 07       	cpc	r31, r25
    1c50:	31 f4       	brne	.+12     	; 0x1c5e <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1c52:	86 81       	ldd	r24, Z+6	; 0x06
    1c54:	97 81       	ldd	r25, Z+7	; 0x07
    1c56:	11 96       	adiw	r26, 0x01	; 1
    1c58:	8d 93       	st	X+, r24
    1c5a:	9c 93       	st	X, r25
    1c5c:	12 97       	sbiw	r26, 0x02	; 2
	}

	pxItemToRemove->pvContainer = NULL;
    1c5e:	12 86       	std	Z+10, r1	; 0x0a
    1c60:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    1c62:	8c 91       	ld	r24, X
    1c64:	81 50       	subi	r24, 0x01	; 1
    1c66:	8c 93       	st	X, r24
    1c68:	08 95       	ret

00001c6a <pxPortInitialiseStack>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1c6a:	80 93 92 32 	sts	0x3292, r24	; 0x803292 <portStackTopForTask>
    1c6e:	90 93 93 32 	sts	0x3293, r25	; 0x803293 <portStackTopForTask+0x1>
    1c72:	31 e1       	ldi	r19, 0x11	; 17
    1c74:	fc 01       	movw	r30, r24
    1c76:	30 83       	st	Z, r19
    1c78:	31 97       	sbiw	r30, 0x01	; 1
    1c7a:	22 e2       	ldi	r18, 0x22	; 34
    1c7c:	20 83       	st	Z, r18
    1c7e:	31 97       	sbiw	r30, 0x01	; 1
    1c80:	a3 e3       	ldi	r26, 0x33	; 51
    1c82:	a0 83       	st	Z, r26
    1c84:	31 97       	sbiw	r30, 0x01	; 1
    1c86:	60 83       	st	Z, r22
    1c88:	31 97       	sbiw	r30, 0x01	; 1
    1c8a:	70 83       	st	Z, r23
    1c8c:	31 97       	sbiw	r30, 0x01	; 1
    1c8e:	10 82       	st	Z, r1
    1c90:	31 97       	sbiw	r30, 0x01	; 1
    1c92:	10 82       	st	Z, r1
    1c94:	31 97       	sbiw	r30, 0x01	; 1
    1c96:	60 e8       	ldi	r22, 0x80	; 128
    1c98:	60 83       	st	Z, r22
    1c9a:	31 97       	sbiw	r30, 0x01	; 1
    1c9c:	10 82       	st	Z, r1
    1c9e:	31 97       	sbiw	r30, 0x01	; 1
    1ca0:	10 82       	st	Z, r1
    1ca2:	31 97       	sbiw	r30, 0x01	; 1
    1ca4:	10 82       	st	Z, r1
    1ca6:	31 97       	sbiw	r30, 0x01	; 1
    1ca8:	62 e0       	ldi	r22, 0x02	; 2
    1caa:	60 83       	st	Z, r22
    1cac:	31 97       	sbiw	r30, 0x01	; 1
    1cae:	63 e0       	ldi	r22, 0x03	; 3
    1cb0:	60 83       	st	Z, r22
    1cb2:	31 97       	sbiw	r30, 0x01	; 1
    1cb4:	64 e0       	ldi	r22, 0x04	; 4
    1cb6:	60 83       	st	Z, r22
    1cb8:	31 97       	sbiw	r30, 0x01	; 1
    1cba:	65 e0       	ldi	r22, 0x05	; 5
    1cbc:	60 83       	st	Z, r22
    1cbe:	31 97       	sbiw	r30, 0x01	; 1
    1cc0:	66 e0       	ldi	r22, 0x06	; 6
    1cc2:	60 83       	st	Z, r22
    1cc4:	31 97       	sbiw	r30, 0x01	; 1
    1cc6:	67 e0       	ldi	r22, 0x07	; 7
    1cc8:	60 83       	st	Z, r22
    1cca:	31 97       	sbiw	r30, 0x01	; 1
    1ccc:	68 e0       	ldi	r22, 0x08	; 8
    1cce:	60 83       	st	Z, r22
    1cd0:	31 97       	sbiw	r30, 0x01	; 1
    1cd2:	69 e0       	ldi	r22, 0x09	; 9
    1cd4:	60 83       	st	Z, r22
    1cd6:	31 97       	sbiw	r30, 0x01	; 1
    1cd8:	60 e1       	ldi	r22, 0x10	; 16
    1cda:	60 83       	st	Z, r22
    1cdc:	31 97       	sbiw	r30, 0x01	; 1
    1cde:	30 83       	st	Z, r19
    1ce0:	31 97       	sbiw	r30, 0x01	; 1
    1ce2:	32 e1       	ldi	r19, 0x12	; 18
    1ce4:	30 83       	st	Z, r19
    1ce6:	31 97       	sbiw	r30, 0x01	; 1
    1ce8:	33 e1       	ldi	r19, 0x13	; 19
    1cea:	30 83       	st	Z, r19
    1cec:	31 97       	sbiw	r30, 0x01	; 1
    1cee:	34 e1       	ldi	r19, 0x14	; 20
    1cf0:	30 83       	st	Z, r19
    1cf2:	31 97       	sbiw	r30, 0x01	; 1
    1cf4:	35 e1       	ldi	r19, 0x15	; 21
    1cf6:	30 83       	st	Z, r19
    1cf8:	31 97       	sbiw	r30, 0x01	; 1
    1cfa:	36 e1       	ldi	r19, 0x16	; 22
    1cfc:	30 83       	st	Z, r19
    1cfe:	31 97       	sbiw	r30, 0x01	; 1
    1d00:	37 e1       	ldi	r19, 0x17	; 23
    1d02:	30 83       	st	Z, r19
    1d04:	31 97       	sbiw	r30, 0x01	; 1
    1d06:	38 e1       	ldi	r19, 0x18	; 24
    1d08:	30 83       	st	Z, r19
    1d0a:	31 97       	sbiw	r30, 0x01	; 1
    1d0c:	39 e1       	ldi	r19, 0x19	; 25
    1d0e:	30 83       	st	Z, r19
    1d10:	31 97       	sbiw	r30, 0x01	; 1
    1d12:	30 e2       	ldi	r19, 0x20	; 32
    1d14:	30 83       	st	Z, r19
    1d16:	31 97       	sbiw	r30, 0x01	; 1
    1d18:	31 e2       	ldi	r19, 0x21	; 33
    1d1a:	30 83       	st	Z, r19
    1d1c:	31 97       	sbiw	r30, 0x01	; 1
    1d1e:	20 83       	st	Z, r18
    1d20:	31 97       	sbiw	r30, 0x01	; 1
    1d22:	23 e2       	ldi	r18, 0x23	; 35
    1d24:	20 83       	st	Z, r18
    1d26:	31 97       	sbiw	r30, 0x01	; 1
    1d28:	40 83       	st	Z, r20
    1d2a:	31 97       	sbiw	r30, 0x01	; 1
    1d2c:	50 83       	st	Z, r21
    1d2e:	31 97       	sbiw	r30, 0x01	; 1
    1d30:	26 e2       	ldi	r18, 0x26	; 38
    1d32:	20 83       	st	Z, r18
    1d34:	31 97       	sbiw	r30, 0x01	; 1
    1d36:	27 e2       	ldi	r18, 0x27	; 39
    1d38:	20 83       	st	Z, r18
    1d3a:	31 97       	sbiw	r30, 0x01	; 1
    1d3c:	28 e2       	ldi	r18, 0x28	; 40
    1d3e:	20 83       	st	Z, r18
    1d40:	31 97       	sbiw	r30, 0x01	; 1
    1d42:	29 e2       	ldi	r18, 0x29	; 41
    1d44:	20 83       	st	Z, r18
    1d46:	31 97       	sbiw	r30, 0x01	; 1
    1d48:	20 e3       	ldi	r18, 0x30	; 48
    1d4a:	20 83       	st	Z, r18
    1d4c:	31 97       	sbiw	r30, 0x01	; 1
    1d4e:	21 e3       	ldi	r18, 0x31	; 49
    1d50:	20 83       	st	Z, r18
    1d52:	89 97       	sbiw	r24, 0x29	; 41
    1d54:	08 95       	ret

00001d56 <xPortStartScheduler>:
    1d56:	8c e7       	ldi	r24, 0x7C	; 124
    1d58:	80 93 69 08 	sts	0x0869, r24	; 0x800869 <__TEXT_REGION_LENGTH__+0x700869>
    1d5c:	8f ef       	ldi	r24, 0xFF	; 255
    1d5e:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x700868>
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
    1d68:	91 e1       	ldi	r25, 0x11	; 17
    1d6a:	90 93 41 08 	sts	0x0841, r25	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    1d6e:	80 93 47 08 	sts	0x0847, r24	; 0x800847 <__TEXT_REGION_LENGTH__+0x700847>
    1d72:	a0 91 2e 32 	lds	r26, 0x322E	; 0x80322e <pxCurrentTCB>
    1d76:	b0 91 2f 32 	lds	r27, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
    1d7a:	cd 91       	ld	r28, X+
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	dd 91       	ld	r29, X+
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	ff 91       	pop	r31
    1d84:	ef 91       	pop	r30
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	bf 91       	pop	r27
    1d8c:	af 91       	pop	r26
    1d8e:	9f 91       	pop	r25
    1d90:	8f 91       	pop	r24
    1d92:	7f 91       	pop	r23
    1d94:	6f 91       	pop	r22
    1d96:	5f 91       	pop	r21
    1d98:	4f 91       	pop	r20
    1d9a:	3f 91       	pop	r19
    1d9c:	2f 91       	pop	r18
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	ff 90       	pop	r15
    1da4:	ef 90       	pop	r14
    1da6:	df 90       	pop	r13
    1da8:	cf 90       	pop	r12
    1daa:	bf 90       	pop	r11
    1dac:	af 90       	pop	r10
    1dae:	9f 90       	pop	r9
    1db0:	8f 90       	pop	r8
    1db2:	7f 90       	pop	r7
    1db4:	6f 90       	pop	r6
    1db6:	5f 90       	pop	r5
    1db8:	4f 90       	pop	r4
    1dba:	3f 90       	pop	r3
    1dbc:	2f 90       	pop	r2
    1dbe:	1f 90       	pop	r1
    1dc0:	0f 90       	pop	r0
    1dc2:	0c be       	out	0x3c, r0	; 60
    1dc4:	0f 90       	pop	r0
    1dc6:	0b be       	out	0x3b, r0	; 59
    1dc8:	0f 90       	pop	r0
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	0f 90       	pop	r0
    1dce:	08 95       	ret
    1dd0:	08 95       	ret

00001dd2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1dd2:	0f 92       	push	r0
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	0f 92       	push	r0
    1dda:	0b b6       	in	r0, 0x3b	; 59
    1ddc:	0f 92       	push	r0
    1dde:	0c b6       	in	r0, 0x3c	; 60
    1de0:	0f 92       	push	r0
    1de2:	1f 92       	push	r1
    1de4:	11 24       	eor	r1, r1
    1de6:	2f 92       	push	r2
    1de8:	3f 92       	push	r3
    1dea:	4f 92       	push	r4
    1dec:	5f 92       	push	r5
    1dee:	6f 92       	push	r6
    1df0:	7f 92       	push	r7
    1df2:	8f 92       	push	r8
    1df4:	9f 92       	push	r9
    1df6:	af 92       	push	r10
    1df8:	bf 92       	push	r11
    1dfa:	cf 92       	push	r12
    1dfc:	df 92       	push	r13
    1dfe:	ef 92       	push	r14
    1e00:	ff 92       	push	r15
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
    1e06:	2f 93       	push	r18
    1e08:	3f 93       	push	r19
    1e0a:	4f 93       	push	r20
    1e0c:	5f 93       	push	r21
    1e0e:	6f 93       	push	r22
    1e10:	7f 93       	push	r23
    1e12:	8f 93       	push	r24
    1e14:	9f 93       	push	r25
    1e16:	af 93       	push	r26
    1e18:	bf 93       	push	r27
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	ef 93       	push	r30
    1e20:	ff 93       	push	r31
    1e22:	a0 91 2e 32 	lds	r26, 0x322E	; 0x80322e <pxCurrentTCB>
    1e26:	b0 91 2f 32 	lds	r27, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
    1e2a:	0d b6       	in	r0, 0x3d	; 61
    1e2c:	0d 92       	st	X+, r0
    1e2e:	0e b6       	in	r0, 0x3e	; 62
    1e30:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1e32:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1e36:	a0 91 2e 32 	lds	r26, 0x322E	; 0x80322e <pxCurrentTCB>
    1e3a:	b0 91 2f 32 	lds	r27, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
    1e3e:	cd 91       	ld	r28, X+
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	dd 91       	ld	r29, X+
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	ff 91       	pop	r31
    1e48:	ef 91       	pop	r30
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	bf 91       	pop	r27
    1e50:	af 91       	pop	r26
    1e52:	9f 91       	pop	r25
    1e54:	8f 91       	pop	r24
    1e56:	7f 91       	pop	r23
    1e58:	6f 91       	pop	r22
    1e5a:	5f 91       	pop	r21
    1e5c:	4f 91       	pop	r20
    1e5e:	3f 91       	pop	r19
    1e60:	2f 91       	pop	r18
    1e62:	1f 91       	pop	r17
    1e64:	0f 91       	pop	r16
    1e66:	ff 90       	pop	r15
    1e68:	ef 90       	pop	r14
    1e6a:	df 90       	pop	r13
    1e6c:	cf 90       	pop	r12
    1e6e:	bf 90       	pop	r11
    1e70:	af 90       	pop	r10
    1e72:	9f 90       	pop	r9
    1e74:	8f 90       	pop	r8
    1e76:	7f 90       	pop	r7
    1e78:	6f 90       	pop	r6
    1e7a:	5f 90       	pop	r5
    1e7c:	4f 90       	pop	r4
    1e7e:	3f 90       	pop	r3
    1e80:	2f 90       	pop	r2
    1e82:	1f 90       	pop	r1
    1e84:	0f 90       	pop	r0
    1e86:	0c be       	out	0x3c, r0	; 60
    1e88:	0f 90       	pop	r0
    1e8a:	0b be       	out	0x3b, r0	; 59
    1e8c:	0f 90       	pop	r0
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1e92:	08 95       	ret

00001e94 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1e94:	0f 92       	push	r0
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	0f 92       	push	r0
    1e9c:	0b b6       	in	r0, 0x3b	; 59
    1e9e:	0f 92       	push	r0
    1ea0:	0c b6       	in	r0, 0x3c	; 60
    1ea2:	0f 92       	push	r0
    1ea4:	1f 92       	push	r1
    1ea6:	11 24       	eor	r1, r1
    1ea8:	2f 92       	push	r2
    1eaa:	3f 92       	push	r3
    1eac:	4f 92       	push	r4
    1eae:	5f 92       	push	r5
    1eb0:	6f 92       	push	r6
    1eb2:	7f 92       	push	r7
    1eb4:	8f 92       	push	r8
    1eb6:	9f 92       	push	r9
    1eb8:	af 92       	push	r10
    1eba:	bf 92       	push	r11
    1ebc:	cf 92       	push	r12
    1ebe:	df 92       	push	r13
    1ec0:	ef 92       	push	r14
    1ec2:	ff 92       	push	r15
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	2f 93       	push	r18
    1eca:	3f 93       	push	r19
    1ecc:	4f 93       	push	r20
    1ece:	5f 93       	push	r21
    1ed0:	6f 93       	push	r22
    1ed2:	7f 93       	push	r23
    1ed4:	8f 93       	push	r24
    1ed6:	9f 93       	push	r25
    1ed8:	af 93       	push	r26
    1eda:	bf 93       	push	r27
    1edc:	cf 93       	push	r28
    1ede:	df 93       	push	r29
    1ee0:	ef 93       	push	r30
    1ee2:	ff 93       	push	r31
    1ee4:	a0 91 2e 32 	lds	r26, 0x322E	; 0x80322e <pxCurrentTCB>
    1ee8:	b0 91 2f 32 	lds	r27, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
    1eec:	0d b6       	in	r0, 0x3d	; 61
    1eee:	0d 92       	st	X+, r0
    1ef0:	0e b6       	in	r0, 0x3e	; 62
    1ef2:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    1ef4:	0e 94 47 14 	call	0x288e	; 0x288e <vTaskIncrementTick>
	vTaskSwitchContext();
    1ef8:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1efc:	a0 91 2e 32 	lds	r26, 0x322E	; 0x80322e <pxCurrentTCB>
    1f00:	b0 91 2f 32 	lds	r27, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
    1f04:	cd 91       	ld	r28, X+
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	dd 91       	ld	r29, X+
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	ff 91       	pop	r31
    1f0e:	ef 91       	pop	r30
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	bf 91       	pop	r27
    1f16:	af 91       	pop	r26
    1f18:	9f 91       	pop	r25
    1f1a:	8f 91       	pop	r24
    1f1c:	7f 91       	pop	r23
    1f1e:	6f 91       	pop	r22
    1f20:	5f 91       	pop	r21
    1f22:	4f 91       	pop	r20
    1f24:	3f 91       	pop	r19
    1f26:	2f 91       	pop	r18
    1f28:	1f 91       	pop	r17
    1f2a:	0f 91       	pop	r16
    1f2c:	ff 90       	pop	r15
    1f2e:	ef 90       	pop	r14
    1f30:	df 90       	pop	r13
    1f32:	cf 90       	pop	r12
    1f34:	bf 90       	pop	r11
    1f36:	af 90       	pop	r10
    1f38:	9f 90       	pop	r9
    1f3a:	8f 90       	pop	r8
    1f3c:	7f 90       	pop	r7
    1f3e:	6f 90       	pop	r6
    1f40:	5f 90       	pop	r5
    1f42:	4f 90       	pop	r4
    1f44:	3f 90       	pop	r3
    1f46:	2f 90       	pop	r2
    1f48:	1f 90       	pop	r1
    1f4a:	0f 90       	pop	r0
    1f4c:	0c be       	out	0x3c, r0	; 60
    1f4e:	0f 90       	pop	r0
    1f50:	0b be       	out	0x3b, r0	; 59
    1f52:	0f 90       	pop	r0
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1f58:	08 95       	ret

00001f5a <__vector_22>:
void RT_VECT (void) __attribute__ ((signal, naked));
void RT_VECT (void)
{
	// For the preemptive scheduler, enable a context switch
	#if configUSE_PREEMPTION == 1
		vPortYieldFromTick ();
    1f5a:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1f5e:	18 95       	reti

00001f60 <prvCopyDataToQueue>:
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
    1f60:	cf 93       	push	r28
    1f62:	df 93       	push	r29
    1f64:	ec 01       	movw	r28, r24
    1f66:	88 a1       	ldd	r24, Y+32	; 0x20
    1f68:	81 11       	cpse	r24, r1
    1f6a:	0b c0       	rjmp	.+22     	; 0x1f82 <prvCopyDataToQueue+0x22>
    1f6c:	88 81       	ld	r24, Y
    1f6e:	99 81       	ldd	r25, Y+1	; 0x01
    1f70:	89 2b       	or	r24, r25
    1f72:	e1 f5       	brne	.+120    	; 0x1fec <prvCopyDataToQueue+0x8c>
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	9b 81       	ldd	r25, Y+3	; 0x03
    1f78:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <vTaskPriorityDisinherit>
    1f7c:	1a 82       	std	Y+2, r1	; 0x02
    1f7e:	1b 82       	std	Y+3, r1	; 0x03
    1f80:	35 c0       	rjmp	.+106    	; 0x1fec <prvCopyDataToQueue+0x8c>
    1f82:	41 11       	cpse	r20, r1
    1f84:	17 c0       	rjmp	.+46     	; 0x1fb4 <prvCopyDataToQueue+0x54>
    1f86:	48 2f       	mov	r20, r24
    1f88:	50 e0       	ldi	r21, 0x00	; 0
    1f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f8e:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <memcpy>
    1f92:	28 a1       	ldd	r18, Y+32	; 0x20
    1f94:	8c 81       	ldd	r24, Y+4	; 0x04
    1f96:	9d 81       	ldd	r25, Y+5	; 0x05
    1f98:	82 0f       	add	r24, r18
    1f9a:	91 1d       	adc	r25, r1
    1f9c:	8c 83       	std	Y+4, r24	; 0x04
    1f9e:	9d 83       	std	Y+5, r25	; 0x05
    1fa0:	2a 81       	ldd	r18, Y+2	; 0x02
    1fa2:	3b 81       	ldd	r19, Y+3	; 0x03
    1fa4:	82 17       	cp	r24, r18
    1fa6:	93 07       	cpc	r25, r19
    1fa8:	08 f1       	brcs	.+66     	; 0x1fec <prvCopyDataToQueue+0x8c>
    1faa:	88 81       	ld	r24, Y
    1fac:	99 81       	ldd	r25, Y+1	; 0x01
    1fae:	8c 83       	std	Y+4, r24	; 0x04
    1fb0:	9d 83       	std	Y+5, r25	; 0x05
    1fb2:	1c c0       	rjmp	.+56     	; 0x1fec <prvCopyDataToQueue+0x8c>
    1fb4:	48 2f       	mov	r20, r24
    1fb6:	50 e0       	ldi	r21, 0x00	; 0
    1fb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fba:	9f 81       	ldd	r25, Y+7	; 0x07
    1fbc:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <memcpy>
    1fc0:	88 a1       	ldd	r24, Y+32	; 0x20
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	91 95       	neg	r25
    1fc6:	81 95       	neg	r24
    1fc8:	91 09       	sbc	r25, r1
    1fca:	2e 81       	ldd	r18, Y+6	; 0x06
    1fcc:	3f 81       	ldd	r19, Y+7	; 0x07
    1fce:	28 0f       	add	r18, r24
    1fd0:	39 1f       	adc	r19, r25
    1fd2:	2e 83       	std	Y+6, r18	; 0x06
    1fd4:	3f 83       	std	Y+7, r19	; 0x07
    1fd6:	48 81       	ld	r20, Y
    1fd8:	59 81       	ldd	r21, Y+1	; 0x01
    1fda:	24 17       	cp	r18, r20
    1fdc:	35 07       	cpc	r19, r21
    1fde:	30 f4       	brcc	.+12     	; 0x1fec <prvCopyDataToQueue+0x8c>
    1fe0:	2a 81       	ldd	r18, Y+2	; 0x02
    1fe2:	3b 81       	ldd	r19, Y+3	; 0x03
    1fe4:	82 0f       	add	r24, r18
    1fe6:	93 1f       	adc	r25, r19
    1fe8:	8e 83       	std	Y+6, r24	; 0x06
    1fea:	9f 83       	std	Y+7, r25	; 0x07
    1fec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fee:	8f 5f       	subi	r24, 0xFF	; 255
    1ff0:	8e 8f       	std	Y+30, r24	; 0x1e
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	08 95       	ret

00001ff8 <prvCopyDataFromQueue>:
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	80 81       	ld	r24, Z
    1ffc:	91 81       	ldd	r25, Z+1	; 0x01
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	a1 f0       	breq	.+40     	; 0x202a <prvCopyDataFromQueue+0x32>
    2002:	40 a1       	ldd	r20, Z+32	; 0x20
    2004:	50 e0       	ldi	r21, 0x00	; 0
    2006:	26 81       	ldd	r18, Z+6	; 0x06
    2008:	37 81       	ldd	r19, Z+7	; 0x07
    200a:	24 0f       	add	r18, r20
    200c:	35 1f       	adc	r19, r21
    200e:	26 83       	std	Z+6, r18	; 0x06
    2010:	37 83       	std	Z+7, r19	; 0x07
    2012:	a2 81       	ldd	r26, Z+2	; 0x02
    2014:	b3 81       	ldd	r27, Z+3	; 0x03
    2016:	2a 17       	cp	r18, r26
    2018:	3b 07       	cpc	r19, r27
    201a:	10 f0       	brcs	.+4      	; 0x2020 <prvCopyDataFromQueue+0x28>
    201c:	86 83       	std	Z+6, r24	; 0x06
    201e:	97 83       	std	Z+7, r25	; 0x07
    2020:	cb 01       	movw	r24, r22
    2022:	66 81       	ldd	r22, Z+6	; 0x06
    2024:	77 81       	ldd	r23, Z+7	; 0x07
    2026:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <memcpy>
    202a:	08 95       	ret

0000202c <prvUnlockQueue>:
    202c:	0f 93       	push	r16
    202e:	1f 93       	push	r17
    2030:	cf 93       	push	r28
    2032:	df 93       	push	r29
    2034:	ec 01       	movw	r28, r24
    2036:	0f b6       	in	r0, 0x3f	; 63
    2038:	f8 94       	cli
    203a:	0f 92       	push	r0
    203c:	8a a1       	ldd	r24, Y+34	; 0x22
    203e:	18 16       	cp	r1, r24
    2040:	b4 f4       	brge	.+44     	; 0x206e <prvUnlockQueue+0x42>
    2042:	8b 89       	ldd	r24, Y+19	; 0x13
    2044:	81 11       	cpse	r24, r1
    2046:	05 c0       	rjmp	.+10     	; 0x2052 <prvUnlockQueue+0x26>
    2048:	12 c0       	rjmp	.+36     	; 0x206e <prvUnlockQueue+0x42>
    204a:	8b 89       	ldd	r24, Y+19	; 0x13
    204c:	81 11       	cpse	r24, r1
    204e:	04 c0       	rjmp	.+8      	; 0x2058 <prvUnlockQueue+0x2c>
    2050:	0e c0       	rjmp	.+28     	; 0x206e <prvUnlockQueue+0x42>
    2052:	8e 01       	movw	r16, r28
    2054:	0d 5e       	subi	r16, 0xED	; 237
    2056:	1f 4f       	sbci	r17, 0xFF	; 255
    2058:	c8 01       	movw	r24, r16
    205a:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <xTaskRemoveFromEventList>
    205e:	81 11       	cpse	r24, r1
    2060:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <vTaskMissedYield>
    2064:	8a a1       	ldd	r24, Y+34	; 0x22
    2066:	81 50       	subi	r24, 0x01	; 1
    2068:	8a a3       	std	Y+34, r24	; 0x22
    206a:	18 16       	cp	r1, r24
    206c:	74 f3       	brlt	.-36     	; 0x204a <prvUnlockQueue+0x1e>
    206e:	8f ef       	ldi	r24, 0xFF	; 255
    2070:	8a a3       	std	Y+34, r24	; 0x22
    2072:	0f 90       	pop	r0
    2074:	0f be       	out	0x3f, r0	; 63
    2076:	0f b6       	in	r0, 0x3f	; 63
    2078:	f8 94       	cli
    207a:	0f 92       	push	r0
    207c:	89 a1       	ldd	r24, Y+33	; 0x21
    207e:	18 16       	cp	r1, r24
    2080:	b4 f4       	brge	.+44     	; 0x20ae <prvUnlockQueue+0x82>
    2082:	88 85       	ldd	r24, Y+8	; 0x08
    2084:	81 11       	cpse	r24, r1
    2086:	05 c0       	rjmp	.+10     	; 0x2092 <prvUnlockQueue+0x66>
    2088:	12 c0       	rjmp	.+36     	; 0x20ae <prvUnlockQueue+0x82>
    208a:	88 85       	ldd	r24, Y+8	; 0x08
    208c:	81 11       	cpse	r24, r1
    208e:	04 c0       	rjmp	.+8      	; 0x2098 <prvUnlockQueue+0x6c>
    2090:	0e c0       	rjmp	.+28     	; 0x20ae <prvUnlockQueue+0x82>
    2092:	8e 01       	movw	r16, r28
    2094:	08 5f       	subi	r16, 0xF8	; 248
    2096:	1f 4f       	sbci	r17, 0xFF	; 255
    2098:	c8 01       	movw	r24, r16
    209a:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <xTaskRemoveFromEventList>
    209e:	81 11       	cpse	r24, r1
    20a0:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <vTaskMissedYield>
    20a4:	89 a1       	ldd	r24, Y+33	; 0x21
    20a6:	81 50       	subi	r24, 0x01	; 1
    20a8:	89 a3       	std	Y+33, r24	; 0x21
    20aa:	18 16       	cp	r1, r24
    20ac:	74 f3       	brlt	.-36     	; 0x208a <prvUnlockQueue+0x5e>
    20ae:	8f ef       	ldi	r24, 0xFF	; 255
    20b0:	89 a3       	std	Y+33, r24	; 0x21
    20b2:	0f 90       	pop	r0
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	df 91       	pop	r29
    20b8:	cf 91       	pop	r28
    20ba:	1f 91       	pop	r17
    20bc:	0f 91       	pop	r16
    20be:	08 95       	ret

000020c0 <xQueueGenericReset>:
    20c0:	1f 93       	push	r17
    20c2:	cf 93       	push	r28
    20c4:	df 93       	push	r29
    20c6:	61 30       	cpi	r22, 0x01	; 1
    20c8:	59 f0       	breq	.+22     	; 0x20e0 <xQueueGenericReset+0x20>
    20ca:	fc 01       	movw	r30, r24
    20cc:	23 89       	ldd	r18, Z+19	; 0x13
    20ce:	30 85       	ldd	r19, Z+8	; 0x08
    20d0:	31 11       	cpse	r19, r1
    20d2:	2c c0       	rjmp	.+88     	; 0x212c <xQueueGenericReset+0x6c>
    20d4:	11 e0       	ldi	r17, 0x01	; 1
    20d6:	21 11       	cpse	r18, r1
    20d8:	10 e0       	ldi	r17, 0x00	; 0
    20da:	21 11       	cpse	r18, r1
    20dc:	28 c0       	rjmp	.+80     	; 0x212e <xQueueGenericReset+0x6e>
    20de:	01 c0       	rjmp	.+2      	; 0x20e2 <xQueueGenericReset+0x22>
    20e0:	11 e0       	ldi	r17, 0x01	; 1
    20e2:	ec 01       	movw	r28, r24
    20e4:	48 81       	ld	r20, Y
    20e6:	59 81       	ldd	r21, Y+1	; 0x01
    20e8:	28 a1       	ldd	r18, Y+32	; 0x20
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	6f 8d       	ldd	r22, Y+31	; 0x1f
    20ee:	62 9f       	mul	r22, r18
    20f0:	c0 01       	movw	r24, r0
    20f2:	63 9f       	mul	r22, r19
    20f4:	90 0d       	add	r25, r0
    20f6:	11 24       	eor	r1, r1
    20f8:	ba 01       	movw	r22, r20
    20fa:	68 0f       	add	r22, r24
    20fc:	79 1f       	adc	r23, r25
    20fe:	6a 83       	std	Y+2, r22	; 0x02
    2100:	7b 83       	std	Y+3, r23	; 0x03
    2102:	1e 8e       	std	Y+30, r1	; 0x1e
    2104:	4c 83       	std	Y+4, r20	; 0x04
    2106:	5d 83       	std	Y+5, r21	; 0x05
    2108:	82 1b       	sub	r24, r18
    210a:	93 0b       	sbc	r25, r19
    210c:	84 0f       	add	r24, r20
    210e:	95 1f       	adc	r25, r21
    2110:	8e 83       	std	Y+6, r24	; 0x06
    2112:	9f 83       	std	Y+7, r25	; 0x07
    2114:	8f ef       	ldi	r24, 0xFF	; 255
    2116:	89 a3       	std	Y+33, r24	; 0x21
    2118:	8a a3       	std	Y+34, r24	; 0x22
    211a:	ce 01       	movw	r24, r28
    211c:	08 96       	adiw	r24, 0x08	; 8
    211e:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <vListInitialise>
    2122:	ce 01       	movw	r24, r28
    2124:	43 96       	adiw	r24, 0x13	; 19
    2126:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <vListInitialise>
    212a:	01 c0       	rjmp	.+2      	; 0x212e <xQueueGenericReset+0x6e>
    212c:	10 e0       	ldi	r17, 0x00	; 0
    212e:	81 2f       	mov	r24, r17
    2130:	df 91       	pop	r29
    2132:	cf 91       	pop	r28
    2134:	1f 91       	pop	r17
    2136:	08 95       	ret

00002138 <xQueueGenericCreate>:
    2138:	0f 93       	push	r16
    213a:	1f 93       	push	r17
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	88 23       	and	r24, r24
    2142:	01 f1       	breq	.+64     	; 0x2184 <xQueueGenericCreate+0x4c>
    2144:	06 2f       	mov	r16, r22
    2146:	18 2f       	mov	r17, r24
    2148:	83 e2       	ldi	r24, 0x23	; 35
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	0e 94 b6 0c 	call	0x196c	; 0x196c <pvPortMalloc>
    2150:	ec 01       	movw	r28, r24
    2152:	89 2b       	or	r24, r25
    2154:	c9 f0       	breq	.+50     	; 0x2188 <xQueueGenericCreate+0x50>
    2156:	10 9f       	mul	r17, r16
    2158:	c0 01       	movw	r24, r0
    215a:	11 24       	eor	r1, r1
    215c:	01 96       	adiw	r24, 0x01	; 1
    215e:	0e 94 b6 0c 	call	0x196c	; 0x196c <pvPortMalloc>
    2162:	88 83       	st	Y, r24
    2164:	99 83       	std	Y+1, r25	; 0x01
    2166:	89 2b       	or	r24, r25
    2168:	39 f0       	breq	.+14     	; 0x2178 <xQueueGenericCreate+0x40>
    216a:	1f 8f       	std	Y+31, r17	; 0x1f
    216c:	08 a3       	std	Y+32, r16	; 0x20
    216e:	61 e0       	ldi	r22, 0x01	; 1
    2170:	ce 01       	movw	r24, r28
    2172:	0e 94 60 10 	call	0x20c0	; 0x20c0 <xQueueGenericReset>
    2176:	08 c0       	rjmp	.+16     	; 0x2188 <xQueueGenericCreate+0x50>
    2178:	ce 01       	movw	r24, r28
    217a:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <vPortFree>
    217e:	c0 e0       	ldi	r28, 0x00	; 0
    2180:	d0 e0       	ldi	r29, 0x00	; 0
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <xQueueGenericCreate+0x50>
    2184:	c0 e0       	ldi	r28, 0x00	; 0
    2186:	d0 e0       	ldi	r29, 0x00	; 0
    2188:	ce 01       	movw	r24, r28
    218a:	df 91       	pop	r29
    218c:	cf 91       	pop	r28
    218e:	1f 91       	pop	r17
    2190:	0f 91       	pop	r16
    2192:	08 95       	ret

00002194 <xQueueGenericSend>:
    2194:	af 92       	push	r10
    2196:	bf 92       	push	r11
    2198:	cf 92       	push	r12
    219a:	df 92       	push	r13
    219c:	ef 92       	push	r14
    219e:	ff 92       	push	r15
    21a0:	0f 93       	push	r16
    21a2:	1f 93       	push	r17
    21a4:	cf 93       	push	r28
    21a6:	df 93       	push	r29
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
    21ac:	29 97       	sbiw	r28, 0x09	; 9
    21ae:	cd bf       	out	0x3d, r28	; 61
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	7c 01       	movw	r14, r24
    21b4:	5b 01       	movw	r10, r22
    21b6:	2e 83       	std	Y+6, r18	; 0x06
    21b8:	3f 83       	std	Y+7, r19	; 0x07
    21ba:	48 87       	std	Y+8, r20	; 0x08
    21bc:	59 87       	std	Y+9, r21	; 0x09
    21be:	10 e0       	ldi	r17, 0x00	; 0
    21c0:	6c 01       	movw	r12, r24
    21c2:	88 e0       	ldi	r24, 0x08	; 8
    21c4:	c8 0e       	add	r12, r24
    21c6:	d1 1c       	adc	r13, r1
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	f8 94       	cli
    21cc:	0f 92       	push	r0
    21ce:	f7 01       	movw	r30, r14
    21d0:	96 8d       	ldd	r25, Z+30	; 0x1e
    21d2:	87 8d       	ldd	r24, Z+31	; 0x1f
    21d4:	98 17       	cp	r25, r24
    21d6:	a8 f4       	brcc	.+42     	; 0x2202 <xQueueGenericSend+0x6e>
    21d8:	40 2f       	mov	r20, r16
    21da:	b5 01       	movw	r22, r10
    21dc:	c7 01       	movw	r24, r14
    21de:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <prvCopyDataToQueue>
    21e2:	f7 01       	movw	r30, r14
    21e4:	83 89       	ldd	r24, Z+19	; 0x13
    21e6:	88 23       	and	r24, r24
    21e8:	41 f0       	breq	.+16     	; 0x21fa <xQueueGenericSend+0x66>
    21ea:	c7 01       	movw	r24, r14
    21ec:	43 96       	adiw	r24, 0x13	; 19
    21ee:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <xTaskRemoveFromEventList>
    21f2:	81 30       	cpi	r24, 0x01	; 1
    21f4:	11 f4       	brne	.+4      	; 0x21fa <xQueueGenericSend+0x66>
    21f6:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <vPortYield>
    21fa:	0f 90       	pop	r0
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	56 c0       	rjmp	.+172    	; 0x22ae <xQueueGenericSend+0x11a>
    2202:	8e 81       	ldd	r24, Y+6	; 0x06
    2204:	9f 81       	ldd	r25, Y+7	; 0x07
    2206:	a8 85       	ldd	r26, Y+8	; 0x08
    2208:	b9 85       	ldd	r27, Y+9	; 0x09
    220a:	89 2b       	or	r24, r25
    220c:	8a 2b       	or	r24, r26
    220e:	8b 2b       	or	r24, r27
    2210:	21 f4       	brne	.+8      	; 0x221a <xQueueGenericSend+0x86>
    2212:	0f 90       	pop	r0
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	4a c0       	rjmp	.+148    	; 0x22ae <xQueueGenericSend+0x11a>
    221a:	11 11       	cpse	r17, r1
    221c:	05 c0       	rjmp	.+10     	; 0x2228 <xQueueGenericSend+0x94>
    221e:	ce 01       	movw	r24, r28
    2220:	01 96       	adiw	r24, 0x01	; 1
    2222:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <vTaskSetTimeOutState>
    2226:	11 e0       	ldi	r17, 0x01	; 1
    2228:	0f 90       	pop	r0
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	0e 94 26 14 	call	0x284c	; 0x284c <vTaskSuspendAll>
    2230:	0f b6       	in	r0, 0x3f	; 63
    2232:	f8 94       	cli
    2234:	0f 92       	push	r0
    2236:	f7 01       	movw	r30, r14
    2238:	81 a1       	ldd	r24, Z+33	; 0x21
    223a:	8f 3f       	cpi	r24, 0xFF	; 255
    223c:	09 f4       	brne	.+2      	; 0x2240 <xQueueGenericSend+0xac>
    223e:	11 a2       	std	Z+33, r1	; 0x21
    2240:	f7 01       	movw	r30, r14
    2242:	82 a1       	ldd	r24, Z+34	; 0x22
    2244:	8f 3f       	cpi	r24, 0xFF	; 255
    2246:	09 f4       	brne	.+2      	; 0x224a <xQueueGenericSend+0xb6>
    2248:	12 a2       	std	Z+34, r1	; 0x22
    224a:	0f 90       	pop	r0
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	be 01       	movw	r22, r28
    2250:	6a 5f       	subi	r22, 0xFA	; 250
    2252:	7f 4f       	sbci	r23, 0xFF	; 255
    2254:	ce 01       	movw	r24, r28
    2256:	01 96       	adiw	r24, 0x01	; 1
    2258:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <xTaskCheckForTimeOut>
    225c:	81 11       	cpse	r24, r1
    225e:	21 c0       	rjmp	.+66     	; 0x22a2 <xQueueGenericSend+0x10e>
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	0f 92       	push	r0
    2266:	f7 01       	movw	r30, r14
    2268:	96 8d       	ldd	r25, Z+30	; 0x1e
    226a:	0f 90       	pop	r0
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	87 8d       	ldd	r24, Z+31	; 0x1f
    2270:	98 13       	cpse	r25, r24
    2272:	11 c0       	rjmp	.+34     	; 0x2296 <xQueueGenericSend+0x102>
    2274:	4e 81       	ldd	r20, Y+6	; 0x06
    2276:	5f 81       	ldd	r21, Y+7	; 0x07
    2278:	68 85       	ldd	r22, Y+8	; 0x08
    227a:	79 85       	ldd	r23, Y+9	; 0x09
    227c:	c6 01       	movw	r24, r12
    227e:	0e 94 55 16 	call	0x2caa	; 0x2caa <vTaskPlaceOnEventList>
    2282:	c7 01       	movw	r24, r14
    2284:	0e 94 16 10 	call	0x202c	; 0x202c <prvUnlockQueue>
    2288:	0e 94 48 15 	call	0x2a90	; 0x2a90 <xTaskResumeAll>
    228c:	81 11       	cpse	r24, r1
    228e:	9c cf       	rjmp	.-200    	; 0x21c8 <xQueueGenericSend+0x34>
    2290:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <vPortYield>
    2294:	99 cf       	rjmp	.-206    	; 0x21c8 <xQueueGenericSend+0x34>
    2296:	c7 01       	movw	r24, r14
    2298:	0e 94 16 10 	call	0x202c	; 0x202c <prvUnlockQueue>
    229c:	0e 94 48 15 	call	0x2a90	; 0x2a90 <xTaskResumeAll>
    22a0:	93 cf       	rjmp	.-218    	; 0x21c8 <xQueueGenericSend+0x34>
    22a2:	c7 01       	movw	r24, r14
    22a4:	0e 94 16 10 	call	0x202c	; 0x202c <prvUnlockQueue>
    22a8:	0e 94 48 15 	call	0x2a90	; 0x2a90 <xTaskResumeAll>
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	29 96       	adiw	r28, 0x09	; 9
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	df 91       	pop	r29
    22b6:	cf 91       	pop	r28
    22b8:	1f 91       	pop	r17
    22ba:	0f 91       	pop	r16
    22bc:	ff 90       	pop	r15
    22be:	ef 90       	pop	r14
    22c0:	df 90       	pop	r13
    22c2:	cf 90       	pop	r12
    22c4:	bf 90       	pop	r11
    22c6:	af 90       	pop	r10
    22c8:	08 95       	ret

000022ca <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    22ca:	0f 93       	push	r16
    22cc:	1f 93       	push	r17
    22ce:	cf 93       	push	r28
    22d0:	df 93       	push	r29
    22d2:	8a 01       	movw	r16, r20
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    22d4:	fc 01       	movw	r30, r24
    22d6:	56 8d       	ldd	r21, Z+30	; 0x1e
    22d8:	37 8d       	ldd	r19, Z+31	; 0x1f
    22da:	53 17       	cp	r21, r19
    22dc:	c0 f4       	brcc	.+48     	; 0x230e <xQueueGenericSendFromISR+0x44>
    22de:	42 2f       	mov	r20, r18
    22e0:	ec 01       	movw	r28, r24
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    22e2:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    22e6:	8a a1       	ldd	r24, Y+34	; 0x22
    22e8:	8f 3f       	cpi	r24, 0xFF	; 255
    22ea:	69 f4       	brne	.+26     	; 0x2306 <xQueueGenericSendFromISR+0x3c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    22ec:	8b 89       	ldd	r24, Y+19	; 0x13
    22ee:	88 23       	and	r24, r24
    22f0:	81 f0       	breq	.+32     	; 0x2312 <xQueueGenericSendFromISR+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    22f2:	ce 01       	movw	r24, r28
    22f4:	43 96       	adiw	r24, 0x13	; 19
    22f6:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <xTaskRemoveFromEventList>
    22fa:	88 23       	and	r24, r24
    22fc:	61 f0       	breq	.+24     	; 0x2316 <xQueueGenericSendFromISR+0x4c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	f8 01       	movw	r30, r16
    2302:	80 83       	st	Z, r24
    2304:	09 c0       	rjmp	.+18     	; 0x2318 <xQueueGenericSendFromISR+0x4e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2306:	8f 5f       	subi	r24, 0xFF	; 255
    2308:	8a a3       	std	Y+34, r24	; 0x22
			}

			xReturn = pdPASS;
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	05 c0       	rjmp	.+10     	; 0x2318 <xQueueGenericSendFromISR+0x4e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	03 c0       	rjmp	.+6      	; 0x2318 <xQueueGenericSendFromISR+0x4e>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	01 c0       	rjmp	.+2      	; 0x2318 <xQueueGenericSendFromISR+0x4e>
    2316:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    2318:	df 91       	pop	r29
    231a:	cf 91       	pop	r28
    231c:	1f 91       	pop	r17
    231e:	0f 91       	pop	r16
    2320:	08 95       	ret

00002322 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    2322:	af 92       	push	r10
    2324:	bf 92       	push	r11
    2326:	cf 92       	push	r12
    2328:	df 92       	push	r13
    232a:	ef 92       	push	r14
    232c:	ff 92       	push	r15
    232e:	0f 93       	push	r16
    2330:	1f 93       	push	r17
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	29 97       	sbiw	r28, 0x09	; 9
    233c:	cd bf       	out	0x3d, r28	; 61
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	7c 01       	movw	r14, r24
    2342:	5b 01       	movw	r10, r22
    2344:	2e 83       	std	Y+6, r18	; 0x06
    2346:	3f 83       	std	Y+7, r19	; 0x07
    2348:	48 87       	std	Y+8, r20	; 0x08
    234a:	59 87       	std	Y+9, r21	; 0x09
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    234c:	10 e0       	ldi	r17, 0x00	; 0
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    234e:	6c 01       	movw	r12, r24
    2350:	83 e1       	ldi	r24, 0x13	; 19
    2352:	c8 0e       	add	r12, r24
    2354:	d1 1c       	adc	r13, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	f8 94       	cli
    235a:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    235c:	f7 01       	movw	r30, r14
    235e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2360:	88 23       	and	r24, r24
    2362:	99 f1       	breq	.+102    	; 0x23ca <xQueueGenericReceive+0xa8>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2364:	c6 80       	ldd	r12, Z+6	; 0x06
    2366:	d7 80       	ldd	r13, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2368:	b5 01       	movw	r22, r10
    236a:	c7 01       	movw	r24, r14
    236c:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2370:	01 11       	cpse	r16, r1
    2372:	1a c0       	rjmp	.+52     	; 0x23a8 <xQueueGenericReceive+0x86>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    2374:	f7 01       	movw	r30, r14
    2376:	86 8d       	ldd	r24, Z+30	; 0x1e
    2378:	81 50       	subi	r24, 0x01	; 1
    237a:	86 8f       	std	Z+30, r24	; 0x1e

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    237c:	80 81       	ld	r24, Z
    237e:	91 81       	ldd	r25, Z+1	; 0x01
    2380:	89 2b       	or	r24, r25
    2382:	29 f4       	brne	.+10     	; 0x238e <xQueueGenericReceive+0x6c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    2384:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <xTaskGetCurrentTaskHandle>
    2388:	f7 01       	movw	r30, r14
    238a:	82 83       	std	Z+2, r24	; 0x02
    238c:	93 83       	std	Z+3, r25	; 0x03
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    238e:	f7 01       	movw	r30, r14
    2390:	80 85       	ldd	r24, Z+8	; 0x08
    2392:	88 23       	and	r24, r24
    2394:	b1 f0       	breq	.+44     	; 0x23c2 <xQueueGenericReceive+0xa0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2396:	c7 01       	movw	r24, r14
    2398:	08 96       	adiw	r24, 0x08	; 8
    239a:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <xTaskRemoveFromEventList>
    239e:	81 30       	cpi	r24, 0x01	; 1
    23a0:	81 f4       	brne	.+32     	; 0x23c2 <xQueueGenericReceive+0xa0>
						{
							portYIELD_WITHIN_API();
    23a2:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <vPortYield>
    23a6:	0d c0       	rjmp	.+26     	; 0x23c2 <xQueueGenericReceive+0xa0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    23a8:	f7 01       	movw	r30, r14
    23aa:	c6 82       	std	Z+6, r12	; 0x06
    23ac:	d7 82       	std	Z+7, r13	; 0x07

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    23ae:	83 89       	ldd	r24, Z+19	; 0x13
    23b0:	88 23       	and	r24, r24
    23b2:	39 f0       	breq	.+14     	; 0x23c2 <xQueueGenericReceive+0xa0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    23b4:	c7 01       	movw	r24, r14
    23b6:	43 96       	adiw	r24, 0x13	; 19
    23b8:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <xTaskRemoveFromEventList>
    23bc:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    23be:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    23c2:	0f 90       	pop	r0
    23c4:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	62 c0       	rjmp	.+196    	; 0x248e <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    23ca:	8e 81       	ldd	r24, Y+6	; 0x06
    23cc:	9f 81       	ldd	r25, Y+7	; 0x07
    23ce:	a8 85       	ldd	r26, Y+8	; 0x08
    23d0:	b9 85       	ldd	r27, Y+9	; 0x09
    23d2:	89 2b       	or	r24, r25
    23d4:	8a 2b       	or	r24, r26
    23d6:	8b 2b       	or	r24, r27
    23d8:	21 f4       	brne	.+8      	; 0x23e2 <xQueueGenericReceive+0xc0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    23da:	0f 90       	pop	r0
    23dc:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	56 c0       	rjmp	.+172    	; 0x248e <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    23e2:	11 11       	cpse	r17, r1
    23e4:	05 c0       	rjmp	.+10     	; 0x23f0 <xQueueGenericReceive+0xce>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    23e6:	ce 01       	movw	r24, r28
    23e8:	01 96       	adiw	r24, 0x01	; 1
    23ea:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    23ee:	11 e0       	ldi	r17, 0x01	; 1
				}
			}
		}
		taskEXIT_CRITICAL();
    23f0:	0f 90       	pop	r0
    23f2:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    23f4:	0e 94 26 14 	call	0x284c	; 0x284c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	0f 92       	push	r0
    23fe:	f7 01       	movw	r30, r14
    2400:	81 a1       	ldd	r24, Z+33	; 0x21
    2402:	8f 3f       	cpi	r24, 0xFF	; 255
    2404:	09 f4       	brne	.+2      	; 0x2408 <xQueueGenericReceive+0xe6>
    2406:	11 a2       	std	Z+33, r1	; 0x21
    2408:	f7 01       	movw	r30, r14
    240a:	82 a1       	ldd	r24, Z+34	; 0x22
    240c:	8f 3f       	cpi	r24, 0xFF	; 255
    240e:	09 f4       	brne	.+2      	; 0x2412 <xQueueGenericReceive+0xf0>
    2410:	12 a2       	std	Z+34, r1	; 0x22
    2412:	0f 90       	pop	r0
    2414:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2416:	be 01       	movw	r22, r28
    2418:	6a 5f       	subi	r22, 0xFA	; 250
    241a:	7f 4f       	sbci	r23, 0xFF	; 255
    241c:	ce 01       	movw	r24, r28
    241e:	01 96       	adiw	r24, 0x01	; 1
    2420:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <xTaskCheckForTimeOut>
    2424:	81 11       	cpse	r24, r1
    2426:	2d c0       	rjmp	.+90     	; 0x2482 <xQueueGenericReceive+0x160>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    2428:	0f b6       	in	r0, 0x3f	; 63
    242a:	f8 94       	cli
    242c:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    242e:	f7 01       	movw	r30, r14
    2430:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    2432:	0f 90       	pop	r0
    2434:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2436:	81 11       	cpse	r24, r1
    2438:	1e c0       	rjmp	.+60     	; 0x2476 <xQueueGenericReceive+0x154>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    243a:	80 81       	ld	r24, Z
    243c:	91 81       	ldd	r25, Z+1	; 0x01
    243e:	89 2b       	or	r24, r25
    2440:	49 f4       	brne	.+18     	; 0x2454 <xQueueGenericReceive+0x132>
					{
						portENTER_CRITICAL();
    2442:	0f b6       	in	r0, 0x3f	; 63
    2444:	f8 94       	cli
    2446:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2448:	82 81       	ldd	r24, Z+2	; 0x02
    244a:	93 81       	ldd	r25, Z+3	; 0x03
    244c:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    2450:	0f 90       	pop	r0
    2452:	0f be       	out	0x3f, r0	; 63
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2454:	4e 81       	ldd	r20, Y+6	; 0x06
    2456:	5f 81       	ldd	r21, Y+7	; 0x07
    2458:	68 85       	ldd	r22, Y+8	; 0x08
    245a:	79 85       	ldd	r23, Y+9	; 0x09
    245c:	c6 01       	movw	r24, r12
    245e:	0e 94 55 16 	call	0x2caa	; 0x2caa <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2462:	c7 01       	movw	r24, r14
    2464:	0e 94 16 10 	call	0x202c	; 0x202c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2468:	0e 94 48 15 	call	0x2a90	; 0x2a90 <xTaskResumeAll>
    246c:	81 11       	cpse	r24, r1
    246e:	73 cf       	rjmp	.-282    	; 0x2356 <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
    2470:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <vPortYield>
    2474:	70 cf       	rjmp	.-288    	; 0x2356 <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2476:	c7 01       	movw	r24, r14
    2478:	0e 94 16 10 	call	0x202c	; 0x202c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    247c:	0e 94 48 15 	call	0x2a90	; 0x2a90 <xTaskResumeAll>
    2480:	6a cf       	rjmp	.-300    	; 0x2356 <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2482:	c7 01       	movw	r24, r14
    2484:	0e 94 16 10 	call	0x202c	; 0x202c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2488:	0e 94 48 15 	call	0x2a90	; 0x2a90 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    248c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    248e:	29 96       	adiw	r28, 0x09	; 9
    2490:	cd bf       	out	0x3d, r28	; 61
    2492:	de bf       	out	0x3e, r29	; 62
    2494:	df 91       	pop	r29
    2496:	cf 91       	pop	r28
    2498:	1f 91       	pop	r17
    249a:	0f 91       	pop	r16
    249c:	ff 90       	pop	r15
    249e:	ef 90       	pop	r14
    24a0:	df 90       	pop	r13
    24a2:	cf 90       	pop	r12
    24a4:	bf 90       	pop	r11
    24a6:	af 90       	pop	r10
    24a8:	08 95       	ret

000024aa <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    24aa:	0f 93       	push	r16
    24ac:	1f 93       	push	r17
    24ae:	cf 93       	push	r28
    24b0:	df 93       	push	r29
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    24b2:	fc 01       	movw	r30, r24
    24b4:	26 8d       	ldd	r18, Z+30	; 0x1e
    24b6:	22 23       	and	r18, r18
    24b8:	d9 f0       	breq	.+54     	; 0x24f0 <xQueueReceiveFromISR+0x46>
    24ba:	8a 01       	movw	r16, r20
    24bc:	ec 01       	movw	r28, r24
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    24be:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    24c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24c4:	81 50       	subi	r24, 0x01	; 1
    24c6:	8e 8f       	std	Y+30, r24	; 0x1e

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    24c8:	89 a1       	ldd	r24, Y+33	; 0x21
    24ca:	8f 3f       	cpi	r24, 0xFF	; 255
    24cc:	69 f4       	brne	.+26     	; 0x24e8 <xQueueReceiveFromISR+0x3e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    24ce:	88 85       	ldd	r24, Y+8	; 0x08
    24d0:	88 23       	and	r24, r24
    24d2:	81 f0       	breq	.+32     	; 0x24f4 <xQueueReceiveFromISR+0x4a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    24d4:	ce 01       	movw	r24, r28
    24d6:	08 96       	adiw	r24, 0x08	; 8
    24d8:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <xTaskRemoveFromEventList>
    24dc:	88 23       	and	r24, r24
    24de:	61 f0       	breq	.+24     	; 0x24f8 <xQueueReceiveFromISR+0x4e>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	f8 01       	movw	r30, r16
    24e4:	80 83       	st	Z, r24
    24e6:	09 c0       	rjmp	.+18     	; 0x24fa <xQueueReceiveFromISR+0x50>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    24e8:	8f 5f       	subi	r24, 0xFF	; 255
    24ea:	89 a3       	std	Y+33, r24	; 0x21
			}

			xReturn = pdPASS;
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	05 c0       	rjmp	.+10     	; 0x24fa <xQueueReceiveFromISR+0x50>
		}
		else
		{
			xReturn = pdFAIL;
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	03 c0       	rjmp	.+6      	; 0x24fa <xQueueReceiveFromISR+0x50>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
			}

			xReturn = pdPASS;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	01 c0       	rjmp	.+2      	; 0x24fa <xQueueReceiveFromISR+0x50>
    24f8:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    24fa:	df 91       	pop	r29
    24fc:	cf 91       	pop	r28
    24fe:	1f 91       	pop	r17
    2500:	0f 91       	pop	r16
    2502:	08 95       	ret

00002504 <uxQueueMessagesWaiting>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	f8 94       	cli
    2508:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    250a:	fc 01       	movw	r30, r24
    250c:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    250e:	0f 90       	pop	r0
    2510:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    2512:	08 95       	ret

00002514 <uxQueueMessagesWaitingFromISR>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    2514:	fc 01       	movw	r30, r24
    2516:	86 8d       	ldd	r24, Z+30	; 0x1e

	return uxReturn;
}
    2518:	08 95       	ret

0000251a <prvIdleTask>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    251a:	c2 e0       	ldi	r28, 0x02	; 2
    251c:	d2 e3       	ldi	r29, 0x32	; 50
    251e:	88 81       	ld	r24, Y
    2520:	82 30       	cpi	r24, 0x02	; 2
    2522:	e8 f3       	brcs	.-6      	; 0x251e <prvIdleTask+0x4>
    2524:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <vPortYield>
    2528:	fa cf       	rjmp	.-12     	; 0x251e <prvIdleTask+0x4>

0000252a <prvAddCurrentTaskToDelayedList>:
    252a:	cf 92       	push	r12
    252c:	df 92       	push	r13
    252e:	ef 92       	push	r14
    2530:	ff 92       	push	r15
    2532:	6b 01       	movw	r12, r22
    2534:	7c 01       	movw	r14, r24
    2536:	e0 91 2e 32 	lds	r30, 0x322E	; 0x80322e <pxCurrentTCB>
    253a:	f0 91 2f 32 	lds	r31, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
    253e:	62 83       	std	Z+2, r22	; 0x02
    2540:	73 83       	std	Z+3, r23	; 0x03
    2542:	84 83       	std	Z+4, r24	; 0x04
    2544:	95 83       	std	Z+5, r25	; 0x05
    2546:	80 91 d6 31 	lds	r24, 0x31D6	; 0x8031d6 <xTickCount>
    254a:	90 91 d7 31 	lds	r25, 0x31D7	; 0x8031d7 <xTickCount+0x1>
    254e:	a0 91 d8 31 	lds	r26, 0x31D8	; 0x8031d8 <xTickCount+0x2>
    2552:	b0 91 d9 31 	lds	r27, 0x31D9	; 0x8031d9 <xTickCount+0x3>
    2556:	c8 16       	cp	r12, r24
    2558:	d9 06       	cpc	r13, r25
    255a:	ea 06       	cpc	r14, r26
    255c:	fb 06       	cpc	r15, r27
    255e:	68 f4       	brcc	.+26     	; 0x257a <prvAddCurrentTaskToDelayedList+0x50>
    2560:	60 91 2e 32 	lds	r22, 0x322E	; 0x80322e <pxCurrentTCB>
    2564:	70 91 2f 32 	lds	r23, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
    2568:	80 91 e8 31 	lds	r24, 0x31E8	; 0x8031e8 <pxOverflowDelayedTaskList>
    256c:	90 91 e9 31 	lds	r25, 0x31E9	; 0x8031e9 <pxOverflowDelayedTaskList+0x1>
    2570:	6e 5f       	subi	r22, 0xFE	; 254
    2572:	7f 4f       	sbci	r23, 0xFF	; 255
    2574:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <vListInsert>
    2578:	21 c0       	rjmp	.+66     	; 0x25bc <prvAddCurrentTaskToDelayedList+0x92>
    257a:	60 91 2e 32 	lds	r22, 0x322E	; 0x80322e <pxCurrentTCB>
    257e:	70 91 2f 32 	lds	r23, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
    2582:	80 91 ea 31 	lds	r24, 0x31EA	; 0x8031ea <pxDelayedTaskList>
    2586:	90 91 eb 31 	lds	r25, 0x31EB	; 0x8031eb <pxDelayedTaskList+0x1>
    258a:	6e 5f       	subi	r22, 0xFE	; 254
    258c:	7f 4f       	sbci	r23, 0xFF	; 255
    258e:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <vListInsert>
    2592:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    2596:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    259a:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    259e:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    25a2:	c8 16       	cp	r12, r24
    25a4:	d9 06       	cpc	r13, r25
    25a6:	ea 06       	cpc	r14, r26
    25a8:	fb 06       	cpc	r15, r27
    25aa:	40 f4       	brcc	.+16     	; 0x25bc <prvAddCurrentTaskToDelayedList+0x92>
    25ac:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    25b0:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    25b4:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    25b8:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    25bc:	ff 90       	pop	r15
    25be:	ef 90       	pop	r14
    25c0:	df 90       	pop	r13
    25c2:	cf 90       	pop	r12
    25c4:	08 95       	ret

000025c6 <xTaskGenericCreate>:
    25c6:	4f 92       	push	r4
    25c8:	5f 92       	push	r5
    25ca:	6f 92       	push	r6
    25cc:	7f 92       	push	r7
    25ce:	8f 92       	push	r8
    25d0:	9f 92       	push	r9
    25d2:	af 92       	push	r10
    25d4:	bf 92       	push	r11
    25d6:	cf 92       	push	r12
    25d8:	df 92       	push	r13
    25da:	ef 92       	push	r14
    25dc:	ff 92       	push	r15
    25de:	0f 93       	push	r16
    25e0:	1f 93       	push	r17
    25e2:	cf 93       	push	r28
    25e4:	df 93       	push	r29
    25e6:	5c 01       	movw	r10, r24
    25e8:	4b 01       	movw	r8, r22
    25ea:	3a 01       	movw	r6, r20
    25ec:	29 01       	movw	r4, r18
    25ee:	88 e2       	ldi	r24, 0x28	; 40
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	0e 94 b6 0c 	call	0x196c	; 0x196c <pvPortMalloc>
    25f6:	ec 01       	movw	r28, r24
    25f8:	89 2b       	or	r24, r25
    25fa:	09 f4       	brne	.+2      	; 0x25fe <xTaskGenericCreate+0x38>
    25fc:	d4 c0       	rjmp	.+424    	; 0x27a6 <xTaskGenericCreate+0x1e0>
    25fe:	c1 14       	cp	r12, r1
    2600:	d1 04       	cpc	r13, r1
    2602:	09 f0       	breq	.+2      	; 0x2606 <xTaskGenericCreate+0x40>
    2604:	cc c0       	rjmp	.+408    	; 0x279e <xTaskGenericCreate+0x1d8>
    2606:	c3 01       	movw	r24, r6
    2608:	0e 94 b6 0c 	call	0x196c	; 0x196c <pvPortMalloc>
    260c:	8b 8f       	std	Y+27, r24	; 0x1b
    260e:	9c 8f       	std	Y+28, r25	; 0x1c
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	21 f4       	brne	.+8      	; 0x261c <xTaskGenericCreate+0x56>
    2614:	ce 01       	movw	r24, r28
    2616:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <vPortFree>
    261a:	c5 c0       	rjmp	.+394    	; 0x27a6 <xTaskGenericCreate+0x1e0>
    261c:	a3 01       	movw	r20, r6
    261e:	61 e1       	ldi	r22, 0x11	; 17
    2620:	70 e0       	ldi	r23, 0x00	; 0
    2622:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <memset>
    2626:	93 01       	movw	r18, r6
    2628:	21 50       	subi	r18, 0x01	; 1
    262a:	31 09       	sbc	r19, r1
    262c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    262e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2630:	3c 01       	movw	r6, r24
    2632:	62 0e       	add	r6, r18
    2634:	73 1e       	adc	r7, r19
    2636:	4a e0       	ldi	r20, 0x0A	; 10
    2638:	50 e0       	ldi	r21, 0x00	; 0
    263a:	b4 01       	movw	r22, r8
    263c:	ce 01       	movw	r24, r28
    263e:	4d 96       	adiw	r24, 0x1d	; 29
    2640:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <strncpy>
    2644:	1e a2       	std	Y+38, r1	; 0x26
    2646:	10 2f       	mov	r17, r16
    2648:	04 30       	cpi	r16, 0x04	; 4
    264a:	08 f0       	brcs	.+2      	; 0x264e <xTaskGenericCreate+0x88>
    264c:	13 e0       	ldi	r17, 0x03	; 3
    264e:	1a 8f       	std	Y+26, r17	; 0x1a
    2650:	1f a3       	std	Y+39, r17	; 0x27
    2652:	6e 01       	movw	r12, r28
    2654:	22 e0       	ldi	r18, 0x02	; 2
    2656:	c2 0e       	add	r12, r18
    2658:	d1 1c       	adc	r13, r1
    265a:	c6 01       	movw	r24, r12
    265c:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <vListInitialiseItem>
    2660:	ce 01       	movw	r24, r28
    2662:	0e 96       	adiw	r24, 0x0e	; 14
    2664:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <vListInitialiseItem>
    2668:	ca 87       	std	Y+10, r28	; 0x0a
    266a:	db 87       	std	Y+11, r29	; 0x0b
    266c:	84 e0       	ldi	r24, 0x04	; 4
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	a0 e0       	ldi	r26, 0x00	; 0
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	81 1b       	sub	r24, r17
    2676:	91 09       	sbc	r25, r1
    2678:	a1 09       	sbc	r26, r1
    267a:	b1 09       	sbc	r27, r1
    267c:	8e 87       	std	Y+14, r24	; 0x0e
    267e:	9f 87       	std	Y+15, r25	; 0x0f
    2680:	a8 8b       	std	Y+16, r26	; 0x10
    2682:	b9 8b       	std	Y+17, r27	; 0x11
    2684:	ce 8b       	std	Y+22, r28	; 0x16
    2686:	df 8b       	std	Y+23, r29	; 0x17
    2688:	a2 01       	movw	r20, r4
    268a:	b5 01       	movw	r22, r10
    268c:	c3 01       	movw	r24, r6
    268e:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <pxPortInitialiseStack>
    2692:	88 83       	st	Y, r24
    2694:	99 83       	std	Y+1, r25	; 0x01
    2696:	e1 14       	cp	r14, r1
    2698:	f1 04       	cpc	r15, r1
    269a:	19 f0       	breq	.+6      	; 0x26a2 <xTaskGenericCreate+0xdc>
    269c:	f7 01       	movw	r30, r14
    269e:	c0 83       	st	Z, r28
    26a0:	d1 83       	std	Z+1, r29	; 0x01
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	f8 94       	cli
    26a6:	0f 92       	push	r0
    26a8:	80 91 da 31 	lds	r24, 0x31DA	; 0x8031da <uxCurrentNumberOfTasks>
    26ac:	8f 5f       	subi	r24, 0xFF	; 255
    26ae:	80 93 da 31 	sts	0x31DA, r24	; 0x8031da <uxCurrentNumberOfTasks>
    26b2:	80 91 2e 32 	lds	r24, 0x322E	; 0x80322e <pxCurrentTCB>
    26b6:	90 91 2f 32 	lds	r25, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
    26ba:	89 2b       	or	r24, r25
    26bc:	89 f5       	brne	.+98     	; 0x2720 <xTaskGenericCreate+0x15a>
    26be:	c0 93 2e 32 	sts	0x322E, r28	; 0x80322e <pxCurrentTCB>
    26c2:	d0 93 2f 32 	sts	0x322F, r29	; 0x80322f <pxCurrentTCB+0x1>
    26c6:	80 91 da 31 	lds	r24, 0x31DA	; 0x8031da <uxCurrentNumberOfTasks>
    26ca:	81 30       	cpi	r24, 0x01	; 1
    26cc:	c1 f5       	brne	.+112    	; 0x273e <xTaskGenericCreate+0x178>
    26ce:	82 e0       	ldi	r24, 0x02	; 2
    26d0:	92 e3       	ldi	r25, 0x32	; 50
    26d2:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <vListInitialise>
    26d6:	8d e0       	ldi	r24, 0x0D	; 13
    26d8:	92 e3       	ldi	r25, 0x32	; 50
    26da:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <vListInitialise>
    26de:	88 e1       	ldi	r24, 0x18	; 24
    26e0:	92 e3       	ldi	r25, 0x32	; 50
    26e2:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <vListInitialise>
    26e6:	83 e2       	ldi	r24, 0x23	; 35
    26e8:	92 e3       	ldi	r25, 0x32	; 50
    26ea:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <vListInitialise>
    26ee:	87 ef       	ldi	r24, 0xF7	; 247
    26f0:	91 e3       	ldi	r25, 0x31	; 49
    26f2:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <vListInitialise>
    26f6:	8c ee       	ldi	r24, 0xEC	; 236
    26f8:	91 e3       	ldi	r25, 0x31	; 49
    26fa:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <vListInitialise>
    26fe:	8d ed       	ldi	r24, 0xDD	; 221
    2700:	91 e3       	ldi	r25, 0x31	; 49
    2702:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <vListInitialise>
    2706:	87 ef       	ldi	r24, 0xF7	; 247
    2708:	91 e3       	ldi	r25, 0x31	; 49
    270a:	80 93 ea 31 	sts	0x31EA, r24	; 0x8031ea <pxDelayedTaskList>
    270e:	90 93 eb 31 	sts	0x31EB, r25	; 0x8031eb <pxDelayedTaskList+0x1>
    2712:	8c ee       	ldi	r24, 0xEC	; 236
    2714:	91 e3       	ldi	r25, 0x31	; 49
    2716:	80 93 e8 31 	sts	0x31E8, r24	; 0x8031e8 <pxOverflowDelayedTaskList>
    271a:	90 93 e9 31 	sts	0x31E9, r25	; 0x8031e9 <pxOverflowDelayedTaskList+0x1>
    271e:	0f c0       	rjmp	.+30     	; 0x273e <xTaskGenericCreate+0x178>
    2720:	80 91 d3 31 	lds	r24, 0x31D3	; 0x8031d3 <xSchedulerRunning>
    2724:	81 11       	cpse	r24, r1
    2726:	0b c0       	rjmp	.+22     	; 0x273e <xTaskGenericCreate+0x178>
    2728:	e0 91 2e 32 	lds	r30, 0x322E	; 0x80322e <pxCurrentTCB>
    272c:	f0 91 2f 32 	lds	r31, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
    2730:	82 8d       	ldd	r24, Z+26	; 0x1a
    2732:	08 17       	cp	r16, r24
    2734:	20 f0       	brcs	.+8      	; 0x273e <xTaskGenericCreate+0x178>
    2736:	c0 93 2e 32 	sts	0x322E, r28	; 0x80322e <pxCurrentTCB>
    273a:	d0 93 2f 32 	sts	0x322F, r29	; 0x80322f <pxCurrentTCB+0x1>
    273e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2740:	90 91 d5 31 	lds	r25, 0x31D5	; 0x8031d5 <uxTopUsedPriority>
    2744:	98 17       	cp	r25, r24
    2746:	10 f4       	brcc	.+4      	; 0x274c <xTaskGenericCreate+0x186>
    2748:	80 93 d5 31 	sts	0x31D5, r24	; 0x8031d5 <uxTopUsedPriority>
    274c:	90 91 ce 31 	lds	r25, 0x31CE	; 0x8031ce <uxTaskNumber>
    2750:	9f 5f       	subi	r25, 0xFF	; 255
    2752:	90 93 ce 31 	sts	0x31CE, r25	; 0x8031ce <uxTaskNumber>
    2756:	90 91 d4 31 	lds	r25, 0x31D4	; 0x8031d4 <uxTopReadyPriority>
    275a:	98 17       	cp	r25, r24
    275c:	10 f4       	brcc	.+4      	; 0x2762 <xTaskGenericCreate+0x19c>
    275e:	80 93 d4 31 	sts	0x31D4, r24	; 0x8031d4 <uxTopReadyPriority>
    2762:	fb e0       	ldi	r31, 0x0B	; 11
    2764:	8f 9f       	mul	r24, r31
    2766:	c0 01       	movw	r24, r0
    2768:	11 24       	eor	r1, r1
    276a:	b6 01       	movw	r22, r12
    276c:	8e 5f       	subi	r24, 0xFE	; 254
    276e:	9d 4c       	sbci	r25, 0xCD	; 205
    2770:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <vListInsertEnd>
    2774:	0f 90       	pop	r0
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	80 91 d3 31 	lds	r24, 0x31D3	; 0x8031d3 <xSchedulerRunning>
    277c:	88 23       	and	r24, r24
    277e:	59 f0       	breq	.+22     	; 0x2796 <xTaskGenericCreate+0x1d0>
    2780:	e0 91 2e 32 	lds	r30, 0x322E	; 0x80322e <pxCurrentTCB>
    2784:	f0 91 2f 32 	lds	r31, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
    2788:	82 8d       	ldd	r24, Z+26	; 0x1a
    278a:	80 17       	cp	r24, r16
    278c:	30 f4       	brcc	.+12     	; 0x279a <xTaskGenericCreate+0x1d4>
    278e:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <vPortYield>
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	09 c0       	rjmp	.+18     	; 0x27a8 <xTaskGenericCreate+0x1e2>
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	07 c0       	rjmp	.+14     	; 0x27a8 <xTaskGenericCreate+0x1e2>
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	05 c0       	rjmp	.+10     	; 0x27a8 <xTaskGenericCreate+0x1e2>
    279e:	cb 8e       	std	Y+27, r12	; 0x1b
    27a0:	dc 8e       	std	Y+28, r13	; 0x1c
    27a2:	c6 01       	movw	r24, r12
    27a4:	3b cf       	rjmp	.-394    	; 0x261c <xTaskGenericCreate+0x56>
    27a6:	8f ef       	ldi	r24, 0xFF	; 255
    27a8:	df 91       	pop	r29
    27aa:	cf 91       	pop	r28
    27ac:	1f 91       	pop	r17
    27ae:	0f 91       	pop	r16
    27b0:	ff 90       	pop	r15
    27b2:	ef 90       	pop	r14
    27b4:	df 90       	pop	r13
    27b6:	cf 90       	pop	r12
    27b8:	bf 90       	pop	r11
    27ba:	af 90       	pop	r10
    27bc:	9f 90       	pop	r9
    27be:	8f 90       	pop	r8
    27c0:	7f 90       	pop	r7
    27c2:	6f 90       	pop	r6
    27c4:	5f 90       	pop	r5
    27c6:	4f 90       	pop	r4
    27c8:	08 95       	ret

000027ca <uxTaskPriorityGet>:
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	0f 92       	push	r0
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	21 f4       	brne	.+8      	; 0x27dc <uxTaskPriorityGet+0x12>
    27d4:	80 91 2e 32 	lds	r24, 0x322E	; 0x80322e <pxCurrentTCB>
    27d8:	90 91 2f 32 	lds	r25, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
    27dc:	0f 90       	pop	r0
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	fc 01       	movw	r30, r24
    27e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    27e4:	08 95       	ret

000027e6 <vTaskStartScheduler>:
    27e6:	af 92       	push	r10
    27e8:	bf 92       	push	r11
    27ea:	cf 92       	push	r12
    27ec:	df 92       	push	r13
    27ee:	ef 92       	push	r14
    27f0:	ff 92       	push	r15
    27f2:	0f 93       	push	r16
    27f4:	a1 2c       	mov	r10, r1
    27f6:	b1 2c       	mov	r11, r1
    27f8:	c1 2c       	mov	r12, r1
    27fa:	d1 2c       	mov	r13, r1
    27fc:	0f 2e       	mov	r0, r31
    27fe:	fb ed       	ldi	r31, 0xDB	; 219
    2800:	ef 2e       	mov	r14, r31
    2802:	f1 e3       	ldi	r31, 0x31	; 49
    2804:	ff 2e       	mov	r15, r31
    2806:	f0 2d       	mov	r31, r0
    2808:	00 e0       	ldi	r16, 0x00	; 0
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	44 e6       	ldi	r20, 0x64	; 100
    2810:	50 e0       	ldi	r21, 0x00	; 0
    2812:	63 e1       	ldi	r22, 0x13	; 19
    2814:	71 e2       	ldi	r23, 0x21	; 33
    2816:	8d e8       	ldi	r24, 0x8D	; 141
    2818:	92 e1       	ldi	r25, 0x12	; 18
    281a:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <xTaskGenericCreate>
    281e:	81 30       	cpi	r24, 0x01	; 1
    2820:	69 f4       	brne	.+26     	; 0x283c <vTaskStartScheduler+0x56>
    2822:	f8 94       	cli
    2824:	80 93 d3 31 	sts	0x31D3, r24	; 0x8031d3 <xSchedulerRunning>
    2828:	10 92 d6 31 	sts	0x31D6, r1	; 0x8031d6 <xTickCount>
    282c:	10 92 d7 31 	sts	0x31D7, r1	; 0x8031d7 <xTickCount+0x1>
    2830:	10 92 d8 31 	sts	0x31D8, r1	; 0x8031d8 <xTickCount+0x2>
    2834:	10 92 d9 31 	sts	0x31D9, r1	; 0x8031d9 <xTickCount+0x3>
    2838:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <xPortStartScheduler>
    283c:	0f 91       	pop	r16
    283e:	ff 90       	pop	r15
    2840:	ef 90       	pop	r14
    2842:	df 90       	pop	r13
    2844:	cf 90       	pop	r12
    2846:	bf 90       	pop	r11
    2848:	af 90       	pop	r10
    284a:	08 95       	ret

0000284c <vTaskSuspendAll>:
    284c:	80 91 d2 31 	lds	r24, 0x31D2	; 0x8031d2 <uxSchedulerSuspended>
    2850:	8f 5f       	subi	r24, 0xFF	; 255
    2852:	80 93 d2 31 	sts	0x31D2, r24	; 0x8031d2 <uxSchedulerSuspended>
    2856:	08 95       	ret

00002858 <xTaskGetTickCount>:
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	0f 92       	push	r0
    285e:	60 91 d6 31 	lds	r22, 0x31D6	; 0x8031d6 <xTickCount>
    2862:	70 91 d7 31 	lds	r23, 0x31D7	; 0x8031d7 <xTickCount+0x1>
    2866:	80 91 d8 31 	lds	r24, 0x31D8	; 0x8031d8 <xTickCount+0x2>
    286a:	90 91 d9 31 	lds	r25, 0x31D9	; 0x8031d9 <xTickCount+0x3>
    286e:	0f 90       	pop	r0
    2870:	0f be       	out	0x3f, r0	; 63
    2872:	08 95       	ret

00002874 <pcTaskGetTaskName>:
    2874:	00 97       	sbiw	r24, 0x00	; 0
    2876:	21 f4       	brne	.+8      	; 0x2880 <pcTaskGetTaskName+0xc>
    2878:	80 91 2e 32 	lds	r24, 0x322E	; 0x80322e <pxCurrentTCB>
    287c:	90 91 2f 32 	lds	r25, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
    2880:	4d 96       	adiw	r24, 0x1d	; 29
    2882:	08 95       	ret

00002884 <xTaskGetIdleTaskHandle>:
    2884:	80 91 db 31 	lds	r24, 0x31DB	; 0x8031db <xIdleTaskHandle>
    2888:	90 91 dc 31 	lds	r25, 0x31DC	; 0x8031dc <xIdleTaskHandle+0x1>
    288c:	08 95       	ret

0000288e <vTaskIncrementTick>:
    288e:	ff 92       	push	r15
    2890:	0f 93       	push	r16
    2892:	1f 93       	push	r17
    2894:	cf 93       	push	r28
    2896:	df 93       	push	r29
    2898:	80 91 d2 31 	lds	r24, 0x31D2	; 0x8031d2 <uxSchedulerSuspended>
    289c:	81 11       	cpse	r24, r1
    289e:	ed c0       	rjmp	.+474    	; 0x2a7a <vTaskIncrementTick+0x1ec>
    28a0:	80 91 d6 31 	lds	r24, 0x31D6	; 0x8031d6 <xTickCount>
    28a4:	90 91 d7 31 	lds	r25, 0x31D7	; 0x8031d7 <xTickCount+0x1>
    28a8:	a0 91 d8 31 	lds	r26, 0x31D8	; 0x8031d8 <xTickCount+0x2>
    28ac:	b0 91 d9 31 	lds	r27, 0x31D9	; 0x8031d9 <xTickCount+0x3>
    28b0:	01 96       	adiw	r24, 0x01	; 1
    28b2:	a1 1d       	adc	r26, r1
    28b4:	b1 1d       	adc	r27, r1
    28b6:	80 93 d6 31 	sts	0x31D6, r24	; 0x8031d6 <xTickCount>
    28ba:	90 93 d7 31 	sts	0x31D7, r25	; 0x8031d7 <xTickCount+0x1>
    28be:	a0 93 d8 31 	sts	0x31D8, r26	; 0x8031d8 <xTickCount+0x2>
    28c2:	b0 93 d9 31 	sts	0x31D9, r27	; 0x8031d9 <xTickCount+0x3>
    28c6:	80 91 d6 31 	lds	r24, 0x31D6	; 0x8031d6 <xTickCount>
    28ca:	90 91 d7 31 	lds	r25, 0x31D7	; 0x8031d7 <xTickCount+0x1>
    28ce:	a0 91 d8 31 	lds	r26, 0x31D8	; 0x8031d8 <xTickCount+0x2>
    28d2:	b0 91 d9 31 	lds	r27, 0x31D9	; 0x8031d9 <xTickCount+0x3>
    28d6:	89 2b       	or	r24, r25
    28d8:	8a 2b       	or	r24, r26
    28da:	8b 2b       	or	r24, r27
    28dc:	f1 f5       	brne	.+124    	; 0x295a <vTaskIncrementTick+0xcc>
    28de:	80 91 ea 31 	lds	r24, 0x31EA	; 0x8031ea <pxDelayedTaskList>
    28e2:	90 91 eb 31 	lds	r25, 0x31EB	; 0x8031eb <pxDelayedTaskList+0x1>
    28e6:	20 91 e8 31 	lds	r18, 0x31E8	; 0x8031e8 <pxOverflowDelayedTaskList>
    28ea:	30 91 e9 31 	lds	r19, 0x31E9	; 0x8031e9 <pxOverflowDelayedTaskList+0x1>
    28ee:	20 93 ea 31 	sts	0x31EA, r18	; 0x8031ea <pxDelayedTaskList>
    28f2:	30 93 eb 31 	sts	0x31EB, r19	; 0x8031eb <pxDelayedTaskList+0x1>
    28f6:	80 93 e8 31 	sts	0x31E8, r24	; 0x8031e8 <pxOverflowDelayedTaskList>
    28fa:	90 93 e9 31 	sts	0x31E9, r25	; 0x8031e9 <pxOverflowDelayedTaskList+0x1>
    28fe:	80 91 cf 31 	lds	r24, 0x31CF	; 0x8031cf <xNumOfOverflows>
    2902:	8f 5f       	subi	r24, 0xFF	; 255
    2904:	80 93 cf 31 	sts	0x31CF, r24	; 0x8031cf <xNumOfOverflows>
    2908:	e0 91 ea 31 	lds	r30, 0x31EA	; 0x8031ea <pxDelayedTaskList>
    290c:	f0 91 eb 31 	lds	r31, 0x31EB	; 0x8031eb <pxDelayedTaskList+0x1>
    2910:	80 81       	ld	r24, Z
    2912:	81 11       	cpse	r24, r1
    2914:	0c c0       	rjmp	.+24     	; 0x292e <vTaskIncrementTick+0xa0>
    2916:	8f ef       	ldi	r24, 0xFF	; 255
    2918:	9f ef       	ldi	r25, 0xFF	; 255
    291a:	dc 01       	movw	r26, r24
    291c:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2920:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2924:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2928:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    292c:	16 c0       	rjmp	.+44     	; 0x295a <vTaskIncrementTick+0xcc>
    292e:	e0 91 ea 31 	lds	r30, 0x31EA	; 0x8031ea <pxDelayedTaskList>
    2932:	f0 91 eb 31 	lds	r31, 0x31EB	; 0x8031eb <pxDelayedTaskList+0x1>
    2936:	07 80       	ldd	r0, Z+7	; 0x07
    2938:	f0 85       	ldd	r31, Z+8	; 0x08
    293a:	e0 2d       	mov	r30, r0
    293c:	00 84       	ldd	r0, Z+8	; 0x08
    293e:	f1 85       	ldd	r31, Z+9	; 0x09
    2940:	e0 2d       	mov	r30, r0
    2942:	82 81       	ldd	r24, Z+2	; 0x02
    2944:	93 81       	ldd	r25, Z+3	; 0x03
    2946:	a4 81       	ldd	r26, Z+4	; 0x04
    2948:	b5 81       	ldd	r27, Z+5	; 0x05
    294a:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    294e:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2952:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2956:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    295a:	40 91 d6 31 	lds	r20, 0x31D6	; 0x8031d6 <xTickCount>
    295e:	50 91 d7 31 	lds	r21, 0x31D7	; 0x8031d7 <xTickCount+0x1>
    2962:	60 91 d8 31 	lds	r22, 0x31D8	; 0x8031d8 <xTickCount+0x2>
    2966:	70 91 d9 31 	lds	r23, 0x31D9	; 0x8031d9 <xTickCount+0x3>
    296a:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    296e:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    2972:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    2976:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    297a:	48 17       	cp	r20, r24
    297c:	59 07       	cpc	r21, r25
    297e:	6a 07       	cpc	r22, r26
    2980:	7b 07       	cpc	r23, r27
    2982:	08 f4       	brcc	.+2      	; 0x2986 <vTaskIncrementTick+0xf8>
    2984:	7f c0       	rjmp	.+254    	; 0x2a84 <vTaskIncrementTick+0x1f6>
    2986:	e0 91 ea 31 	lds	r30, 0x31EA	; 0x8031ea <pxDelayedTaskList>
    298a:	f0 91 eb 31 	lds	r31, 0x31EB	; 0x8031eb <pxDelayedTaskList+0x1>
    298e:	80 81       	ld	r24, Z
    2990:	88 23       	and	r24, r24
    2992:	f9 f0       	breq	.+62     	; 0x29d2 <vTaskIncrementTick+0x144>
    2994:	e0 91 ea 31 	lds	r30, 0x31EA	; 0x8031ea <pxDelayedTaskList>
    2998:	f0 91 eb 31 	lds	r31, 0x31EB	; 0x8031eb <pxDelayedTaskList+0x1>
    299c:	07 80       	ldd	r0, Z+7	; 0x07
    299e:	f0 85       	ldd	r31, Z+8	; 0x08
    29a0:	e0 2d       	mov	r30, r0
    29a2:	c0 85       	ldd	r28, Z+8	; 0x08
    29a4:	d1 85       	ldd	r29, Z+9	; 0x09
    29a6:	8a 81       	ldd	r24, Y+2	; 0x02
    29a8:	9b 81       	ldd	r25, Y+3	; 0x03
    29aa:	ac 81       	ldd	r26, Y+4	; 0x04
    29ac:	bd 81       	ldd	r27, Y+5	; 0x05
    29ae:	40 91 d6 31 	lds	r20, 0x31D6	; 0x8031d6 <xTickCount>
    29b2:	50 91 d7 31 	lds	r21, 0x31D7	; 0x8031d7 <xTickCount+0x1>
    29b6:	60 91 d8 31 	lds	r22, 0x31D8	; 0x8031d8 <xTickCount+0x2>
    29ba:	70 91 d9 31 	lds	r23, 0x31D9	; 0x8031d9 <xTickCount+0x3>
    29be:	48 17       	cp	r20, r24
    29c0:	59 07       	cpc	r21, r25
    29c2:	6a 07       	cpc	r22, r26
    29c4:	7b 07       	cpc	r23, r27
    29c6:	58 f1       	brcs	.+86     	; 0x2a1e <vTaskIncrementTick+0x190>
    29c8:	0f 2e       	mov	r0, r31
    29ca:	fb e0       	ldi	r31, 0x0B	; 11
    29cc:	ff 2e       	mov	r15, r31
    29ce:	f0 2d       	mov	r31, r0
    29d0:	2f c0       	rjmp	.+94     	; 0x2a30 <vTaskIncrementTick+0x1a2>
    29d2:	8f ef       	ldi	r24, 0xFF	; 255
    29d4:	9f ef       	ldi	r25, 0xFF	; 255
    29d6:	dc 01       	movw	r26, r24
    29d8:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    29dc:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    29e0:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    29e4:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    29e8:	4d c0       	rjmp	.+154    	; 0x2a84 <vTaskIncrementTick+0x1f6>
    29ea:	e0 91 ea 31 	lds	r30, 0x31EA	; 0x8031ea <pxDelayedTaskList>
    29ee:	f0 91 eb 31 	lds	r31, 0x31EB	; 0x8031eb <pxDelayedTaskList+0x1>
    29f2:	07 80       	ldd	r0, Z+7	; 0x07
    29f4:	f0 85       	ldd	r31, Z+8	; 0x08
    29f6:	e0 2d       	mov	r30, r0
    29f8:	c0 85       	ldd	r28, Z+8	; 0x08
    29fa:	d1 85       	ldd	r29, Z+9	; 0x09
    29fc:	8a 81       	ldd	r24, Y+2	; 0x02
    29fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2a00:	ac 81       	ldd	r26, Y+4	; 0x04
    2a02:	bd 81       	ldd	r27, Y+5	; 0x05
    2a04:	40 91 d6 31 	lds	r20, 0x31D6	; 0x8031d6 <xTickCount>
    2a08:	50 91 d7 31 	lds	r21, 0x31D7	; 0x8031d7 <xTickCount+0x1>
    2a0c:	60 91 d8 31 	lds	r22, 0x31D8	; 0x8031d8 <xTickCount+0x2>
    2a10:	70 91 d9 31 	lds	r23, 0x31D9	; 0x8031d9 <xTickCount+0x3>
    2a14:	48 17       	cp	r20, r24
    2a16:	59 07       	cpc	r21, r25
    2a18:	6a 07       	cpc	r22, r26
    2a1a:	7b 07       	cpc	r23, r27
    2a1c:	48 f4       	brcc	.+18     	; 0x2a30 <vTaskIncrementTick+0x1a2>
    2a1e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2a22:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2a26:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2a2a:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    2a2e:	2a c0       	rjmp	.+84     	; 0x2a84 <vTaskIncrementTick+0x1f6>
    2a30:	8e 01       	movw	r16, r28
    2a32:	0e 5f       	subi	r16, 0xFE	; 254
    2a34:	1f 4f       	sbci	r17, 0xFF	; 255
    2a36:	c8 01       	movw	r24, r16
    2a38:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <vListRemove>
    2a3c:	88 8d       	ldd	r24, Y+24	; 0x18
    2a3e:	99 8d       	ldd	r25, Y+25	; 0x19
    2a40:	89 2b       	or	r24, r25
    2a42:	21 f0       	breq	.+8      	; 0x2a4c <vTaskIncrementTick+0x1be>
    2a44:	ce 01       	movw	r24, r28
    2a46:	0e 96       	adiw	r24, 0x0e	; 14
    2a48:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <vListRemove>
    2a4c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a4e:	90 91 d4 31 	lds	r25, 0x31D4	; 0x8031d4 <uxTopReadyPriority>
    2a52:	98 17       	cp	r25, r24
    2a54:	10 f4       	brcc	.+4      	; 0x2a5a <vTaskIncrementTick+0x1cc>
    2a56:	80 93 d4 31 	sts	0x31D4, r24	; 0x8031d4 <uxTopReadyPriority>
    2a5a:	f8 9e       	mul	r15, r24
    2a5c:	c0 01       	movw	r24, r0
    2a5e:	11 24       	eor	r1, r1
    2a60:	b8 01       	movw	r22, r16
    2a62:	8e 5f       	subi	r24, 0xFE	; 254
    2a64:	9d 4c       	sbci	r25, 0xCD	; 205
    2a66:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <vListInsertEnd>
    2a6a:	e0 91 ea 31 	lds	r30, 0x31EA	; 0x8031ea <pxDelayedTaskList>
    2a6e:	f0 91 eb 31 	lds	r31, 0x31EB	; 0x8031eb <pxDelayedTaskList+0x1>
    2a72:	80 81       	ld	r24, Z
    2a74:	81 11       	cpse	r24, r1
    2a76:	b9 cf       	rjmp	.-142    	; 0x29ea <vTaskIncrementTick+0x15c>
    2a78:	ac cf       	rjmp	.-168    	; 0x29d2 <vTaskIncrementTick+0x144>
    2a7a:	80 91 d1 31 	lds	r24, 0x31D1	; 0x8031d1 <uxMissedTicks>
    2a7e:	8f 5f       	subi	r24, 0xFF	; 255
    2a80:	80 93 d1 31 	sts	0x31D1, r24	; 0x8031d1 <uxMissedTicks>
    2a84:	df 91       	pop	r29
    2a86:	cf 91       	pop	r28
    2a88:	1f 91       	pop	r17
    2a8a:	0f 91       	pop	r16
    2a8c:	ff 90       	pop	r15
    2a8e:	08 95       	ret

00002a90 <xTaskResumeAll>:
    2a90:	cf 92       	push	r12
    2a92:	df 92       	push	r13
    2a94:	ef 92       	push	r14
    2a96:	ff 92       	push	r15
    2a98:	0f 93       	push	r16
    2a9a:	1f 93       	push	r17
    2a9c:	cf 93       	push	r28
    2a9e:	df 93       	push	r29
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	f8 94       	cli
    2aa4:	0f 92       	push	r0
    2aa6:	80 91 d2 31 	lds	r24, 0x31D2	; 0x8031d2 <uxSchedulerSuspended>
    2aaa:	81 50       	subi	r24, 0x01	; 1
    2aac:	80 93 d2 31 	sts	0x31D2, r24	; 0x8031d2 <uxSchedulerSuspended>
    2ab0:	80 91 d2 31 	lds	r24, 0x31D2	; 0x8031d2 <uxSchedulerSuspended>
    2ab4:	81 11       	cpse	r24, r1
    2ab6:	60 c0       	rjmp	.+192    	; 0x2b78 <xTaskResumeAll+0xe8>
    2ab8:	80 91 da 31 	lds	r24, 0x31DA	; 0x8031da <uxCurrentNumberOfTasks>
    2abc:	81 11       	cpse	r24, r1
    2abe:	2c c0       	rjmp	.+88     	; 0x2b18 <xTaskResumeAll+0x88>
    2ac0:	5e c0       	rjmp	.+188    	; 0x2b7e <xTaskResumeAll+0xee>
    2ac2:	d7 01       	movw	r26, r14
    2ac4:	17 96       	adiw	r26, 0x07	; 7
    2ac6:	ed 91       	ld	r30, X+
    2ac8:	fc 91       	ld	r31, X
    2aca:	18 97       	sbiw	r26, 0x08	; 8
    2acc:	c0 85       	ldd	r28, Z+8	; 0x08
    2ace:	d1 85       	ldd	r29, Z+9	; 0x09
    2ad0:	ce 01       	movw	r24, r28
    2ad2:	0e 96       	adiw	r24, 0x0e	; 14
    2ad4:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <vListRemove>
    2ad8:	8e 01       	movw	r16, r28
    2ada:	0e 5f       	subi	r16, 0xFE	; 254
    2adc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ade:	c8 01       	movw	r24, r16
    2ae0:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <vListRemove>
    2ae4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ae6:	90 91 d4 31 	lds	r25, 0x31D4	; 0x8031d4 <uxTopReadyPriority>
    2aea:	98 17       	cp	r25, r24
    2aec:	10 f4       	brcc	.+4      	; 0x2af2 <xTaskResumeAll+0x62>
    2aee:	80 93 d4 31 	sts	0x31D4, r24	; 0x8031d4 <uxTopReadyPriority>
    2af2:	d8 9e       	mul	r13, r24
    2af4:	c0 01       	movw	r24, r0
    2af6:	11 24       	eor	r1, r1
    2af8:	b8 01       	movw	r22, r16
    2afa:	8e 5f       	subi	r24, 0xFE	; 254
    2afc:	9d 4c       	sbci	r25, 0xCD	; 205
    2afe:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <vListInsertEnd>
    2b02:	e0 91 2e 32 	lds	r30, 0x322E	; 0x80322e <pxCurrentTCB>
    2b06:	f0 91 2f 32 	lds	r31, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
    2b0a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b0c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b0e:	98 17       	cp	r25, r24
    2b10:	70 f0       	brcs	.+28     	; 0x2b2e <xTaskResumeAll+0x9e>
    2b12:	cc 24       	eor	r12, r12
    2b14:	c3 94       	inc	r12
    2b16:	0b c0       	rjmp	.+22     	; 0x2b2e <xTaskResumeAll+0x9e>
    2b18:	c1 2c       	mov	r12, r1
    2b1a:	0f 2e       	mov	r0, r31
    2b1c:	fd ed       	ldi	r31, 0xDD	; 221
    2b1e:	ef 2e       	mov	r14, r31
    2b20:	f1 e3       	ldi	r31, 0x31	; 49
    2b22:	ff 2e       	mov	r15, r31
    2b24:	f0 2d       	mov	r31, r0
    2b26:	0f 2e       	mov	r0, r31
    2b28:	fb e0       	ldi	r31, 0x0B	; 11
    2b2a:	df 2e       	mov	r13, r31
    2b2c:	f0 2d       	mov	r31, r0
    2b2e:	f7 01       	movw	r30, r14
    2b30:	80 81       	ld	r24, Z
    2b32:	81 11       	cpse	r24, r1
    2b34:	c6 cf       	rjmp	.-116    	; 0x2ac2 <xTaskResumeAll+0x32>
    2b36:	80 91 d1 31 	lds	r24, 0x31D1	; 0x8031d1 <uxMissedTicks>
    2b3a:	88 23       	and	r24, r24
    2b3c:	81 f0       	breq	.+32     	; 0x2b5e <xTaskResumeAll+0xce>
    2b3e:	80 91 d1 31 	lds	r24, 0x31D1	; 0x8031d1 <uxMissedTicks>
    2b42:	88 23       	and	r24, r24
    2b44:	99 f0       	breq	.+38     	; 0x2b6c <xTaskResumeAll+0xdc>
    2b46:	0e 94 47 14 	call	0x288e	; 0x288e <vTaskIncrementTick>
    2b4a:	80 91 d1 31 	lds	r24, 0x31D1	; 0x8031d1 <uxMissedTicks>
    2b4e:	81 50       	subi	r24, 0x01	; 1
    2b50:	80 93 d1 31 	sts	0x31D1, r24	; 0x8031d1 <uxMissedTicks>
    2b54:	80 91 d1 31 	lds	r24, 0x31D1	; 0x8031d1 <uxMissedTicks>
    2b58:	81 11       	cpse	r24, r1
    2b5a:	f5 cf       	rjmp	.-22     	; 0x2b46 <xTaskResumeAll+0xb6>
    2b5c:	07 c0       	rjmp	.+14     	; 0x2b6c <xTaskResumeAll+0xdc>
    2b5e:	f1 e0       	ldi	r31, 0x01	; 1
    2b60:	cf 16       	cp	r12, r31
    2b62:	21 f0       	breq	.+8      	; 0x2b6c <xTaskResumeAll+0xdc>
    2b64:	80 91 d0 31 	lds	r24, 0x31D0	; 0x8031d0 <xMissedYield>
    2b68:	81 30       	cpi	r24, 0x01	; 1
    2b6a:	41 f4       	brne	.+16     	; 0x2b7c <xTaskResumeAll+0xec>
    2b6c:	10 92 d0 31 	sts	0x31D0, r1	; 0x8031d0 <xMissedYield>
    2b70:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <vPortYield>
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	03 c0       	rjmp	.+6      	; 0x2b7e <xTaskResumeAll+0xee>
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	01 c0       	rjmp	.+2      	; 0x2b7e <xTaskResumeAll+0xee>
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	0f 90       	pop	r0
    2b80:	0f be       	out	0x3f, r0	; 63
    2b82:	df 91       	pop	r29
    2b84:	cf 91       	pop	r28
    2b86:	1f 91       	pop	r17
    2b88:	0f 91       	pop	r16
    2b8a:	ff 90       	pop	r15
    2b8c:	ef 90       	pop	r14
    2b8e:	df 90       	pop	r13
    2b90:	cf 90       	pop	r12
    2b92:	08 95       	ret

00002b94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    2b94:	cf 92       	push	r12
    2b96:	df 92       	push	r13
    2b98:	ef 92       	push	r14
    2b9a:	ff 92       	push	r15
    2b9c:	6b 01       	movw	r12, r22
    2b9e:	7c 01       	movw	r14, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    2ba0:	67 2b       	or	r22, r23
    2ba2:	68 2b       	or	r22, r24
    2ba4:	69 2b       	or	r22, r25
    2ba6:	e9 f0       	breq	.+58     	; 0x2be2 <vTaskDelay+0x4e>
		{
			vTaskSuspendAll();
    2ba8:	0e 94 26 14 	call	0x284c	; 0x284c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2bac:	80 91 d6 31 	lds	r24, 0x31D6	; 0x8031d6 <xTickCount>
    2bb0:	90 91 d7 31 	lds	r25, 0x31D7	; 0x8031d7 <xTickCount+0x1>
    2bb4:	a0 91 d8 31 	lds	r26, 0x31D8	; 0x8031d8 <xTickCount+0x2>
    2bb8:	b0 91 d9 31 	lds	r27, 0x31D9	; 0x8031d9 <xTickCount+0x3>
    2bbc:	c8 0e       	add	r12, r24
    2bbe:	d9 1e       	adc	r13, r25
    2bc0:	ea 1e       	adc	r14, r26
    2bc2:	fb 1e       	adc	r15, r27

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2bc4:	80 91 2e 32 	lds	r24, 0x322E	; 0x80322e <pxCurrentTCB>
    2bc8:	90 91 2f 32 	lds	r25, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
    2bcc:	02 96       	adiw	r24, 0x02	; 2
    2bce:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2bd2:	c7 01       	movw	r24, r14
    2bd4:	b6 01       	movw	r22, r12
    2bd6:	0e 94 95 12 	call	0x252a	; 0x252a <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    2bda:	0e 94 48 15 	call	0x2a90	; 0x2a90 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2bde:	81 11       	cpse	r24, r1
    2be0:	02 c0       	rjmp	.+4      	; 0x2be6 <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    2be2:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <vPortYield>
		}
	}
    2be6:	ff 90       	pop	r15
    2be8:	ef 90       	pop	r14
    2bea:	df 90       	pop	r13
    2bec:	cf 90       	pop	r12
    2bee:	08 95       	ret

00002bf0 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    2bf0:	80 91 d2 31 	lds	r24, 0x31D2	; 0x8031d2 <uxSchedulerSuspended>
    2bf4:	81 11       	cpse	r24, r1
    2bf6:	0c c0       	rjmp	.+24     	; 0x2c10 <vTaskSwitchContext+0x20>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    2bf8:	e0 91 d4 31 	lds	r30, 0x31D4	; 0x8031d4 <uxTopReadyPriority>
    2bfc:	4b e0       	ldi	r20, 0x0B	; 11
    2bfe:	e4 9f       	mul	r30, r20
    2c00:	f0 01       	movw	r30, r0
    2c02:	11 24       	eor	r1, r1
    2c04:	ee 5f       	subi	r30, 0xFE	; 254
    2c06:	fd 4c       	sbci	r31, 0xCD	; 205
    2c08:	80 81       	ld	r24, Z
    2c0a:	88 23       	and	r24, r24
    2c0c:	29 f0       	breq	.+10     	; 0x2c18 <vTaskSwitchContext+0x28>
    2c0e:	14 c0       	rjmp	.+40     	; 0x2c38 <vTaskSwitchContext+0x48>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	80 93 d0 31 	sts	0x31D0, r24	; 0x8031d0 <xMissedYield>
    2c16:	08 95       	ret
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    2c18:	9b e0       	ldi	r25, 0x0B	; 11
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    2c1a:	80 91 d4 31 	lds	r24, 0x31D4	; 0x8031d4 <uxTopReadyPriority>
    2c1e:	81 50       	subi	r24, 0x01	; 1
    2c20:	80 93 d4 31 	sts	0x31D4, r24	; 0x8031d4 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    2c24:	e0 91 d4 31 	lds	r30, 0x31D4	; 0x8031d4 <uxTopReadyPriority>
    2c28:	9e 9f       	mul	r25, r30
    2c2a:	f0 01       	movw	r30, r0
    2c2c:	11 24       	eor	r1, r1
    2c2e:	ee 5f       	subi	r30, 0xFE	; 254
    2c30:	fd 4c       	sbci	r31, 0xCD	; 205
    2c32:	80 81       	ld	r24, Z
    2c34:	88 23       	and	r24, r24
    2c36:	89 f3       	breq	.-30     	; 0x2c1a <vTaskSwitchContext+0x2a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    2c38:	80 91 d4 31 	lds	r24, 0x31D4	; 0x8031d4 <uxTopReadyPriority>
    2c3c:	28 2f       	mov	r18, r24
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	4b e0       	ldi	r20, 0x0B	; 11
    2c42:	84 9f       	mul	r24, r20
    2c44:	c0 01       	movw	r24, r0
    2c46:	11 24       	eor	r1, r1
    2c48:	dc 01       	movw	r26, r24
    2c4a:	ae 5f       	subi	r26, 0xFE	; 254
    2c4c:	bd 4c       	sbci	r27, 0xCD	; 205
    2c4e:	11 96       	adiw	r26, 0x01	; 1
    2c50:	ed 91       	ld	r30, X+
    2c52:	fc 91       	ld	r31, X
    2c54:	12 97       	sbiw	r26, 0x02	; 2
    2c56:	04 80       	ldd	r0, Z+4	; 0x04
    2c58:	f5 81       	ldd	r31, Z+5	; 0x05
    2c5a:	e0 2d       	mov	r30, r0
    2c5c:	11 96       	adiw	r26, 0x01	; 1
    2c5e:	ed 93       	st	X+, r30
    2c60:	fc 93       	st	X, r31
    2c62:	12 97       	sbiw	r26, 0x02	; 2
    2c64:	8b 5f       	subi	r24, 0xFB	; 251
    2c66:	9d 4c       	sbci	r25, 0xCD	; 205
    2c68:	e8 17       	cp	r30, r24
    2c6a:	f9 07       	cpc	r31, r25
    2c6c:	61 f4       	brne	.+24     	; 0x2c86 <vTaskSwitchContext+0x96>
    2c6e:	84 81       	ldd	r24, Z+4	; 0x04
    2c70:	95 81       	ldd	r25, Z+5	; 0x05
    2c72:	4b e0       	ldi	r20, 0x0B	; 11
    2c74:	42 9f       	mul	r20, r18
    2c76:	f0 01       	movw	r30, r0
    2c78:	43 9f       	mul	r20, r19
    2c7a:	f0 0d       	add	r31, r0
    2c7c:	11 24       	eor	r1, r1
    2c7e:	ee 5f       	subi	r30, 0xFE	; 254
    2c80:	fd 4c       	sbci	r31, 0xCD	; 205
    2c82:	81 83       	std	Z+1, r24	; 0x01
    2c84:	92 83       	std	Z+2, r25	; 0x02
    2c86:	8b e0       	ldi	r24, 0x0B	; 11
    2c88:	82 9f       	mul	r24, r18
    2c8a:	f0 01       	movw	r30, r0
    2c8c:	83 9f       	mul	r24, r19
    2c8e:	f0 0d       	add	r31, r0
    2c90:	11 24       	eor	r1, r1
    2c92:	ee 5f       	subi	r30, 0xFE	; 254
    2c94:	fd 4c       	sbci	r31, 0xCD	; 205
    2c96:	01 80       	ldd	r0, Z+1	; 0x01
    2c98:	f2 81       	ldd	r31, Z+2	; 0x02
    2c9a:	e0 2d       	mov	r30, r0
    2c9c:	80 85       	ldd	r24, Z+8	; 0x08
    2c9e:	91 85       	ldd	r25, Z+9	; 0x09
    2ca0:	80 93 2e 32 	sts	0x322E, r24	; 0x80322e <pxCurrentTCB>
    2ca4:	90 93 2f 32 	sts	0x322F, r25	; 0x80322f <pxCurrentTCB+0x1>
    2ca8:	08 95       	ret

00002caa <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    2caa:	cf 92       	push	r12
    2cac:	df 92       	push	r13
    2cae:	ef 92       	push	r14
    2cb0:	ff 92       	push	r15
    2cb2:	6a 01       	movw	r12, r20
    2cb4:	7b 01       	movw	r14, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    2cb6:	60 91 2e 32 	lds	r22, 0x322E	; 0x80322e <pxCurrentTCB>
    2cba:	70 91 2f 32 	lds	r23, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
    2cbe:	62 5f       	subi	r22, 0xF2	; 242
    2cc0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc2:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2cc6:	80 91 2e 32 	lds	r24, 0x322E	; 0x80322e <pxCurrentTCB>
    2cca:	90 91 2f 32 	lds	r25, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
    2cce:	02 96       	adiw	r24, 0x02	; 2
    2cd0:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    2cd4:	80 91 d6 31 	lds	r24, 0x31D6	; 0x8031d6 <xTickCount>
    2cd8:	90 91 d7 31 	lds	r25, 0x31D7	; 0x8031d7 <xTickCount+0x1>
    2cdc:	a0 91 d8 31 	lds	r26, 0x31D8	; 0x8031d8 <xTickCount+0x2>
    2ce0:	b0 91 d9 31 	lds	r27, 0x31D9	; 0x8031d9 <xTickCount+0x3>
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    2ce4:	bc 01       	movw	r22, r24
    2ce6:	cd 01       	movw	r24, r26
    2ce8:	6c 0d       	add	r22, r12
    2cea:	7d 1d       	adc	r23, r13
    2cec:	8e 1d       	adc	r24, r14
    2cee:	9f 1d       	adc	r25, r15
    2cf0:	0e 94 95 12 	call	0x252a	; 0x252a <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    2cf4:	ff 90       	pop	r15
    2cf6:	ef 90       	pop	r14
    2cf8:	df 90       	pop	r13
    2cfa:	cf 90       	pop	r12
    2cfc:	08 95       	ret

00002cfe <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    2cfe:	0f 93       	push	r16
    2d00:	1f 93       	push	r17
    2d02:	cf 93       	push	r28
    2d04:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2d06:	dc 01       	movw	r26, r24
    2d08:	17 96       	adiw	r26, 0x07	; 7
    2d0a:	ed 91       	ld	r30, X+
    2d0c:	fc 91       	ld	r31, X
    2d0e:	18 97       	sbiw	r26, 0x08	; 8
    2d10:	c0 85       	ldd	r28, Z+8	; 0x08
    2d12:	d1 85       	ldd	r29, Z+9	; 0x09
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    2d14:	8e 01       	movw	r16, r28
    2d16:	02 5f       	subi	r16, 0xF2	; 242
    2d18:	1f 4f       	sbci	r17, 0xFF	; 255
    2d1a:	c8 01       	movw	r24, r16
    2d1c:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2d20:	80 91 d2 31 	lds	r24, 0x31D2	; 0x8031d2 <uxSchedulerSuspended>
    2d24:	81 11       	cpse	r24, r1
    2d26:	16 c0       	rjmp	.+44     	; 0x2d54 <xTaskRemoveFromEventList+0x56>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    2d28:	0c 50       	subi	r16, 0x0C	; 12
    2d2a:	11 09       	sbc	r17, r1
    2d2c:	c8 01       	movw	r24, r16
    2d2e:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    2d32:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d34:	90 91 d4 31 	lds	r25, 0x31D4	; 0x8031d4 <uxTopReadyPriority>
    2d38:	98 17       	cp	r25, r24
    2d3a:	10 f4       	brcc	.+4      	; 0x2d40 <xTaskRemoveFromEventList+0x42>
    2d3c:	80 93 d4 31 	sts	0x31D4, r24	; 0x8031d4 <uxTopReadyPriority>
    2d40:	bb e0       	ldi	r27, 0x0B	; 11
    2d42:	8b 9f       	mul	r24, r27
    2d44:	c0 01       	movw	r24, r0
    2d46:	11 24       	eor	r1, r1
    2d48:	b8 01       	movw	r22, r16
    2d4a:	8e 5f       	subi	r24, 0xFE	; 254
    2d4c:	9d 4c       	sbci	r25, 0xCD	; 205
    2d4e:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <vListInsertEnd>
    2d52:	05 c0       	rjmp	.+10     	; 0x2d5e <xTaskRemoveFromEventList+0x60>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2d54:	b8 01       	movw	r22, r16
    2d56:	8d ed       	ldi	r24, 0xDD	; 221
    2d58:	91 e3       	ldi	r25, 0x31	; 49
    2d5a:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2d5e:	e0 91 2e 32 	lds	r30, 0x322E	; 0x80322e <pxCurrentTCB>
    2d62:	f0 91 2f 32 	lds	r31, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2d6a:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d6c:	29 17       	cp	r18, r25
    2d6e:	08 f4       	brcc	.+2      	; 0x2d72 <xTaskRemoveFromEventList+0x74>
    2d70:	80 e0       	ldi	r24, 0x00	; 0
}
    2d72:	df 91       	pop	r29
    2d74:	cf 91       	pop	r28
    2d76:	1f 91       	pop	r17
    2d78:	0f 91       	pop	r16
    2d7a:	08 95       	ret

00002d7c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2d7c:	20 91 cf 31 	lds	r18, 0x31CF	; 0x8031cf <xNumOfOverflows>
    2d80:	fc 01       	movw	r30, r24
    2d82:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    2d84:	40 91 d6 31 	lds	r20, 0x31D6	; 0x8031d6 <xTickCount>
    2d88:	50 91 d7 31 	lds	r21, 0x31D7	; 0x8031d7 <xTickCount+0x1>
    2d8c:	60 91 d8 31 	lds	r22, 0x31D8	; 0x8031d8 <xTickCount+0x2>
    2d90:	70 91 d9 31 	lds	r23, 0x31D9	; 0x8031d9 <xTickCount+0x3>
    2d94:	41 83       	std	Z+1, r20	; 0x01
    2d96:	52 83       	std	Z+2, r21	; 0x02
    2d98:	63 83       	std	Z+3, r22	; 0x03
    2d9a:	74 83       	std	Z+4, r23	; 0x04
    2d9c:	08 95       	ret

00002d9e <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    2d9e:	8f 92       	push	r8
    2da0:	9f 92       	push	r9
    2da2:	af 92       	push	r10
    2da4:	bf 92       	push	r11
    2da6:	cf 92       	push	r12
    2da8:	df 92       	push	r13
    2daa:	ef 92       	push	r14
    2dac:	ff 92       	push	r15
    2dae:	0f 93       	push	r16
    2db0:	1f 93       	push	r17
    2db2:	cf 93       	push	r28
    2db4:	df 93       	push	r29
    2db6:	fc 01       	movw	r30, r24
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    2db8:	0f b6       	in	r0, 0x3f	; 63
    2dba:	f8 94       	cli
    2dbc:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    2dbe:	80 91 cf 31 	lds	r24, 0x31CF	; 0x8031cf <xNumOfOverflows>
    2dc2:	90 81       	ld	r25, Z
    2dc4:	98 17       	cp	r25, r24
    2dc6:	89 f0       	breq	.+34     	; 0x2dea <xTaskCheckForTimeOut+0x4c>
    2dc8:	80 91 d6 31 	lds	r24, 0x31D6	; 0x8031d6 <xTickCount>
    2dcc:	90 91 d7 31 	lds	r25, 0x31D7	; 0x8031d7 <xTickCount+0x1>
    2dd0:	a0 91 d8 31 	lds	r26, 0x31D8	; 0x8031d8 <xTickCount+0x2>
    2dd4:	b0 91 d9 31 	lds	r27, 0x31D9	; 0x8031d9 <xTickCount+0x3>
    2dd8:	01 81       	ldd	r16, Z+1	; 0x01
    2dda:	12 81       	ldd	r17, Z+2	; 0x02
    2ddc:	23 81       	ldd	r18, Z+3	; 0x03
    2dde:	34 81       	ldd	r19, Z+4	; 0x04
    2de0:	80 17       	cp	r24, r16
    2de2:	91 07       	cpc	r25, r17
    2de4:	a2 07       	cpc	r26, r18
    2de6:	b3 07       	cpc	r27, r19
    2de8:	a8 f5       	brcc	.+106    	; 0x2e54 <xTaskCheckForTimeOut+0xb6>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    2dea:	80 91 d6 31 	lds	r24, 0x31D6	; 0x8031d6 <xTickCount>
    2dee:	90 91 d7 31 	lds	r25, 0x31D7	; 0x8031d7 <xTickCount+0x1>
    2df2:	a0 91 d8 31 	lds	r26, 0x31D8	; 0x8031d8 <xTickCount+0x2>
    2df6:	b0 91 d9 31 	lds	r27, 0x31D9	; 0x8031d9 <xTickCount+0x3>
    2dfa:	c1 80       	ldd	r12, Z+1	; 0x01
    2dfc:	d2 80       	ldd	r13, Z+2	; 0x02
    2dfe:	e3 80       	ldd	r14, Z+3	; 0x03
    2e00:	f4 80       	ldd	r15, Z+4	; 0x04
    2e02:	eb 01       	movw	r28, r22
    2e04:	08 81       	ld	r16, Y
    2e06:	19 81       	ldd	r17, Y+1	; 0x01
    2e08:	2a 81       	ldd	r18, Y+2	; 0x02
    2e0a:	3b 81       	ldd	r19, Y+3	; 0x03
    2e0c:	8c 19       	sub	r24, r12
    2e0e:	9d 09       	sbc	r25, r13
    2e10:	ae 09       	sbc	r26, r14
    2e12:	bf 09       	sbc	r27, r15
    2e14:	80 17       	cp	r24, r16
    2e16:	91 07       	cpc	r25, r17
    2e18:	a2 07       	cpc	r26, r18
    2e1a:	b3 07       	cpc	r27, r19
    2e1c:	e8 f4       	brcc	.+58     	; 0x2e58 <xTaskCheckForTimeOut+0xba>
    2e1e:	cf 01       	movw	r24, r30
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    2e20:	80 90 d6 31 	lds	r8, 0x31D6	; 0x8031d6 <xTickCount>
    2e24:	90 90 d7 31 	lds	r9, 0x31D7	; 0x8031d7 <xTickCount+0x1>
    2e28:	a0 90 d8 31 	lds	r10, 0x31D8	; 0x8031d8 <xTickCount+0x2>
    2e2c:	b0 90 d9 31 	lds	r11, 0x31D9	; 0x8031d9 <xTickCount+0x3>
    2e30:	b5 01       	movw	r22, r10
    2e32:	a4 01       	movw	r20, r8
    2e34:	4c 19       	sub	r20, r12
    2e36:	5d 09       	sbc	r21, r13
    2e38:	6e 09       	sbc	r22, r14
    2e3a:	7f 09       	sbc	r23, r15
    2e3c:	04 1b       	sub	r16, r20
    2e3e:	15 0b       	sbc	r17, r21
    2e40:	26 0b       	sbc	r18, r22
    2e42:	37 0b       	sbc	r19, r23
    2e44:	08 83       	st	Y, r16
    2e46:	19 83       	std	Y+1, r17	; 0x01
    2e48:	2a 83       	std	Y+2, r18	; 0x02
    2e4a:	3b 83       	std	Y+3, r19	; 0x03
			vTaskSetTimeOutState( pxTimeOut );
    2e4c:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	03 c0       	rjmp	.+6      	; 0x2e5a <xTaskCheckForTimeOut+0xbc>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	01 c0       	rjmp	.+2      	; 0x2e5a <xTaskCheckForTimeOut+0xbc>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    2e58:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    2e5a:	0f 90       	pop	r0
    2e5c:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    2e5e:	df 91       	pop	r29
    2e60:	cf 91       	pop	r28
    2e62:	1f 91       	pop	r17
    2e64:	0f 91       	pop	r16
    2e66:	ff 90       	pop	r15
    2e68:	ef 90       	pop	r14
    2e6a:	df 90       	pop	r13
    2e6c:	cf 90       	pop	r12
    2e6e:	bf 90       	pop	r11
    2e70:	af 90       	pop	r10
    2e72:	9f 90       	pop	r9
    2e74:	8f 90       	pop	r8
    2e76:	08 95       	ret

00002e78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	80 93 d0 31 	sts	0x31D0, r24	; 0x8031d0 <xMissedYield>
    2e7e:	08 95       	ret

00002e80 <uxTaskGetStackHighWaterMark>:
	{
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    2e80:	00 97       	sbiw	r24, 0x00	; 0
    2e82:	21 f4       	brne	.+8      	; 0x2e8c <uxTaskGetStackHighWaterMark+0xc>
    2e84:	80 91 2e 32 	lds	r24, 0x322E	; 0x80322e <pxCurrentTCB>
    2e88:	90 91 2f 32 	lds	r25, 0x322F	; 0x80322f <pxCurrentTCB+0x1>

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	5b 96       	adiw	r26, 0x1b	; 27
    2e90:	ed 91       	ld	r30, X+
    2e92:	fc 91       	ld	r31, X
    2e94:	5c 97       	sbiw	r26, 0x1c	; 28

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    2e96:	80 81       	ld	r24, Z
    2e98:	81 31       	cpi	r24, 0x11	; 17
    2e9a:	41 f4       	brne	.+16     	; 0x2eac <uxTaskGetStackHighWaterMark+0x2c>
    2e9c:	31 96       	adiw	r30, 0x01	; 1
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
    2ea2:	01 96       	adiw	r24, 0x01	; 1

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    2ea4:	21 91       	ld	r18, Z+
    2ea6:	21 31       	cpi	r18, 0x11	; 17
    2ea8:	e1 f3       	breq	.-8      	; 0x2ea2 <uxTaskGetStackHighWaterMark+0x22>
    2eaa:	08 95       	ret

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	90 e0       	ldi	r25, 0x00	; 0
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    2eb0:	08 95       	ret

00002eb2 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    2eb2:	80 91 2e 32 	lds	r24, 0x322E	; 0x80322e <pxCurrentTCB>
    2eb6:	90 91 2f 32 	lds	r25, 0x322F	; 0x80322f <pxCurrentTCB+0x1>

		return xReturn;
	}
    2eba:	08 95       	ret

00002ebc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    2ebc:	0f 93       	push	r16
    2ebe:	1f 93       	push	r17
    2ec0:	cf 93       	push	r28
    2ec2:	df 93       	push	r29
    2ec4:	fc 01       	movw	r30, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    2ec6:	22 8d       	ldd	r18, Z+26	; 0x1a
    2ec8:	a0 91 2e 32 	lds	r26, 0x322E	; 0x80322e <pxCurrentTCB>
    2ecc:	b0 91 2f 32 	lds	r27, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
    2ed0:	5a 96       	adiw	r26, 0x1a	; 26
    2ed2:	8c 91       	ld	r24, X
    2ed4:	28 17       	cp	r18, r24
    2ed6:	08 f0       	brcs	.+2      	; 0x2eda <vTaskPriorityInherit+0x1e>
    2ed8:	41 c0       	rjmp	.+130    	; 0x2f5c <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    2eda:	a0 91 2e 32 	lds	r26, 0x322E	; 0x80322e <pxCurrentTCB>
    2ede:	b0 91 2f 32 	lds	r27, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
    2ee2:	5a 96       	adiw	r26, 0x1a	; 26
    2ee4:	3c 91       	ld	r19, X
    2ee6:	84 e0       	ldi	r24, 0x04	; 4
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	a0 e0       	ldi	r26, 0x00	; 0
    2eec:	b0 e0       	ldi	r27, 0x00	; 0
    2eee:	83 1b       	sub	r24, r19
    2ef0:	91 09       	sbc	r25, r1
    2ef2:	a1 09       	sbc	r26, r1
    2ef4:	b1 09       	sbc	r27, r1
    2ef6:	86 87       	std	Z+14, r24	; 0x0e
    2ef8:	97 87       	std	Z+15, r25	; 0x0f
    2efa:	a0 8b       	std	Z+16, r26	; 0x10
    2efc:	b1 8b       	std	Z+17, r27	; 0x11

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    2efe:	8b e0       	ldi	r24, 0x0B	; 11
    2f00:	28 9f       	mul	r18, r24
    2f02:	90 01       	movw	r18, r0
    2f04:	11 24       	eor	r1, r1
    2f06:	2e 5f       	subi	r18, 0xFE	; 254
    2f08:	3d 4c       	sbci	r19, 0xCD	; 205
    2f0a:	84 85       	ldd	r24, Z+12	; 0x0c
    2f0c:	95 85       	ldd	r25, Z+13	; 0x0d
    2f0e:	82 17       	cp	r24, r18
    2f10:	93 07       	cpc	r25, r19
    2f12:	e9 f4       	brne	.+58     	; 0x2f4e <vTaskPriorityInherit+0x92>
    2f14:	8f 01       	movw	r16, r30
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    2f16:	ef 01       	movw	r28, r30
    2f18:	22 96       	adiw	r28, 0x02	; 2
    2f1a:	ce 01       	movw	r24, r28
    2f1c:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    2f20:	e0 91 2e 32 	lds	r30, 0x322E	; 0x80322e <pxCurrentTCB>
    2f24:	f0 91 2f 32 	lds	r31, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
    2f28:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f2a:	f8 01       	movw	r30, r16
    2f2c:	82 8f       	std	Z+26, r24	; 0x1a
				prvAddTaskToReadyQueue( pxTCB );
    2f2e:	90 91 d4 31 	lds	r25, 0x31D4	; 0x8031d4 <uxTopReadyPriority>
    2f32:	98 17       	cp	r25, r24
    2f34:	10 f4       	brcc	.+4      	; 0x2f3a <vTaskPriorityInherit+0x7e>
    2f36:	80 93 d4 31 	sts	0x31D4, r24	; 0x8031d4 <uxTopReadyPriority>
    2f3a:	fb e0       	ldi	r31, 0x0B	; 11
    2f3c:	8f 9f       	mul	r24, r31
    2f3e:	c0 01       	movw	r24, r0
    2f40:	11 24       	eor	r1, r1
    2f42:	be 01       	movw	r22, r28
    2f44:	8e 5f       	subi	r24, 0xFE	; 254
    2f46:	9d 4c       	sbci	r25, 0xCD	; 205
    2f48:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <vListInsertEnd>
    2f4c:	07 c0       	rjmp	.+14     	; 0x2f5c <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    2f4e:	a0 91 2e 32 	lds	r26, 0x322E	; 0x80322e <pxCurrentTCB>
    2f52:	b0 91 2f 32 	lds	r27, 0x322F	; 0x80322f <pxCurrentTCB+0x1>
    2f56:	5a 96       	adiw	r26, 0x1a	; 26
    2f58:	8c 91       	ld	r24, X
    2f5a:	82 8f       	std	Z+26, r24	; 0x1a
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    2f5c:	df 91       	pop	r29
    2f5e:	cf 91       	pop	r28
    2f60:	1f 91       	pop	r17
    2f62:	0f 91       	pop	r16
    2f64:	08 95       	ret

00002f66 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    2f66:	0f 93       	push	r16
    2f68:	1f 93       	push	r17
    2f6a:	cf 93       	push	r28
    2f6c:	df 93       	push	r29
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    2f6e:	00 97       	sbiw	r24, 0x00	; 0
    2f70:	49 f1       	breq	.+82     	; 0x2fc4 <vTaskPriorityDisinherit+0x5e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2f72:	fc 01       	movw	r30, r24
    2f74:	32 8d       	ldd	r19, Z+26	; 0x1a
    2f76:	27 a1       	ldd	r18, Z+39	; 0x27
    2f78:	32 17       	cp	r19, r18
    2f7a:	21 f1       	breq	.+72     	; 0x2fc4 <vTaskPriorityDisinherit+0x5e>
    2f7c:	ec 01       	movw	r28, r24
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    2f7e:	8c 01       	movw	r16, r24
    2f80:	0e 5f       	subi	r16, 0xFE	; 254
    2f82:	1f 4f       	sbci	r17, 0xFF	; 255
    2f84:	c8 01       	movw	r24, r16
    2f86:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    2f8a:	8f a1       	ldd	r24, Y+39	; 0x27
    2f8c:	8a 8f       	std	Y+26, r24	; 0x1a
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    2f8e:	44 e0       	ldi	r20, 0x04	; 4
    2f90:	50 e0       	ldi	r21, 0x00	; 0
    2f92:	60 e0       	ldi	r22, 0x00	; 0
    2f94:	70 e0       	ldi	r23, 0x00	; 0
    2f96:	48 1b       	sub	r20, r24
    2f98:	51 09       	sbc	r21, r1
    2f9a:	61 09       	sbc	r22, r1
    2f9c:	71 09       	sbc	r23, r1
    2f9e:	4e 87       	std	Y+14, r20	; 0x0e
    2fa0:	5f 87       	std	Y+15, r21	; 0x0f
    2fa2:	68 8b       	std	Y+16, r22	; 0x10
    2fa4:	79 8b       	std	Y+17, r23	; 0x11
				prvAddTaskToReadyQueue( pxTCB );
    2fa6:	90 91 d4 31 	lds	r25, 0x31D4	; 0x8031d4 <uxTopReadyPriority>
    2faa:	98 17       	cp	r25, r24
    2fac:	10 f4       	brcc	.+4      	; 0x2fb2 <vTaskPriorityDisinherit+0x4c>
    2fae:	80 93 d4 31 	sts	0x31D4, r24	; 0x8031d4 <uxTopReadyPriority>
    2fb2:	fb e0       	ldi	r31, 0x0B	; 11
    2fb4:	8f 9f       	mul	r24, r31
    2fb6:	c0 01       	movw	r24, r0
    2fb8:	11 24       	eor	r1, r1
    2fba:	b8 01       	movw	r22, r16
    2fbc:	8e 5f       	subi	r24, 0xFE	; 254
    2fbe:	9d 4c       	sbci	r25, 0xCD	; 205
    2fc0:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <vListInsertEnd>
			}
		}
	}
    2fc4:	df 91       	pop	r29
    2fc6:	cf 91       	pop	r28
    2fc8:	1f 91       	pop	r17
    2fca:	0f 91       	pop	r16
    2fcc:	08 95       	ret

00002fce <_ZN8frt_task22_call_users_run_methodEPS_>:
 *  the scheduler.
 *  @param p_task A pointer to the task (this task) whose run method is to be called
 */

void frt_task::_call_users_run_method (frt_task* p_task)
{
    2fce:	ec 01       	movw	r28, r24
	// If we're not using setup() and loop(), call the user's run() function instead.
	// This version is more similar to the typical RTOS implementation but not quite
	// as easy to use for execution time profiling
	#else
		// This is where the user's run() method is actually called
		p_task->run ();
    2fd0:	e8 81       	ld	r30, Y
    2fd2:	f9 81       	ldd	r31, Y+1	; 0x01
    2fd4:	01 90       	ld	r0, Z+
    2fd6:	f0 81       	ld	r31, Z
    2fd8:	e0 2d       	mov	r30, r0
    2fda:	19 95       	eicall
		void* temp_handle = p_task->handle;
		p_task->handle = 0;
		vTaskDelete (temp_handle);
	// If task deletion is disabled, set this task's handle to 0 but don't delete task
	#else
		p_task->handle = 0;
    2fdc:	1a 82       	std	Y+2, r1	; 0x02
    2fde:	1b 82       	std	Y+3, r1	; 0x03

	// If task deletion is not enabled, we get here if the task run method has exited 
	// (which it shouldn't have, though). 
	for (;;)
	{
		vTaskDelay (portMAX_DELAY);
    2fe0:	6f ef       	ldi	r22, 0xFF	; 255
    2fe2:	7f ef       	ldi	r23, 0xFF	; 255
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <vTaskDelay>
    2fea:	fa cf       	rjmp	.-12     	; 0x2fe0 <_ZN8frt_task22_call_users_run_methodEPS_+0x12>

00002fec <_ZN8frt_task13transition_toEh>:
 *  help with debugging.
 *  @param new_state The state to which we will transition
 */
void frt_task::transition_to (uint8_t new_state)
{
	state = new_state;
    2fec:	fc 01       	movw	r30, r24
    2fee:	64 87       	std	Z+12, r22	; 0x0c
			*p_serial << tick_res_time () << ":" << (char*)(pcTaskGetTaskName (handle))
					<< ":" << previous_state << PMS ("->") << state << endl;
		}
	#endif // TRANSITION_TRACE

	previous_state = state;
    2ff0:	65 87       	std	Z+13, r22	; 0x0d
    2ff2:	08 95       	ret

00002ff4 <_ZN8frt_taskC1EPKchjP8emstream>:
 *                      (default: configMINIMAL_STACK_SIZE)
 *  @param p_ser_dev Pointer to a serial device (port, radio, SD card, etc.) which can
 *                   be used by this task to communicate (default: NULL)
 */

frt_task::frt_task (const char* a_name, 
    2ff4:	4f 92       	push	r4
    2ff6:	5f 92       	push	r5
    2ff8:	6f 92       	push	r6
    2ffa:	7f 92       	push	r7
    2ffc:	8f 92       	push	r8
    2ffe:	9f 92       	push	r9
    3000:	af 92       	push	r10
    3002:	bf 92       	push	r11
    3004:	cf 92       	push	r12
    3006:	df 92       	push	r13
    3008:	ef 92       	push	r14
    300a:	ff 92       	push	r15
    300c:	0f 93       	push	r16
    300e:	1f 93       	push	r17
    3010:	cf 93       	push	r28
    3012:	df 93       	push	r29
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
    3018:	2a 97       	sbiw	r28, 0x0a	; 10
    301a:	cd bf       	out	0x3d, r28	; 61
    301c:	de bf       	out	0x3e, r29	; 62
    301e:	4c 01       	movw	r8, r24
    3020:	29 01       	movw	r4, r18
    3022:	38 01       	movw	r6, r16
					unsigned portBASE_TYPE a_priority, 
					size_t a_stack_size,
					emstream* p_ser_dev
					)
    3024:	8c e1       	ldi	r24, 0x1C	; 28
    3026:	91 e2       	ldi	r25, 0x21	; 33
    3028:	f4 01       	movw	r30, r8
    302a:	80 83       	st	Z, r24
    302c:	91 83       	std	Z+1, r25	; 0x01
	// Make sure the user doesn't send an excessively long task name to xTaskCreate()
	// by copying at most (configMAX_TASK_NAME_LEN - 1) characters and putting the
	// terminating null character at the end of the string
	char temp_name[configMAX_TASK_NAME_LEN];
	uint8_t index = 0;
	while (*a_name && index < (configMAX_TASK_NAME_LEN - 1))
    302e:	fb 01       	movw	r30, r22
    3030:	80 81       	ld	r24, Z
    3032:	88 23       	and	r24, r24
    3034:	69 f0       	breq	.+26     	; 0x3050 <_ZN8frt_taskC1EPKchjP8emstream+0x5c>
    3036:	de 01       	movw	r26, r28
    3038:	11 96       	adiw	r26, 0x01	; 1
    303a:	31 96       	adiw	r30, 0x01	; 1
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	02 c0       	rjmp	.+4      	; 0x3044 <_ZN8frt_taskC1EPKchjP8emstream+0x50>
    3040:	99 30       	cpi	r25, 0x09	; 9
    3042:	39 f0       	breq	.+14     	; 0x3052 <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
	{
		temp_name[index++] = *a_name++;
    3044:	9f 5f       	subi	r25, 0xFF	; 255
    3046:	8d 93       	st	X+, r24
	// Make sure the user doesn't send an excessively long task name to xTaskCreate()
	// by copying at most (configMAX_TASK_NAME_LEN - 1) characters and putting the
	// terminating null character at the end of the string
	char temp_name[configMAX_TASK_NAME_LEN];
	uint8_t index = 0;
	while (*a_name && index < (configMAX_TASK_NAME_LEN - 1))
    3048:	81 91       	ld	r24, Z+
    304a:	81 11       	cpse	r24, r1
    304c:	f9 cf       	rjmp	.-14     	; 0x3040 <_ZN8frt_taskC1EPKchjP8emstream+0x4c>
    304e:	01 c0       	rjmp	.+2      	; 0x3052 <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
{
	// Make sure the user doesn't send an excessively long task name to xTaskCreate()
	// by copying at most (configMAX_TASK_NAME_LEN - 1) characters and putting the
	// terminating null character at the end of the string
	char temp_name[configMAX_TASK_NAME_LEN];
	uint8_t index = 0;
    3050:	90 e0       	ldi	r25, 0x00	; 0
	while (*a_name && index < (configMAX_TASK_NAME_LEN - 1))
	{
		temp_name[index++] = *a_name++;
	}
	temp_name[index] = '\0';
    3052:	e1 e0       	ldi	r30, 0x01	; 1
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	ec 0f       	add	r30, r28
    3058:	fd 1f       	adc	r31, r29
    305a:	e9 0f       	add	r30, r25
    305c:	f1 1d       	adc	r31, r1
    305e:	10 82       	st	Z, r1

	// Create the task with a call to the RTOS task creation function
	portBASE_TYPE task_status = xTaskCreate
    3060:	74 01       	movw	r14, r8
    3062:	f2 e0       	ldi	r31, 0x02	; 2
    3064:	ef 0e       	add	r14, r31
    3066:	f1 1c       	adc	r15, r1
    3068:	a1 2c       	mov	r10, r1
    306a:	b1 2c       	mov	r11, r1
    306c:	c1 2c       	mov	r12, r1
    306e:	d1 2c       	mov	r13, r1
    3070:	04 2f       	mov	r16, r20
    3072:	94 01       	movw	r18, r8
    3074:	a2 01       	movw	r20, r4
    3076:	be 01       	movw	r22, r28
    3078:	6f 5f       	subi	r22, 0xFF	; 255
    307a:	7f 4f       	sbci	r23, 0xFF	; 255
    307c:	82 e3       	ldi	r24, 0x32	; 50
    307e:	93 e0       	ldi	r25, 0x03	; 3
    3080:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <xTaskGenericCreate>
		 a_priority,                                 // Priority for the new task
		 &handle                                     // The new task's handle
		);

	// Save the serial port pointer and the total stack size
	p_serial = p_ser_dev;
    3084:	f4 01       	movw	r30, r8
    3086:	66 82       	std	Z+6, r6	; 0x06
    3088:	77 82       	std	Z+7, r7	; 0x07
	total_stack = a_stack_size;
    308a:	40 86       	std	Z+8, r4	; 0x08
    308c:	51 86       	std	Z+9, r5	; 0x09

	// Set the handles to the previously and last created tasks
	prev_task_pointer = last_created_task_pointer;
    308e:	20 91 30 32 	lds	r18, 0x3230	; 0x803230 <last_created_task_pointer>
    3092:	30 91 31 32 	lds	r19, 0x3231	; 0x803231 <last_created_task_pointer+0x1>
    3096:	24 83       	std	Z+4, r18	; 0x04
    3098:	35 83       	std	Z+5, r19	; 0x05
	last_created_task_pointer = this;
    309a:	80 92 30 32 	sts	0x3230, r8	; 0x803230 <last_created_task_pointer>
    309e:	90 92 31 32 	sts	0x3231, r9	; 0x803231 <last_created_task_pointer+0x1>

	// Initialize the finite state machine and its transition logger
	state = 0;
    30a2:	14 86       	std	Z+12, r1	; 0x0c
	previous_state = 0;
    30a4:	15 86       	std	Z+13, r1	; 0x0d

	// If stack tracing is being used, save the address of the top of the stack
	top_of_stack = ++portStackTopForTask;
    30a6:	40 90 92 32 	lds	r4, 0x3292	; 0x803292 <portStackTopForTask>
    30aa:	50 90 93 32 	lds	r5, 0x3293	; 0x803293 <portStackTopForTask+0x1>
    30ae:	ff ef       	ldi	r31, 0xFF	; 255
    30b0:	4f 1a       	sub	r4, r31
    30b2:	5f 0a       	sbc	r5, r31
    30b4:	40 92 92 32 	sts	0x3292, r4	; 0x803292 <portStackTopForTask>
    30b8:	50 92 93 32 	sts	0x3293, r5	; 0x803293 <portStackTopForTask+0x1>
    30bc:	f4 01       	movw	r30, r8
    30be:	42 86       	std	Z+10, r4	; 0x0a
    30c0:	53 86       	std	Z+11, r5	; 0x0b

	// Initialize the run counter
	runs = 0;
    30c2:	16 86       	std	Z+14, r1	; 0x0e
    30c4:	17 86       	std	Z+15, r1	; 0x0f
    30c6:	10 8a       	std	Z+16, r1	; 0x10
    30c8:	11 8a       	std	Z+17, r1	; 0x11

	// If the serial port is being used, let the user know if the task was created
	// successfully
	if (p_serial != NULL)
    30ca:	61 14       	cp	r6, r1
    30cc:	71 04       	cpc	r7, r1
    30ce:	09 f4       	brne	.+2      	; 0x30d2 <_ZN8frt_taskC1EPKchjP8emstream+0xde>
    30d0:	44 c0       	rjmp	.+136    	; 0x315a <_ZN8frt_taskC1EPKchjP8emstream+0x166>
	{
		if (task_status == pdPASS)
    30d2:	81 30       	cpi	r24, 0x01	; 1
    30d4:	79 f5       	brne	.+94     	; 0x3134 <_ZN8frt_taskC1EPKchjP8emstream+0x140>
		{
			*p_serial << PMS ("Task ") << temp_name << PMS (" created")
    30d6:	6a e0       	ldi	r22, 0x0A	; 10
    30d8:	c3 01       	movw	r24, r6
    30da:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    30de:	7c 01       	movw	r14, r24
    30e0:	61 eb       	ldi	r22, 0xB1	; 177
    30e2:	75 e0       	ldi	r23, 0x05	; 5
    30e4:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    30e8:	be 01       	movw	r22, r28
    30ea:	6f 5f       	subi	r22, 0xFF	; 255
    30ec:	7f 4f       	sbci	r23, 0xFF	; 255
    30ee:	c7 01       	movw	r24, r14
    30f0:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    30f4:	6a e0       	ldi	r22, 0x0A	; 10
    30f6:	c7 01       	movw	r24, r14
    30f8:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    30fc:	7c 01       	movw	r14, r24
    30fe:	68 ea       	ldi	r22, 0xA8	; 168
    3100:	75 e0       	ldi	r23, 0x05	; 5
    3102:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
				<< PMS (", stack at 0x") << hex << top_of_stack << dec << endl;
    3106:	6a e0       	ldi	r22, 0x0A	; 10
    3108:	c7 01       	movw	r24, r14
    310a:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    310e:	7c 01       	movw	r14, r24
    3110:	6a e9       	ldi	r22, 0x9A	; 154
    3112:	75 e0       	ldi	r23, 0x05	; 5
    3114:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    3118:	63 e0       	ldi	r22, 0x03	; 3
    311a:	c7 01       	movw	r24, r14
    311c:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    3120:	b2 01       	movw	r22, r4
    3122:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN8emstreamlsEj>
    3126:	62 e0       	ldi	r22, 0x02	; 2
    3128:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    312c:	66 e0       	ldi	r22, 0x06	; 6
    312e:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    3132:	13 c0       	rjmp	.+38     	; 0x315a <_ZN8frt_taskC1EPKchjP8emstream+0x166>
		}
		else
		{
			*p_serial << PMS ("ERROR creating task ") << temp_name << endl;
    3134:	6a e0       	ldi	r22, 0x0A	; 10
    3136:	c3 01       	movw	r24, r6
    3138:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    313c:	4c 01       	movw	r8, r24
    313e:	65 e8       	ldi	r22, 0x85	; 133
    3140:	75 e0       	ldi	r23, 0x05	; 5
    3142:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    3146:	be 01       	movw	r22, r28
    3148:	6f 5f       	subi	r22, 0xFF	; 255
    314a:	7f 4f       	sbci	r23, 0xFF	; 255
    314c:	c4 01       	movw	r24, r8
    314e:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    3152:	66 e0       	ldi	r22, 0x06	; 6
    3154:	c4 01       	movw	r24, r8
    3156:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
		}
	}
}
    315a:	2a 96       	adiw	r28, 0x0a	; 10
    315c:	cd bf       	out	0x3d, r28	; 61
    315e:	de bf       	out	0x3e, r29	; 62
    3160:	df 91       	pop	r29
    3162:	cf 91       	pop	r28
    3164:	1f 91       	pop	r17
    3166:	0f 91       	pop	r16
    3168:	ff 90       	pop	r15
    316a:	ef 90       	pop	r14
    316c:	df 90       	pop	r13
    316e:	cf 90       	pop	r12
    3170:	bf 90       	pop	r11
    3172:	af 90       	pop	r10
    3174:	9f 90       	pop	r9
    3176:	8f 90       	pop	r8
    3178:	7f 90       	pop	r7
    317a:	6f 90       	pop	r6
    317c:	5f 90       	pop	r5
    317e:	4f 90       	pop	r4
    3180:	08 95       	ret

00003182 <_ZN8frt_task19print_stack_in_listEP8emstream>:
 *  stacks. The idle task's stack is printed separately afterwards. 
 *  @param ser_device The serial device to which each task prints its stack
 */

void frt_task::print_stack_in_list (emstream* ser_device)
{
    3182:	cf 92       	push	r12
    3184:	df 92       	push	r13
    3186:	ef 92       	push	r14
    3188:	ff 92       	push	r15
    318a:	0f 93       	push	r16
    318c:	1f 93       	push	r17
    318e:	cf 93       	push	r28
    3190:	df 93       	push	r29
    3192:	ec 01       	movw	r28, r24
    3194:	7b 01       	movw	r14, r22
	*ser_device << ATERM_BOLD << PMS ("Task: ") 
				<< (const char*)(pcTaskGetTaskName (handle)) 
    3196:	8a 81       	ldd	r24, Y+2	; 0x02
    3198:	9b 81       	ldd	r25, Y+3	; 0x03
    319a:	0e 94 3a 14 	call	0x2874	; 0x2874 <pcTaskGetTaskName>
    319e:	6c 01       	movw	r12, r24
 *  @param ser_device The serial device to which each task prints its stack
 */

void frt_task::print_stack_in_list (emstream* ser_device)
{
	*ser_device << ATERM_BOLD << PMS ("Task: ") 
    31a0:	6a e0       	ldi	r22, 0x0A	; 10
    31a2:	c7 01       	movw	r24, r14
    31a4:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    31a8:	8c 01       	movw	r16, r24
    31aa:	64 ec       	ldi	r22, 0xC4	; 196
    31ac:	75 e0       	ldi	r23, 0x05	; 5
    31ae:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    31b2:	6a e0       	ldi	r22, 0x0A	; 10
    31b4:	c8 01       	movw	r24, r16
    31b6:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    31ba:	8c 01       	movw	r16, r24
    31bc:	6d eb       	ldi	r22, 0xBD	; 189
    31be:	75 e0       	ldi	r23, 0x05	; 5
    31c0:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    31c4:	b6 01       	movw	r22, r12
    31c6:	c8 01       	movw	r24, r16
    31c8:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
				<< (const char*)(pcTaskGetTaskName (handle)) 
				<< ATERM_NORM_INT << endl;
    31cc:	6a e0       	ldi	r22, 0x0A	; 10
    31ce:	c8 01       	movw	r24, r16
    31d0:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    31d4:	8c 01       	movw	r16, r24
    31d6:	67 eb       	ldi	r22, 0xB7	; 183
    31d8:	75 e0       	ldi	r23, 0x05	; 5
    31da:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    31de:	66 e0       	ldi	r22, 0x06	; 6
    31e0:	c8 01       	movw	r24, r16
    31e2:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
		 *  @param p_ser_d The serial device to which the stack will be printed
		 */
		void dump_stack (emstream* p_ser_d)
		{
			hex_dump_memory ((uint8_t*)(top_of_stack - total_stack), 
								(uint8_t*)(top_of_stack), p_ser_d, true, 0x11);
    31e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    31e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    31ea:	e8 85       	ldd	r30, Y+8	; 0x08
    31ec:	f9 85       	ldd	r31, Y+9	; 0x09
    31ee:	01 e1       	ldi	r16, 0x11	; 17
    31f0:	21 e0       	ldi	r18, 0x01	; 1
    31f2:	a7 01       	movw	r20, r14
    31f4:	bc 01       	movw	r22, r24
    31f6:	8e 1b       	sub	r24, r30
    31f8:	9f 0b       	sbc	r25, r31
    31fa:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_Z15hex_dump_memoryPhS_P8emstreambh>

	dump_stack (ser_device);

	if (prev_task_pointer != NULL)
    31fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3200:	9d 81       	ldd	r25, Y+5	; 0x05
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	19 f0       	breq	.+6      	; 0x320c <_ZN8frt_task19print_stack_in_listEP8emstream+0x8a>
	{
		prev_task_pointer->print_stack_in_list (ser_device);
    3206:	b7 01       	movw	r22, r14
    3208:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8frt_task19print_stack_in_listEP8emstream>
	}
}
    320c:	df 91       	pop	r29
    320e:	cf 91       	pop	r28
    3210:	1f 91       	pop	r17
    3212:	0f 91       	pop	r16
    3214:	ff 90       	pop	r15
    3216:	ef 90       	pop	r14
    3218:	df 90       	pop	r13
    321a:	cf 90       	pop	r12
    321c:	08 95       	ret

0000321e <_Z17print_task_stacksP8emstream>:
/** This function has all the tasks in the task list do a "stack dump", printing their
 *  stacks in hex dump format. The idle task's stack is printed afterwards. 
 *  @param ser_dev Pointer to a serial device on which the information will be printed
 */
void print_task_stacks (emstream* ser_dev)
{
    321e:	0f 93       	push	r16
    3220:	1f 93       	push	r17
    3222:	cf 93       	push	r28
    3224:	df 93       	push	r29
    3226:	ec 01       	movw	r28, r24
	// Tell the most recently created task to print its stack and keep the process
	// going by telling the next most recently created task to print its stack, etc.
	if (last_created_task_pointer != NULL)
    3228:	80 91 30 32 	lds	r24, 0x3230	; 0x803230 <last_created_task_pointer>
    322c:	90 91 31 32 	lds	r25, 0x3231	; 0x803231 <last_created_task_pointer+0x1>
    3230:	00 97       	sbiw	r24, 0x00	; 0
    3232:	19 f0       	breq	.+6      	; 0x323a <_Z17print_task_stacksP8emstream+0x1c>
	{
		last_created_task_pointer->print_stack_in_list (ser_dev);
    3234:	be 01       	movw	r22, r28
    3236:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8frt_task19print_stack_in_listEP8emstream>
	}

	// Now print the stack for the idle task, which isn't user created and so isn't
	// in the regular task list
	*ser_dev << ATERM_BOLD << PMS ("Task: IDLE") << ATERM_NORM_INT << endl;
    323a:	6a e0       	ldi	r22, 0x0A	; 10
    323c:	ce 01       	movw	r24, r28
    323e:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    3242:	8c 01       	movw	r16, r24
    3244:	6a ed       	ldi	r22, 0xDA	; 218
    3246:	75 e0       	ldi	r23, 0x05	; 5
    3248:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    324c:	6a e0       	ldi	r22, 0x0A	; 10
    324e:	c8 01       	movw	r24, r16
    3250:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    3254:	8c 01       	movw	r16, r24
    3256:	6f ec       	ldi	r22, 0xCF	; 207
    3258:	75 e0       	ldi	r23, 0x05	; 5
    325a:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    325e:	6a e0       	ldi	r22, 0x0A	; 10
    3260:	c8 01       	movw	r24, r16
    3262:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    3266:	8c 01       	movw	r16, r24
    3268:	69 ec       	ldi	r22, 0xC9	; 201
    326a:	75 e0       	ldi	r23, 0x05	; 5
    326c:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    3270:	66 e0       	ldi	r22, 0x06	; 6
    3272:	c8 01       	movw	r24, r16
    3274:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
	hex_dump_memory ((uint8_t*)(portStackTopForTask - configMINIMAL_STACK_SIZE + 1), 
							(uint8_t*)(portStackTopForTask + 1), ser_dev, true, 0x11);
    3278:	80 91 92 32 	lds	r24, 0x3292	; 0x803292 <portStackTopForTask>
    327c:	90 91 93 32 	lds	r25, 0x3293	; 0x803293 <portStackTopForTask+0x1>
    3280:	bc 01       	movw	r22, r24
    3282:	6f 5f       	subi	r22, 0xFF	; 255
    3284:	7f 4f       	sbci	r23, 0xFF	; 255
    3286:	01 e1       	ldi	r16, 0x11	; 17
    3288:	21 e0       	ldi	r18, 0x01	; 1
    328a:	ae 01       	movw	r20, r28
    328c:	83 56       	subi	r24, 0x63	; 99
    328e:	91 09       	sbc	r25, r1
    3290:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_Z15hex_dump_memoryPhS_P8emstreambh>
}
    3294:	df 91       	pop	r29
    3296:	cf 91       	pop	r28
    3298:	1f 91       	pop	r17
    329a:	0f 91       	pop	r16
    329c:	08 95       	ret

0000329e <_ZN8frt_task12print_statusER8emstream>:
 *  information. 
 *  @param ser_dev A reference to the serial device to which to print the task status
 */

void frt_task::print_status (emstream& ser_dev)
{
    329e:	8f 92       	push	r8
    32a0:	9f 92       	push	r9
    32a2:	af 92       	push	r10
    32a4:	bf 92       	push	r11
    32a6:	cf 92       	push	r12
    32a8:	df 92       	push	r13
    32aa:	ef 92       	push	r14
    32ac:	ff 92       	push	r15
    32ae:	0f 93       	push	r16
    32b0:	1f 93       	push	r17
    32b2:	cf 93       	push	r28
    32b4:	df 93       	push	r29
    32b6:	ec 01       	movw	r28, r24
    32b8:	8b 01       	movw	r16, r22
	ser_dev << (const char*)(pcTaskGetTaskName (handle));
    32ba:	8a 81       	ldd	r24, Y+2	; 0x02
    32bc:	9b 81       	ldd	r25, Y+3	; 0x03
    32be:	0e 94 3a 14 	call	0x2874	; 0x2874 <pcTaskGetTaskName>
    32c2:	bc 01       	movw	r22, r24
    32c4:	c8 01       	movw	r24, r16
    32c6:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
	ser_dev.putchar ('\t');
    32ca:	d8 01       	movw	r26, r16
    32cc:	ed 91       	ld	r30, X+
    32ce:	fc 91       	ld	r31, X
    32d0:	02 80       	ldd	r0, Z+2	; 0x02
    32d2:	f3 81       	ldd	r31, Z+3	; 0x03
    32d4:	e0 2d       	mov	r30, r0
    32d6:	69 e0       	ldi	r22, 0x09	; 9
    32d8:	c8 01       	movw	r24, r16
    32da:	19 95       	eicall
	if (strlen ((const char*)(pcTaskGetTaskName (handle))) < 8)
    32dc:	8a 81       	ldd	r24, Y+2	; 0x02
    32de:	9b 81       	ldd	r25, Y+3	; 0x03
    32e0:	0e 94 3a 14 	call	0x2874	; 0x2874 <pcTaskGetTaskName>
    32e4:	fc 01       	movw	r30, r24
    32e6:	01 90       	ld	r0, Z+
    32e8:	00 20       	and	r0, r0
    32ea:	e9 f7       	brne	.-6      	; 0x32e6 <_ZN8frt_task12print_statusER8emstream+0x48>
    32ec:	31 97       	sbiw	r30, 0x01	; 1
    32ee:	e8 1b       	sub	r30, r24
    32f0:	f9 0b       	sbc	r31, r25
    32f2:	38 97       	sbiw	r30, 0x08	; 8
    32f4:	48 f4       	brcc	.+18     	; 0x3308 <_ZN8frt_task12print_statusER8emstream+0x6a>
	{
		ser_dev.putchar ('\t');
    32f6:	d8 01       	movw	r26, r16
    32f8:	ed 91       	ld	r30, X+
    32fa:	fc 91       	ld	r31, X
    32fc:	02 80       	ldd	r0, Z+2	; 0x02
    32fe:	f3 81       	ldd	r31, Z+3	; 0x03
    3300:	e0 2d       	mov	r30, r0
    3302:	69 e0       	ldi	r22, 0x09	; 9
    3304:	c8 01       	movw	r24, r16
    3306:	19 95       	eicall
			<< get_state ()
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\t") << uxTaskGetStackHighWaterMark(handle) << PMS ("/") 
			<< get_total_stack () << PMS ("\t")
		#endif
			<< PMS ("\t") << runs;
    3308:	ce 84       	ldd	r12, Y+14	; 0x0e
    330a:	df 84       	ldd	r13, Y+15	; 0x0f
    330c:	e8 88       	ldd	r14, Y+16	; 0x10
    330e:	f9 88       	ldd	r15, Y+17	; 0x11
		 *  constructor call.
		 *  @return The task's total stack size in bytes
		 */
		size_t get_total_stack (void)
		{
			return (total_stack);
    3310:	a8 84       	ldd	r10, Y+8	; 0x08
    3312:	b9 84       	ldd	r11, Y+9	; 0x09
		ser_dev.putchar ('\t');
	}
	ser_dev << uxTaskPriorityGet (handle) << PMS ("\t")
			<< get_state ()
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\t") << uxTaskGetStackHighWaterMark(handle) << PMS ("/") 
    3314:	8a 81       	ldd	r24, Y+2	; 0x02
    3316:	9b 81       	ldd	r25, Y+3	; 0x03
    3318:	0e 94 40 17 	call	0x2e80	; 0x2e80 <uxTaskGetStackHighWaterMark>
    331c:	98 2e       	mov	r9, r24
		 *  manipulated by the user within the run() method to cause state transitions.
		 *  @return The current state
		 */
		uint8_t get_state (void)
		{
			return (state);
    331e:	8c 84       	ldd	r8, Y+12	; 0x0c
	ser_dev.putchar ('\t');
	if (strlen ((const char*)(pcTaskGetTaskName (handle))) < 8)
	{
		ser_dev.putchar ('\t');
	}
	ser_dev << uxTaskPriorityGet (handle) << PMS ("\t")
    3320:	8a 81       	ldd	r24, Y+2	; 0x02
    3322:	9b 81       	ldd	r25, Y+3	; 0x03
    3324:	0e 94 e5 13 	call	0x27ca	; 0x27ca <uxTaskPriorityGet>
    3328:	68 2f       	mov	r22, r24
    332a:	c8 01       	movw	r24, r16
    332c:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <_ZN8emstreamlsEh>
    3330:	6a e0       	ldi	r22, 0x0A	; 10
    3332:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    3336:	ec 01       	movw	r28, r24
    3338:	6f e4       	ldi	r22, 0x4F	; 79
    333a:	76 e0       	ldi	r23, 0x06	; 6
    333c:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
			<< get_state ()
    3340:	68 2d       	mov	r22, r8
    3342:	ce 01       	movw	r24, r28
    3344:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <_ZN8emstreamlsEh>
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\t") << uxTaskGetStackHighWaterMark(handle) << PMS ("/") 
    3348:	6a e0       	ldi	r22, 0x0A	; 10
    334a:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    334e:	ec 01       	movw	r28, r24
    3350:	6d e4       	ldi	r22, 0x4D	; 77
    3352:	76 e0       	ldi	r23, 0x06	; 6
    3354:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    3358:	69 2d       	mov	r22, r9
    335a:	ce 01       	movw	r24, r28
    335c:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <_ZN8emstreamlsEh>
    3360:	6a e0       	ldi	r22, 0x0A	; 10
    3362:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    3366:	ec 01       	movw	r28, r24
    3368:	6b e4       	ldi	r22, 0x4B	; 75
    336a:	76 e0       	ldi	r23, 0x06	; 6
    336c:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
			<< get_total_stack () << PMS ("\t")
    3370:	b5 01       	movw	r22, r10
    3372:	ce 01       	movw	r24, r28
    3374:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN8emstreamlsEj>
    3378:	6a e0       	ldi	r22, 0x0A	; 10
    337a:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    337e:	ec 01       	movw	r28, r24
    3380:	69 e4       	ldi	r22, 0x49	; 73
    3382:	76 e0       	ldi	r23, 0x06	; 6
    3384:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
		#endif
			<< PMS ("\t") << runs;
    3388:	6a e0       	ldi	r22, 0x0A	; 10
    338a:	ce 01       	movw	r24, r28
    338c:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    3390:	ec 01       	movw	r28, r24
    3392:	67 e4       	ldi	r22, 0x47	; 71
    3394:	76 e0       	ldi	r23, 0x06	; 6
    3396:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    339a:	b7 01       	movw	r22, r14
    339c:	a6 01       	movw	r20, r12
    339e:	ce 01       	movw	r24, r28
    33a0:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <_ZN8emstreamlsEm>
}
    33a4:	df 91       	pop	r29
    33a6:	cf 91       	pop	r28
    33a8:	1f 91       	pop	r17
    33aa:	0f 91       	pop	r16
    33ac:	ff 90       	pop	r15
    33ae:	ef 90       	pop	r14
    33b0:	df 90       	pop	r13
    33b2:	cf 90       	pop	r12
    33b4:	bf 90       	pop	r11
    33b6:	af 90       	pop	r10
    33b8:	9f 90       	pop	r9
    33ba:	8f 90       	pop	r8
    33bc:	08 95       	ret

000033be <_ZlsR8emstreamR8frt_task>:
 *  @return A reference to the same serial device on which we write information.
 *          This is used to string together things to write with "<<" operators
 */

emstream& operator << (emstream& ser_dev, frt_task& a_task)
{
    33be:	cf 93       	push	r28
    33c0:	df 93       	push	r29
    33c2:	ec 01       	movw	r28, r24
    33c4:	cb 01       	movw	r24, r22
	a_task.print_status (ser_dev);
    33c6:	db 01       	movw	r26, r22
    33c8:	ed 91       	ld	r30, X+
    33ca:	fc 91       	ld	r31, X
    33cc:	02 80       	ldd	r0, Z+2	; 0x02
    33ce:	f3 81       	ldd	r31, Z+3	; 0x03
    33d0:	e0 2d       	mov	r30, r0
    33d2:	be 01       	movw	r22, r28
    33d4:	19 95       	eicall
	return (ser_dev);
}
    33d6:	ce 01       	movw	r24, r28
    33d8:	df 91       	pop	r29
    33da:	cf 91       	pop	r28
    33dc:	08 95       	ret

000033de <_ZN8frt_task20print_status_in_listEP8emstream>:
 *  tasks to do so. The list is kept by the tasks, each having a pointer to another.
 *  @param ser_device The serial device to which each task prints its status
 */

void frt_task::print_status_in_list (emstream* ser_device)
{
    33de:	0f 93       	push	r16
    33e0:	1f 93       	push	r17
    33e2:	cf 93       	push	r28
    33e4:	df 93       	push	r29
    33e6:	ec 01       	movw	r28, r24
    33e8:	8b 01       	movw	r16, r22
	*ser_device << *this << endl;
    33ea:	bc 01       	movw	r22, r24
    33ec:	c8 01       	movw	r24, r16
    33ee:	0e 94 df 19 	call	0x33be	; 0x33be <_ZlsR8emstreamR8frt_task>
    33f2:	66 e0       	ldi	r22, 0x06	; 6
    33f4:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>

	if (prev_task_pointer != NULL)
    33f8:	8c 81       	ldd	r24, Y+4	; 0x04
    33fa:	9d 81       	ldd	r25, Y+5	; 0x05
    33fc:	00 97       	sbiw	r24, 0x00	; 0
    33fe:	19 f0       	breq	.+6      	; 0x3406 <_ZN8frt_task20print_status_in_listEP8emstream+0x28>
	{
		prev_task_pointer->print_status_in_list (ser_device);
    3400:	b8 01       	movw	r22, r16
    3402:	0e 94 ef 19 	call	0x33de	; 0x33de <_ZN8frt_task20print_status_in_listEP8emstream>
	}
}
    3406:	df 91       	pop	r29
    3408:	cf 91       	pop	r28
    340a:	1f 91       	pop	r17
    340c:	0f 91       	pop	r16
    340e:	08 95       	ret

00003410 <_Z15print_task_listP8emstream>:
 *  The author isn't sure if it can always be trusted. 
 *  @param ser_dev Pointer to a serial device on which the information will be printed
 */

void print_task_list (emstream* ser_dev)
{
    3410:	0f 93       	push	r16
    3412:	1f 93       	push	r17
    3414:	cf 93       	push	r28
    3416:	df 93       	push	r29
    3418:	ec 01       	movw	r28, r24
	// Print the first line with the top of the headings
	*ser_dev << PMS ("Task\t\t  \t ")
    341a:	6a e0       	ldi	r22, 0x0A	; 10
    341c:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    3420:	8c 01       	movw	r16, r24
    3422:	6c e3       	ldi	r22, 0x3C	; 60
    3424:	76 e0       	ldi	r23, 0x06	; 6
    3426:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\tStack")
    342a:	6a e0       	ldi	r22, 0x0A	; 10
    342c:	c8 01       	movw	r24, r16
    342e:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    3432:	8c 01       	movw	r16, r24
    3434:	65 e3       	ldi	r22, 0x35	; 53
    3436:	76 e0       	ldi	r23, 0x06	; 6
    3438:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
		#endif
			<< endl;
    343c:	66 e0       	ldi	r22, 0x06	; 6
    343e:	c8 01       	movw	r24, r16
    3440:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>

	// Print the second line with the rest of the headings
	*ser_dev << PMS ("Name\t\tPri.\tState")
    3444:	6a e0       	ldi	r22, 0x0A	; 10
    3446:	ce 01       	movw	r24, r28
    3448:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    344c:	8c 01       	movw	r16, r24
    344e:	64 e2       	ldi	r22, 0x24	; 36
    3450:	76 e0       	ldi	r23, 0x06	; 6
    3452:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\tFree/Total")
    3456:	6a e0       	ldi	r22, 0x0A	; 10
    3458:	c8 01       	movw	r24, r16
    345a:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    345e:	8c 01       	movw	r16, r24
    3460:	68 e1       	ldi	r22, 0x18	; 24
    3462:	76 e0       	ldi	r23, 0x06	; 6
    3464:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
		#endif
			<< PMS ("\tRuns") << endl;
    3468:	6a e0       	ldi	r22, 0x0A	; 10
    346a:	c8 01       	movw	r24, r16
    346c:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    3470:	8c 01       	movw	r16, r24
    3472:	62 e1       	ldi	r22, 0x12	; 18
    3474:	76 e0       	ldi	r23, 0x06	; 6
    3476:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    347a:	66 e0       	ldi	r22, 0x06	; 6
    347c:	c8 01       	movw	r24, r16
    347e:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>

	// Print the third line which shows separators between headers and data
	*ser_dev << PMS ("----\t\t----\t-----")
    3482:	6a e0       	ldi	r22, 0x0A	; 10
    3484:	ce 01       	movw	r24, r28
    3486:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    348a:	8c 01       	movw	r16, r24
    348c:	61 e0       	ldi	r22, 0x01	; 1
    348e:	76 e0       	ldi	r23, 0x06	; 6
    3490:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\t----------")
    3494:	6a e0       	ldi	r22, 0x0A	; 10
    3496:	c8 01       	movw	r24, r16
    3498:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    349c:	8c 01       	movw	r16, r24
    349e:	65 ef       	ldi	r22, 0xF5	; 245
    34a0:	75 e0       	ldi	r23, 0x05	; 5
    34a2:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
		#endif
			<< PMS ("\t----") << endl;
    34a6:	6a e0       	ldi	r22, 0x0A	; 10
    34a8:	c8 01       	movw	r24, r16
    34aa:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    34ae:	8c 01       	movw	r16, r24
    34b0:	6f ee       	ldi	r22, 0xEF	; 239
    34b2:	75 e0       	ldi	r23, 0x05	; 5
    34b4:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    34b8:	66 e0       	ldi	r22, 0x06	; 6
    34ba:	c8 01       	movw	r24, r16
    34bc:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>

	// Now have the tasks each print out their status. Tasks form a linked list, so
	// we only need to get the last task started and it will call the next, etc.
	if (last_created_task_pointer != NULL)
    34c0:	80 91 30 32 	lds	r24, 0x3230	; 0x803230 <last_created_task_pointer>
    34c4:	90 91 31 32 	lds	r25, 0x3231	; 0x803231 <last_created_task_pointer+0x1>
    34c8:	00 97       	sbiw	r24, 0x00	; 0
    34ca:	19 f0       	breq	.+6      	; 0x34d2 <_Z15print_task_listP8emstream+0xc2>
	{
		last_created_task_pointer->print_status_in_list (ser_dev);
    34cc:	be 01       	movw	r22, r28
    34ce:	0e 94 ef 19 	call	0x33de	; 0x33de <_ZN8frt_task20print_status_in_listEP8emstream>
	}

	// Have the idle task print out its information
	*ser_dev << PMS ("IDLE\t\t0\t-\t")
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< uxTaskGetStackHighWaterMark (xTaskGetIdleTaskHandle ())
    34d2:	0e 94 42 14 	call	0x2884	; 0x2884 <xTaskGetIdleTaskHandle>
    34d6:	0e 94 40 17 	call	0x2e80	; 0x2e80 <uxTaskGetStackHighWaterMark>
    34da:	18 2f       	mov	r17, r24
	{
		last_created_task_pointer->print_status_in_list (ser_dev);
	}

	// Have the idle task print out its information
	*ser_dev << PMS ("IDLE\t\t0\t-\t")
    34dc:	6a e0       	ldi	r22, 0x0A	; 10
    34de:	ce 01       	movw	r24, r28
    34e0:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    34e4:	ec 01       	movw	r28, r24
    34e6:	64 ee       	ldi	r22, 0xE4	; 228
    34e8:	75 e0       	ldi	r23, 0x05	; 5
    34ea:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< uxTaskGetStackHighWaterMark (xTaskGetIdleTaskHandle ())
    34ee:	61 2f       	mov	r22, r17
    34f0:	ce 01       	movw	r24, r28
    34f2:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <_ZN8emstreamlsEh>
			<< PMS ("/") << configMINIMAL_STACK_SIZE << PMS ("\t\t")
    34f6:	6a e0       	ldi	r22, 0x0A	; 10
    34f8:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    34fc:	ec 01       	movw	r28, r24
    34fe:	62 ee       	ldi	r22, 0xE2	; 226
    3500:	75 e0       	ldi	r23, 0x05	; 5
    3502:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    3506:	64 e6       	ldi	r22, 0x64	; 100
    3508:	70 e0       	ldi	r23, 0x00	; 0
    350a:	ce 01       	movw	r24, r28
    350c:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN8emstreamlsEj>
    3510:	6a e0       	ldi	r22, 0x0A	; 10
    3512:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    3516:	ec 01       	movw	r28, r24
    3518:	6f ed       	ldi	r22, 0xDF	; 223
    351a:	75 e0       	ldi	r23, 0x05	; 5
    351c:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
		#endif
		#ifdef TASK_SETUP_AND_LOOP
			<< PMS ("-")
		#endif
			<< endl;
    3520:	66 e0       	ldi	r22, 0x06	; 6
    3522:	ce 01       	movw	r24, r28
    3524:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
}
    3528:	df 91       	pop	r29
    352a:	cf 91       	pop	r28
    352c:	1f 91       	pop	r17
    352e:	0f 91       	pop	r16
    3530:	08 95       	ret

00003532 <_ZN14frt_text_queue7getcharEv>:
 *  the queue, it blocks until a character is received.
 *  @return The character which was received from the queue
 */

inline int16_t frt_text_queue::getchar (void)
{
    3532:	0f 93       	push	r16
    3534:	cf 93       	push	r28
    3536:	df 93       	push	r29
    3538:	1f 92       	push	r1
    353a:	cd b7       	in	r28, 0x3d	; 61
    353c:	de b7       	in	r29, 0x3e	; 62
	char recv_char;							// Character read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue
	if (xQueueReceive (the_queue, &recv_char, portMAX_DELAY) != pdTRUE)
    353e:	00 e0       	ldi	r16, 0x00	; 0
    3540:	2f ef       	ldi	r18, 0xFF	; 255
    3542:	3f ef       	ldi	r19, 0xFF	; 255
    3544:	a9 01       	movw	r20, r18
    3546:	be 01       	movw	r22, r28
    3548:	6f 5f       	subi	r22, 0xFF	; 255
    354a:	7f 4f       	sbci	r23, 0xFF	; 255
    354c:	fc 01       	movw	r30, r24
    354e:	80 85       	ldd	r24, Z+8	; 0x08
    3550:	91 85       	ldd	r25, Z+9	; 0x09
    3552:	0e 94 91 11 	call	0x2322	; 0x2322 <xQueueGenericReceive>
    3556:	81 30       	cpi	r24, 0x01	; 1
    3558:	19 f4       	brne	.+6      	; 0x3560 <_ZN14frt_text_queue7getcharEv+0x2e>
	{
		return (-1);
	}

	// OK, we got good data from the queue, so return it
	return (recv_char);
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	02 c0       	rjmp	.+4      	; 0x3564 <_ZN14frt_text_queue7getcharEv+0x32>
	char recv_char;							// Character read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue
	if (xQueueReceive (the_queue, &recv_char, portMAX_DELAY) != pdTRUE)
	{
		return (-1);
    3560:	8f ef       	ldi	r24, 0xFF	; 255
    3562:	9f ef       	ldi	r25, 0xFF	; 255
	}

	// OK, we got good data from the queue, so return it
	return (recv_char);
}
    3564:	0f 90       	pop	r0
    3566:	df 91       	pop	r29
    3568:	cf 91       	pop	r28
    356a:	0f 91       	pop	r16
    356c:	08 95       	ret

0000356e <_ZN14frt_text_queue14check_for_charEv>:
 *  @return True for character available, false for no character available
 */

inline bool frt_text_queue::check_for_char (void)
{
	if (uxQueueMessagesWaiting (the_queue) == 0)
    356e:	fc 01       	movw	r30, r24
    3570:	80 85       	ldd	r24, Z+8	; 0x08
    3572:	91 85       	ldd	r25, Z+9	; 0x09
    3574:	0e 94 82 12 	call	0x2504	; 0x2504 <uxQueueMessagesWaiting>
    3578:	91 e0       	ldi	r25, 0x01	; 1
    357a:	81 11       	cpse	r24, r1
    357c:	01 c0       	rjmp	.+2      	; 0x3580 <_ZN14frt_text_queue14check_for_charEv+0x12>
    357e:	90 e0       	ldi	r25, 0x00	; 0
	{
		return (false);
	}
	return (true);
}
    3580:	89 2f       	mov	r24, r25
    3582:	08 95       	ret

00003584 <_ZN14frt_text_queue7putcharEc>:
 *  @param a_char The character to be sent to the queue
 *  @return True if the character was successfully sent, false if something went wrong
 */

inline bool frt_text_queue::putchar (char a_char)
{
    3584:	0f 93       	push	r16
    3586:	cf 93       	push	r28
    3588:	df 93       	push	r29
    358a:	1f 92       	push	r1
    358c:	cd b7       	in	r28, 0x3d	; 61
    358e:	de b7       	in	r29, 0x3e	; 62
    3590:	69 83       	std	Y+1, r22	; 0x01
	// If the data is successfully put in the queue, return true
	if (xQueueSendToBack (the_queue, &a_char, ticks_to_wait))
    3592:	fc 01       	movw	r30, r24
    3594:	22 85       	ldd	r18, Z+10	; 0x0a
    3596:	33 85       	ldd	r19, Z+11	; 0x0b
    3598:	44 85       	ldd	r20, Z+12	; 0x0c
    359a:	55 85       	ldd	r21, Z+13	; 0x0d
    359c:	00 e0       	ldi	r16, 0x00	; 0
    359e:	be 01       	movw	r22, r28
    35a0:	6f 5f       	subi	r22, 0xFF	; 255
    35a2:	7f 4f       	sbci	r23, 0xFF	; 255
    35a4:	80 85       	ldd	r24, Z+8	; 0x08
    35a6:	91 85       	ldd	r25, Z+9	; 0x09
    35a8:	0e 94 ca 10 	call	0x2194	; 0x2194 <xQueueGenericSend>
    35ac:	91 e0       	ldi	r25, 0x01	; 1
    35ae:	81 11       	cpse	r24, r1
    35b0:	01 c0       	rjmp	.+2      	; 0x35b4 <_ZN14frt_text_queue7putcharEc+0x30>
    35b2:	90 e0       	ldi	r25, 0x00	; 0
		return (true);
	}

	// If we get here, something went wrong (probably a timeout), so return false
	return (false);
}
    35b4:	89 2f       	mov	r24, r25
    35b6:	0f 90       	pop	r0
    35b8:	df 91       	pop	r29
    35ba:	cf 91       	pop	r28
    35bc:	0f 91       	pop	r16
    35be:	08 95       	ret

000035c0 <_ZN14frt_text_queueC1EjP8emstreamm>:
 *                     portMAX_DELAY causes a send to block indefinitely
 *  @param p_ser_dev A pointer which points to a serial device which can be used for
 *                   diagnostic logging or printing
 */

frt_text_queue::frt_text_queue (uint16_t queue_size, emstream* p_ser_dev,
    35c0:	8f 92       	push	r8
    35c2:	9f 92       	push	r9
    35c4:	bf 92       	push	r11
    35c6:	cf 92       	push	r12
    35c8:	df 92       	push	r13
    35ca:	ef 92       	push	r14
    35cc:	ff 92       	push	r15
    35ce:	0f 93       	push	r16
    35d0:	1f 93       	push	r17
    35d2:	cf 93       	push	r28
    35d4:	df 93       	push	r29
    35d6:	ec 01       	movw	r28, r24
    35d8:	b6 2e       	mov	r11, r22
    35da:	4a 01       	movw	r8, r20
    35dc:	68 01       	movw	r12, r16
    35de:	79 01       	movw	r14, r18
							   portTickType a_wait_time)
    35e0:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <_ZN8emstreamC1Ev>
    35e4:	84 e2       	ldi	r24, 0x24	; 36
    35e6:	91 e2       	ldi	r25, 0x21	; 33
    35e8:	88 83       	st	Y, r24
    35ea:	99 83       	std	Y+1, r25	; 0x01
{
	// Save the pointer to the serial device which is used for debugging
	p_serial = p_ser_dev;
    35ec:	8e 86       	std	Y+14, r8	; 0x0e
    35ee:	9f 86       	std	Y+15, r9	; 0x0f

	// Create a FreeRTOS queue object which holds the given number of characters
	the_queue = xQueueCreate (queue_size, sizeof (char));
    35f0:	40 e0       	ldi	r20, 0x00	; 0
    35f2:	61 e0       	ldi	r22, 0x01	; 1
    35f4:	8b 2d       	mov	r24, r11
    35f6:	0e 94 9c 10 	call	0x2138	; 0x2138 <xQueueGenericCreate>
    35fa:	88 87       	std	Y+8, r24	; 0x08
    35fc:	99 87       	std	Y+9, r25	; 0x09

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = a_wait_time;
    35fe:	ca 86       	std	Y+10, r12	; 0x0a
    3600:	db 86       	std	Y+11, r13	; 0x0b
    3602:	ec 86       	std	Y+12, r14	; 0x0c
    3604:	fd 86       	std	Y+13, r15	; 0x0d
}
    3606:	df 91       	pop	r29
    3608:	cf 91       	pop	r28
    360a:	1f 91       	pop	r17
    360c:	0f 91       	pop	r16
    360e:	ff 90       	pop	r15
    3610:	ef 90       	pop	r14
    3612:	df 90       	pop	r13
    3614:	cf 90       	pop	r12
    3616:	bf 90       	pop	r11
    3618:	9f 90       	pop	r9
    361a:	8f 90       	pop	r8
    361c:	08 95       	ret

0000361e <_ZN10time_stamp12get_microsecEv>:
 *  integer number of ticks per second.
 *  @return The number of microseconds in time stamp
 */

uint32_t time_stamp::get_microsec (void)
{
    361e:	cf 92       	push	r12
    3620:	df 92       	push	r13
    3622:	ef 92       	push	r14
    3624:	ff 92       	push	r15
    3626:	cf 93       	push	r28
    3628:	df 93       	push	r29
    362a:	ec 01       	movw	r28, r24
	return 
	(
		(int32_t)(tick_count % configTICK_RATE_HZ) * 1000000L / configTICK_RATE_HZ
			+ (int32_t)hardware_count * 1000000L 
				/ (configCPU_CLOCK_HZ / portCLOCK_PRESCALER)
	);
    362c:	68 81       	ld	r22, Y
    362e:	79 81       	ldd	r23, Y+1	; 0x01
    3630:	8a 81       	ldd	r24, Y+2	; 0x02
    3632:	9b 81       	ldd	r25, Y+3	; 0x03
    3634:	0f 2e       	mov	r0, r31
    3636:	f8 ee       	ldi	r31, 0xE8	; 232
    3638:	cf 2e       	mov	r12, r31
    363a:	f3 e0       	ldi	r31, 0x03	; 3
    363c:	df 2e       	mov	r13, r31
    363e:	e1 2c       	mov	r14, r1
    3640:	f1 2c       	mov	r15, r1
    3642:	f0 2d       	mov	r31, r0
    3644:	a7 01       	movw	r20, r14
    3646:	96 01       	movw	r18, r12
    3648:	0e 94 84 24 	call	0x4908	; 0x4908 <__udivmodsi4>
    364c:	9b 01       	movw	r18, r22
    364e:	ac 01       	movw	r20, r24
    3650:	60 e4       	ldi	r22, 0x40	; 64
    3652:	72 e4       	ldi	r23, 0x42	; 66
    3654:	8f e0       	ldi	r24, 0x0F	; 15
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	0e 94 74 24 	call	0x48e8	; 0x48e8 <__mulsi3>
    365c:	a7 01       	movw	r20, r14
    365e:	96 01       	movw	r18, r12
    3660:	0e 94 84 24 	call	0x4908	; 0x4908 <__udivmodsi4>
    3664:	69 01       	movw	r12, r18
    3666:	7a 01       	movw	r14, r20
    3668:	ac 81       	ldd	r26, Y+4	; 0x04
    366a:	bd 81       	ldd	r27, Y+5	; 0x05
    366c:	20 e4       	ldi	r18, 0x40	; 64
    366e:	32 e4       	ldi	r19, 0x42	; 66
    3670:	4f e0       	ldi	r20, 0x0F	; 15
    3672:	50 e0       	ldi	r21, 0x00	; 0
    3674:	0e 94 ce 24 	call	0x499c	; 0x499c <__muluhisi3>
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	38 e4       	ldi	r19, 0x48	; 72
    367c:	48 ee       	ldi	r20, 0xE8	; 232
    367e:	51 e0       	ldi	r21, 0x01	; 1
    3680:	0e 94 84 24 	call	0x4908	; 0x4908 <__udivmodsi4>
    3684:	c7 01       	movw	r24, r14
    3686:	b6 01       	movw	r22, r12
    3688:	62 0f       	add	r22, r18
    368a:	73 1f       	adc	r23, r19
    368c:	84 1f       	adc	r24, r20
    368e:	95 1f       	adc	r25, r21
}
    3690:	df 91       	pop	r29
    3692:	cf 91       	pop	r28
    3694:	ff 90       	pop	r15
    3696:	ef 90       	pop	r14
    3698:	df 90       	pop	r13
    369a:	cf 90       	pop	r12
    369c:	08 95       	ret

0000369e <_ZlsR8emstreamR10time_stamp>:
 *  @return A reference to the serial device to which the data was printed. This
 *          reference is used to string printable items together with "<<" operators
 */

emstream& operator<< (emstream& serial, time_stamp& stamp)
{
    369e:	cf 92       	push	r12
    36a0:	df 92       	push	r13
    36a2:	ef 92       	push	r14
    36a4:	ff 92       	push	r15
    36a6:	0f 93       	push	r16
    36a8:	1f 93       	push	r17
    36aa:	cf 93       	push	r28
    36ac:	df 93       	push	r29
    36ae:	cd b7       	in	r28, 0x3d	; 61
    36b0:	de b7       	in	r29, 0x3e	; 62
    36b2:	2f 97       	sbiw	r28, 0x0f	; 15
    36b4:	cd bf       	out	0x3d, r28	; 61
    36b6:	de bf       	out	0x3e, r29	; 62
    36b8:	6c 01       	movw	r12, r24
    36ba:	8b 01       	movw	r16, r22
	char dig_buffer[7];						// Holds digits we compute
	ldiv_t div_result;						// Holds results of long integer division

	// First write the seconds in the time stamp, then a decimal
	serial << stamp.get_seconds ();
    36bc:	db 01       	movw	r26, r22
    36be:	6d 91       	ld	r22, X+
    36c0:	7d 91       	ld	r23, X+
    36c2:	8d 91       	ld	r24, X+
    36c4:	9c 91       	ld	r25, X
    36c6:	28 ee       	ldi	r18, 0xE8	; 232
    36c8:	33 e0       	ldi	r19, 0x03	; 3
    36ca:	40 e0       	ldi	r20, 0x00	; 0
    36cc:	50 e0       	ldi	r21, 0x00	; 0
    36ce:	0e 94 84 24 	call	0x4908	; 0x4908 <__udivmodsi4>
    36d2:	ba 01       	movw	r22, r20
    36d4:	a9 01       	movw	r20, r18
    36d6:	c6 01       	movw	r24, r12
    36d8:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <_ZN8emstreamlsEm>
	serial.putchar ('.');
    36dc:	d6 01       	movw	r26, r12
    36de:	ed 91       	ld	r30, X+
    36e0:	fc 91       	ld	r31, X
    36e2:	02 80       	ldd	r0, Z+2	; 0x02
    36e4:	f3 81       	ldd	r31, Z+3	; 0x03
    36e6:	e0 2d       	mov	r30, r0
    36e8:	6e e2       	ldi	r22, 0x2E	; 46
    36ea:	c6 01       	movw	r24, r12
    36ec:	19 95       	eicall

	// Now get the microseconds; these will be written with leading zeros as needed
	div_result.quot = stamp.get_microsec ();
    36ee:	c8 01       	movw	r24, r16
    36f0:	0e 94 0f 1b 	call	0x361e	; 0x361e <_ZN10time_stamp12get_microsecEv>
    36f4:	8e 01       	movw	r16, r28
    36f6:	09 5f       	subi	r16, 0xF9	; 249
    36f8:	1f 4f       	sbci	r17, 0xFF	; 255
    36fa:	fe 01       	movw	r30, r28
    36fc:	31 96       	adiw	r30, 0x01	; 1
    36fe:	7f 01       	movw	r14, r30
	for (int8_t index = 5; index >= 0; index--)
	{
		div_result = ldiv (div_result.quot, 10);
    3700:	2a e0       	ldi	r18, 0x0A	; 10
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	40 e0       	ldi	r20, 0x00	; 0
    3706:	50 e0       	ldi	r21, 0x00	; 0
    3708:	0e 94 a6 24 	call	0x494c	; 0x494c <__divmodsi4>
    370c:	e6 2f       	mov	r30, r22
    370e:	28 87       	std	Y+8, r18	; 0x08
    3710:	39 87       	std	Y+9, r19	; 0x09
    3712:	4a 87       	std	Y+10, r20	; 0x0a
    3714:	5b 87       	std	Y+11, r21	; 0x0b
    3716:	68 85       	ldd	r22, Y+8	; 0x08
    3718:	79 85       	ldd	r23, Y+9	; 0x09
    371a:	8a 85       	ldd	r24, Y+10	; 0x0a
    371c:	9b 85       	ldd	r25, Y+11	; 0x0b
		dig_buffer[index] = div_result.rem + '0';
    371e:	20 e3       	ldi	r18, 0x30	; 48
    3720:	2e 0f       	add	r18, r30
    3722:	d8 01       	movw	r26, r16
    3724:	2e 93       	st	-X, r18
    3726:	8d 01       	movw	r16, r26
	serial << stamp.get_seconds ();
	serial.putchar ('.');

	// Now get the microseconds; these will be written with leading zeros as needed
	div_result.quot = stamp.get_microsec ();
	for (int8_t index = 5; index >= 0; index--)
    3728:	ae 15       	cp	r26, r14
    372a:	bf 05       	cpc	r27, r15
    372c:	49 f7       	brne	.-46     	; 0x3700 <_ZlsR8emstreamR10time_stamp+0x62>
		div_result = ldiv (div_result.quot, 10);
		dig_buffer[index] = div_result.rem + '0';
	}

	// The last item in the string must be a '\0' null character
	dig_buffer[6] = '\0';
    372e:	1f 82       	std	Y+7, r1	; 0x07
    3730:	be 01       	movw	r22, r28
    3732:	6f 5f       	subi	r22, 0xFF	; 255
    3734:	7f 4f       	sbci	r23, 0xFF	; 255
    3736:	c6 01       	movw	r24, r12
    3738:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>

	// Write the buffer, which now contains microsecond digits
	serial << dig_buffer;

	return (serial);
}
    373c:	c6 01       	movw	r24, r12
    373e:	2f 96       	adiw	r28, 0x0f	; 15
    3740:	cd bf       	out	0x3d, r28	; 61
    3742:	de bf       	out	0x3e, r29	; 62
    3744:	df 91       	pop	r29
    3746:	cf 91       	pop	r28
    3748:	1f 91       	pop	r17
    374a:	0f 91       	pop	r16
    374c:	ff 90       	pop	r15
    374e:	ef 90       	pop	r14
    3750:	df 90       	pop	r13
    3752:	cf 90       	pop	r12
    3754:	08 95       	ret

00003756 <_ZN10time_stamp10set_to_nowEv>:
 *  tick count. Still trying to figure out how to detect and fix this problem... 
 *  @return A reference to this time_stamp object, useful for printing the current time
 */

time_stamp& time_stamp::set_to_now (void)
{
    3756:	cf 93       	push	r28
    3758:	df 93       	push	r29
    375a:	ec 01       	movw	r28, r24
	// First disable interrupts so that if the hardware timer hits its maximum value
	// after this point and before we're done, the RTOS tick count won't be incremented
	// and also this function won't be interrupted by a task switch
	portENTER_CRITICAL ();
    375c:	0f b6       	in	r0, 0x3f	; 63
    375e:	f8 94       	cli
    3760:	0f 92       	push	r0
	#elif (defined TIMER3_COMPA_vect)
		hardware_count = TCNT3;
	#elif (defined TIMER1_COMPA_vect)
	hardware_count = TCNT1;
	#else
		hardware_count = TCC0.CNT;
    3762:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    3766:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    376a:	8c 83       	std	Y+4, r24	; 0x04
    376c:	9d 83       	std	Y+5, r25	; 0x05
	#endif

	// Now get the tick count (interrupts are still disabled)
	tick_count = xTaskGetTickCount ();
    376e:	0e 94 2c 14 	call	0x2858	; 0x2858 <xTaskGetTickCount>
    3772:	68 83       	st	Y, r22
    3774:	79 83       	std	Y+1, r23	; 0x01
    3776:	8a 83       	std	Y+2, r24	; 0x02
    3778:	9b 83       	std	Y+3, r25	; 0x03

	// Re-enable interrupts here; if the tick count is incremented now, that's fine
	portEXIT_CRITICAL ();
    377a:	0f 90       	pop	r0
    377c:	0f be       	out	0x3f, r0	; 63

	// Return a reference to this object
	return (*this);
}
    377e:	ce 01       	movw	r24, r28
    3780:	df 91       	pop	r29
    3782:	cf 91       	pop	r28
    3784:	08 95       	ret

00003786 <_Z15hex_dump_memoryPhS_P8emstreambh>:
 *      of a task's stack memory space. 
 */

void hex_dump_memory (uint8_t* start_address, uint8_t* end_address,
					  emstream* p_ser_dev, bool highlight, uint8_t empty_code)
{
    3786:	5f 92       	push	r5
    3788:	6f 92       	push	r6
    378a:	7f 92       	push	r7
    378c:	8f 92       	push	r8
    378e:	9f 92       	push	r9
    3790:	af 92       	push	r10
    3792:	bf 92       	push	r11
    3794:	cf 92       	push	r12
    3796:	df 92       	push	r13
    3798:	ef 92       	push	r14
    379a:	ff 92       	push	r15
    379c:	0f 93       	push	r16
    379e:	1f 93       	push	r17
    37a0:	cf 93       	push	r28
    37a2:	df 93       	push	r29
    37a4:	5c 01       	movw	r10, r24
    37a6:	4b 01       	movw	r8, r22
    37a8:	7a 01       	movw	r14, r20
    37aa:	12 2f       	mov	r17, r18
    37ac:	70 2e       	mov	r7, r16
	// pointers together, we convert the pointers into equivalent integers (this is
	// non-portable and may need to be changed for other processors!), add those
	// together, then convert back into a pointer

	// Print DUMP_BYTES_PER_LINE bytes on each line
	*p_ser_dev << hex;
    37ae:	63 e0       	ldi	r22, 0x03	; 3
    37b0:	ca 01       	movw	r24, r20
    37b2:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
	while (start_address < end_address)
    37b6:	a8 14       	cp	r10, r8
    37b8:	b9 04       	cpc	r11, r9
    37ba:	08 f0       	brcs	.+2      	; 0x37be <_Z15hex_dump_memoryPhS_P8emstreambh+0x38>
    37bc:	7d c0       	rjmp	.+250    	; 0x38b8 <_Z15hex_dump_memoryPhS_P8emstreambh+0x132>
    37be:	65 01       	movw	r12, r10
    37c0:	84 e1       	ldi	r24, 0x14	; 20
    37c2:	c8 0e       	add	r12, r24
    37c4:	d1 1c       	adc	r13, r1
    37c6:	00 e0       	ldi	r16, 0x00	; 0
	{
		// Print the line address 
		*p_ser_dev << (size_t)(start_address) << PMS ("  ");
    37c8:	6a 2c       	mov	r6, r10
    37ca:	5b 2c       	mov	r5, r11
    37cc:	b5 01       	movw	r22, r10
    37ce:	c7 01       	movw	r24, r14
    37d0:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN8emstreamlsEj>
    37d4:	6a e0       	ldi	r22, 0x0A	; 10
    37d6:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    37da:	61 e6       	ldi	r22, 0x61	; 97
    37dc:	76 e0       	ldi	r23, 0x06	; 6
    37de:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>

		// Show a line full of data in hexadecimal format. If the memory has not been
		// changed from its original value, show it non-highlighted
		if (highlight && found_changes)
    37e2:	11 23       	and	r17, r17
    37e4:	09 f4       	brne	.+2      	; 0x37e8 <_Z15hex_dump_memoryPhS_P8emstreambh+0x62>
    37e6:	6d c0       	rjmp	.+218    	; 0x38c2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13c>
    37e8:	00 23       	and	r16, r16
    37ea:	09 f4       	brne	.+2      	; 0x37ee <_Z15hex_dump_memoryPhS_P8emstreambh+0x68>
    37ec:	6a c0       	rjmp	.+212    	; 0x38c2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13c>
		{
			*p_ser_dev << ATERM_BOLD;
    37ee:	6a e0       	ldi	r22, 0x0A	; 10
    37f0:	c7 01       	movw	r24, r14
    37f2:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    37f6:	6c e5       	ldi	r22, 0x5C	; 92
    37f8:	76 e0       	ldi	r23, 0x06	; 6
    37fa:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    37fe:	61 c0       	rjmp	.+194    	; 0x38c2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13c>
		}
		for (byte_count = 0; byte_count < DUMP_BYTES_PER_LINE; byte_count++)
		{
			if (highlight && (!found_changes) && ((*start_address) != empty_code))
    3800:	11 23       	and	r17, r17
    3802:	71 f0       	breq	.+28     	; 0x3820 <_Z15hex_dump_memoryPhS_P8emstreambh+0x9a>
    3804:	01 11       	cpse	r16, r1
    3806:	0c c0       	rjmp	.+24     	; 0x3820 <_Z15hex_dump_memoryPhS_P8emstreambh+0x9a>
    3808:	88 81       	ld	r24, Y
    380a:	87 15       	cp	r24, r7
    380c:	49 f0       	breq	.+18     	; 0x3820 <_Z15hex_dump_memoryPhS_P8emstreambh+0x9a>
			{
				found_changes = true;
				*p_ser_dev << ATERM_BOLD;
    380e:	6a e0       	ldi	r22, 0x0A	; 10
    3810:	c7 01       	movw	r24, r14
    3812:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    3816:	67 e5       	ldi	r22, 0x57	; 87
    3818:	76 e0       	ldi	r23, 0x06	; 6
    381a:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
		}
		for (byte_count = 0; byte_count < DUMP_BYTES_PER_LINE; byte_count++)
		{
			if (highlight && (!found_changes) && ((*start_address) != empty_code))
			{
				found_changes = true;
    381e:	01 e0       	ldi	r16, 0x01	; 1
				*p_ser_dev << ATERM_BOLD;
			}
			*p_ser_dev << (uint8_t)(*start_address++) << (char)(' ');
    3820:	69 91       	ld	r22, Y+
    3822:	c7 01       	movw	r24, r14
    3824:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <_ZN8emstreamlsEh>
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    3828:	dc 01       	movw	r26, r24
    382a:	ed 91       	ld	r30, X+
    382c:	fc 91       	ld	r31, X
    382e:	02 80       	ldd	r0, Z+2	; 0x02
    3830:	f3 81       	ldd	r31, Z+3	; 0x03
    3832:	e0 2d       	mov	r30, r0
    3834:	60 e2       	ldi	r22, 0x20	; 32
    3836:	19 95       	eicall
		// changed from its original value, show it non-highlighted
		if (highlight && found_changes)
		{
			*p_ser_dev << ATERM_BOLD;
		}
		for (byte_count = 0; byte_count < DUMP_BYTES_PER_LINE; byte_count++)
    3838:	cc 16       	cp	r12, r28
    383a:	dd 06       	cpc	r13, r29
    383c:	09 f7       	brne	.-62     	; 0x3800 <_Z15hex_dump_memoryPhS_P8emstreambh+0x7a>
			}
			*p_ser_dev << (uint8_t)(*start_address++) << (char)(' ');
		}

		// Show the same line full of data in text format
		if (highlight)
    383e:	11 23       	and	r17, r17
    3840:	89 f0       	breq	.+34     	; 0x3864 <_Z15hex_dump_memoryPhS_P8emstreambh+0xde>
		{
			*p_ser_dev << ATERM_NORM_INT << (char)(' ');
    3842:	6a e0       	ldi	r22, 0x0A	; 10
    3844:	c7 01       	movw	r24, r14
    3846:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    384a:	ec 01       	movw	r28, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    384c:	61 e5       	ldi	r22, 0x51	; 81
    384e:	76 e0       	ldi	r23, 0x06	; 6
    3850:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    3854:	e8 81       	ld	r30, Y
    3856:	f9 81       	ldd	r31, Y+1	; 0x01
    3858:	02 80       	ldd	r0, Z+2	; 0x02
    385a:	f3 81       	ldd	r31, Z+3	; 0x03
    385c:	e0 2d       	mov	r30, r0
    385e:	60 e2       	ldi	r22, 0x20	; 32
    3860:	ce 01       	movw	r24, r28
    3862:	19 95       	eicall
		}
		for (byte_count = 0; byte_count < DUMP_BYTES_PER_LINE; byte_count++)
		{
			if (highlight && (!found_changes) && ((*start_address) != empty_code))
			{
				found_changes = true;
    3864:	c6 2d       	mov	r28, r6
    3866:	d5 2d       	mov	r29, r5
		{
			*p_ser_dev << ATERM_NORM_INT << (char)(' ');
		}
		for (start_address -= DUMP_BYTES_PER_LINE; byte_count > 0; byte_count--)
		{
			temp_byte = *start_address++;
    3868:	69 91       	ld	r22, Y+
			if (temp_byte >= ' ' && temp_byte <= '~')
    386a:	80 ee       	ldi	r24, 0xE0	; 224
    386c:	86 0f       	add	r24, r22
    386e:	8f 35       	cpi	r24, 0x5F	; 95
    3870:	48 f4       	brcc	.+18     	; 0x3884 <_Z15hex_dump_memoryPhS_P8emstreambh+0xfe>
				p_ser_dev->putchar (temp_byte);
    3872:	d7 01       	movw	r26, r14
    3874:	ed 91       	ld	r30, X+
    3876:	fc 91       	ld	r31, X
    3878:	02 80       	ldd	r0, Z+2	; 0x02
    387a:	f3 81       	ldd	r31, Z+3	; 0x03
    387c:	e0 2d       	mov	r30, r0
    387e:	c7 01       	movw	r24, r14
    3880:	19 95       	eicall
    3882:	09 c0       	rjmp	.+18     	; 0x3896 <_Z15hex_dump_memoryPhS_P8emstreambh+0x110>
			else
				p_ser_dev->putchar ('.');
    3884:	d7 01       	movw	r26, r14
    3886:	ed 91       	ld	r30, X+
    3888:	fc 91       	ld	r31, X
    388a:	02 80       	ldd	r0, Z+2	; 0x02
    388c:	f3 81       	ldd	r31, Z+3	; 0x03
    388e:	e0 2d       	mov	r30, r0
    3890:	6e e2       	ldi	r22, 0x2E	; 46
    3892:	c7 01       	movw	r24, r14
    3894:	19 95       	eicall
		// Show the same line full of data in text format
		if (highlight)
		{
			*p_ser_dev << ATERM_NORM_INT << (char)(' ');
		}
		for (start_address -= DUMP_BYTES_PER_LINE; byte_count > 0; byte_count--)
    3896:	cc 16       	cp	r12, r28
    3898:	dd 06       	cpc	r13, r29
    389a:	31 f7       	brne	.-52     	; 0x3868 <_Z15hex_dump_memoryPhS_P8emstreambh+0xe2>
    389c:	b4 e1       	ldi	r27, 0x14	; 20
    389e:	ab 0e       	add	r10, r27
    38a0:	b1 1c       	adc	r11, r1
			else
				p_ser_dev->putchar ('.');
		}

		// Put a return at the end of the line
		*p_ser_dev << endl;
    38a2:	66 e0       	ldi	r22, 0x06	; 6
    38a4:	c7 01       	movw	r24, r14
    38a6:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    38aa:	84 e1       	ldi	r24, 0x14	; 20
    38ac:	c8 0e       	add	r12, r24
    38ae:	d1 1c       	adc	r13, r1
	// non-portable and may need to be changed for other processors!), add those
	// together, then convert back into a pointer

	// Print DUMP_BYTES_PER_LINE bytes on each line
	*p_ser_dev << hex;
	while (start_address < end_address)
    38b0:	a8 14       	cp	r10, r8
    38b2:	b9 04       	cpc	r11, r9
    38b4:	08 f4       	brcc	.+2      	; 0x38b8 <_Z15hex_dump_memoryPhS_P8emstreambh+0x132>
    38b6:	88 cf       	rjmp	.-240    	; 0x37c8 <_Z15hex_dump_memoryPhS_P8emstreambh+0x42>
		}

		// Put a return at the end of the line
		*p_ser_dev << endl;
	}
	*p_ser_dev << dec;
    38b8:	62 e0       	ldi	r22, 0x02	; 2
    38ba:	c7 01       	movw	r24, r14
    38bc:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
}
    38c0:	03 c0       	rjmp	.+6      	; 0x38c8 <_Z15hex_dump_memoryPhS_P8emstreambh+0x142>
	// non-portable and may need to be changed for other processors!), add those
	// together, then convert back into a pointer

	// Print DUMP_BYTES_PER_LINE bytes on each line
	*p_ser_dev << hex;
	while (start_address < end_address)
    38c2:	c6 2d       	mov	r28, r6
    38c4:	d5 2d       	mov	r29, r5
    38c6:	9c cf       	rjmp	.-200    	; 0x3800 <_Z15hex_dump_memoryPhS_P8emstreambh+0x7a>

		// Put a return at the end of the line
		*p_ser_dev << endl;
	}
	*p_ser_dev << dec;
}
    38c8:	df 91       	pop	r29
    38ca:	cf 91       	pop	r28
    38cc:	1f 91       	pop	r17
    38ce:	0f 91       	pop	r16
    38d0:	ff 90       	pop	r15
    38d2:	ef 90       	pop	r14
    38d4:	df 90       	pop	r13
    38d6:	cf 90       	pop	r12
    38d8:	bf 90       	pop	r11
    38da:	af 90       	pop	r10
    38dc:	9f 90       	pop	r9
    38de:	8f 90       	pop	r8
    38e0:	7f 90       	pop	r7
    38e2:	6f 90       	pop	r6
    38e4:	5f 90       	pop	r5
    38e6:	08 95       	ret

000038e8 <_Znwj>:
 *  @param g A pointer to some random thing
 */
extern "C"
{
void __cxa_guard_abort (__guard *g)
    {
    38e8:	0e 94 b6 0c 	call	0x196c	; 0x196c <pvPortMalloc>
    38ec:	08 95       	ret

000038ee <_Znaj>:
    38ee:	0e 94 b6 0c 	call	0x196c	; 0x196c <pvPortMalloc>
    38f2:	08 95       	ret

000038f4 <__cxa_pure_virtual>:
 */

extern "C"
{    
void __cxa_pure_virtual (void)
    {
    38f4:	08 95       	ret

000038f6 <_ZN7base232C1EjP12USART_struct>:
 *  @param baud_rate The desired baud rate for serial communications. Default is 9600
 *  @param port_number The number of the serial port, 0 or 1 (the second port numbered
 *                     1 only exists on some processors). The default is port 0 
 */

base232::base232 (unsigned int baud_rate, USART_t* p_usart)
    38f6:	cf 93       	push	r28
    38f8:	df 93       	push	r29
    38fa:	fc 01       	movw	r30, r24
    38fc:	da 01       	movw	r26, r20
{
	// Store pointers to usart struct and port struct
	p_usart = p_usart;
	p_port = p_port;
	
	if(p_usart == &USARTC0)
    38fe:	40 3a       	cpi	r20, 0xA0	; 160
    3900:	68 e0       	ldi	r22, 0x08	; 8
    3902:	56 07       	cpc	r21, r22
    3904:	49 f4       	brne	.+18     	; 0x3918 <_ZN7base232C1EjP12USART_struct+0x22>
	{
		p_port = &PORTC;
    3906:	80 e4       	ldi	r24, 0x40	; 64
    3908:	96 e0       	ldi	r25, 0x06	; 6
    390a:	82 83       	std	Z+2, r24	; 0x02
    390c:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 2;
    390e:	82 e0       	ldi	r24, 0x02	; 2
    3910:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 3;
    3912:	83 e0       	ldi	r24, 0x03	; 3
    3914:	85 83       	std	Z+5, r24	; 0x05
    3916:	32 c0       	rjmp	.+100    	; 0x397c <_ZN7base232C1EjP12USART_struct+0x86>
	}
#ifdef USARTC1 
	else if(p_usart == &USARTC1)
    3918:	40 3b       	cpi	r20, 0xB0	; 176
    391a:	78 e0       	ldi	r23, 0x08	; 8
    391c:	57 07       	cpc	r21, r23
    391e:	49 f4       	brne	.+18     	; 0x3932 <_ZN7base232C1EjP12USART_struct+0x3c>
	{
		p_port = &PORTC;
    3920:	80 e4       	ldi	r24, 0x40	; 64
    3922:	96 e0       	ldi	r25, 0x06	; 6
    3924:	82 83       	std	Z+2, r24	; 0x02
    3926:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 6;
    3928:	86 e0       	ldi	r24, 0x06	; 6
    392a:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 7;
    392c:	87 e0       	ldi	r24, 0x07	; 7
    392e:	85 83       	std	Z+5, r24	; 0x05
    3930:	25 c0       	rjmp	.+74     	; 0x397c <_ZN7base232C1EjP12USART_struct+0x86>
	}
#endif
#ifdef USARTD0
	else if(p_usart == &USARTD0)
    3932:	40 3a       	cpi	r20, 0xA0	; 160
    3934:	89 e0       	ldi	r24, 0x09	; 9
    3936:	58 07       	cpc	r21, r24
    3938:	49 f4       	brne	.+18     	; 0x394c <_ZN7base232C1EjP12USART_struct+0x56>
	{
		p_port = &PORTD;
    393a:	80 e6       	ldi	r24, 0x60	; 96
    393c:	96 e0       	ldi	r25, 0x06	; 6
    393e:	82 83       	std	Z+2, r24	; 0x02
    3940:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 2;
    3942:	82 e0       	ldi	r24, 0x02	; 2
    3944:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 3;
    3946:	83 e0       	ldi	r24, 0x03	; 3
    3948:	85 83       	std	Z+5, r24	; 0x05
    394a:	18 c0       	rjmp	.+48     	; 0x397c <_ZN7base232C1EjP12USART_struct+0x86>
	}
#endif
#ifdef USARTD1 
	else if(p_usart == &USARTD1)
    394c:	40 3b       	cpi	r20, 0xB0	; 176
    394e:	69 e0       	ldi	r22, 0x09	; 9
    3950:	56 07       	cpc	r21, r22
    3952:	49 f4       	brne	.+18     	; 0x3966 <_ZN7base232C1EjP12USART_struct+0x70>
	{
		p_port = &PORTD;
    3954:	80 e6       	ldi	r24, 0x60	; 96
    3956:	96 e0       	ldi	r25, 0x06	; 6
    3958:	82 83       	std	Z+2, r24	; 0x02
    395a:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 6;
    395c:	86 e0       	ldi	r24, 0x06	; 6
    395e:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 7;
    3960:	87 e0       	ldi	r24, 0x07	; 7
    3962:	85 83       	std	Z+5, r24	; 0x05
    3964:	0b c0       	rjmp	.+22     	; 0x397c <_ZN7base232C1EjP12USART_struct+0x86>
	}
#endif
#ifdef USARTE0
	else if(p_usart == &USARTE0)
    3966:	40 3a       	cpi	r20, 0xA0	; 160
    3968:	5a 40       	sbci	r21, 0x0A	; 10
    396a:	41 f4       	brne	.+16     	; 0x397c <_ZN7base232C1EjP12USART_struct+0x86>
	{
		p_port = &PORTE;
    396c:	80 e8       	ldi	r24, 0x80	; 128
    396e:	96 e0       	ldi	r25, 0x06	; 6
    3970:	82 83       	std	Z+2, r24	; 0x02
    3972:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 2;
    3974:	82 e0       	ldi	r24, 0x02	; 2
    3976:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 3;
    3978:	83 e0       	ldi	r24, 0x03	; 3
    397a:	85 83       	std	Z+5, r24	; 0x05
	else
	{
	}
	
	// Store pointers to data, status, config registers
	p_UDR = &(p_usart->DATA);
    397c:	a6 83       	std	Z+6, r26	; 0x06
    397e:	b7 83       	std	Z+7, r27	; 0x07
	p_USR = &(p_usart->STATUS);
    3980:	cd 01       	movw	r24, r26
    3982:	01 96       	adiw	r24, 0x01	; 1
    3984:	80 87       	std	Z+8, r24	; 0x08
    3986:	91 87       	std	Z+9, r25	; 0x09
	p_UCR = &(p_usart->CTRLB);
    3988:	03 96       	adiw	r24, 0x03	; 3
    398a:	82 87       	std	Z+10, r24	; 0x0a
    398c:	93 87       	std	Z+11, r25	; 0x0b
	
	// Set up TXD as an output that is high
	p_port->OUT |= (1 << txd_pin);
    398e:	25 81       	ldd	r18, Z+5	; 0x05
    3990:	c2 81       	ldd	r28, Z+2	; 0x02
    3992:	d3 81       	ldd	r29, Z+3	; 0x03
    3994:	4c 81       	ldd	r20, Y+4	; 0x04
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	bc 01       	movw	r22, r24
    399c:	02 c0       	rjmp	.+4      	; 0x39a2 <_ZN7base232C1EjP12USART_struct+0xac>
    399e:	66 0f       	add	r22, r22
    39a0:	77 1f       	adc	r23, r23
    39a2:	2a 95       	dec	r18
    39a4:	e2 f7       	brpl	.-8      	; 0x399e <_ZN7base232C1EjP12USART_struct+0xa8>
    39a6:	9b 01       	movw	r18, r22
    39a8:	24 2b       	or	r18, r20
    39aa:	2c 83       	std	Y+4, r18	; 0x04
	p_port->DIR |= (1 << txd_pin);
    39ac:	25 81       	ldd	r18, Z+5	; 0x05
    39ae:	c2 81       	ldd	r28, Z+2	; 0x02
    39b0:	d3 81       	ldd	r29, Z+3	; 0x03
    39b2:	48 81       	ld	r20, Y
    39b4:	bc 01       	movw	r22, r24
    39b6:	02 c0       	rjmp	.+4      	; 0x39bc <_ZN7base232C1EjP12USART_struct+0xc6>
    39b8:	66 0f       	add	r22, r22
    39ba:	77 1f       	adc	r23, r23
    39bc:	2a 95       	dec	r18
    39be:	e2 f7       	brpl	.-8      	; 0x39b8 <_ZN7base232C1EjP12USART_struct+0xc2>
    39c0:	9b 01       	movw	r18, r22
    39c2:	24 2b       	or	r18, r20
    39c4:	28 83       	st	Y, r18
	
	// Set up RXD as an input
	p_port->DIR &= ~(1 << rxd_pin);
    39c6:	34 81       	ldd	r19, Z+4	; 0x04
    39c8:	c2 81       	ldd	r28, Z+2	; 0x02
    39ca:	d3 81       	ldd	r29, Z+3	; 0x03
    39cc:	28 81       	ld	r18, Y
    39ce:	02 c0       	rjmp	.+4      	; 0x39d4 <_ZN7base232C1EjP12USART_struct+0xde>
    39d0:	88 0f       	add	r24, r24
    39d2:	99 1f       	adc	r25, r25
    39d4:	3a 95       	dec	r19
    39d6:	e2 f7       	brpl	.-8      	; 0x39d0 <_ZN7base232C1EjP12USART_struct+0xda>
    39d8:	80 95       	com	r24
    39da:	90 95       	com	r25
    39dc:	82 23       	and	r24, r18
    39de:	88 83       	st	Y, r24
	
	// Enable interrupts for RX at high priority
	p_usart->CTRLA = (0 << USART_RXCINTLVL1_bp | 1 << USART_RXCINTLVL0_bp);
    39e0:	80 e1       	ldi	r24, 0x10	; 16
    39e2:	13 96       	adiw	r26, 0x03	; 3
    39e4:	8c 93       	st	X, r24
    39e6:	13 97       	sbiw	r26, 0x03	; 3
	
	// Select USART Asynchronous Mode and choose character size
	p_usart->CTRLC = (1 << USART_CHSIZE0_bp | 1 << USART_CHSIZE1_bp );
    39e8:	83 e0       	ldi	r24, 0x03	; 3
    39ea:	15 96       	adiw	r26, 0x05	; 5
    39ec:	8c 93       	st	X, r24
    39ee:	15 97       	sbiw	r26, 0x05	; 5

	// Select the baudrate according to Table 23-5 in the datasheet
	p_usart->BAUDCTRLB = (-1 << USART_BSCALE0_bp);
    39f0:	80 ef       	ldi	r24, 0xF0	; 240
    39f2:	17 96       	adiw	r26, 0x07	; 7
    39f4:	8c 93       	st	X, r24
    39f6:	17 97       	sbiw	r26, 0x07	; 7
	p_usart->BAUDCTRLA = (33 << USART_BSEL0_bp);
    39f8:	81 e2       	ldi	r24, 0x21	; 33
    39fa:	16 96       	adiw	r26, 0x06	; 6
    39fc:	8c 93       	st	X, r24
    39fe:	16 97       	sbiw	r26, 0x06	; 6

	// Enable the RX and TX devices
	p_usart->CTRLB = (1 << USART_RXEN_bp | 1<< USART_TXEN_bp);
    3a00:	88 e1       	ldi	r24, 0x18	; 24
    3a02:	14 96       	adiw	r26, 0x04	; 4
    3a04:	8c 93       	st	X, r24

	// Save some masks
	mask_RXC = USART_RXCIF_bm;
    3a06:	80 e8       	ldi	r24, 0x80	; 128
    3a08:	85 87       	std	Z+13, r24	; 0x0d
	mask_TXC = USART_TXCIF_bm;
    3a0a:	80 e4       	ldi	r24, 0x40	; 64
    3a0c:	86 87       	std	Z+14, r24	; 0x0e
	mask_UDRE = USART_DREIF_bm;
    3a0e:	80 e2       	ldi	r24, 0x20	; 32
    3a10:	84 87       	std	Z+12, r24	; 0x0c
	
	// Read the data register to ensure that it's empty
	p_UDR[0]; p_UDR[0];
    3a12:	06 80       	ldd	r0, Z+6	; 0x06
    3a14:	f7 81       	ldd	r31, Z+7	; 0x07
    3a16:	e0 2d       	mov	r30, r0
    3a18:	80 81       	ld	r24, Z
    3a1a:	80 81       	ld	r24, Z
}
    3a1c:	df 91       	pop	r29
    3a1e:	cf 91       	pop	r28
    3a20:	08 95       	ret

00003a22 <_ZN8emstream13ready_to_sendEv>:
		digits = 7;
	}
	bts_glob_prec = digits;

	return (manip_set_precision);
}
    3a22:	81 e0       	ldi	r24, 0x01	; 1
    3a24:	08 95       	ret

00003a26 <_ZN8emstream7getcharEv>:
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	08 95       	ret

00003a2c <_ZN8emstream14check_for_charEv>:
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	08 95       	ret

00003a30 <_ZN8emstream12transmit_nowEv>:
    3a30:	08 95       	ret

00003a32 <_ZN8emstream12clear_screenEv>:
    3a32:	08 95       	ret

00003a34 <_ZN8emstreamC1Ev>:
    3a34:	fc 01       	movw	r30, r24
    3a36:	84 e3       	ldi	r24, 0x34	; 52
    3a38:	91 e2       	ldi	r25, 0x21	; 33
    3a3a:	80 83       	st	Z, r24
    3a3c:	91 83       	std	Z+1, r25	; 0x01
    3a3e:	8a e0       	ldi	r24, 0x0A	; 10
    3a40:	82 83       	std	Z+2, r24	; 0x02
    3a42:	13 82       	std	Z+3, r1	; 0x03
    3a44:	83 e0       	ldi	r24, 0x03	; 3
    3a46:	85 83       	std	Z+5, r24	; 0x05
    3a48:	14 82       	std	Z+4, r1	; 0x04
    3a4a:	16 82       	std	Z+6, r1	; 0x06
    3a4c:	17 82       	std	Z+7, r1	; 0x07
    3a4e:	08 95       	ret

00003a50 <_ZN8emstream4putsEPKc>:
    3a50:	0f 93       	push	r16
    3a52:	1f 93       	push	r17
    3a54:	cf 93       	push	r28
    3a56:	df 93       	push	r29
    3a58:	8c 01       	movw	r16, r24
    3a5a:	fb 01       	movw	r30, r22
    3a5c:	dc 01       	movw	r26, r24
    3a5e:	14 96       	adiw	r26, 0x04	; 4
    3a60:	8c 91       	ld	r24, X
    3a62:	81 11       	cpse	r24, r1
    3a64:	04 c0       	rjmp	.+8      	; 0x3a6e <_ZN8emstream4putsEPKc+0x1e>
    3a66:	60 81       	ld	r22, Z
    3a68:	61 11       	cpse	r22, r1
    3a6a:	17 c0       	rjmp	.+46     	; 0x3a9a <_ZN8emstream4putsEPKc+0x4a>
    3a6c:	23 c0       	rjmp	.+70     	; 0x3ab4 <_ZN8emstream4putsEPKc+0x64>
    3a6e:	d8 01       	movw	r26, r16
    3a70:	14 96       	adiw	r26, 0x04	; 4
    3a72:	1c 92       	st	X, r1
    3a74:	eb 01       	movw	r28, r22
    3a76:	21 96       	adiw	r28, 0x01	; 1
    3a78:	64 91       	lpm	r22, Z
    3a7a:	66 23       	and	r22, r22
    3a7c:	d9 f0       	breq	.+54     	; 0x3ab4 <_ZN8emstream4putsEPKc+0x64>
    3a7e:	d8 01       	movw	r26, r16
    3a80:	ed 91       	ld	r30, X+
    3a82:	fc 91       	ld	r31, X
    3a84:	02 80       	ldd	r0, Z+2	; 0x02
    3a86:	f3 81       	ldd	r31, Z+3	; 0x03
    3a88:	e0 2d       	mov	r30, r0
    3a8a:	c8 01       	movw	r24, r16
    3a8c:	19 95       	eicall
    3a8e:	fe 01       	movw	r30, r28
    3a90:	64 91       	lpm	r22, Z
    3a92:	21 96       	adiw	r28, 0x01	; 1
    3a94:	61 11       	cpse	r22, r1
    3a96:	f3 cf       	rjmp	.-26     	; 0x3a7e <_ZN8emstream4putsEPKc+0x2e>
    3a98:	0d c0       	rjmp	.+26     	; 0x3ab4 <_ZN8emstream4putsEPKc+0x64>
    3a9a:	ef 01       	movw	r28, r30
    3a9c:	21 96       	adiw	r28, 0x01	; 1
    3a9e:	d8 01       	movw	r26, r16
    3aa0:	ed 91       	ld	r30, X+
    3aa2:	fc 91       	ld	r31, X
    3aa4:	02 80       	ldd	r0, Z+2	; 0x02
    3aa6:	f3 81       	ldd	r31, Z+3	; 0x03
    3aa8:	e0 2d       	mov	r30, r0
    3aaa:	c8 01       	movw	r24, r16
    3aac:	19 95       	eicall
    3aae:	69 91       	ld	r22, Y+
    3ab0:	61 11       	cpse	r22, r1
    3ab2:	f5 cf       	rjmp	.-22     	; 0x3a9e <_ZN8emstream4putsEPKc+0x4e>
    3ab4:	df 91       	pop	r29
    3ab6:	cf 91       	pop	r28
    3ab8:	1f 91       	pop	r17
    3aba:	0f 91       	pop	r16
    3abc:	08 95       	ret

00003abe <_ZN8emstreamlsE15ser_manipulator>:
 *  @return A reference to the serial device to which the data was printed. This
 *          reference is used to string printable items together with "<<" operators
 */

emstream& emstream::operator<< (ser_manipulator new_manip)
{
    3abe:	cf 93       	push	r28
    3ac0:	df 93       	push	r29
    3ac2:	ec 01       	movw	r28, r24
	switch (new_manip)
    3ac4:	86 2f       	mov	r24, r22
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	8b 30       	cpi	r24, 0x0B	; 11
    3aca:	91 05       	cpc	r25, r1
    3acc:	d8 f5       	brcc	.+118    	; 0x3b44 <_ZN8emstreamlsE15ser_manipulator+0x86>
    3ace:	fc 01       	movw	r30, r24
    3ad0:	88 27       	eor	r24, r24
    3ad2:	e2 50       	subi	r30, 0x02	; 2
    3ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ad8:	0c 94 c5 24 	jmp	0x498a	; 0x498a <__tablejump2__>
	{
		case (bin):                         // Print integers in binary
			base = 2;
    3adc:	82 e0       	ldi	r24, 0x02	; 2
    3ade:	8a 83       	std	Y+2, r24	; 0x02
			break;
    3ae0:	31 c0       	rjmp	.+98     	; 0x3b44 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (oct):                         // Print integers in octal
			base = 8;
    3ae2:	88 e0       	ldi	r24, 0x08	; 8
    3ae4:	8a 83       	std	Y+2, r24	; 0x02
			break;
    3ae6:	2e c0       	rjmp	.+92     	; 0x3b44 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (dec):                         // Print integers in decimal
			base = 10;
    3ae8:	8a e0       	ldi	r24, 0x0A	; 10
    3aea:	8a 83       	std	Y+2, r24	; 0x02
			break;
    3aec:	2b c0       	rjmp	.+86     	; 0x3b44 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (hex):                         // Print integers in hexadecimal
			base = 16;
    3aee:	80 e1       	ldi	r24, 0x10	; 16
    3af0:	8a 83       	std	Y+2, r24	; 0x02
			break;
    3af2:	28 c0       	rjmp	.+80     	; 0x3b44 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (ascii):                       // Print chars as ASCII letters, etc.
			print_ascii = true;
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	8b 83       	std	Y+3, r24	; 0x03
			break;
    3af8:	25 c0       	rjmp	.+74     	; 0x3b44 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (numeric):                     // Print chars as numbers
			print_ascii = false;
    3afa:	1b 82       	std	Y+3, r1	; 0x03
			break;
    3afc:	23 c0       	rjmp	.+70     	; 0x3b44 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (endl):                        // Send an end-of-line
			ENDL_STYLE ();
    3afe:	e8 81       	ld	r30, Y
    3b00:	f9 81       	ldd	r31, Y+1	; 0x01
    3b02:	02 80       	ldd	r0, Z+2	; 0x02
    3b04:	f3 81       	ldd	r31, Z+3	; 0x03
    3b06:	e0 2d       	mov	r30, r0
    3b08:	6d e0       	ldi	r22, 0x0D	; 13
    3b0a:	ce 01       	movw	r24, r28
    3b0c:	19 95       	eicall
    3b0e:	e8 81       	ld	r30, Y
    3b10:	f9 81       	ldd	r31, Y+1	; 0x01
    3b12:	02 80       	ldd	r0, Z+2	; 0x02
    3b14:	f3 81       	ldd	r31, Z+3	; 0x03
    3b16:	e0 2d       	mov	r30, r0
    3b18:	6a e0       	ldi	r22, 0x0A	; 10
    3b1a:	ce 01       	movw	r24, r28
    3b1c:	19 95       	eicall
			break;
    3b1e:	12 c0       	rjmp	.+36     	; 0x3b44 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (clrscr):                      // Send a clear-screen code
			clear_screen ();
    3b20:	e8 81       	ld	r30, Y
    3b22:	f9 81       	ldd	r31, Y+1	; 0x01
    3b24:	02 84       	ldd	r0, Z+10	; 0x0a
    3b26:	f3 85       	ldd	r31, Z+11	; 0x0b
    3b28:	e0 2d       	mov	r30, r0
    3b2a:	ce 01       	movw	r24, r28
    3b2c:	19 95       	eicall
			break;
    3b2e:	0a c0       	rjmp	.+20     	; 0x3b44 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (send_now):                    // Send whatever's in the send buffer
			transmit_now ();
    3b30:	e8 81       	ld	r30, Y
    3b32:	f9 81       	ldd	r31, Y+1	; 0x01
    3b34:	00 84       	ldd	r0, Z+8	; 0x08
    3b36:	f1 85       	ldd	r31, Z+9	; 0x09
    3b38:	e0 2d       	mov	r30, r0
    3b3a:	ce 01       	movw	r24, r28
    3b3c:	19 95       	eicall
			break;
    3b3e:	02 c0       	rjmp	.+4      	; 0x3b44 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (_p_str):                      // The next string is in program memory
			pgm_string = true;
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	8c 83       	std	Y+4, r24	; 0x04
		case (manip_set_precision):         // Set precision for printing floats
			break;
	};

	return (*this);
}
    3b44:	ce 01       	movw	r24, r28
    3b46:	df 91       	pop	r29
    3b48:	cf 91       	pop	r28
    3b4a:	08 95       	ret

00003b4c <_ZN8emstreamlsEj>:
 *          reference is used to string printable items together with "<<" operators
 *  @param num The 16-bit number to be sent out
 */

emstream& emstream::operator<< (uint16_t num)
{
    3b4c:	ff 92       	push	r15
    3b4e:	0f 93       	push	r16
    3b50:	1f 93       	push	r17
    3b52:	cf 93       	push	r28
    3b54:	df 93       	push	r29
    3b56:	cd b7       	in	r28, 0x3d	; 61
    3b58:	de b7       	in	r29, 0x3e	; 62
    3b5a:	61 97       	sbiw	r28, 0x11	; 17
    3b5c:	cd bf       	out	0x3d, r28	; 61
    3b5e:	de bf       	out	0x3e, r29	; 62
    3b60:	8c 01       	movw	r16, r24
    3b62:	f6 2e       	mov	r15, r22
    3b64:	97 2f       	mov	r25, r23
	if (base == 16 || base == 8 || base == 2)
    3b66:	f8 01       	movw	r30, r16
    3b68:	42 81       	ldd	r20, Z+2	; 0x02
    3b6a:	40 31       	cpi	r20, 0x10	; 16
    3b6c:	21 f0       	breq	.+8      	; 0x3b76 <_ZN8emstreamlsEj+0x2a>
    3b6e:	48 30       	cpi	r20, 0x08	; 8
    3b70:	11 f0       	breq	.+4      	; 0x3b76 <_ZN8emstreamlsEj+0x2a>
    3b72:	42 30       	cpi	r20, 0x02	; 2
    3b74:	41 f4       	brne	.+16     	; 0x3b86 <_ZN8emstreamlsEj+0x3a>
		{
			uint16_t whole;
			uint8_t bits[2];
		} parts;
		parts.whole = num;
		*this << parts.bits[1] << parts.bits[0];
    3b76:	69 2f       	mov	r22, r25
    3b78:	c8 01       	movw	r24, r16
    3b7a:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <_ZN8emstreamlsEh>
    3b7e:	6f 2d       	mov	r22, r15
    3b80:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <_ZN8emstreamlsEh>
    3b84:	0d c0       	rjmp	.+26     	; 0x3ba0 <_ZN8emstreamlsEj+0x54>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    3b86:	50 e0       	ldi	r21, 0x00	; 0
    3b88:	be 01       	movw	r22, r28
    3b8a:	6f 5f       	subi	r22, 0xFF	; 255
    3b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b8e:	8f 2d       	mov	r24, r15
    3b90:	0e 94 34 25 	call	0x4a68	; 0x4a68 <utoa>
	}
	else
	{
		char out_str[17];
		utoa (num, out_str, base);
		puts (out_str);
    3b94:	be 01       	movw	r22, r28
    3b96:	6f 5f       	subi	r22, 0xFF	; 255
    3b98:	7f 4f       	sbci	r23, 0xFF	; 255
    3b9a:	c8 01       	movw	r24, r16
    3b9c:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
	}

	return (*this);
}
    3ba0:	c8 01       	movw	r24, r16
    3ba2:	61 96       	adiw	r28, 0x11	; 17
    3ba4:	cd bf       	out	0x3d, r28	; 61
    3ba6:	de bf       	out	0x3e, r29	; 62
    3ba8:	df 91       	pop	r29
    3baa:	cf 91       	pop	r28
    3bac:	1f 91       	pop	r17
    3bae:	0f 91       	pop	r16
    3bb0:	ff 90       	pop	r15
    3bb2:	08 95       	ret

00003bb4 <_ZN8emstreamlsEm>:
 *          reference is used to string printable items together with "<<" operators
 *  @param num The 32-bit number to be sent out
 */

emstream& emstream::operator<< (uint32_t num)
{
    3bb4:	df 92       	push	r13
    3bb6:	ef 92       	push	r14
    3bb8:	ff 92       	push	r15
    3bba:	0f 93       	push	r16
    3bbc:	1f 93       	push	r17
    3bbe:	cf 93       	push	r28
    3bc0:	df 93       	push	r29
    3bc2:	cd b7       	in	r28, 0x3d	; 61
    3bc4:	de b7       	in	r29, 0x3e	; 62
    3bc6:	a1 97       	sbiw	r28, 0x21	; 33
    3bc8:	cd bf       	out	0x3d, r28	; 61
    3bca:	de bf       	out	0x3e, r29	; 62
    3bcc:	8c 01       	movw	r16, r24
    3bce:	d4 2e       	mov	r13, r20
    3bd0:	e5 2e       	mov	r14, r21
    3bd2:	f6 2e       	mov	r15, r22
    3bd4:	97 2f       	mov	r25, r23
	if (base == 16 || base == 8 || base == 2)
    3bd6:	f8 01       	movw	r30, r16
    3bd8:	22 81       	ldd	r18, Z+2	; 0x02
    3bda:	20 31       	cpi	r18, 0x10	; 16
    3bdc:	21 f0       	breq	.+8      	; 0x3be6 <_ZN8emstreamlsEm+0x32>
    3bde:	28 30       	cpi	r18, 0x08	; 8
    3be0:	11 f0       	breq	.+4      	; 0x3be6 <_ZN8emstreamlsEm+0x32>
    3be2:	22 30       	cpi	r18, 0x02	; 2
    3be4:	71 f4       	brne	.+28     	; 0x3c02 <_ZN8emstreamlsEm+0x4e>
		{
			uint32_t whole;
			uint8_t bits[4];
		} parts;
		parts.whole = num;
		*this << parts.bits[3] << parts.bits[2] << parts.bits[1] << parts.bits[0];
    3be6:	69 2f       	mov	r22, r25
    3be8:	c8 01       	movw	r24, r16
    3bea:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <_ZN8emstreamlsEh>
    3bee:	6f 2d       	mov	r22, r15
    3bf0:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <_ZN8emstreamlsEh>
    3bf4:	6e 2d       	mov	r22, r14
    3bf6:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <_ZN8emstreamlsEh>
    3bfa:	6d 2d       	mov	r22, r13
    3bfc:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <_ZN8emstreamlsEh>
    3c00:	0f c0       	rjmp	.+30     	; 0x3c20 <_ZN8emstreamlsEm+0x6c>
extern __inline__ __ATTR_GNU_INLINE__
char *ultoa (unsigned long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__ultoa (unsigned long, char *, int);
	return __ultoa (__val, __s, __radix);
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	ae 01       	movw	r20, r28
    3c06:	4f 5f       	subi	r20, 0xFF	; 255
    3c08:	5f 4f       	sbci	r21, 0xFF	; 255
    3c0a:	6d 2d       	mov	r22, r13
    3c0c:	7e 2d       	mov	r23, r14
    3c0e:	8f 2d       	mov	r24, r15
    3c10:	0e 94 07 25 	call	0x4a0e	; 0x4a0e <ultoa>
	}
	else
	{
		char out_str[33];
		ultoa ((long)num, out_str, base);
		puts (out_str);
    3c14:	be 01       	movw	r22, r28
    3c16:	6f 5f       	subi	r22, 0xFF	; 255
    3c18:	7f 4f       	sbci	r23, 0xFF	; 255
    3c1a:	c8 01       	movw	r24, r16
    3c1c:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
	}

	return (*this);
}
    3c20:	c8 01       	movw	r24, r16
    3c22:	a1 96       	adiw	r28, 0x21	; 33
    3c24:	cd bf       	out	0x3d, r28	; 61
    3c26:	de bf       	out	0x3e, r29	; 62
    3c28:	df 91       	pop	r29
    3c2a:	cf 91       	pop	r28
    3c2c:	1f 91       	pop	r17
    3c2e:	0f 91       	pop	r16
    3c30:	ff 90       	pop	r15
    3c32:	ef 90       	pop	r14
    3c34:	df 90       	pop	r13
    3c36:	08 95       	ret

00003c38 <_ZN8emstreamlsEh>:
 *          reference is used to string printable items together with "<<" operators
 *  @param num The 8-bit number or character to be sent out
 */

emstream& emstream::operator<< (uint8_t num)
{
    3c38:	cf 92       	push	r12
    3c3a:	df 92       	push	r13
    3c3c:	ef 92       	push	r14
    3c3e:	ff 92       	push	r15
    3c40:	0f 93       	push	r16
    3c42:	1f 93       	push	r17
    3c44:	cf 93       	push	r28
    3c46:	df 93       	push	r29
    3c48:	cd b7       	in	r28, 0x3d	; 61
    3c4a:	de b7       	in	r29, 0x3e	; 62
    3c4c:	29 97       	sbiw	r28, 0x09	; 9
    3c4e:	cd bf       	out	0x3d, r28	; 61
    3c50:	de bf       	out	0x3e, r29	; 62
    3c52:	8c 01       	movw	r16, r24
    3c54:	e6 2e       	mov	r14, r22
	uint8_t temp_char;                      // Temporary storage for a nibble

	if (print_ascii)
    3c56:	dc 01       	movw	r26, r24
    3c58:	13 96       	adiw	r26, 0x03	; 3
    3c5a:	8c 91       	ld	r24, X
    3c5c:	13 97       	sbiw	r26, 0x03	; 3
    3c5e:	88 23       	and	r24, r24
    3c60:	41 f0       	breq	.+16     	; 0x3c72 <_ZN8emstreamlsEh+0x3a>
	{
		putchar (num);
    3c62:	ed 91       	ld	r30, X+
    3c64:	fc 91       	ld	r31, X
    3c66:	02 80       	ldd	r0, Z+2	; 0x02
    3c68:	f3 81       	ldd	r31, Z+3	; 0x03
    3c6a:	e0 2d       	mov	r30, r0
    3c6c:	c8 01       	movw	r24, r16
    3c6e:	19 95       	eicall
    3c70:	56 c0       	rjmp	.+172    	; 0x3d1e <_ZN8emstreamlsEh+0xe6>
	}
	else if (base == 2)
    3c72:	f8 01       	movw	r30, r16
    3c74:	42 81       	ldd	r20, Z+2	; 0x02
    3c76:	42 30       	cpi	r20, 0x02	; 2
    3c78:	19 f5       	brne	.+70     	; 0x3cc0 <_ZN8emstreamlsEh+0x88>
    3c7a:	68 94       	set
    3c7c:	cc 24       	eor	r12, r12
    3c7e:	c3 f8       	bld	r12, 3
    3c80:	d1 2c       	mov	r13, r1
    3c82:	68 94       	set
    3c84:	ff 24       	eor	r15, r15
    3c86:	f7 f8       	bld	r15, 7
	{
		for (uint8_t bmask = 0x80; bmask != 0; bmask >>= 1)
		{
			if (num & bmask) putchar ('1');
    3c88:	8e 2d       	mov	r24, r14
    3c8a:	8f 21       	and	r24, r15
    3c8c:	51 f0       	breq	.+20     	; 0x3ca2 <_ZN8emstreamlsEh+0x6a>
    3c8e:	d8 01       	movw	r26, r16
    3c90:	ed 91       	ld	r30, X+
    3c92:	fc 91       	ld	r31, X
    3c94:	02 80       	ldd	r0, Z+2	; 0x02
    3c96:	f3 81       	ldd	r31, Z+3	; 0x03
    3c98:	e0 2d       	mov	r30, r0
    3c9a:	61 e3       	ldi	r22, 0x31	; 49
    3c9c:	c8 01       	movw	r24, r16
    3c9e:	19 95       	eicall
    3ca0:	09 c0       	rjmp	.+18     	; 0x3cb4 <_ZN8emstreamlsEh+0x7c>
			else             putchar ('0');
    3ca2:	d8 01       	movw	r26, r16
    3ca4:	ed 91       	ld	r30, X+
    3ca6:	fc 91       	ld	r31, X
    3ca8:	02 80       	ldd	r0, Z+2	; 0x02
    3caa:	f3 81       	ldd	r31, Z+3	; 0x03
    3cac:	e0 2d       	mov	r30, r0
    3cae:	60 e3       	ldi	r22, 0x30	; 48
    3cb0:	c8 01       	movw	r24, r16
    3cb2:	19 95       	eicall
	{
		putchar (num);
	}
	else if (base == 2)
	{
		for (uint8_t bmask = 0x80; bmask != 0; bmask >>= 1)
    3cb4:	f6 94       	lsr	r15
    3cb6:	b1 e0       	ldi	r27, 0x01	; 1
    3cb8:	cb 1a       	sub	r12, r27
    3cba:	d1 08       	sbc	r13, r1
    3cbc:	29 f7       	brne	.-54     	; 0x3c88 <_ZN8emstreamlsEh+0x50>
    3cbe:	2f c0       	rjmp	.+94     	; 0x3d1e <_ZN8emstreamlsEh+0xe6>
		{
			if (num & bmask) putchar ('1');
			else             putchar ('0');
		}
	}
	else if (base == 16)
    3cc0:	40 31       	cpi	r20, 0x10	; 16
    3cc2:	f9 f4       	brne	.+62     	; 0x3d02 <_ZN8emstreamlsEh+0xca>
	{
		temp_char = (num >> 4) & 0x0F;
    3cc4:	62 95       	swap	r22
    3cc6:	6f 70       	andi	r22, 0x0F	; 15
		putchar ((temp_char > 9) ? temp_char + ('A' - 10) : temp_char + '0');
    3cc8:	01 90       	ld	r0, Z+
    3cca:	f0 81       	ld	r31, Z
    3ccc:	e0 2d       	mov	r30, r0
    3cce:	02 80       	ldd	r0, Z+2	; 0x02
    3cd0:	f3 81       	ldd	r31, Z+3	; 0x03
    3cd2:	e0 2d       	mov	r30, r0
    3cd4:	6a 30       	cpi	r22, 0x0A	; 10
    3cd6:	10 f0       	brcs	.+4      	; 0x3cdc <_ZN8emstreamlsEh+0xa4>
    3cd8:	69 5c       	subi	r22, 0xC9	; 201
    3cda:	01 c0       	rjmp	.+2      	; 0x3cde <_ZN8emstreamlsEh+0xa6>
    3cdc:	60 5d       	subi	r22, 0xD0	; 208
    3cde:	c8 01       	movw	r24, r16
    3ce0:	19 95       	eicall
		temp_char = num & 0x0F;
    3ce2:	6e 2d       	mov	r22, r14
    3ce4:	6f 70       	andi	r22, 0x0F	; 15
		putchar ((temp_char > 9) ? temp_char + ('A' - 10) : temp_char + '0');
    3ce6:	d8 01       	movw	r26, r16
    3ce8:	ed 91       	ld	r30, X+
    3cea:	fc 91       	ld	r31, X
    3cec:	02 80       	ldd	r0, Z+2	; 0x02
    3cee:	f3 81       	ldd	r31, Z+3	; 0x03
    3cf0:	e0 2d       	mov	r30, r0
    3cf2:	6a 30       	cpi	r22, 0x0A	; 10
    3cf4:	10 f0       	brcs	.+4      	; 0x3cfa <_ZN8emstreamlsEh+0xc2>
    3cf6:	69 5c       	subi	r22, 0xC9	; 201
    3cf8:	01 c0       	rjmp	.+2      	; 0x3cfc <_ZN8emstreamlsEh+0xc4>
    3cfa:	60 5d       	subi	r22, 0xD0	; 208
    3cfc:	c8 01       	movw	r24, r16
    3cfe:	19 95       	eicall
    3d00:	0e c0       	rjmp	.+28     	; 0x3d1e <_ZN8emstreamlsEh+0xe6>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    3d02:	50 e0       	ldi	r21, 0x00	; 0
    3d04:	be 01       	movw	r22, r28
    3d06:	6f 5f       	subi	r22, 0xFF	; 255
    3d08:	7f 4f       	sbci	r23, 0xFF	; 255
    3d0a:	8e 2d       	mov	r24, r14
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	0e 94 34 25 	call	0x4a68	; 0x4a68 <utoa>
	}
	else
	{
		char out_str[9];
		utoa ((uint16_t)num, out_str, base);
		puts (out_str);
    3d12:	be 01       	movw	r22, r28
    3d14:	6f 5f       	subi	r22, 0xFF	; 255
    3d16:	7f 4f       	sbci	r23, 0xFF	; 255
    3d18:	c8 01       	movw	r24, r16
    3d1a:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
	}
	return (*this);
}
    3d1e:	c8 01       	movw	r24, r16
    3d20:	29 96       	adiw	r28, 0x09	; 9
    3d22:	cd bf       	out	0x3d, r28	; 61
    3d24:	de bf       	out	0x3e, r29	; 62
    3d26:	df 91       	pop	r29
    3d28:	cf 91       	pop	r28
    3d2a:	1f 91       	pop	r17
    3d2c:	0f 91       	pop	r16
    3d2e:	ff 90       	pop	r15
    3d30:	ef 90       	pop	r14
    3d32:	df 90       	pop	r13
    3d34:	cf 90       	pop	r12
    3d36:	08 95       	ret

00003d38 <_ZN5rs2327putcharEc>:
 *  @param chout The character to be sent out
 *  @return True if everything was OK and false if there was a timeout
 */

bool rs232::putchar (char chout)
{
    3d38:	dc 01       	movw	r26, r24
	// Now wait for the serial port transmitter buffer to be empty	 
	for (uint16_t count = 0; ((*p_USR & mask_UDRE) == 0); count++)
    3d3a:	50 96       	adiw	r26, 0x10	; 16
    3d3c:	ed 91       	ld	r30, X+
    3d3e:	fc 91       	ld	r31, X
    3d40:	51 97       	sbiw	r26, 0x11	; 17
    3d42:	80 81       	ld	r24, Z
    3d44:	54 96       	adiw	r26, 0x14	; 20
    3d46:	4c 91       	ld	r20, X
    3d48:	54 97       	sbiw	r26, 0x14	; 20
    3d4a:	84 23       	and	r24, r20
    3d4c:	29 f0       	breq	.+10     	; 0x3d58 <_ZN5rs2327putcharEc+0x20>
    3d4e:	09 c0       	rjmp	.+18     	; 0x3d62 <_ZN5rs2327putcharEc+0x2a>
    3d50:	21 50       	subi	r18, 0x01	; 1
    3d52:	31 09       	sbc	r19, r1
	{
		if (count > UART_TX_TOUT)
    3d54:	19 f4       	brne	.+6      	; 0x3d5c <_ZN5rs2327putcharEc+0x24>
    3d56:	12 c0       	rjmp	.+36     	; 0x3d7c <_ZN5rs2327putcharEc+0x44>
 */

bool rs232::putchar (char chout)
{
	// Now wait for the serial port transmitter buffer to be empty	 
	for (uint16_t count = 0; ((*p_USR & mask_UDRE) == 0); count++)
    3d58:	21 e2       	ldi	r18, 0x21	; 33
    3d5a:	3e e4       	ldi	r19, 0x4E	; 78
    3d5c:	90 81       	ld	r25, Z
    3d5e:	94 23       	and	r25, r20
    3d60:	b9 f3       	breq	.-18     	; 0x3d50 <_ZN5rs2327putcharEc+0x18>
	}

	// Clear the TXCn bit so it can be used to check if the serial port is busy.  This
	// check needs to be done prior to putting the processor into sleep mode.  Oddly,
	// the TXCn bit is cleared by writing a one to its bit location
	*p_USR |= mask_TXC;
    3d62:	90 81       	ld	r25, Z
    3d64:	56 96       	adiw	r26, 0x16	; 22
    3d66:	8c 91       	ld	r24, X
    3d68:	56 97       	sbiw	r26, 0x16	; 22
    3d6a:	89 2b       	or	r24, r25
    3d6c:	80 83       	st	Z, r24

	// The CTS line is 0 and the transmitter buffer is empty, so send the character
	*p_UDR = chout;
    3d6e:	1e 96       	adiw	r26, 0x0e	; 14
    3d70:	ed 91       	ld	r30, X+
    3d72:	fc 91       	ld	r31, X
    3d74:	1f 97       	sbiw	r26, 0x0f	; 15
    3d76:	60 83       	st	Z, r22
	return (true);
    3d78:	81 e0       	ldi	r24, 0x01	; 1
    3d7a:	08 95       	ret
{
	// Now wait for the serial port transmitter buffer to be empty	 
	for (uint16_t count = 0; ((*p_USR & mask_UDRE) == 0); count++)
	{
		if (count > UART_TX_TOUT)
			return (false);
    3d7c:	80 e0       	ldi	r24, 0x00	; 0
	*p_USR |= mask_TXC;

	// The CTS line is 0 and the transmitter buffer is empty, so send the character
	*p_UDR = chout;
	return (true);
}
    3d7e:	08 95       	ret

00003d80 <_ZN5rs2327getcharEv>:
 *  check_for_char() to ensure that there's data available first. 
 *  @return The character which was found in the serial port receive buffer
 */

int16_t rs232::getchar (void)
{
    3d80:	cf 93       	push	r28
    3d82:	df 93       	push	r29
    3d84:	fc 01       	movw	r30, r24
	uint8_t recv_char;						// Character read from the queue

	// Wait until there's a character in the receiver queue
	while (*p_rcv_read_index == *p_rcv_write_index);
    3d86:	c1 8d       	ldd	r28, Z+25	; 0x19
    3d88:	d2 8d       	ldd	r29, Z+26	; 0x1a
    3d8a:	28 81       	ld	r18, Y
    3d8c:	39 81       	ldd	r19, Y+1	; 0x01
    3d8e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3d90:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3d92:	4d 91       	ld	r20, X+
    3d94:	5c 91       	ld	r21, X
    3d96:	24 17       	cp	r18, r20
    3d98:	35 07       	cpc	r19, r21
    3d9a:	e9 f3       	breq	.-6      	; 0x3d96 <_ZN5rs2327getcharEv+0x16>
	recv_char = (*p_rcv_buffer)[*p_rcv_read_index];
    3d9c:	a7 89       	ldd	r26, Z+23	; 0x17
    3d9e:	b0 8d       	ldd	r27, Z+24	; 0x18
    3da0:	0d 90       	ld	r0, X+
    3da2:	bc 91       	ld	r27, X
    3da4:	a0 2d       	mov	r26, r0
    3da6:	a2 0f       	add	r26, r18
    3da8:	b3 1f       	adc	r27, r19
    3daa:	8c 91       	ld	r24, X
	if (++(*p_rcv_read_index) >= RSINT_BUF_SIZE)
    3dac:	2f 5f       	subi	r18, 0xFF	; 255
    3dae:	3f 4f       	sbci	r19, 0xFF	; 255
    3db0:	28 83       	st	Y, r18
    3db2:	39 83       	std	Y+1, r19	; 0x01
    3db4:	24 36       	cpi	r18, 0x64	; 100
    3db6:	31 05       	cpc	r19, r1
    3db8:	28 f0       	brcs	.+10     	; 0x3dc4 <_ZN5rs2327getcharEv+0x44>
		*p_rcv_read_index = 0;
    3dba:	01 8c       	ldd	r0, Z+25	; 0x19
    3dbc:	f2 8d       	ldd	r31, Z+26	; 0x1a
    3dbe:	e0 2d       	mov	r30, r0
    3dc0:	10 82       	st	Z, r1
    3dc2:	11 82       	std	Z+1, r1	; 0x01

	return (recv_char);
}
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	df 91       	pop	r29
    3dc8:	cf 91       	pop	r28
    3dca:	08 95       	ret

00003dcc <_ZN5rs23214check_for_charEv>:
 *  caused an interrupt. 
 *  @return True for character available, false for no character available
 */

bool rs232::check_for_char (void)
{
    3dcc:	cf 93       	push	r28
    3dce:	df 93       	push	r29
	return (*p_rcv_read_index != *p_rcv_write_index);
    3dd0:	ec 01       	movw	r28, r24
    3dd2:	a9 8d       	ldd	r26, Y+25	; 0x19
    3dd4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3dd6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3dd8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3dda:	81 e0       	ldi	r24, 0x01	; 1
    3ddc:	4d 91       	ld	r20, X+
    3dde:	5c 91       	ld	r21, X
    3de0:	20 81       	ld	r18, Z
    3de2:	31 81       	ldd	r19, Z+1	; 0x01
    3de4:	42 17       	cp	r20, r18
    3de6:	53 07       	cpc	r21, r19
    3de8:	09 f4       	brne	.+2      	; 0x3dec <_ZN5rs23214check_for_charEv+0x20>
    3dea:	80 e0       	ldi	r24, 0x00	; 0
}
    3dec:	df 91       	pop	r29
    3dee:	cf 91       	pop	r28
    3df0:	08 95       	ret

00003df2 <_ZN5rs23212clear_screenEv>:
 *  format modifier 'clrscr' is inserted in a line of "<<" stuff.
 */

void rs232::clear_screen (void)
{
	putchar (CLRSCR_STYLE);
    3df2:	dc 01       	movw	r26, r24
    3df4:	ed 91       	ld	r30, X+
    3df6:	fc 91       	ld	r31, X
    3df8:	02 80       	ldd	r0, Z+2	; 0x02
    3dfa:	f3 81       	ldd	r31, Z+3	; 0x03
    3dfc:	e0 2d       	mov	r30, r0
    3dfe:	6c e0       	ldi	r22, 0x0C	; 12
    3e00:	19 95       	eicall
    3e02:	08 95       	ret

00003e04 <_ZN5rs232C1EjP12USART_struct>:
 *  @param baud_rate The desired baud rate for serial communications. Default is 9600
 *  @param p_usart A pointer to the desired USART c-struct. The default is USARTC0. On an
 *                 XMGEGA choices are C0, C1, D0, D1, E0, E1, F0  
 */

rs232::rs232 (uint16_t baud_rate, USART_t* p_usart)
    3e04:	ef 92       	push	r14
    3e06:	ff 92       	push	r15
    3e08:	0f 93       	push	r16
    3e0a:	1f 93       	push	r17
    3e0c:	cf 93       	push	r28
    3e0e:	df 93       	push	r29
    3e10:	ec 01       	movw	r28, r24
    3e12:	7b 01       	movw	r14, r22
    3e14:	8a 01       	movw	r16, r20
	: emstream (), base232 (baud_rate, p_usart)
    3e16:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <_ZN8emstreamC1Ev>
    3e1a:	a8 01       	movw	r20, r16
    3e1c:	b7 01       	movw	r22, r14
    3e1e:	ce 01       	movw	r24, r28
    3e20:	08 96       	adiw	r24, 0x08	; 8
    3e22:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <_ZN7base232C1EjP12USART_struct>
    3e26:	84 e4       	ldi	r24, 0x44	; 68
    3e28:	91 e2       	ldi	r25, 0x21	; 33
    3e2a:	88 83       	st	Y, r24
    3e2c:	99 83       	std	Y+1, r25	; 0x01
{
	if(p_usart == &USARTC0)
    3e2e:	00 3a       	cpi	r16, 0xA0	; 160
    3e30:	88 e0       	ldi	r24, 0x08	; 8
    3e32:	18 07       	cpc	r17, r24
    3e34:	69 f4       	brne	.+26     	; 0x3e50 <_ZN5rs232C1EjP12USART_struct+0x4c>
	{
		p_rcv_buffer		= &rcvC0_buffer;
    3e36:	8e e4       	ldi	r24, 0x4E	; 78
    3e38:	92 e3       	ldi	r25, 0x32	; 50
    3e3a:	8f 8b       	std	Y+23, r24	; 0x17
    3e3c:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvC0_read_index;
    3e3e:	84 e4       	ldi	r24, 0x44	; 68
    3e40:	92 e3       	ldi	r25, 0x32	; 50
    3e42:	89 8f       	std	Y+25, r24	; 0x19
    3e44:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvC0_write_index;
    3e46:	8a e3       	ldi	r24, 0x3A	; 58
    3e48:	92 e3       	ldi	r25, 0x32	; 50
    3e4a:	8b 8f       	std	Y+27, r24	; 0x1b
    3e4c:	9c 8f       	std	Y+28, r25	; 0x1c
    3e4e:	42 c0       	rjmp	.+132    	; 0x3ed4 <_ZN5rs232C1EjP12USART_struct+0xd0>
	}
#ifdef USARTC1
	else if(p_usart == &USARTC1)
    3e50:	00 3b       	cpi	r16, 0xB0	; 176
    3e52:	e8 e0       	ldi	r30, 0x08	; 8
    3e54:	1e 07       	cpc	r17, r30
    3e56:	69 f4       	brne	.+26     	; 0x3e72 <_ZN5rs232C1EjP12USART_struct+0x6e>
	{
		p_rcv_buffer		= &rcvC1_buffer;
    3e58:	8c e4       	ldi	r24, 0x4C	; 76
    3e5a:	92 e3       	ldi	r25, 0x32	; 50
    3e5c:	8f 8b       	std	Y+23, r24	; 0x17
    3e5e:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvC1_read_index;
    3e60:	82 e4       	ldi	r24, 0x42	; 66
    3e62:	92 e3       	ldi	r25, 0x32	; 50
    3e64:	89 8f       	std	Y+25, r24	; 0x19
    3e66:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvC1_write_index;
    3e68:	88 e3       	ldi	r24, 0x38	; 56
    3e6a:	92 e3       	ldi	r25, 0x32	; 50
    3e6c:	8b 8f       	std	Y+27, r24	; 0x1b
    3e6e:	9c 8f       	std	Y+28, r25	; 0x1c
    3e70:	31 c0       	rjmp	.+98     	; 0x3ed4 <_ZN5rs232C1EjP12USART_struct+0xd0>
	}
#endif
#ifdef USARTD0
	else if(p_usart == &USARTD0)
    3e72:	00 3a       	cpi	r16, 0xA0	; 160
    3e74:	f9 e0       	ldi	r31, 0x09	; 9
    3e76:	1f 07       	cpc	r17, r31
    3e78:	69 f4       	brne	.+26     	; 0x3e94 <_ZN5rs232C1EjP12USART_struct+0x90>
	{
		p_rcv_buffer		= &rcvD0_buffer;
    3e7a:	8a e4       	ldi	r24, 0x4A	; 74
    3e7c:	92 e3       	ldi	r25, 0x32	; 50
    3e7e:	8f 8b       	std	Y+23, r24	; 0x17
    3e80:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvD0_read_index;
    3e82:	80 e4       	ldi	r24, 0x40	; 64
    3e84:	92 e3       	ldi	r25, 0x32	; 50
    3e86:	89 8f       	std	Y+25, r24	; 0x19
    3e88:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvD0_write_index;
    3e8a:	86 e3       	ldi	r24, 0x36	; 54
    3e8c:	92 e3       	ldi	r25, 0x32	; 50
    3e8e:	8b 8f       	std	Y+27, r24	; 0x1b
    3e90:	9c 8f       	std	Y+28, r25	; 0x1c
    3e92:	20 c0       	rjmp	.+64     	; 0x3ed4 <_ZN5rs232C1EjP12USART_struct+0xd0>
	}
#endif
#ifdef USARTD1
	else if(p_usart == &USARTD1)
    3e94:	00 3b       	cpi	r16, 0xB0	; 176
    3e96:	89 e0       	ldi	r24, 0x09	; 9
    3e98:	18 07       	cpc	r17, r24
    3e9a:	69 f4       	brne	.+26     	; 0x3eb6 <_ZN5rs232C1EjP12USART_struct+0xb2>
	{
		p_rcv_buffer		= &rcvD1_buffer;
    3e9c:	88 e4       	ldi	r24, 0x48	; 72
    3e9e:	92 e3       	ldi	r25, 0x32	; 50
    3ea0:	8f 8b       	std	Y+23, r24	; 0x17
    3ea2:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvD1_read_index;
    3ea4:	8e e3       	ldi	r24, 0x3E	; 62
    3ea6:	92 e3       	ldi	r25, 0x32	; 50
    3ea8:	89 8f       	std	Y+25, r24	; 0x19
    3eaa:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvD1_write_index;
    3eac:	84 e3       	ldi	r24, 0x34	; 52
    3eae:	92 e3       	ldi	r25, 0x32	; 50
    3eb0:	8b 8f       	std	Y+27, r24	; 0x1b
    3eb2:	9c 8f       	std	Y+28, r25	; 0x1c
    3eb4:	0f c0       	rjmp	.+30     	; 0x3ed4 <_ZN5rs232C1EjP12USART_struct+0xd0>
	}
#endif
#ifdef USARTE0
	else if(p_usart == &USARTE0)
    3eb6:	00 3a       	cpi	r16, 0xA0	; 160
    3eb8:	1a 40       	sbci	r17, 0x0A	; 10
    3eba:	61 f4       	brne	.+24     	; 0x3ed4 <_ZN5rs232C1EjP12USART_struct+0xd0>
	{
		p_rcv_buffer		= &rcvE0_buffer;
    3ebc:	86 e4       	ldi	r24, 0x46	; 70
    3ebe:	92 e3       	ldi	r25, 0x32	; 50
    3ec0:	8f 8b       	std	Y+23, r24	; 0x17
    3ec2:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvE0_read_index;
    3ec4:	8c e3       	ldi	r24, 0x3C	; 60
    3ec6:	92 e3       	ldi	r25, 0x32	; 50
    3ec8:	89 8f       	std	Y+25, r24	; 0x19
    3eca:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvE0_write_index;
    3ecc:	82 e3       	ldi	r24, 0x32	; 50
    3ece:	92 e3       	ldi	r25, 0x32	; 50
    3ed0:	8b 8f       	std	Y+27, r24	; 0x1b
    3ed2:	9c 8f       	std	Y+28, r25	; 0x1c
#endif
	else
	{
	}
	
	*p_rcv_buffer = new uint8_t[RSINT_BUF_SIZE];
    3ed4:	0f 89       	ldd	r16, Y+23	; 0x17
    3ed6:	18 8d       	ldd	r17, Y+24	; 0x18
    3ed8:	84 e6       	ldi	r24, 0x64	; 100
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	0e 94 77 1c 	call	0x38ee	; 0x38ee <_Znaj>
    3ee0:	f8 01       	movw	r30, r16
    3ee2:	80 83       	st	Z, r24
    3ee4:	91 83       	std	Z+1, r25	; 0x01
	*p_rcv_read_index = 0;
    3ee6:	e9 8d       	ldd	r30, Y+25	; 0x19
    3ee8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3eea:	10 82       	st	Z, r1
    3eec:	11 82       	std	Z+1, r1	; 0x01
	*p_rcv_write_index = 0;
    3eee:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3ef0:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3ef2:	10 82       	st	Z, r1
    3ef4:	11 82       	std	Z+1, r1	; 0x01
}
    3ef6:	df 91       	pop	r29
    3ef8:	cf 91       	pop	r28
    3efa:	1f 91       	pop	r17
    3efc:	0f 91       	pop	r16
    3efe:	ff 90       	pop	r15
    3f00:	ef 90       	pop	r14
    3f02:	08 95       	ret

00003f04 <__vector_25>:
 *  first serial port (number 0).  It saves that character into the receiver buffer.
 */

#ifdef USARTC0_RXC_vect
ISR (USARTC0_RXC_vect)
{
    3f04:	1f 92       	push	r1
    3f06:	0f 92       	push	r0
    3f08:	0f b6       	in	r0, 0x3f	; 63
    3f0a:	0f 92       	push	r0
    3f0c:	11 24       	eor	r1, r1
    3f0e:	08 b6       	in	r0, 0x38	; 56
    3f10:	0f 92       	push	r0
    3f12:	18 be       	out	0x38, r1	; 56
    3f14:	0b b6       	in	r0, 0x3b	; 59
    3f16:	0f 92       	push	r0
    3f18:	1b be       	out	0x3b, r1	; 59
    3f1a:	2f 93       	push	r18
    3f1c:	3f 93       	push	r19
    3f1e:	8f 93       	push	r24
    3f20:	9f 93       	push	r25
    3f22:	ef 93       	push	r30
    3f24:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvC0_buffer[rcvC0_write_index] = USARTC0.DATA;
    3f26:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    3f2a:	e0 91 4e 32 	lds	r30, 0x324E	; 0x80324e <rcvC0_buffer>
    3f2e:	f0 91 4f 32 	lds	r31, 0x324F	; 0x80324f <rcvC0_buffer+0x1>
    3f32:	80 91 3a 32 	lds	r24, 0x323A	; 0x80323a <rcvC0_write_index>
    3f36:	90 91 3b 32 	lds	r25, 0x323B	; 0x80323b <rcvC0_write_index+0x1>
    3f3a:	e8 0f       	add	r30, r24
    3f3c:	f9 1f       	adc	r31, r25
    3f3e:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvC0_write_index >= RSINT_BUF_SIZE)
    3f40:	80 91 3a 32 	lds	r24, 0x323A	; 0x80323a <rcvC0_write_index>
    3f44:	90 91 3b 32 	lds	r25, 0x323B	; 0x80323b <rcvC0_write_index+0x1>
    3f48:	01 96       	adiw	r24, 0x01	; 1
    3f4a:	84 36       	cpi	r24, 0x64	; 100
    3f4c:	91 05       	cpc	r25, r1
    3f4e:	60 f4       	brcc	.+24     	; 0x3f68 <__vector_25+0x64>
    3f50:	80 93 3a 32 	sts	0x323A, r24	; 0x80323a <rcvC0_write_index>
    3f54:	90 93 3b 32 	sts	0x323B, r25	; 0x80323b <rcvC0_write_index+0x1>
		rcvC0_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC0_write_index == rcvC0_read_index)
    3f58:	20 91 44 32 	lds	r18, 0x3244	; 0x803244 <rcvC0_read_index>
    3f5c:	30 91 45 32 	lds	r19, 0x3245	; 0x803245 <rcvC0_read_index+0x1>
    3f60:	82 17       	cp	r24, r18
    3f62:	93 07       	cpc	r25, r19
    3f64:	f1 f4       	brne	.+60     	; 0x3fa2 <__vector_25+0x9e>
    3f66:	0c c0       	rjmp	.+24     	; 0x3f80 <__vector_25+0x7c>

	rcvC0_buffer[rcvC0_write_index] = USARTC0.DATA;

	// Increment the write pointer
	if (++rcvC0_write_index >= RSINT_BUF_SIZE)
		rcvC0_write_index = 0;
    3f68:	10 92 3a 32 	sts	0x323A, r1	; 0x80323a <rcvC0_write_index>
    3f6c:	10 92 3b 32 	sts	0x323B, r1	; 0x80323b <rcvC0_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC0_write_index == rcvC0_read_index)
    3f70:	80 91 44 32 	lds	r24, 0x3244	; 0x803244 <rcvC0_read_index>
    3f74:	90 91 45 32 	lds	r25, 0x3245	; 0x803245 <rcvC0_read_index+0x1>
    3f78:	18 16       	cp	r1, r24
    3f7a:	19 06       	cpc	r1, r25
    3f7c:	91 f4       	brne	.+36     	; 0x3fa2 <__vector_25+0x9e>
    3f7e:	0e c0       	rjmp	.+28     	; 0x3f9c <__vector_25+0x98>
		if (++rcvC0_read_index >= RSINT_BUF_SIZE)
    3f80:	01 96       	adiw	r24, 0x01	; 1
    3f82:	84 36       	cpi	r24, 0x64	; 100
    3f84:	91 05       	cpc	r25, r1
    3f86:	28 f4       	brcc	.+10     	; 0x3f92 <__vector_25+0x8e>
    3f88:	80 93 44 32 	sts	0x3244, r24	; 0x803244 <rcvC0_read_index>
    3f8c:	90 93 45 32 	sts	0x3245, r25	; 0x803245 <rcvC0_read_index+0x1>
    3f90:	08 c0       	rjmp	.+16     	; 0x3fa2 <__vector_25+0x9e>
			rcvC0_read_index = 0;
    3f92:	10 92 44 32 	sts	0x3244, r1	; 0x803244 <rcvC0_read_index>
    3f96:	10 92 45 32 	sts	0x3245, r1	; 0x803245 <rcvC0_read_index+0x1>
}
    3f9a:	03 c0       	rjmp	.+6      	; 0x3fa2 <__vector_25+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC0_write_index == rcvC0_read_index)
		if (++rcvC0_read_index >= RSINT_BUF_SIZE)
    3f9c:	81 e0       	ldi	r24, 0x01	; 1
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	f3 cf       	rjmp	.-26     	; 0x3f88 <__vector_25+0x84>
			rcvC0_read_index = 0;
}
    3fa2:	ff 91       	pop	r31
    3fa4:	ef 91       	pop	r30
    3fa6:	9f 91       	pop	r25
    3fa8:	8f 91       	pop	r24
    3faa:	3f 91       	pop	r19
    3fac:	2f 91       	pop	r18
    3fae:	0f 90       	pop	r0
    3fb0:	0b be       	out	0x3b, r0	; 59
    3fb2:	0f 90       	pop	r0
    3fb4:	08 be       	out	0x38, r0	; 56
    3fb6:	0f 90       	pop	r0
    3fb8:	0f be       	out	0x3f, r0	; 63
    3fba:	0f 90       	pop	r0
    3fbc:	1f 90       	pop	r1
    3fbe:	18 95       	reti

00003fc0 <__vector_28>:
#endif

#ifdef USARTC1_RXC_vect
ISR (USARTC1_RXC_vect)
{
    3fc0:	1f 92       	push	r1
    3fc2:	0f 92       	push	r0
    3fc4:	0f b6       	in	r0, 0x3f	; 63
    3fc6:	0f 92       	push	r0
    3fc8:	11 24       	eor	r1, r1
    3fca:	08 b6       	in	r0, 0x38	; 56
    3fcc:	0f 92       	push	r0
    3fce:	18 be       	out	0x38, r1	; 56
    3fd0:	0b b6       	in	r0, 0x3b	; 59
    3fd2:	0f 92       	push	r0
    3fd4:	1b be       	out	0x3b, r1	; 59
    3fd6:	2f 93       	push	r18
    3fd8:	3f 93       	push	r19
    3fda:	8f 93       	push	r24
    3fdc:	9f 93       	push	r25
    3fde:	ef 93       	push	r30
    3fe0:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvC1_buffer[rcvC1_write_index] = USARTC1.DATA;
    3fe2:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    3fe6:	e0 91 4c 32 	lds	r30, 0x324C	; 0x80324c <rcvC1_buffer>
    3fea:	f0 91 4d 32 	lds	r31, 0x324D	; 0x80324d <rcvC1_buffer+0x1>
    3fee:	80 91 38 32 	lds	r24, 0x3238	; 0x803238 <rcvC1_write_index>
    3ff2:	90 91 39 32 	lds	r25, 0x3239	; 0x803239 <rcvC1_write_index+0x1>
    3ff6:	e8 0f       	add	r30, r24
    3ff8:	f9 1f       	adc	r31, r25
    3ffa:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvC1_write_index >= RSINT_BUF_SIZE)
    3ffc:	80 91 38 32 	lds	r24, 0x3238	; 0x803238 <rcvC1_write_index>
    4000:	90 91 39 32 	lds	r25, 0x3239	; 0x803239 <rcvC1_write_index+0x1>
    4004:	01 96       	adiw	r24, 0x01	; 1
    4006:	84 36       	cpi	r24, 0x64	; 100
    4008:	91 05       	cpc	r25, r1
    400a:	60 f4       	brcc	.+24     	; 0x4024 <__stack+0x25>
    400c:	80 93 38 32 	sts	0x3238, r24	; 0x803238 <rcvC1_write_index>
    4010:	90 93 39 32 	sts	0x3239, r25	; 0x803239 <rcvC1_write_index+0x1>
	rcvC1_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC1_write_index == rcvC1_read_index)
    4014:	20 91 42 32 	lds	r18, 0x3242	; 0x803242 <rcvC1_read_index>
    4018:	30 91 43 32 	lds	r19, 0x3243	; 0x803243 <rcvC1_read_index+0x1>
    401c:	82 17       	cp	r24, r18
    401e:	93 07       	cpc	r25, r19
    4020:	f1 f4       	brne	.+60     	; 0x405e <__stack+0x5f>
    4022:	0c c0       	rjmp	.+24     	; 0x403c <__stack+0x3d>

	rcvC1_buffer[rcvC1_write_index] = USARTC1.DATA;

	// Increment the write pointer
	if (++rcvC1_write_index >= RSINT_BUF_SIZE)
	rcvC1_write_index = 0;
    4024:	10 92 38 32 	sts	0x3238, r1	; 0x803238 <rcvC1_write_index>
    4028:	10 92 39 32 	sts	0x3239, r1	; 0x803239 <rcvC1_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC1_write_index == rcvC1_read_index)
    402c:	80 91 42 32 	lds	r24, 0x3242	; 0x803242 <rcvC1_read_index>
    4030:	90 91 43 32 	lds	r25, 0x3243	; 0x803243 <rcvC1_read_index+0x1>
    4034:	18 16       	cp	r1, r24
    4036:	19 06       	cpc	r1, r25
    4038:	91 f4       	brne	.+36     	; 0x405e <__stack+0x5f>
    403a:	0e c0       	rjmp	.+28     	; 0x4058 <__stack+0x59>
	if (++rcvC1_read_index >= RSINT_BUF_SIZE)
    403c:	01 96       	adiw	r24, 0x01	; 1
    403e:	84 36       	cpi	r24, 0x64	; 100
    4040:	91 05       	cpc	r25, r1
    4042:	28 f4       	brcc	.+10     	; 0x404e <__stack+0x4f>
    4044:	80 93 42 32 	sts	0x3242, r24	; 0x803242 <rcvC1_read_index>
    4048:	90 93 43 32 	sts	0x3243, r25	; 0x803243 <rcvC1_read_index+0x1>
    404c:	08 c0       	rjmp	.+16     	; 0x405e <__stack+0x5f>
	rcvC1_read_index = 0;
    404e:	10 92 42 32 	sts	0x3242, r1	; 0x803242 <rcvC1_read_index>
    4052:	10 92 43 32 	sts	0x3243, r1	; 0x803243 <rcvC1_read_index+0x1>
}
    4056:	03 c0       	rjmp	.+6      	; 0x405e <__stack+0x5f>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC1_write_index == rcvC1_read_index)
	if (++rcvC1_read_index >= RSINT_BUF_SIZE)
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	f3 cf       	rjmp	.-26     	; 0x4044 <__stack+0x45>
	rcvC1_read_index = 0;
}
    405e:	ff 91       	pop	r31
    4060:	ef 91       	pop	r30
    4062:	9f 91       	pop	r25
    4064:	8f 91       	pop	r24
    4066:	3f 91       	pop	r19
    4068:	2f 91       	pop	r18
    406a:	0f 90       	pop	r0
    406c:	0b be       	out	0x3b, r0	; 59
    406e:	0f 90       	pop	r0
    4070:	08 be       	out	0x38, r0	; 56
    4072:	0f 90       	pop	r0
    4074:	0f be       	out	0x3f, r0	; 63
    4076:	0f 90       	pop	r0
    4078:	1f 90       	pop	r1
    407a:	18 95       	reti

0000407c <__vector_88>:
#endif

#ifdef USARTD0_RXC_vect
ISR (USARTD0_RXC_vect)
{
    407c:	1f 92       	push	r1
    407e:	0f 92       	push	r0
    4080:	0f b6       	in	r0, 0x3f	; 63
    4082:	0f 92       	push	r0
    4084:	11 24       	eor	r1, r1
    4086:	08 b6       	in	r0, 0x38	; 56
    4088:	0f 92       	push	r0
    408a:	18 be       	out	0x38, r1	; 56
    408c:	0b b6       	in	r0, 0x3b	; 59
    408e:	0f 92       	push	r0
    4090:	1b be       	out	0x3b, r1	; 59
    4092:	2f 93       	push	r18
    4094:	3f 93       	push	r19
    4096:	8f 93       	push	r24
    4098:	9f 93       	push	r25
    409a:	ef 93       	push	r30
    409c:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvD0_buffer[rcvC0_write_index] = USARTD0.DATA;
    409e:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    40a2:	e0 91 4a 32 	lds	r30, 0x324A	; 0x80324a <rcvD0_buffer>
    40a6:	f0 91 4b 32 	lds	r31, 0x324B	; 0x80324b <rcvD0_buffer+0x1>
    40aa:	80 91 3a 32 	lds	r24, 0x323A	; 0x80323a <rcvC0_write_index>
    40ae:	90 91 3b 32 	lds	r25, 0x323B	; 0x80323b <rcvC0_write_index+0x1>
    40b2:	e8 0f       	add	r30, r24
    40b4:	f9 1f       	adc	r31, r25
    40b6:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvD0_write_index >= RSINT_BUF_SIZE)
    40b8:	80 91 36 32 	lds	r24, 0x3236	; 0x803236 <rcvD0_write_index>
    40bc:	90 91 37 32 	lds	r25, 0x3237	; 0x803237 <rcvD0_write_index+0x1>
    40c0:	01 96       	adiw	r24, 0x01	; 1
    40c2:	84 36       	cpi	r24, 0x64	; 100
    40c4:	91 05       	cpc	r25, r1
    40c6:	60 f4       	brcc	.+24     	; 0x40e0 <__vector_88+0x64>
    40c8:	80 93 36 32 	sts	0x3236, r24	; 0x803236 <rcvD0_write_index>
    40cc:	90 93 37 32 	sts	0x3237, r25	; 0x803237 <rcvD0_write_index+0x1>
	rcvD0_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD0_write_index == rcvD0_read_index)
    40d0:	20 91 40 32 	lds	r18, 0x3240	; 0x803240 <rcvD0_read_index>
    40d4:	30 91 41 32 	lds	r19, 0x3241	; 0x803241 <rcvD0_read_index+0x1>
    40d8:	82 17       	cp	r24, r18
    40da:	93 07       	cpc	r25, r19
    40dc:	f1 f4       	brne	.+60     	; 0x411a <__vector_88+0x9e>
    40de:	0c c0       	rjmp	.+24     	; 0x40f8 <__vector_88+0x7c>

	rcvD0_buffer[rcvC0_write_index] = USARTD0.DATA;

	// Increment the write pointer
	if (++rcvD0_write_index >= RSINT_BUF_SIZE)
	rcvD0_write_index = 0;
    40e0:	10 92 36 32 	sts	0x3236, r1	; 0x803236 <rcvD0_write_index>
    40e4:	10 92 37 32 	sts	0x3237, r1	; 0x803237 <rcvD0_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD0_write_index == rcvD0_read_index)
    40e8:	80 91 40 32 	lds	r24, 0x3240	; 0x803240 <rcvD0_read_index>
    40ec:	90 91 41 32 	lds	r25, 0x3241	; 0x803241 <rcvD0_read_index+0x1>
    40f0:	18 16       	cp	r1, r24
    40f2:	19 06       	cpc	r1, r25
    40f4:	91 f4       	brne	.+36     	; 0x411a <__vector_88+0x9e>
    40f6:	0e c0       	rjmp	.+28     	; 0x4114 <__vector_88+0x98>
	if (++rcvD0_read_index >= RSINT_BUF_SIZE)
    40f8:	01 96       	adiw	r24, 0x01	; 1
    40fa:	84 36       	cpi	r24, 0x64	; 100
    40fc:	91 05       	cpc	r25, r1
    40fe:	28 f4       	brcc	.+10     	; 0x410a <__vector_88+0x8e>
    4100:	80 93 40 32 	sts	0x3240, r24	; 0x803240 <rcvD0_read_index>
    4104:	90 93 41 32 	sts	0x3241, r25	; 0x803241 <rcvD0_read_index+0x1>
    4108:	08 c0       	rjmp	.+16     	; 0x411a <__vector_88+0x9e>
	rcvD0_read_index = 0;
    410a:	10 92 40 32 	sts	0x3240, r1	; 0x803240 <rcvD0_read_index>
    410e:	10 92 41 32 	sts	0x3241, r1	; 0x803241 <rcvD0_read_index+0x1>
}
    4112:	03 c0       	rjmp	.+6      	; 0x411a <__vector_88+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD0_write_index == rcvD0_read_index)
	if (++rcvD0_read_index >= RSINT_BUF_SIZE)
    4114:	81 e0       	ldi	r24, 0x01	; 1
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	f3 cf       	rjmp	.-26     	; 0x4100 <__vector_88+0x84>
	rcvD0_read_index = 0;
}
    411a:	ff 91       	pop	r31
    411c:	ef 91       	pop	r30
    411e:	9f 91       	pop	r25
    4120:	8f 91       	pop	r24
    4122:	3f 91       	pop	r19
    4124:	2f 91       	pop	r18
    4126:	0f 90       	pop	r0
    4128:	0b be       	out	0x3b, r0	; 59
    412a:	0f 90       	pop	r0
    412c:	08 be       	out	0x38, r0	; 56
    412e:	0f 90       	pop	r0
    4130:	0f be       	out	0x3f, r0	; 63
    4132:	0f 90       	pop	r0
    4134:	1f 90       	pop	r1
    4136:	18 95       	reti

00004138 <__vector_91>:
#endif

#ifdef USARTD1_RXC_vect
ISR (USARTD1_RXC_vect)
{
    4138:	1f 92       	push	r1
    413a:	0f 92       	push	r0
    413c:	0f b6       	in	r0, 0x3f	; 63
    413e:	0f 92       	push	r0
    4140:	11 24       	eor	r1, r1
    4142:	08 b6       	in	r0, 0x38	; 56
    4144:	0f 92       	push	r0
    4146:	18 be       	out	0x38, r1	; 56
    4148:	0b b6       	in	r0, 0x3b	; 59
    414a:	0f 92       	push	r0
    414c:	1b be       	out	0x3b, r1	; 59
    414e:	2f 93       	push	r18
    4150:	3f 93       	push	r19
    4152:	8f 93       	push	r24
    4154:	9f 93       	push	r25
    4156:	ef 93       	push	r30
    4158:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvD1_buffer[rcvD1_write_index] = USARTD1.DATA;
    415a:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    415e:	e0 91 48 32 	lds	r30, 0x3248	; 0x803248 <rcvD1_buffer>
    4162:	f0 91 49 32 	lds	r31, 0x3249	; 0x803249 <rcvD1_buffer+0x1>
    4166:	80 91 34 32 	lds	r24, 0x3234	; 0x803234 <rcvD1_write_index>
    416a:	90 91 35 32 	lds	r25, 0x3235	; 0x803235 <rcvD1_write_index+0x1>
    416e:	e8 0f       	add	r30, r24
    4170:	f9 1f       	adc	r31, r25
    4172:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvD1_write_index >= RSINT_BUF_SIZE)
    4174:	80 91 34 32 	lds	r24, 0x3234	; 0x803234 <rcvD1_write_index>
    4178:	90 91 35 32 	lds	r25, 0x3235	; 0x803235 <rcvD1_write_index+0x1>
    417c:	01 96       	adiw	r24, 0x01	; 1
    417e:	84 36       	cpi	r24, 0x64	; 100
    4180:	91 05       	cpc	r25, r1
    4182:	60 f4       	brcc	.+24     	; 0x419c <__vector_91+0x64>
    4184:	80 93 34 32 	sts	0x3234, r24	; 0x803234 <rcvD1_write_index>
    4188:	90 93 35 32 	sts	0x3235, r25	; 0x803235 <rcvD1_write_index+0x1>
	rcvD1_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD1_write_index == rcvD1_read_index)
    418c:	20 91 3e 32 	lds	r18, 0x323E	; 0x80323e <rcvD1_read_index>
    4190:	30 91 3f 32 	lds	r19, 0x323F	; 0x80323f <rcvD1_read_index+0x1>
    4194:	82 17       	cp	r24, r18
    4196:	93 07       	cpc	r25, r19
    4198:	f1 f4       	brne	.+60     	; 0x41d6 <__vector_91+0x9e>
    419a:	0c c0       	rjmp	.+24     	; 0x41b4 <__vector_91+0x7c>

	rcvD1_buffer[rcvD1_write_index] = USARTD1.DATA;

	// Increment the write pointer
	if (++rcvD1_write_index >= RSINT_BUF_SIZE)
	rcvD1_write_index = 0;
    419c:	10 92 34 32 	sts	0x3234, r1	; 0x803234 <rcvD1_write_index>
    41a0:	10 92 35 32 	sts	0x3235, r1	; 0x803235 <rcvD1_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD1_write_index == rcvD1_read_index)
    41a4:	80 91 3e 32 	lds	r24, 0x323E	; 0x80323e <rcvD1_read_index>
    41a8:	90 91 3f 32 	lds	r25, 0x323F	; 0x80323f <rcvD1_read_index+0x1>
    41ac:	18 16       	cp	r1, r24
    41ae:	19 06       	cpc	r1, r25
    41b0:	91 f4       	brne	.+36     	; 0x41d6 <__vector_91+0x9e>
    41b2:	0e c0       	rjmp	.+28     	; 0x41d0 <__vector_91+0x98>
	if (++rcvD1_read_index >= RSINT_BUF_SIZE)
    41b4:	01 96       	adiw	r24, 0x01	; 1
    41b6:	84 36       	cpi	r24, 0x64	; 100
    41b8:	91 05       	cpc	r25, r1
    41ba:	28 f4       	brcc	.+10     	; 0x41c6 <__vector_91+0x8e>
    41bc:	80 93 3e 32 	sts	0x323E, r24	; 0x80323e <rcvD1_read_index>
    41c0:	90 93 3f 32 	sts	0x323F, r25	; 0x80323f <rcvD1_read_index+0x1>
    41c4:	08 c0       	rjmp	.+16     	; 0x41d6 <__vector_91+0x9e>
	rcvD1_read_index = 0;
    41c6:	10 92 3e 32 	sts	0x323E, r1	; 0x80323e <rcvD1_read_index>
    41ca:	10 92 3f 32 	sts	0x323F, r1	; 0x80323f <rcvD1_read_index+0x1>
}
    41ce:	03 c0       	rjmp	.+6      	; 0x41d6 <__vector_91+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD1_write_index == rcvD1_read_index)
	if (++rcvD1_read_index >= RSINT_BUF_SIZE)
    41d0:	81 e0       	ldi	r24, 0x01	; 1
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	f3 cf       	rjmp	.-26     	; 0x41bc <__vector_91+0x84>
	rcvD1_read_index = 0;
}
    41d6:	ff 91       	pop	r31
    41d8:	ef 91       	pop	r30
    41da:	9f 91       	pop	r25
    41dc:	8f 91       	pop	r24
    41de:	3f 91       	pop	r19
    41e0:	2f 91       	pop	r18
    41e2:	0f 90       	pop	r0
    41e4:	0b be       	out	0x3b, r0	; 59
    41e6:	0f 90       	pop	r0
    41e8:	08 be       	out	0x38, r0	; 56
    41ea:	0f 90       	pop	r0
    41ec:	0f be       	out	0x3f, r0	; 63
    41ee:	0f 90       	pop	r0
    41f0:	1f 90       	pop	r1
    41f2:	18 95       	reti

000041f4 <__vector_58>:
#endif

#ifdef USARTE0_RXC_vect
ISR (USARTE0_RXC_vect)
{
    41f4:	1f 92       	push	r1
    41f6:	0f 92       	push	r0
    41f8:	0f b6       	in	r0, 0x3f	; 63
    41fa:	0f 92       	push	r0
    41fc:	11 24       	eor	r1, r1
    41fe:	08 b6       	in	r0, 0x38	; 56
    4200:	0f 92       	push	r0
    4202:	18 be       	out	0x38, r1	; 56
    4204:	0b b6       	in	r0, 0x3b	; 59
    4206:	0f 92       	push	r0
    4208:	1b be       	out	0x3b, r1	; 59
    420a:	2f 93       	push	r18
    420c:	3f 93       	push	r19
    420e:	8f 93       	push	r24
    4210:	9f 93       	push	r25
    4212:	ef 93       	push	r30
    4214:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvE0_buffer[rcvE0_write_index] = USARTE0.DATA;
    4216:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    421a:	e0 91 46 32 	lds	r30, 0x3246	; 0x803246 <rcvE0_buffer>
    421e:	f0 91 47 32 	lds	r31, 0x3247	; 0x803247 <rcvE0_buffer+0x1>
    4222:	80 91 32 32 	lds	r24, 0x3232	; 0x803232 <rcvE0_write_index>
    4226:	90 91 33 32 	lds	r25, 0x3233	; 0x803233 <rcvE0_write_index+0x1>
    422a:	e8 0f       	add	r30, r24
    422c:	f9 1f       	adc	r31, r25
    422e:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvE0_write_index >= RSINT_BUF_SIZE)
    4230:	80 91 32 32 	lds	r24, 0x3232	; 0x803232 <rcvE0_write_index>
    4234:	90 91 33 32 	lds	r25, 0x3233	; 0x803233 <rcvE0_write_index+0x1>
    4238:	01 96       	adiw	r24, 0x01	; 1
    423a:	84 36       	cpi	r24, 0x64	; 100
    423c:	91 05       	cpc	r25, r1
    423e:	60 f4       	brcc	.+24     	; 0x4258 <__vector_58+0x64>
    4240:	80 93 32 32 	sts	0x3232, r24	; 0x803232 <rcvE0_write_index>
    4244:	90 93 33 32 	sts	0x3233, r25	; 0x803233 <rcvE0_write_index+0x1>
	rcvE0_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvE0_write_index == rcvE0_read_index)
    4248:	20 91 3c 32 	lds	r18, 0x323C	; 0x80323c <rcvE0_read_index>
    424c:	30 91 3d 32 	lds	r19, 0x323D	; 0x80323d <rcvE0_read_index+0x1>
    4250:	82 17       	cp	r24, r18
    4252:	93 07       	cpc	r25, r19
    4254:	f1 f4       	brne	.+60     	; 0x4292 <__vector_58+0x9e>
    4256:	0c c0       	rjmp	.+24     	; 0x4270 <__vector_58+0x7c>

	rcvE0_buffer[rcvE0_write_index] = USARTE0.DATA;

	// Increment the write pointer
	if (++rcvE0_write_index >= RSINT_BUF_SIZE)
	rcvE0_write_index = 0;
    4258:	10 92 32 32 	sts	0x3232, r1	; 0x803232 <rcvE0_write_index>
    425c:	10 92 33 32 	sts	0x3233, r1	; 0x803233 <rcvE0_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvE0_write_index == rcvE0_read_index)
    4260:	80 91 3c 32 	lds	r24, 0x323C	; 0x80323c <rcvE0_read_index>
    4264:	90 91 3d 32 	lds	r25, 0x323D	; 0x80323d <rcvE0_read_index+0x1>
    4268:	18 16       	cp	r1, r24
    426a:	19 06       	cpc	r1, r25
    426c:	91 f4       	brne	.+36     	; 0x4292 <__vector_58+0x9e>
    426e:	0e c0       	rjmp	.+28     	; 0x428c <__vector_58+0x98>
	if (++rcvE0_read_index >= RSINT_BUF_SIZE)
    4270:	01 96       	adiw	r24, 0x01	; 1
    4272:	84 36       	cpi	r24, 0x64	; 100
    4274:	91 05       	cpc	r25, r1
    4276:	28 f4       	brcc	.+10     	; 0x4282 <__vector_58+0x8e>
    4278:	80 93 3c 32 	sts	0x323C, r24	; 0x80323c <rcvE0_read_index>
    427c:	90 93 3d 32 	sts	0x323D, r25	; 0x80323d <rcvE0_read_index+0x1>
    4280:	08 c0       	rjmp	.+16     	; 0x4292 <__vector_58+0x9e>
	rcvE0_read_index = 0;
    4282:	10 92 3c 32 	sts	0x323C, r1	; 0x80323c <rcvE0_read_index>
    4286:	10 92 3d 32 	sts	0x323D, r1	; 0x80323d <rcvE0_read_index+0x1>
}
    428a:	03 c0       	rjmp	.+6      	; 0x4292 <__vector_58+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvE0_write_index == rcvE0_read_index)
	if (++rcvE0_read_index >= RSINT_BUF_SIZE)
    428c:	81 e0       	ldi	r24, 0x01	; 1
    428e:	90 e0       	ldi	r25, 0x00	; 0
    4290:	f3 cf       	rjmp	.-26     	; 0x4278 <__vector_58+0x84>
	rcvE0_read_index = 0;
}
    4292:	ff 91       	pop	r31
    4294:	ef 91       	pop	r30
    4296:	9f 91       	pop	r25
    4298:	8f 91       	pop	r24
    429a:	3f 91       	pop	r19
    429c:	2f 91       	pop	r18
    429e:	0f 90       	pop	r0
    42a0:	0b be       	out	0x3b, r0	; 59
    42a2:	0f 90       	pop	r0
    42a4:	08 be       	out	0x38, r0	; 56
    42a6:	0f 90       	pop	r0
    42a8:	0f be       	out	0x3f, r0	; 63
    42aa:	0f 90       	pop	r0
    42ac:	1f 90       	pop	r1
    42ae:	18 95       	reti

000042b0 <_ZN9frt_queueIjE16ISR_num_items_inEv>:
		 *  called only from within an interrupt service routine.
		 *  @return The number of items in the queue
		 */
		size_t ISR_num_items_in (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle));
    42b0:	fc 01       	movw	r30, r24
    42b2:	84 81       	ldd	r24, Z+4	; 0x04
    42b4:	95 81       	ldd	r25, Z+5	; 0x05
    42b6:	0e 94 8a 12 	call	0x2514	; 0x2514 <uxQueueMessagesWaitingFromISR>
		}
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	08 95       	ret

000042be <_ZN9frt_queueIjE13ISR_not_emptyEv>:
		 *  an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool ISR_not_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) != 0);
    42be:	fc 01       	movw	r30, r24
    42c0:	84 81       	ldd	r24, Z+4	; 0x04
    42c2:	95 81       	ldd	r25, Z+5	; 0x05
    42c4:	0e 94 8a 12 	call	0x2514	; 0x2514 <uxQueueMessagesWaitingFromISR>
    42c8:	91 e0       	ldi	r25, 0x01	; 1
    42ca:	81 11       	cpse	r24, r1
    42cc:	01 c0       	rjmp	.+2      	; 0x42d0 <_ZN9frt_queueIjE13ISR_not_emptyEv+0x12>
    42ce:	90 e0       	ldi	r25, 0x00	; 0
		}
    42d0:	89 2f       	mov	r24, r25
    42d2:	08 95       	ret

000042d4 <_ZN9frt_queueIjE12ISR_is_emptyEv>:
		 *  routine. It must not be used in normal non-ISR code. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool ISR_is_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) == 0);
    42d4:	fc 01       	movw	r30, r24
    42d6:	84 81       	ldd	r24, Z+4	; 0x04
    42d8:	95 81       	ldd	r25, Z+5	; 0x05
    42da:	0e 94 8a 12 	call	0x2514	; 0x2514 <uxQueueMessagesWaitingFromISR>
    42de:	91 e0       	ldi	r25, 0x01	; 1
    42e0:	81 11       	cpse	r24, r1
    42e2:	90 e0       	ldi	r25, 0x00	; 0
		}
    42e4:	89 2f       	mov	r24, r25
    42e6:	08 95       	ret

000042e8 <_ZN9frt_queueIiE16ISR_num_items_inEv>:
		 *  called only from within an interrupt service routine.
		 *  @return The number of items in the queue
		 */
		size_t ISR_num_items_in (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle));
    42e8:	fc 01       	movw	r30, r24
    42ea:	84 81       	ldd	r24, Z+4	; 0x04
    42ec:	95 81       	ldd	r25, Z+5	; 0x05
    42ee:	0e 94 8a 12 	call	0x2514	; 0x2514 <uxQueueMessagesWaitingFromISR>
		}
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	08 95       	ret

000042f6 <_ZN9frt_queueIiE13ISR_not_emptyEv>:
		 *  an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool ISR_not_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) != 0);
    42f6:	fc 01       	movw	r30, r24
    42f8:	84 81       	ldd	r24, Z+4	; 0x04
    42fa:	95 81       	ldd	r25, Z+5	; 0x05
    42fc:	0e 94 8a 12 	call	0x2514	; 0x2514 <uxQueueMessagesWaitingFromISR>
    4300:	91 e0       	ldi	r25, 0x01	; 1
    4302:	81 11       	cpse	r24, r1
    4304:	01 c0       	rjmp	.+2      	; 0x4308 <_ZN9frt_queueIiE13ISR_not_emptyEv+0x12>
    4306:	90 e0       	ldi	r25, 0x00	; 0
		}
    4308:	89 2f       	mov	r24, r25
    430a:	08 95       	ret

0000430c <_ZN9frt_queueIiE12ISR_is_emptyEv>:
		 *  routine. It must not be used in normal non-ISR code. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool ISR_is_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) == 0);
    430c:	fc 01       	movw	r30, r24
    430e:	84 81       	ldd	r24, Z+4	; 0x04
    4310:	95 81       	ldd	r25, Z+5	; 0x05
    4312:	0e 94 8a 12 	call	0x2514	; 0x2514 <uxQueueMessagesWaitingFromISR>
    4316:	91 e0       	ldi	r25, 0x01	; 1
    4318:	81 11       	cpse	r24, r1
    431a:	90 e0       	ldi	r25, 0x00	; 0
		}
    431c:	89 2f       	mov	r24, r25
    431e:	08 95       	ret

00004320 <_ZN9frt_queueIjE12num_items_inEv>:
		 *  ISR_num_items_in() can be called from within an ISR. 
		 *  @return The number of items in the queue
		 */
		size_t num_items_in (void)
		{
			return (uxQueueMessagesWaiting (handle));
    4320:	fc 01       	movw	r30, r24
    4322:	84 81       	ldd	r24, Z+4	; 0x04
    4324:	95 81       	ldd	r25, Z+5	; 0x05
    4326:	0e 94 82 12 	call	0x2504	; 0x2504 <uxQueueMessagesWaiting>
		}
    432a:	90 e0       	ldi	r25, 0x00	; 0
    432c:	08 95       	ret

0000432e <_ZN9frt_queueIjE9not_emptyEv>:
		 *  \b not be called from within an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool not_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) != 0);
    432e:	fc 01       	movw	r30, r24
    4330:	84 81       	ldd	r24, Z+4	; 0x04
    4332:	95 81       	ldd	r25, Z+5	; 0x05
    4334:	0e 94 82 12 	call	0x2504	; 0x2504 <uxQueueMessagesWaiting>
    4338:	91 e0       	ldi	r25, 0x01	; 1
    433a:	81 11       	cpse	r24, r1
    433c:	01 c0       	rjmp	.+2      	; 0x4340 <_ZN9frt_queueIjE9not_emptyEv+0x12>
    433e:	90 e0       	ldi	r25, 0x00	; 0
		}
    4340:	89 2f       	mov	r24, r25
    4342:	08 95       	ret

00004344 <_ZN9frt_queueIjE8is_emptyEv>:
		/** This method checks if the queue is empty. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool is_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) == 0);
    4344:	fc 01       	movw	r30, r24
    4346:	84 81       	ldd	r24, Z+4	; 0x04
    4348:	95 81       	ldd	r25, Z+5	; 0x05
    434a:	0e 94 82 12 	call	0x2504	; 0x2504 <uxQueueMessagesWaiting>
    434e:	91 e0       	ldi	r25, 0x01	; 1
    4350:	81 11       	cpse	r24, r1
    4352:	90 e0       	ldi	r25, 0x00	; 0
		}
    4354:	89 2f       	mov	r24, r25
    4356:	08 95       	ret

00004358 <_ZN9frt_queueIiE12num_items_inEv>:
		 *  ISR_num_items_in() can be called from within an ISR. 
		 *  @return The number of items in the queue
		 */
		size_t num_items_in (void)
		{
			return (uxQueueMessagesWaiting (handle));
    4358:	fc 01       	movw	r30, r24
    435a:	84 81       	ldd	r24, Z+4	; 0x04
    435c:	95 81       	ldd	r25, Z+5	; 0x05
    435e:	0e 94 82 12 	call	0x2504	; 0x2504 <uxQueueMessagesWaiting>
		}
    4362:	90 e0       	ldi	r25, 0x00	; 0
    4364:	08 95       	ret

00004366 <_ZN9frt_queueIiE9not_emptyEv>:
		 *  \b not be called from within an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool not_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) != 0);
    4366:	fc 01       	movw	r30, r24
    4368:	84 81       	ldd	r24, Z+4	; 0x04
    436a:	95 81       	ldd	r25, Z+5	; 0x05
    436c:	0e 94 82 12 	call	0x2504	; 0x2504 <uxQueueMessagesWaiting>
    4370:	91 e0       	ldi	r25, 0x01	; 1
    4372:	81 11       	cpse	r24, r1
    4374:	01 c0       	rjmp	.+2      	; 0x4378 <_ZN9frt_queueIiE9not_emptyEv+0x12>
    4376:	90 e0       	ldi	r25, 0x00	; 0
		}
    4378:	89 2f       	mov	r24, r25
    437a:	08 95       	ret

0000437c <_ZN9frt_queueIiE8is_emptyEv>:
		/** This method checks if the queue is empty. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool is_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) == 0);
    437c:	fc 01       	movw	r30, r24
    437e:	84 81       	ldd	r24, Z+4	; 0x04
    4380:	95 81       	ldd	r25, Z+5	; 0x05
    4382:	0e 94 82 12 	call	0x2504	; 0x2504 <uxQueueMessagesWaiting>
    4386:	91 e0       	ldi	r25, 0x01	; 1
    4388:	81 11       	cpse	r24, r1
    438a:	90 e0       	ldi	r25, 0x00	; 0
		}
    438c:	89 2f       	mov	r24, r25
    438e:	08 95       	ret

00004390 <_ZN9frt_queueIjE10get_a_copyERj>:
 *  \c xQueuePeekFromISR() which would allow copying items from a queue in an ISR. 
 *  @param item A reference to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get_a_copy (data_type& item)
    4390:	0f 93       	push	r16
{
	xQueuePeek (handle, &item, portMAX_DELAY);
    4392:	01 e0       	ldi	r16, 0x01	; 1
    4394:	2f ef       	ldi	r18, 0xFF	; 255
    4396:	3f ef       	ldi	r19, 0xFF	; 255
    4398:	a9 01       	movw	r20, r18
    439a:	fc 01       	movw	r30, r24
    439c:	84 81       	ldd	r24, Z+4	; 0x04
    439e:	95 81       	ldd	r25, Z+5	; 0x05
    43a0:	0e 94 91 11 	call	0x2322	; 0x2322 <xQueueGenericReceive>
}
    43a4:	0f 91       	pop	r16
    43a6:	08 95       	ret

000043a8 <_ZN9frt_queueIjE10get_a_copyEv>:
 *          data type if we couldn't get any data from the queue and the attempt
 *          timed out
 */

template <class data_type>
inline data_type frt_queue<data_type>::get_a_copy (void)
    43a8:	0f 93       	push	r16
    43aa:	cf 93       	push	r28
    43ac:	df 93       	push	r29
    43ae:	1f 92       	push	r1
    43b0:	1f 92       	push	r1
    43b2:	cd b7       	in	r28, 0x3d	; 61
    43b4:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueuePeek (handle, &recv_item, portMAX_DELAY);
    43b6:	01 e0       	ldi	r16, 0x01	; 1
    43b8:	2f ef       	ldi	r18, 0xFF	; 255
    43ba:	3f ef       	ldi	r19, 0xFF	; 255
    43bc:	a9 01       	movw	r20, r18
    43be:	be 01       	movw	r22, r28
    43c0:	6f 5f       	subi	r22, 0xFF	; 255
    43c2:	7f 4f       	sbci	r23, 0xFF	; 255
    43c4:	fc 01       	movw	r30, r24
    43c6:	84 81       	ldd	r24, Z+4	; 0x04
    43c8:	95 81       	ldd	r25, Z+5	; 0x05
    43ca:	0e 94 91 11 	call	0x2322	; 0x2322 <xQueueGenericReceive>
	return (recv_item);
}
    43ce:	89 81       	ldd	r24, Y+1	; 0x01
    43d0:	9a 81       	ldd	r25, Y+2	; 0x02
    43d2:	0f 90       	pop	r0
    43d4:	0f 90       	pop	r0
    43d6:	df 91       	pop	r29
    43d8:	cf 91       	pop	r28
    43da:	0f 91       	pop	r16
    43dc:	08 95       	ret

000043de <_ZN9frt_queueIjE3getEPj>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get (data_type* p_item)
    43de:	0f 93       	push	r16
{
	xQueueReceive (handle, p_item, portMAX_DELAY);
    43e0:	00 e0       	ldi	r16, 0x00	; 0
    43e2:	2f ef       	ldi	r18, 0xFF	; 255
    43e4:	3f ef       	ldi	r19, 0xFF	; 255
    43e6:	a9 01       	movw	r20, r18
    43e8:	fc 01       	movw	r30, r24
    43ea:	84 81       	ldd	r24, Z+4	; 0x04
    43ec:	95 81       	ldd	r25, Z+5	; 0x05
    43ee:	0e 94 91 11 	call	0x2322	; 0x2322 <xQueueGenericReceive>
}
    43f2:	0f 91       	pop	r16
    43f4:	08 95       	ret

000043f6 <_ZN9frt_queueIjE3getEv>:
 *  up. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::get (void)
    43f6:	0f 93       	push	r16
    43f8:	cf 93       	push	r28
    43fa:	df 93       	push	r29
    43fc:	1f 92       	push	r1
    43fe:	1f 92       	push	r1
    4400:	cd b7       	in	r28, 0x3d	; 61
    4402:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceive (handle, &recv_item, portMAX_DELAY);
    4404:	00 e0       	ldi	r16, 0x00	; 0
    4406:	2f ef       	ldi	r18, 0xFF	; 255
    4408:	3f ef       	ldi	r19, 0xFF	; 255
    440a:	a9 01       	movw	r20, r18
    440c:	be 01       	movw	r22, r28
    440e:	6f 5f       	subi	r22, 0xFF	; 255
    4410:	7f 4f       	sbci	r23, 0xFF	; 255
    4412:	fc 01       	movw	r30, r24
    4414:	84 81       	ldd	r24, Z+4	; 0x04
    4416:	95 81       	ldd	r25, Z+5	; 0x05
    4418:	0e 94 91 11 	call	0x2322	; 0x2322 <xQueueGenericReceive>
	return (recv_item);
}
    441c:	89 81       	ldd	r24, Y+1	; 0x01
    441e:	9a 81       	ldd	r25, Y+2	; 0x02
    4420:	0f 90       	pop	r0
    4422:	0f 90       	pop	r0
    4424:	df 91       	pop	r29
    4426:	cf 91       	pop	r28
    4428:	0f 91       	pop	r16
    442a:	08 95       	ret

0000442c <_ZN9frt_queueIiE10get_a_copyERi>:
 *  \c xQueuePeekFromISR() which would allow copying items from a queue in an ISR. 
 *  @param item A reference to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get_a_copy (data_type& item)
    442c:	0f 93       	push	r16
{
	xQueuePeek (handle, &item, portMAX_DELAY);
    442e:	01 e0       	ldi	r16, 0x01	; 1
    4430:	2f ef       	ldi	r18, 0xFF	; 255
    4432:	3f ef       	ldi	r19, 0xFF	; 255
    4434:	a9 01       	movw	r20, r18
    4436:	fc 01       	movw	r30, r24
    4438:	84 81       	ldd	r24, Z+4	; 0x04
    443a:	95 81       	ldd	r25, Z+5	; 0x05
    443c:	0e 94 91 11 	call	0x2322	; 0x2322 <xQueueGenericReceive>
}
    4440:	0f 91       	pop	r16
    4442:	08 95       	ret

00004444 <_ZN9frt_queueIiE10get_a_copyEv>:
 *          data type if we couldn't get any data from the queue and the attempt
 *          timed out
 */

template <class data_type>
inline data_type frt_queue<data_type>::get_a_copy (void)
    4444:	0f 93       	push	r16
    4446:	cf 93       	push	r28
    4448:	df 93       	push	r29
    444a:	1f 92       	push	r1
    444c:	1f 92       	push	r1
    444e:	cd b7       	in	r28, 0x3d	; 61
    4450:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueuePeek (handle, &recv_item, portMAX_DELAY);
    4452:	01 e0       	ldi	r16, 0x01	; 1
    4454:	2f ef       	ldi	r18, 0xFF	; 255
    4456:	3f ef       	ldi	r19, 0xFF	; 255
    4458:	a9 01       	movw	r20, r18
    445a:	be 01       	movw	r22, r28
    445c:	6f 5f       	subi	r22, 0xFF	; 255
    445e:	7f 4f       	sbci	r23, 0xFF	; 255
    4460:	fc 01       	movw	r30, r24
    4462:	84 81       	ldd	r24, Z+4	; 0x04
    4464:	95 81       	ldd	r25, Z+5	; 0x05
    4466:	0e 94 91 11 	call	0x2322	; 0x2322 <xQueueGenericReceive>
	return (recv_item);
}
    446a:	89 81       	ldd	r24, Y+1	; 0x01
    446c:	9a 81       	ldd	r25, Y+2	; 0x02
    446e:	0f 90       	pop	r0
    4470:	0f 90       	pop	r0
    4472:	df 91       	pop	r29
    4474:	cf 91       	pop	r28
    4476:	0f 91       	pop	r16
    4478:	08 95       	ret

0000447a <_ZN9frt_queueIiE3getEPi>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get (data_type* p_item)
    447a:	0f 93       	push	r16
{
	xQueueReceive (handle, p_item, portMAX_DELAY);
    447c:	00 e0       	ldi	r16, 0x00	; 0
    447e:	2f ef       	ldi	r18, 0xFF	; 255
    4480:	3f ef       	ldi	r19, 0xFF	; 255
    4482:	a9 01       	movw	r20, r18
    4484:	fc 01       	movw	r30, r24
    4486:	84 81       	ldd	r24, Z+4	; 0x04
    4488:	95 81       	ldd	r25, Z+5	; 0x05
    448a:	0e 94 91 11 	call	0x2322	; 0x2322 <xQueueGenericReceive>
}
    448e:	0f 91       	pop	r16
    4490:	08 95       	ret

00004492 <_ZN9frt_queueIiE3getEv>:
 *  up. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::get (void)
    4492:	0f 93       	push	r16
    4494:	cf 93       	push	r28
    4496:	df 93       	push	r29
    4498:	1f 92       	push	r1
    449a:	1f 92       	push	r1
    449c:	cd b7       	in	r28, 0x3d	; 61
    449e:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceive (handle, &recv_item, portMAX_DELAY);
    44a0:	00 e0       	ldi	r16, 0x00	; 0
    44a2:	2f ef       	ldi	r18, 0xFF	; 255
    44a4:	3f ef       	ldi	r19, 0xFF	; 255
    44a6:	a9 01       	movw	r20, r18
    44a8:	be 01       	movw	r22, r28
    44aa:	6f 5f       	subi	r22, 0xFF	; 255
    44ac:	7f 4f       	sbci	r23, 0xFF	; 255
    44ae:	fc 01       	movw	r30, r24
    44b0:	84 81       	ldd	r24, Z+4	; 0x04
    44b2:	95 81       	ldd	r25, Z+5	; 0x05
    44b4:	0e 94 91 11 	call	0x2322	; 0x2322 <xQueueGenericReceive>
	return (recv_item);
}
    44b8:	89 81       	ldd	r24, Y+1	; 0x01
    44ba:	9a 81       	ldd	r25, Y+2	; 0x02
    44bc:	0f 90       	pop	r0
    44be:	0f 90       	pop	r0
    44c0:	df 91       	pop	r29
    44c2:	cf 91       	pop	r28
    44c4:	0f 91       	pop	r16
    44c6:	08 95       	ret

000044c8 <_ZN9frt_queueIjE7ISR_getEPj>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::ISR_get (data_type* p_item)
    44c8:	cf 93       	push	r28
    44ca:	df 93       	push	r29
    44cc:	1f 92       	push	r1
    44ce:	cd b7       	in	r28, 0x3d	; 61
    44d0:	de b7       	in	r29, 0x3e	; 62
{
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, and
	// nothing will actually be copied
	xQueueReceiveFromISR (handle, p_item, &task_awakened);
    44d2:	ae 01       	movw	r20, r28
    44d4:	4f 5f       	subi	r20, 0xFF	; 255
    44d6:	5f 4f       	sbci	r21, 0xFF	; 255
    44d8:	fc 01       	movw	r30, r24
    44da:	84 81       	ldd	r24, Z+4	; 0x04
    44dc:	95 81       	ldd	r25, Z+5	; 0x05
    44de:	0e 94 55 12 	call	0x24aa	; 0x24aa <xQueueReceiveFromISR>
}
    44e2:	0f 90       	pop	r0
    44e4:	df 91       	pop	r29
    44e6:	cf 91       	pop	r28
    44e8:	08 95       	ret

000044ea <_ZN9frt_queueIjE7ISR_getEv>:
 *  service routine. This method must not be called from within normal non-ISR code. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::ISR_get (void)
    44ea:	cf 93       	push	r28
    44ec:	df 93       	push	r29
    44ee:	00 d0       	rcall	.+0      	; 0x44f0 <_ZN9frt_queueIjE7ISR_getEv+0x6>
    44f0:	cd b7       	in	r28, 0x3d	; 61
    44f2:	de b7       	in	r29, 0x3e	; 62
	data_type recv_item;                    // Data item read from the queue
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceiveFromISR (handle, &recv_item, &task_awakened);
    44f4:	ae 01       	movw	r20, r28
    44f6:	4d 5f       	subi	r20, 0xFD	; 253
    44f8:	5f 4f       	sbci	r21, 0xFF	; 255
    44fa:	be 01       	movw	r22, r28
    44fc:	6f 5f       	subi	r22, 0xFF	; 255
    44fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4500:	fc 01       	movw	r30, r24
    4502:	84 81       	ldd	r24, Z+4	; 0x04
    4504:	95 81       	ldd	r25, Z+5	; 0x05
    4506:	0e 94 55 12 	call	0x24aa	; 0x24aa <xQueueReceiveFromISR>
	return (recv_item);
}
    450a:	89 81       	ldd	r24, Y+1	; 0x01
    450c:	9a 81       	ldd	r25, Y+2	; 0x02
    450e:	23 96       	adiw	r28, 0x03	; 3
    4510:	cd bf       	out	0x3d, r28	; 61
    4512:	de bf       	out	0x3e, r29	; 62
    4514:	df 91       	pop	r29
    4516:	cf 91       	pop	r28
    4518:	08 95       	ret

0000451a <_ZN9frt_queueIiE7ISR_getEPi>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::ISR_get (data_type* p_item)
    451a:	cf 93       	push	r28
    451c:	df 93       	push	r29
    451e:	1f 92       	push	r1
    4520:	cd b7       	in	r28, 0x3d	; 61
    4522:	de b7       	in	r29, 0x3e	; 62
{
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, and
	// nothing will actually be copied
	xQueueReceiveFromISR (handle, p_item, &task_awakened);
    4524:	ae 01       	movw	r20, r28
    4526:	4f 5f       	subi	r20, 0xFF	; 255
    4528:	5f 4f       	sbci	r21, 0xFF	; 255
    452a:	fc 01       	movw	r30, r24
    452c:	84 81       	ldd	r24, Z+4	; 0x04
    452e:	95 81       	ldd	r25, Z+5	; 0x05
    4530:	0e 94 55 12 	call	0x24aa	; 0x24aa <xQueueReceiveFromISR>
}
    4534:	0f 90       	pop	r0
    4536:	df 91       	pop	r29
    4538:	cf 91       	pop	r28
    453a:	08 95       	ret

0000453c <_ZN9frt_queueIiE7ISR_getEv>:
 *  service routine. This method must not be called from within normal non-ISR code. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::ISR_get (void)
    453c:	cf 93       	push	r28
    453e:	df 93       	push	r29
    4540:	00 d0       	rcall	.+0      	; 0x4542 <_ZN9frt_queueIiE7ISR_getEv+0x6>
    4542:	cd b7       	in	r28, 0x3d	; 61
    4544:	de b7       	in	r29, 0x3e	; 62
	data_type recv_item;                    // Data item read from the queue
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceiveFromISR (handle, &recv_item, &task_awakened);
    4546:	ae 01       	movw	r20, r28
    4548:	4d 5f       	subi	r20, 0xFD	; 253
    454a:	5f 4f       	sbci	r21, 0xFF	; 255
    454c:	be 01       	movw	r22, r28
    454e:	6f 5f       	subi	r22, 0xFF	; 255
    4550:	7f 4f       	sbci	r23, 0xFF	; 255
    4552:	fc 01       	movw	r30, r24
    4554:	84 81       	ldd	r24, Z+4	; 0x04
    4556:	95 81       	ldd	r25, Z+5	; 0x05
    4558:	0e 94 55 12 	call	0x24aa	; 0x24aa <xQueueReceiveFromISR>
	return (recv_item);
}
    455c:	89 81       	ldd	r24, Y+1	; 0x01
    455e:	9a 81       	ldd	r25, Y+2	; 0x02
    4560:	23 96       	adiw	r28, 0x03	; 3
    4562:	cd bf       	out	0x3d, r28	; 61
    4564:	de bf       	out	0x3e, r29	; 62
    4566:	df 91       	pop	r29
    4568:	cf 91       	pop	r28
    456a:	08 95       	ret

0000456c <_ZN9frt_queueIjE11ISR_butt_inERKj>:
 *              the front of the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
bool frt_queue<data_type>::ISR_butt_in (const data_type& item)
    456c:	cf 93       	push	r28
    456e:	df 93       	push	r29
    4570:	1f 92       	push	r1
    4572:	cd b7       	in	r28, 0x3d	; 61
    4574:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    4576:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;                      // Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToFrontFromISR (handle, &item, &shouldSwitch));
    4578:	21 e0       	ldi	r18, 0x01	; 1
    457a:	ae 01       	movw	r20, r28
    457c:	4f 5f       	subi	r20, 0xFF	; 255
    457e:	5f 4f       	sbci	r21, 0xFF	; 255
    4580:	fc 01       	movw	r30, r24
    4582:	84 81       	ldd	r24, Z+4	; 0x04
    4584:	95 81       	ldd	r25, Z+5	; 0x05
    4586:	0e 94 65 11 	call	0x22ca	; 0x22ca <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    458a:	91 e0       	ldi	r25, 0x01	; 1
    458c:	81 11       	cpse	r24, r1
    458e:	01 c0       	rjmp	.+2      	; 0x4592 <_ZN9frt_queueIjE11ISR_butt_inERKj+0x26>
    4590:	90 e0       	ldi	r25, 0x00	; 0
}
    4592:	89 2f       	mov	r24, r25
    4594:	0f 90       	pop	r0
    4596:	df 91       	pop	r29
    4598:	cf 91       	pop	r28
    459a:	08 95       	ret

0000459c <_ZN9frt_queueIjE7ISR_putERKj>:
 *  @param item Reference to the item which is going to be put into the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
inline bool frt_queue<data_type>::ISR_put (const data_type& item)
    459c:	cf 93       	push	r28
    459e:	df 93       	push	r29
    45a0:	1f 92       	push	r1
    45a2:	cd b7       	in	r28, 0x3d	; 61
    45a4:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    45a6:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;						// Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToBackFromISR (handle, &item, &shouldSwitch));
    45a8:	20 e0       	ldi	r18, 0x00	; 0
    45aa:	ae 01       	movw	r20, r28
    45ac:	4f 5f       	subi	r20, 0xFF	; 255
    45ae:	5f 4f       	sbci	r21, 0xFF	; 255
    45b0:	fc 01       	movw	r30, r24
    45b2:	84 81       	ldd	r24, Z+4	; 0x04
    45b4:	95 81       	ldd	r25, Z+5	; 0x05
    45b6:	0e 94 65 11 	call	0x22ca	; 0x22ca <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    45ba:	91 e0       	ldi	r25, 0x01	; 1
    45bc:	81 11       	cpse	r24, r1
    45be:	01 c0       	rjmp	.+2      	; 0x45c2 <_ZN9frt_queueIjE7ISR_putERKj+0x26>
    45c0:	90 e0       	ldi	r25, 0x00	; 0
}
    45c2:	89 2f       	mov	r24, r25
    45c4:	0f 90       	pop	r0
    45c6:	df 91       	pop	r29
    45c8:	cf 91       	pop	r28
    45ca:	08 95       	ret

000045cc <_ZN9frt_queueIiE11ISR_butt_inERKi>:
 *              the front of the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
bool frt_queue<data_type>::ISR_butt_in (const data_type& item)
    45cc:	cf 93       	push	r28
    45ce:	df 93       	push	r29
    45d0:	1f 92       	push	r1
    45d2:	cd b7       	in	r28, 0x3d	; 61
    45d4:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    45d6:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;                      // Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToFrontFromISR (handle, &item, &shouldSwitch));
    45d8:	21 e0       	ldi	r18, 0x01	; 1
    45da:	ae 01       	movw	r20, r28
    45dc:	4f 5f       	subi	r20, 0xFF	; 255
    45de:	5f 4f       	sbci	r21, 0xFF	; 255
    45e0:	fc 01       	movw	r30, r24
    45e2:	84 81       	ldd	r24, Z+4	; 0x04
    45e4:	95 81       	ldd	r25, Z+5	; 0x05
    45e6:	0e 94 65 11 	call	0x22ca	; 0x22ca <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    45ea:	91 e0       	ldi	r25, 0x01	; 1
    45ec:	81 11       	cpse	r24, r1
    45ee:	01 c0       	rjmp	.+2      	; 0x45f2 <_ZN9frt_queueIiE11ISR_butt_inERKi+0x26>
    45f0:	90 e0       	ldi	r25, 0x00	; 0
}
    45f2:	89 2f       	mov	r24, r25
    45f4:	0f 90       	pop	r0
    45f6:	df 91       	pop	r29
    45f8:	cf 91       	pop	r28
    45fa:	08 95       	ret

000045fc <_ZN9frt_queueIiE7ISR_putERKi>:
 *  @param item Reference to the item which is going to be put into the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
inline bool frt_queue<data_type>::ISR_put (const data_type& item)
    45fc:	cf 93       	push	r28
    45fe:	df 93       	push	r29
    4600:	1f 92       	push	r1
    4602:	cd b7       	in	r28, 0x3d	; 61
    4604:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    4606:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;						// Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToBackFromISR (handle, &item, &shouldSwitch));
    4608:	20 e0       	ldi	r18, 0x00	; 0
    460a:	ae 01       	movw	r20, r28
    460c:	4f 5f       	subi	r20, 0xFF	; 255
    460e:	5f 4f       	sbci	r21, 0xFF	; 255
    4610:	fc 01       	movw	r30, r24
    4612:	84 81       	ldd	r24, Z+4	; 0x04
    4614:	95 81       	ldd	r25, Z+5	; 0x05
    4616:	0e 94 65 11 	call	0x22ca	; 0x22ca <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    461a:	91 e0       	ldi	r25, 0x01	; 1
    461c:	81 11       	cpse	r24, r1
    461e:	01 c0       	rjmp	.+2      	; 0x4622 <_ZN9frt_queueIiE7ISR_putERKi+0x26>
    4620:	90 e0       	ldi	r25, 0x00	; 0
}
    4622:	89 2f       	mov	r24, r25
    4624:	0f 90       	pop	r0
    4626:	df 91       	pop	r29
    4628:	cf 91       	pop	r28
    462a:	08 95       	ret

0000462c <_ZN9frt_queueIjE7butt_inERKj>:
		 *  \b not be used within an interrupt service routine. 
		 *  @param item Reference to the item which is going to be (rudely) put into 
		 *              the front of the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool butt_in (const data_type& item)
    462c:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToFront (handle, &item, ticks_to_wait)));
    462e:	fc 01       	movw	r30, r24
    4630:	26 81       	ldd	r18, Z+6	; 0x06
    4632:	37 81       	ldd	r19, Z+7	; 0x07
    4634:	40 85       	ldd	r20, Z+8	; 0x08
    4636:	51 85       	ldd	r21, Z+9	; 0x09
    4638:	01 e0       	ldi	r16, 0x01	; 1
    463a:	84 81       	ldd	r24, Z+4	; 0x04
    463c:	95 81       	ldd	r25, Z+5	; 0x05
    463e:	0e 94 ca 10 	call	0x2194	; 0x2194 <xQueueGenericSend>
    4642:	91 e0       	ldi	r25, 0x01	; 1
    4644:	81 11       	cpse	r24, r1
    4646:	01 c0       	rjmp	.+2      	; 0x464a <_ZN9frt_queueIjE7butt_inERKj+0x1e>
    4648:	90 e0       	ldi	r25, 0x00	; 0
		}
    464a:	89 2f       	mov	r24, r25
    464c:	0f 91       	pop	r16
    464e:	08 95       	ret

00004650 <_ZN9frt_queueIjE3putERKj>:
		 *  an item into the front of the queue so it will be retreived first, use 
		 *  \c butt_in() instead. This method must \b not be used within an ISR.
		 *  @param item Reference to the item which is going to be put into the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool put (const data_type& item)
    4650:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToBack (handle, &item, ticks_to_wait)));
    4652:	fc 01       	movw	r30, r24
    4654:	26 81       	ldd	r18, Z+6	; 0x06
    4656:	37 81       	ldd	r19, Z+7	; 0x07
    4658:	40 85       	ldd	r20, Z+8	; 0x08
    465a:	51 85       	ldd	r21, Z+9	; 0x09
    465c:	00 e0       	ldi	r16, 0x00	; 0
    465e:	84 81       	ldd	r24, Z+4	; 0x04
    4660:	95 81       	ldd	r25, Z+5	; 0x05
    4662:	0e 94 ca 10 	call	0x2194	; 0x2194 <xQueueGenericSend>
    4666:	91 e0       	ldi	r25, 0x01	; 1
    4668:	81 11       	cpse	r24, r1
    466a:	01 c0       	rjmp	.+2      	; 0x466e <_ZN9frt_queueIjE3putERKj+0x1e>
    466c:	90 e0       	ldi	r25, 0x00	; 0
		}
    466e:	89 2f       	mov	r24, r25
    4670:	0f 91       	pop	r16
    4672:	08 95       	ret

00004674 <_ZN9frt_queueIiE7butt_inERKi>:
		 *  \b not be used within an interrupt service routine. 
		 *  @param item Reference to the item which is going to be (rudely) put into 
		 *              the front of the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool butt_in (const data_type& item)
    4674:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToFront (handle, &item, ticks_to_wait)));
    4676:	fc 01       	movw	r30, r24
    4678:	26 81       	ldd	r18, Z+6	; 0x06
    467a:	37 81       	ldd	r19, Z+7	; 0x07
    467c:	40 85       	ldd	r20, Z+8	; 0x08
    467e:	51 85       	ldd	r21, Z+9	; 0x09
    4680:	01 e0       	ldi	r16, 0x01	; 1
    4682:	84 81       	ldd	r24, Z+4	; 0x04
    4684:	95 81       	ldd	r25, Z+5	; 0x05
    4686:	0e 94 ca 10 	call	0x2194	; 0x2194 <xQueueGenericSend>
    468a:	91 e0       	ldi	r25, 0x01	; 1
    468c:	81 11       	cpse	r24, r1
    468e:	01 c0       	rjmp	.+2      	; 0x4692 <_ZN9frt_queueIiE7butt_inERKi+0x1e>
    4690:	90 e0       	ldi	r25, 0x00	; 0
		}
    4692:	89 2f       	mov	r24, r25
    4694:	0f 91       	pop	r16
    4696:	08 95       	ret

00004698 <_ZN9frt_queueIiE3putERKi>:
		 *  an item into the front of the queue so it will be retreived first, use 
		 *  \c butt_in() instead. This method must \b not be used within an ISR.
		 *  @param item Reference to the item which is going to be put into the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool put (const data_type& item)
    4698:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToBack (handle, &item, ticks_to_wait)));
    469a:	fc 01       	movw	r30, r24
    469c:	26 81       	ldd	r18, Z+6	; 0x06
    469e:	37 81       	ldd	r19, Z+7	; 0x07
    46a0:	40 85       	ldd	r20, Z+8	; 0x08
    46a2:	51 85       	ldd	r21, Z+9	; 0x09
    46a4:	00 e0       	ldi	r16, 0x00	; 0
    46a6:	84 81       	ldd	r24, Z+4	; 0x04
    46a8:	95 81       	ldd	r25, Z+5	; 0x05
    46aa:	0e 94 ca 10 	call	0x2194	; 0x2194 <xQueueGenericSend>
    46ae:	91 e0       	ldi	r25, 0x01	; 1
    46b0:	81 11       	cpse	r24, r1
    46b2:	01 c0       	rjmp	.+2      	; 0x46b6 <_ZN9frt_queueIiE3putERKi+0x1e>
    46b4:	90 e0       	ldi	r25, 0x00	; 0
		}
    46b6:	89 2f       	mov	r24, r25
    46b8:	0f 91       	pop	r16
    46ba:	08 95       	ret

000046bc <_Z8CCPWritePVhh>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    46bc:	0f 93       	push	r16
    46be:	cf 93       	push	r28
    46c0:	df 93       	push	r29
    46c2:	1f 92       	push	r1
    46c4:	cd b7       	in	r28, 0x3d	; 61
    46c6:	de b7       	in	r29, 0x3e	; 62
	#if defined __GNUC__
	uint8_t volatile saved_sreg = SREG;
    46c8:	2f b7       	in	r18, 0x3f	; 63
    46ca:	29 83       	std	Y+1, r18	; 0x01
	cli();
    46cc:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
	#ifdef RAMPZ
	RAMPZ = 0;
    46ce:	1b be       	out	0x3b, r1	; 59
	"out   %3, r16"	      "\n\t"
	"st     Z,  %1"       "\n\t"
	:
	: "r" (tmpAddr), "r" (value), "M" (0xD8), "i" (&CCP)
	: "r16", "r30", "r31"
	);
    46d0:	fc 01       	movw	r30, r24
    46d2:	08 ed       	ldi	r16, 0xD8	; 216
    46d4:	04 bf       	out	0x34, r16	; 52
    46d6:	60 83       	st	Z, r22

	SREG = saved_sreg;
    46d8:	89 81       	ldd	r24, Y+1	; 0x01
    46da:	8f bf       	out	0x3f, r24	; 63
	#endif
}
    46dc:	0f 90       	pop	r0
    46de:	df 91       	pop	r29
    46e0:	cf 91       	pop	r28
    46e2:	0f 91       	pop	r16
    46e4:	08 95       	ret

000046e6 <main>:
 *  reset.
 *  @return This is a real-time microcontroller program which doesn't return. Ever.
 */

int main (void)
{
    46e6:	ef 92       	push	r14
    46e8:	ff 92       	push	r15
    46ea:	0f 93       	push	r16
    46ec:	1f 93       	push	r17
    46ee:	cf 93       	push	r28
    46f0:	df 93       	push	r29
    46f2:	cd b7       	in	r28, 0x3d	; 61
    46f4:	de b7       	in	r29, 0x3e	; 62
    46f6:	c5 54       	subi	r28, 0x45	; 69
    46f8:	d1 09       	sbc	r29, r1
    46fa:	cd bf       	out	0x3d, r28	; 61
    46fc:	de bf       	out	0x3e, r29	; 62
	cli();
    46fe:	f8 94       	cli
	// Configure the system clock
	{	
		// Enable the 32MHz internal RC oscillator and the external 32KHz oscillator
		OSC.CTRL |= (1 << OSC_RC32MEN_bp);
    4700:	e0 e5       	ldi	r30, 0x50	; 80
    4702:	f0 e0       	ldi	r31, 0x00	; 0
    4704:	80 81       	ld	r24, Z
    4706:	82 60       	ori	r24, 0x02	; 2
    4708:	80 83       	st	Z, r24
		do {} while((OSC.STATUS & (1 << OSC_RC32MRDY_bp)) != (1 << OSC_RC32MRDY_bp));
    470a:	81 81       	ldd	r24, Z+1	; 0x01
    470c:	81 ff       	sbrs	r24, 1
    470e:	fd cf       	rjmp	.-6      	; 0x470a <main+0x24>
		// Enable the DFLL auto-calibration
//		DFLLRC32M.CTRL = (1 << DFLL_ENABLE_bp);
//		DFLLRC2M.CTRL = (1 << DFLL_ENABLE_bp);

		// Select the clock
		CCPWrite(&(CLK.CTRL),((CLK.CTRL & ~CLK_SCLKSEL_gm) | (1 << CLK_SCLKSEL0_bp)));
    4710:	60 91 40 00 	lds	r22, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    4714:	68 7f       	andi	r22, 0xF8	; 248
    4716:	61 60       	ori	r22, 0x01	; 1
    4718:	80 e4       	ldi	r24, 0x40	; 64
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	0e 94 5e 23 	call	0x46bc	; 0x46bc <_Z8CCPWritePVhh>
		// Enable the RTC as an external oscillator
		//CLK.RTCCTRL = (CLK_RTCSRC_TOSC_gc | CLK_RTCEN_bm);
		// CCPWrite(&(CLK.RTCCTRL),(CLK_RTCSRC_TOSC_gc | CLK_RTCEN_bm));
		
		// Disable the 2MHz internal RC oscillator
		OSC.CTRL &= ~(1 << OSC_RC2MEN_bp);
    4720:	e0 e5       	ldi	r30, 0x50	; 80
    4722:	f0 e0       	ldi	r31, 0x00	; 0
    4724:	80 81       	ld	r24, Z
    4726:	8e 7f       	andi	r24, 0xFE	; 254
    4728:	80 83       	st	Z, r24
	}
	
	// Disable the watchdog timer unless it's needed later. This is important because
	// sometimes the watchdog timer may have been left on...and it tends to stay on	 
	wdt_disable ();
    472a:	9d ef       	ldi	r25, 0xFD	; 253
    472c:	88 ed       	ldi	r24, 0xD8	; 216
    472e:	08 b6       	in	r0, 0x38	; 56
    4730:	18 be       	out	0x38, r1	; 56
    4732:	84 bf       	out	0x34, r24	; 52
    4734:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    4738:	08 be       	out	0x38, r0	; 56

	// Configure a serial port which can be used by a task to print debugging infor-
	// mation, or to allow user interaction, or for whatever use is appropriate.  The
	// serial port will be used by the user interface task after setup is complete and
	// the task scheduler has been started by the function vTaskStartScheduler()
	rs232 ser_dev(0,&USARTE0); // Create a serial device on USART E0
    473a:	40 ea       	ldi	r20, 0xA0	; 160
    473c:	5a e0       	ldi	r21, 0x0A	; 10
    473e:	60 e0       	ldi	r22, 0x00	; 0
    4740:	70 e0       	ldi	r23, 0x00	; 0
    4742:	ce 01       	movw	r24, r28
    4744:	01 96       	adiw	r24, 0x01	; 1
    4746:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <_ZN5rs232C1EjP12USART_struct>
	ser_dev << clrscr << "FreeRTOS Xmega Testing Program" << endl << endl;
    474a:	67 e0       	ldi	r22, 0x07	; 7
    474c:	ce 01       	movw	r24, r28
    474e:	01 96       	adiw	r24, 0x01	; 1
    4750:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    4754:	8c 01       	movw	r16, r24
    4756:	60 e5       	ldi	r22, 0x50	; 80
    4758:	71 e2       	ldi	r23, 0x21	; 33
    475a:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN8emstream4putsEPKc>
    475e:	66 e0       	ldi	r22, 0x06	; 6
    4760:	c8 01       	movw	r24, r16
    4762:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
    4766:	66 e0       	ldi	r22, 0x06	; 6
    4768:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8emstreamlsE15ser_manipulator>
	
	I2CMaster i2c(&TWIE, 62000, &ser_dev);
    476c:	8e 01       	movw	r16, r28
    476e:	0f 5f       	subi	r16, 0xFF	; 255
    4770:	1f 4f       	sbci	r17, 0xFF	; 255
    4772:	20 e3       	ldi	r18, 0x30	; 48
    4774:	32 ef       	ldi	r19, 0xF2	; 242
    4776:	40 e0       	ldi	r20, 0x00	; 0
    4778:	50 e0       	ldi	r21, 0x00	; 0
    477a:	60 ea       	ldi	r22, 0xA0	; 160
    477c:	74 e0       	ldi	r23, 0x04	; 4
    477e:	ce 01       	movw	r24, r28
    4780:	4e 96       	adiw	r24, 0x1e	; 30
    4782:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_ZN9I2CMasterC1EP10TWI_structmP8emstream>

	// I2CAgent i2cAgent();
	
	MB1202 mb1202(&i2c);
    4786:	be 01       	movw	r22, r28
    4788:	62 5e       	subi	r22, 0xE2	; 226
    478a:	7f 4f       	sbci	r23, 0xFF	; 255
    478c:	ce 01       	movw	r24, r28
    478e:	c7 96       	adiw	r24, 0x37	; 55
    4790:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_ZN6MB1202C1EP9I2CMaster>
	
	//hi = i2c.is_ready(85);
	
	// The user interface is at low priority; it could have been run in the idle task
	// but it is desired to exercise the RTOS more thoroughly in this test program
	new task_user ("UserInt", task_priority (0), 128, &ser_dev);
    4794:	82 e1       	ldi	r24, 0x12	; 18
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Znwj>
    479c:	20 e8       	ldi	r18, 0x80	; 128
    479e:	30 e0       	ldi	r19, 0x00	; 0
    47a0:	40 e0       	ldi	r20, 0x00	; 0
    47a2:	6f e6       	ldi	r22, 0x6F	; 111
    47a4:	71 e2       	ldi	r23, 0x21	; 33
    47a6:	0e 94 46 0a 	call	0x148c	; 0x148c <_ZN9task_userC1EPKchjP8emstream>
	
	new task_sonar ("Sonar", task_priority (2), 128, &ser_dev, &mb1202);
    47aa:	88 e1       	ldi	r24, 0x18	; 24
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Znwj>
    47b2:	9e 01       	movw	r18, r28
    47b4:	29 5c       	subi	r18, 0xC9	; 201
    47b6:	3f 4f       	sbci	r19, 0xFF	; 255
    47b8:	79 01       	movw	r14, r18
    47ba:	20 e8       	ldi	r18, 0x80	; 128
    47bc:	30 e0       	ldi	r19, 0x00	; 0
    47be:	42 e0       	ldi	r20, 0x02	; 2
    47c0:	67 e7       	ldi	r22, 0x77	; 119
    47c2:	71 e2       	ldi	r23, 0x21	; 33
    47c4:	0e 94 29 0a 	call	0x1452	; 0x1452 <_ZN10task_sonarC1EPKchjP8emstreamP6MB1202>
	
	// Enable high level interrupts and global interrupts
	PMIC_CTRL = (1 << PMIC_HILVLEN_bp | 1 << PMIC_MEDLVLEN_bp | 1 << PMIC_LOLVLEN_bp);
    47c8:	87 e0       	ldi	r24, 0x07	; 7
    47ca:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    47ce:	78 94       	sei
	
	// Here's where the RTOS scheduler is started up. It should never exit as long as
	// power is on and the microcontroller isn't rebooted
	vTaskStartScheduler ();
    47d0:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <vTaskStartScheduler>
}
    47d4:	80 e0       	ldi	r24, 0x00	; 0
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	cb 5b       	subi	r28, 0xBB	; 187
    47da:	df 4f       	sbci	r29, 0xFF	; 255
    47dc:	cd bf       	out	0x3d, r28	; 61
    47de:	de bf       	out	0x3e, r29	; 62
    47e0:	df 91       	pop	r29
    47e2:	cf 91       	pop	r28
    47e4:	1f 91       	pop	r17
    47e6:	0f 91       	pop	r16
    47e8:	ff 90       	pop	r15
    47ea:	ef 90       	pop	r14
    47ec:	08 95       	ret

000047ee <_GLOBAL__sub_I_counter>:
    47ee:	cf 92       	push	r12
    47f0:	df 92       	push	r13
    47f2:	ef 92       	push	r14
    47f4:	ff 92       	push	r15
    47f6:	0f 93       	push	r16
    47f8:	1f 93       	push	r17
    47fa:	cf 93       	push	r28
    47fc:	df 93       	push	r29

#include "task_user.h"                      // Header for user interface task
#include "task_sonar.h"

volatile int counter;
frt_text_queue print_ser_queue (32, NULL, 10);
    47fe:	0a e0       	ldi	r16, 0x0A	; 10
    4800:	10 e0       	ldi	r17, 0x00	; 0
    4802:	20 e0       	ldi	r18, 0x00	; 0
    4804:	30 e0       	ldi	r19, 0x00	; 0
    4806:	40 e0       	ldi	r20, 0x00	; 0
    4808:	50 e0       	ldi	r21, 0x00	; 0
    480a:	60 e2       	ldi	r22, 0x20	; 32
    480c:	70 e0       	ldi	r23, 0x00	; 0
    480e:	82 e8       	ldi	r24, 0x82	; 130
    4810:	92 e3       	ldi	r25, 0x32	; 50
    4812:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN14frt_text_queueC1EjP8emstreamm>

template <class data_type>
frt_base_queue<data_type>::frt_base_queue (emstream* p_ser_dev)
{
	// Save the pointer to a serial devide so it may be used for debugging
	p_serial = p_ser_dev;
    4816:	c8 e7       	ldi	r28, 0x78	; 120
    4818:	d2 e3       	ldi	r29, 0x32	; 50
    481a:	1a 82       	std	Y+2, r1	; 0x02
    481c:	1b 82       	std	Y+3, r1	; 0x03
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    481e:	81 e8       	ldi	r24, 0x81	; 129
    4820:	91 e2       	ldi	r25, 0x21	; 33
    4822:	88 83       	st	Y, r24
    4824:	99 83       	std	Y+1, r25	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    4826:	40 e0       	ldi	r20, 0x00	; 0
    4828:	62 e0       	ldi	r22, 0x02	; 2
    482a:	8f ef       	ldi	r24, 0xFF	; 255
    482c:	0e 94 9c 10 	call	0x2138	; 0x2138 <xQueueGenericCreate>
    4830:	8c 83       	std	Y+4, r24	; 0x04
    4832:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    4834:	0f 2e       	mov	r0, r31
    4836:	fa e0       	ldi	r31, 0x0A	; 10
    4838:	cf 2e       	mov	r12, r31
    483a:	d1 2c       	mov	r13, r1
    483c:	e1 2c       	mov	r14, r1
    483e:	f1 2c       	mov	r15, r1
    4840:	f0 2d       	mov	r31, r0
    4842:	ce 82       	std	Y+6, r12	; 0x06
    4844:	df 82       	std	Y+7, r13	; 0x07
    4846:	e8 86       	std	Y+8, r14	; 0x08
    4848:	f9 86       	std	Y+9, r15	; 0x09
    484a:	ce e6       	ldi	r28, 0x6E	; 110
    484c:	d2 e3       	ldi	r29, 0x32	; 50
    484e:	1a 82       	std	Y+2, r1	; 0x02
    4850:	1b 82       	std	Y+3, r1	; 0x03
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    4852:	05 ea       	ldi	r16, 0xA5	; 165
    4854:	11 e2       	ldi	r17, 0x21	; 33
    4856:	08 83       	st	Y, r16
    4858:	19 83       	std	Y+1, r17	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    485a:	40 e0       	ldi	r20, 0x00	; 0
    485c:	62 e0       	ldi	r22, 0x02	; 2
    485e:	8f ef       	ldi	r24, 0xFF	; 255
    4860:	0e 94 9c 10 	call	0x2138	; 0x2138 <xQueueGenericCreate>
    4864:	8c 83       	std	Y+4, r24	; 0x04
    4866:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    4868:	ce 82       	std	Y+6, r12	; 0x06
    486a:	df 82       	std	Y+7, r13	; 0x07
    486c:	e8 86       	std	Y+8, r14	; 0x08
    486e:	f9 86       	std	Y+9, r15	; 0x09
    4870:	c4 e6       	ldi	r28, 0x64	; 100
    4872:	d2 e3       	ldi	r29, 0x32	; 50
    4874:	1a 82       	std	Y+2, r1	; 0x02
    4876:	1b 82       	std	Y+3, r1	; 0x03
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    4878:	08 83       	st	Y, r16
    487a:	19 83       	std	Y+1, r17	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    487c:	40 e0       	ldi	r20, 0x00	; 0
    487e:	62 e0       	ldi	r22, 0x02	; 2
    4880:	8f ef       	ldi	r24, 0xFF	; 255
    4882:	0e 94 9c 10 	call	0x2138	; 0x2138 <xQueueGenericCreate>
    4886:	8c 83       	std	Y+4, r24	; 0x04
    4888:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    488a:	ce 82       	std	Y+6, r12	; 0x06
    488c:	df 82       	std	Y+7, r13	; 0x07
    488e:	e8 86       	std	Y+8, r14	; 0x08
    4890:	f9 86       	std	Y+9, r15	; 0x09
    4892:	ca e5       	ldi	r28, 0x5A	; 90
    4894:	d2 e3       	ldi	r29, 0x32	; 50
    4896:	1a 82       	std	Y+2, r1	; 0x02
    4898:	1b 82       	std	Y+3, r1	; 0x03
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    489a:	08 83       	st	Y, r16
    489c:	19 83       	std	Y+1, r17	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    489e:	40 e0       	ldi	r20, 0x00	; 0
    48a0:	62 e0       	ldi	r22, 0x02	; 2
    48a2:	8f ef       	ldi	r24, 0xFF	; 255
    48a4:	0e 94 9c 10 	call	0x2138	; 0x2138 <xQueueGenericCreate>
    48a8:	8c 83       	std	Y+4, r24	; 0x04
    48aa:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    48ac:	ce 82       	std	Y+6, r12	; 0x06
    48ae:	df 82       	std	Y+7, r13	; 0x07
    48b0:	e8 86       	std	Y+8, r14	; 0x08
    48b2:	f9 86       	std	Y+9, r15	; 0x09
    48b4:	c0 e5       	ldi	r28, 0x50	; 80
    48b6:	d2 e3       	ldi	r29, 0x32	; 50
    48b8:	1a 82       	std	Y+2, r1	; 0x02
    48ba:	1b 82       	std	Y+3, r1	; 0x03
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    48bc:	08 83       	st	Y, r16
    48be:	19 83       	std	Y+1, r17	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    48c0:	40 e0       	ldi	r20, 0x00	; 0
    48c2:	62 e0       	ldi	r22, 0x02	; 2
    48c4:	8f ef       	ldi	r24, 0xFF	; 255
    48c6:	0e 94 9c 10 	call	0x2138	; 0x2138 <xQueueGenericCreate>
    48ca:	8c 83       	std	Y+4, r24	; 0x04
    48cc:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    48ce:	ce 82       	std	Y+6, r12	; 0x06
    48d0:	df 82       	std	Y+7, r13	; 0x07
    48d2:	e8 86       	std	Y+8, r14	; 0x08
    48d4:	f9 86       	std	Y+9, r15	; 0x09
	sei();
	
	// Here's where the RTOS scheduler is started up. It should never exit as long as
	// power is on and the microcontroller isn't rebooted
	vTaskStartScheduler ();
}
    48d6:	df 91       	pop	r29
    48d8:	cf 91       	pop	r28
    48da:	1f 91       	pop	r17
    48dc:	0f 91       	pop	r16
    48de:	ff 90       	pop	r15
    48e0:	ef 90       	pop	r14
    48e2:	df 90       	pop	r13
    48e4:	cf 90       	pop	r12
    48e6:	08 95       	ret

000048e8 <__mulsi3>:
    48e8:	db 01       	movw	r26, r22
    48ea:	8f 93       	push	r24
    48ec:	9f 93       	push	r25
    48ee:	0e 94 ce 24 	call	0x499c	; 0x499c <__muluhisi3>
    48f2:	bf 91       	pop	r27
    48f4:	af 91       	pop	r26
    48f6:	a2 9f       	mul	r26, r18
    48f8:	80 0d       	add	r24, r0
    48fa:	91 1d       	adc	r25, r1
    48fc:	a3 9f       	mul	r26, r19
    48fe:	90 0d       	add	r25, r0
    4900:	b2 9f       	mul	r27, r18
    4902:	90 0d       	add	r25, r0
    4904:	11 24       	eor	r1, r1
    4906:	08 95       	ret

00004908 <__udivmodsi4>:
    4908:	a1 e2       	ldi	r26, 0x21	; 33
    490a:	1a 2e       	mov	r1, r26
    490c:	aa 1b       	sub	r26, r26
    490e:	bb 1b       	sub	r27, r27
    4910:	fd 01       	movw	r30, r26
    4912:	0d c0       	rjmp	.+26     	; 0x492e <__udivmodsi4_ep>

00004914 <__udivmodsi4_loop>:
    4914:	aa 1f       	adc	r26, r26
    4916:	bb 1f       	adc	r27, r27
    4918:	ee 1f       	adc	r30, r30
    491a:	ff 1f       	adc	r31, r31
    491c:	a2 17       	cp	r26, r18
    491e:	b3 07       	cpc	r27, r19
    4920:	e4 07       	cpc	r30, r20
    4922:	f5 07       	cpc	r31, r21
    4924:	20 f0       	brcs	.+8      	; 0x492e <__udivmodsi4_ep>
    4926:	a2 1b       	sub	r26, r18
    4928:	b3 0b       	sbc	r27, r19
    492a:	e4 0b       	sbc	r30, r20
    492c:	f5 0b       	sbc	r31, r21

0000492e <__udivmodsi4_ep>:
    492e:	66 1f       	adc	r22, r22
    4930:	77 1f       	adc	r23, r23
    4932:	88 1f       	adc	r24, r24
    4934:	99 1f       	adc	r25, r25
    4936:	1a 94       	dec	r1
    4938:	69 f7       	brne	.-38     	; 0x4914 <__udivmodsi4_loop>
    493a:	60 95       	com	r22
    493c:	70 95       	com	r23
    493e:	80 95       	com	r24
    4940:	90 95       	com	r25
    4942:	9b 01       	movw	r18, r22
    4944:	ac 01       	movw	r20, r24
    4946:	bd 01       	movw	r22, r26
    4948:	cf 01       	movw	r24, r30
    494a:	08 95       	ret

0000494c <__divmodsi4>:
    494c:	05 2e       	mov	r0, r21
    494e:	97 fb       	bst	r25, 7
    4950:	1e f4       	brtc	.+6      	; 0x4958 <__divmodsi4+0xc>
    4952:	00 94       	com	r0
    4954:	0e 94 bd 24 	call	0x497a	; 0x497a <__negsi2>
    4958:	57 fd       	sbrc	r21, 7
    495a:	07 d0       	rcall	.+14     	; 0x496a <__divmodsi4_neg2>
    495c:	0e 94 84 24 	call	0x4908	; 0x4908 <__udivmodsi4>
    4960:	07 fc       	sbrc	r0, 7
    4962:	03 d0       	rcall	.+6      	; 0x496a <__divmodsi4_neg2>
    4964:	4e f4       	brtc	.+18     	; 0x4978 <__divmodsi4_exit>
    4966:	0c 94 bd 24 	jmp	0x497a	; 0x497a <__negsi2>

0000496a <__divmodsi4_neg2>:
    496a:	50 95       	com	r21
    496c:	40 95       	com	r20
    496e:	30 95       	com	r19
    4970:	21 95       	neg	r18
    4972:	3f 4f       	sbci	r19, 0xFF	; 255
    4974:	4f 4f       	sbci	r20, 0xFF	; 255
    4976:	5f 4f       	sbci	r21, 0xFF	; 255

00004978 <__divmodsi4_exit>:
    4978:	08 95       	ret

0000497a <__negsi2>:
    497a:	90 95       	com	r25
    497c:	80 95       	com	r24
    497e:	70 95       	com	r23
    4980:	61 95       	neg	r22
    4982:	7f 4f       	sbci	r23, 0xFF	; 255
    4984:	8f 4f       	sbci	r24, 0xFF	; 255
    4986:	9f 4f       	sbci	r25, 0xFF	; 255
    4988:	08 95       	ret

0000498a <__tablejump2__>:
    498a:	ee 0f       	add	r30, r30
    498c:	ff 1f       	adc	r31, r31
    498e:	88 1f       	adc	r24, r24
    4990:	8b bf       	out	0x3b, r24	; 59
    4992:	07 90       	elpm	r0, Z+
    4994:	f6 91       	elpm	r31, Z
    4996:	e0 2d       	mov	r30, r0
    4998:	1b be       	out	0x3b, r1	; 59
    499a:	19 94       	eijmp

0000499c <__muluhisi3>:
    499c:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <__umulhisi3>
    49a0:	a5 9f       	mul	r26, r21
    49a2:	90 0d       	add	r25, r0
    49a4:	b4 9f       	mul	r27, r20
    49a6:	90 0d       	add	r25, r0
    49a8:	a4 9f       	mul	r26, r20
    49aa:	80 0d       	add	r24, r0
    49ac:	91 1d       	adc	r25, r1
    49ae:	11 24       	eor	r1, r1
    49b0:	08 95       	ret

000049b2 <__umulhisi3>:
    49b2:	a2 9f       	mul	r26, r18
    49b4:	b0 01       	movw	r22, r0
    49b6:	b3 9f       	mul	r27, r19
    49b8:	c0 01       	movw	r24, r0
    49ba:	a3 9f       	mul	r26, r19
    49bc:	70 0d       	add	r23, r0
    49be:	81 1d       	adc	r24, r1
    49c0:	11 24       	eor	r1, r1
    49c2:	91 1d       	adc	r25, r1
    49c4:	b2 9f       	mul	r27, r18
    49c6:	70 0d       	add	r23, r0
    49c8:	81 1d       	adc	r24, r1
    49ca:	11 24       	eor	r1, r1
    49cc:	91 1d       	adc	r25, r1
    49ce:	08 95       	ret

000049d0 <memcpy>:
    49d0:	fb 01       	movw	r30, r22
    49d2:	dc 01       	movw	r26, r24
    49d4:	02 c0       	rjmp	.+4      	; 0x49da <memcpy+0xa>
    49d6:	01 90       	ld	r0, Z+
    49d8:	0d 92       	st	X+, r0
    49da:	41 50       	subi	r20, 0x01	; 1
    49dc:	50 40       	sbci	r21, 0x00	; 0
    49de:	d8 f7       	brcc	.-10     	; 0x49d6 <memcpy+0x6>
    49e0:	08 95       	ret

000049e2 <memset>:
    49e2:	dc 01       	movw	r26, r24
    49e4:	01 c0       	rjmp	.+2      	; 0x49e8 <memset+0x6>
    49e6:	6d 93       	st	X+, r22
    49e8:	41 50       	subi	r20, 0x01	; 1
    49ea:	50 40       	sbci	r21, 0x00	; 0
    49ec:	e0 f7       	brcc	.-8      	; 0x49e6 <memset+0x4>
    49ee:	08 95       	ret

000049f0 <strncpy>:
    49f0:	fb 01       	movw	r30, r22
    49f2:	dc 01       	movw	r26, r24
    49f4:	41 50       	subi	r20, 0x01	; 1
    49f6:	50 40       	sbci	r21, 0x00	; 0
    49f8:	48 f0       	brcs	.+18     	; 0x4a0c <strncpy+0x1c>
    49fa:	01 90       	ld	r0, Z+
    49fc:	0d 92       	st	X+, r0
    49fe:	00 20       	and	r0, r0
    4a00:	c9 f7       	brne	.-14     	; 0x49f4 <strncpy+0x4>
    4a02:	01 c0       	rjmp	.+2      	; 0x4a06 <strncpy+0x16>
    4a04:	1d 92       	st	X+, r1
    4a06:	41 50       	subi	r20, 0x01	; 1
    4a08:	50 40       	sbci	r21, 0x00	; 0
    4a0a:	e0 f7       	brcc	.-8      	; 0x4a04 <strncpy+0x14>
    4a0c:	08 95       	ret

00004a0e <ultoa>:
    4a0e:	25 32       	cpi	r18, 0x25	; 37
    4a10:	31 05       	cpc	r19, r1
    4a12:	20 f4       	brcc	.+8      	; 0x4a1c <ultoa+0xe>
    4a14:	22 30       	cpi	r18, 0x02	; 2
    4a16:	10 f0       	brcs	.+4      	; 0x4a1c <ultoa+0xe>
    4a18:	0c 94 12 25 	jmp	0x4a24	; 0x4a24 <__ultoa_ncheck>
    4a1c:	fa 01       	movw	r30, r20
    4a1e:	10 82       	st	Z, r1
    4a20:	ca 01       	movw	r24, r20
    4a22:	08 95       	ret

00004a24 <__ultoa_ncheck>:
    4a24:	bb 27       	eor	r27, r27

00004a26 <__ultoa_common>:
    4a26:	fa 01       	movw	r30, r20
    4a28:	a6 2f       	mov	r26, r22
    4a2a:	62 17       	cp	r22, r18
    4a2c:	71 05       	cpc	r23, r1
    4a2e:	81 05       	cpc	r24, r1
    4a30:	91 05       	cpc	r25, r1
    4a32:	33 0b       	sbc	r19, r19
    4a34:	30 fb       	bst	r19, 0
    4a36:	66 f0       	brts	.+24     	; 0x4a50 <__ultoa_common+0x2a>
    4a38:	aa 27       	eor	r26, r26
    4a3a:	66 0f       	add	r22, r22
    4a3c:	77 1f       	adc	r23, r23
    4a3e:	88 1f       	adc	r24, r24
    4a40:	99 1f       	adc	r25, r25
    4a42:	aa 1f       	adc	r26, r26
    4a44:	a2 17       	cp	r26, r18
    4a46:	10 f0       	brcs	.+4      	; 0x4a4c <__ultoa_common+0x26>
    4a48:	a2 1b       	sub	r26, r18
    4a4a:	63 95       	inc	r22
    4a4c:	38 50       	subi	r19, 0x08	; 8
    4a4e:	a9 f7       	brne	.-22     	; 0x4a3a <__ultoa_common+0x14>
    4a50:	a0 5d       	subi	r26, 0xD0	; 208
    4a52:	aa 33       	cpi	r26, 0x3A	; 58
    4a54:	08 f0       	brcs	.+2      	; 0x4a58 <__ultoa_common+0x32>
    4a56:	a9 5d       	subi	r26, 0xD9	; 217
    4a58:	a1 93       	st	Z+, r26
    4a5a:	36 f7       	brtc	.-52     	; 0x4a28 <__ultoa_common+0x2>
    4a5c:	b1 11       	cpse	r27, r1
    4a5e:	b1 93       	st	Z+, r27
    4a60:	10 82       	st	Z, r1
    4a62:	ca 01       	movw	r24, r20
    4a64:	0c 94 59 25 	jmp	0x4ab2	; 0x4ab2 <strrev>

00004a68 <utoa>:
    4a68:	45 32       	cpi	r20, 0x25	; 37
    4a6a:	51 05       	cpc	r21, r1
    4a6c:	20 f4       	brcc	.+8      	; 0x4a76 <utoa+0xe>
    4a6e:	42 30       	cpi	r20, 0x02	; 2
    4a70:	10 f0       	brcs	.+4      	; 0x4a76 <utoa+0xe>
    4a72:	0c 94 3f 25 	jmp	0x4a7e	; 0x4a7e <__utoa_ncheck>
    4a76:	fb 01       	movw	r30, r22
    4a78:	10 82       	st	Z, r1
    4a7a:	cb 01       	movw	r24, r22
    4a7c:	08 95       	ret

00004a7e <__utoa_ncheck>:
    4a7e:	bb 27       	eor	r27, r27

00004a80 <__utoa_common>:
    4a80:	fb 01       	movw	r30, r22
    4a82:	55 27       	eor	r21, r21
    4a84:	aa 27       	eor	r26, r26
    4a86:	88 0f       	add	r24, r24
    4a88:	99 1f       	adc	r25, r25
    4a8a:	aa 1f       	adc	r26, r26
    4a8c:	a4 17       	cp	r26, r20
    4a8e:	10 f0       	brcs	.+4      	; 0x4a94 <__utoa_common+0x14>
    4a90:	a4 1b       	sub	r26, r20
    4a92:	83 95       	inc	r24
    4a94:	50 51       	subi	r21, 0x10	; 16
    4a96:	b9 f7       	brne	.-18     	; 0x4a86 <__utoa_common+0x6>
    4a98:	a0 5d       	subi	r26, 0xD0	; 208
    4a9a:	aa 33       	cpi	r26, 0x3A	; 58
    4a9c:	08 f0       	brcs	.+2      	; 0x4aa0 <__utoa_common+0x20>
    4a9e:	a9 5d       	subi	r26, 0xD9	; 217
    4aa0:	a1 93       	st	Z+, r26
    4aa2:	00 97       	sbiw	r24, 0x00	; 0
    4aa4:	79 f7       	brne	.-34     	; 0x4a84 <__utoa_common+0x4>
    4aa6:	b1 11       	cpse	r27, r1
    4aa8:	b1 93       	st	Z+, r27
    4aaa:	11 92       	st	Z+, r1
    4aac:	cb 01       	movw	r24, r22
    4aae:	0c 94 59 25 	jmp	0x4ab2	; 0x4ab2 <strrev>

00004ab2 <strrev>:
    4ab2:	dc 01       	movw	r26, r24
    4ab4:	fc 01       	movw	r30, r24
    4ab6:	67 2f       	mov	r22, r23
    4ab8:	71 91       	ld	r23, Z+
    4aba:	77 23       	and	r23, r23
    4abc:	e1 f7       	brne	.-8      	; 0x4ab6 <strrev+0x4>
    4abe:	32 97       	sbiw	r30, 0x02	; 2
    4ac0:	04 c0       	rjmp	.+8      	; 0x4aca <strrev+0x18>
    4ac2:	7c 91       	ld	r23, X
    4ac4:	6d 93       	st	X+, r22
    4ac6:	70 83       	st	Z, r23
    4ac8:	62 91       	ld	r22, -Z
    4aca:	ae 17       	cp	r26, r30
    4acc:	bf 07       	cpc	r27, r31
    4ace:	c8 f3       	brcs	.-14     	; 0x4ac2 <strrev+0x10>
    4ad0:	08 95       	ret

00004ad2 <_exit>:
    4ad2:	f8 94       	cli

00004ad4 <__stop_program>:
    4ad4:	ff cf       	rjmp	.-2      	; 0x4ad4 <__stop_program>
