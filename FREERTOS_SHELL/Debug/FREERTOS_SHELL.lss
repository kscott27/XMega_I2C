
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ef0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002a2  00802000  00004ef0  00004f84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000010ce  008022a2  008022a2  00005226  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005226  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ab0  00000000  00000000  00005298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001d2f3  00000000  00000000  00005d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000760d  00000000  00000000  0002303b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006c7f  00000000  00000000  0002a648  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000020f4  00000000  00000000  000312c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007065  00000000  00000000  000333bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000aaf0  00000000  00000000  0003a421  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a18  00000000  00000000  00044f11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 03 	jmp	0x66a	; 0x66a <__ctors_end>
       4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
       8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
       c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      10:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      14:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      18:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      1c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      20:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      24:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      28:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      2c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      30:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      34:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      38:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      3c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      40:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      44:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      48:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      4c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      50:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      54:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      58:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__vector_22>
      5c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      60:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      64:	0c 94 8e 21 	jmp	0x431c	; 0x431c <__vector_25>
      68:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      6c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      70:	0c 94 ec 21 	jmp	0x43d8	; 0x43d8 <__vector_28>
      74:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      78:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      7c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      80:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      84:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      88:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      8c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      90:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      94:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      98:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      9c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      a0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      a4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      a8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      ac:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      b0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      b4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      b8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      bc:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      c0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      c4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      c8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      cc:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      d0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      d4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      d8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      dc:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      e0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      e4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      e8:	0c 94 06 23 	jmp	0x460c	; 0x460c <__vector_58>
      ec:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      f0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      f4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      f8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
      fc:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     100:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     104:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     108:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     10c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     110:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     114:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     118:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     11c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     120:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     124:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     128:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     12c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     130:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     134:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     138:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     13c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     140:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     144:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     148:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     14c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     150:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     154:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     158:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     15c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     160:	0c 94 4a 22 	jmp	0x4494	; 0x4494 <__vector_88>
     164:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     168:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     16c:	0c 94 a8 22 	jmp	0x4550	; 0x4550 <__vector_91>
     170:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     174:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     178:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     17c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     180:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     184:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     188:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     18c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     190:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     194:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     198:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     19c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1a0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1a4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1a8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1ac:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1b0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1b4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1b8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1bc:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1c0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1c4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1c8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1cc:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1d0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1d4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1d8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1dc:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1e0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1e4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1e8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1ec:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1f0:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1f4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1f8:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__bad_interrupt>
     1fc:	3d 1f       	adc	r19, r29
     1fe:	40 1f       	adc	r20, r16
     200:	43 1f       	adc	r20, r19
     202:	46 1f       	adc	r20, r22
     204:	49 1f       	adc	r20, r25
     206:	4c 1f       	adc	r20, r28
     208:	4e 1f       	adc	r20, r30
     20a:	5f 1f       	adc	r21, r31
     20c:	67 1f       	adc	r22, r23
     20e:	71 1f       	adc	r23, r17
     210:	6f 1f       	adc	r22, r31

00000212 <__trampolines_start>:
     212:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <_ZN9task_user3runEv>
     216:	0c 94 86 1c 	jmp	0x390c	; 0x390c <_ZN14frt_text_queue14check_for_charEv>
     21a:	0c 94 c2 24 	jmp	0x4984	; 0x4984 <_ZN9frt_queueIjE11ISR_butt_inERKj>
     21e:	0c 94 6b 23 	jmp	0x46d6	; 0x46d6 <_ZN9frt_queueIjE13ISR_not_emptyEv>
     222:	0c 94 1e 1b 	jmp	0x363c	; 0x363c <_ZN8frt_task12print_statusER8emstream>
     226:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <_ZN8emstream7getcharEv>
     22a:	0c 94 04 26 	jmp	0x4c08	; 0x4c08 <_GLOBAL__sub_I_counter>
     22e:	0c 94 76 23 	jmp	0x46ec	; 0x46ec <_ZN9frt_queueIjE12ISR_is_emptyEv>
     232:	0c 94 49 1f 	jmp	0x3e92	; 0x3e92 <_ZN8emstreamlsE15ser_manipulator+0x36>
     236:	0c 94 e0 23 	jmp	0x47c0	; 0x47c0 <_ZN9frt_queueIjE10get_a_copyEv>
     23a:	0c 94 27 0a 	jmp	0x144e	; 0x144e <_ZN9frt_queueIhE3getEPh>
     23e:	0c 94 87 23 	jmp	0x470e	; 0x470e <_ZN9frt_queueIiE13ISR_not_emptyEv>
     242:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <_ZN9I2CMaster10StartState11serialDebugEv>
     246:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <_ZN10task_sonar3runEv>
     24a:	0c 94 6f 1f 	jmp	0x3ede	; 0x3ede <_ZN8emstreamlsE15ser_manipulator+0x82>
     24e:	0c 94 34 25 	jmp	0x4a68	; 0x4a68 <_ZN9frt_queueIjE3putERKj>
     252:	0c 94 a8 20 	jmp	0x4150	; 0x4150 <_ZN5rs2327putcharEc>
     256:	0c 94 92 05 	jmp	0xb24	; 0xb24 <_ZN9I2CMaster8Receiver13ExchangeState7executeER6Packet>
     25a:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <_ZN9I2CMaster8Receiver17PacketStatusState7executeER6Packet>
     25e:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <_ZN9frt_queueIhE12num_items_inEv>
     262:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <_ZN9frt_queueIhE3putERKh>
     266:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <_ZN9frt_queueIhE13ISR_not_emptyEv>
     26a:	0c 94 13 05 	jmp	0xa26	; 0xa26 <_ZN9I2CMaster11Transmitter11StatusState11serialDebugEv>
     26e:	0c 94 bf 23 	jmp	0x477e	; 0x477e <_ZN9frt_queueIiE9not_emptyEv>
     272:	0c 94 ae 23 	jmp	0x475c	; 0x475c <_ZN9frt_queueIjE8is_emptyEv>
     276:	0c 94 e0 1e 	jmp	0x3dc0	; 0x3dc0 <_ZN8emstream13ready_to_sendEv>
     27a:	0c 94 31 05 	jmp	0xa62	; 0xa62 <_ZN9I2CMaster8Receiver11StatusState11serialDebugEv>
     27e:	0c 94 4e 1f 	jmp	0x3e9c	; 0x3e9c <_ZN8emstreamlsE15ser_manipulator+0x40>
     282:	0c 94 71 1f 	jmp	0x3ee2	; 0x3ee2 <_ZN8emstreamlsE15ser_manipulator+0x86>
     286:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <_ZN9frt_queueIhE7butt_inERKh>
     28a:	0c 94 39 04 	jmp	0x872	; 0x872 <_ZN9I2CMaster8Receiver11StatusState7executeER6Packet>
     28e:	0c 94 46 25 	jmp	0x4a8c	; 0x4a8c <_ZN9frt_queueIiE7butt_inERKi>
     292:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <_ZN9frt_queueIjE7ISR_putERKj>
     296:	0c 94 92 23 	jmp	0x4724	; 0x4724 <_ZN9frt_queueIiE12ISR_is_emptyEv>
     29a:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <_ZN9I2CMaster11Transmitter17PacketStatusState7executeER6Packet>
     29e:	0c 94 f2 20 	jmp	0x41e4	; 0x41e4 <_ZN5rs23214check_for_charEv>
     2a2:	0c 94 64 23 	jmp	0x46c8	; 0x46c8 <_ZN9frt_queueIjE16ISR_num_items_inEv>
     2a6:	0c 94 05 21 	jmp	0x420a	; 0x420a <_ZN5rs23212clear_screenEv>
     2aa:	0c 94 40 1f 	jmp	0x3e80	; 0x3e80 <_ZN8emstreamlsE15ser_manipulator+0x24>
     2ae:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <_ZN8I2CAgent11writePacketER7Command>
     2b2:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <_ZN9frt_queueIhE7ISR_getEv>
     2b6:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <_ZN8I2CAgent8transmitER7Command>
     2ba:	0c 94 ca 23 	jmp	0x4794	; 0x4794 <_ZN9frt_queueIiE8is_emptyEv>
     2be:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <_ZN9frt_queueIhE12ISR_is_emptyEv>
     2c2:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <_ZN9frt_queueIhE16ISR_num_items_inEv>
     2c6:	0c 94 32 03 	jmp	0x664	; 0x664 <_call_static_run_method>
     2ca:	0c 94 49 1e 	jmp	0x3c92	; 0x3c92 <__cxa_pure_virtual>
     2ce:	0c 94 22 25 	jmp	0x4a44	; 0x4a44 <_ZN9frt_queueIjE7butt_inERKj>
     2d2:	0c 94 0f 04 	jmp	0x81e	; 0x81e <_ZN9I2CMaster11Transmitter11StatusState7executeER6Packet>
     2d6:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <prvIdleTask>
     2da:	0c 94 aa 04 	jmp	0x954	; 0x954 <_ZN9I2CMaster8Receiver17PacketStatusState11serialDebugEv>
     2de:	0c 94 99 24 	jmp	0x4932	; 0x4932 <_ZN9frt_queueIiE7ISR_getEPi>
     2e2:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <_ZN14frt_text_queue7putcharEc>
     2e6:	0c 94 81 24 	jmp	0x4902	; 0x4902 <_ZN9frt_queueIjE7ISR_getEv>
     2ea:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <_ZN9I2CMaster9DoneState7executeER6Packet>
     2ee:	0c 94 70 24 	jmp	0x48e0	; 0x48e0 <_ZN9frt_queueIjE7ISR_getEPj>
     2f2:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <_ZN8emstreamlsE15ser_manipulator+0x3c>
     2f6:	0c 94 aa 24 	jmp	0x4954	; 0x4954 <_ZN9frt_queueIiE7ISR_getEv>
     2fa:	0c 94 cc 20 	jmp	0x4198	; 0x4198 <_ZN5rs2327getcharEv>
     2fe:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <_ZN9frt_queueIhE10get_a_copyEv>
     302:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <_ZN7MMA845113ActiveCommand11writePacketER9frt_queueIhE>
     306:	0c 94 a5 03 	jmp	0x74a	; 0x74a <_ZN8I2CAgent7receiveEv>
     30a:	0c 94 46 1f 	jmp	0x3e8c	; 0x3e8c <_ZN8emstreamlsE15ser_manipulator+0x30>
     30e:	0c 94 22 24 	jmp	0x4844	; 0x4844 <_ZN9frt_queueIiE10get_a_copyERi>
     312:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <_ZN9I2CMaster8Receiver13ExchangeState11serialDebugEv>
     316:	0c 94 07 24 	jmp	0x480e	; 0x480e <_ZN9frt_queueIjE3getEv>
     31a:	0c 94 5f 1f 	jmp	0x3ebe	; 0x3ebe <_ZN8emstreamlsE15ser_manipulator+0x62>
     31e:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <_ZN8emstreamlsE15ser_manipulator+0x72>
     322:	0c 94 58 25 	jmp	0x4ab0	; 0x4ab0 <_ZN9frt_queueIiE3putERKi>
     326:	0c 94 fb 23 	jmp	0x47f6	; 0x47f6 <_ZN9frt_queueIjE3getEPj>
     32a:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <_ZN9I2CMaster10ErrorState7executeER6Packet>
     32e:	0c 94 e5 1e 	jmp	0x3dca	; 0x3dca <_ZN8emstream14check_for_charEv>
     332:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <_ZN9frt_queueIhE8is_emptyEv>
     336:	0c 94 2e 24 	jmp	0x485c	; 0x485c <_ZN9frt_queueIiE10get_a_copyEv>
     33a:	0c 94 49 24 	jmp	0x4892	; 0x4892 <_ZN9frt_queueIiE3getEPi>
     33e:	0c 94 b8 23 	jmp	0x4770	; 0x4770 <_ZN9frt_queueIiE12num_items_inEv>
     342:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <_ZN8emstream12transmit_nowEv>
     346:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <_ZN9I2CMaster11Transmitter13ExchangeState7executeER6Packet>
     34a:	0c 94 02 04 	jmp	0x804	; 0x804 <_ZN8I2CAgent11resetPacketER6Packet>
     34e:	0c 94 a3 23 	jmp	0x4746	; 0x4746 <_ZN9frt_queueIjE9not_emptyEv>
     352:	0c 94 43 1f 	jmp	0x3e86	; 0x3e86 <_ZN8emstreamlsE15ser_manipulator+0x2a>
     356:	0c 94 6d 03 	jmp	0x6da	; 0x6da <_ZN8I2CAgent10readPacketEv>
     35a:	0c 94 f2 24 	jmp	0x49e4	; 0x49e4 <_ZN9frt_queueIiE11ISR_butt_inERKi>
     35e:	0c 94 bf 04 	jmp	0x97e	; 0x97e <_ZN9I2CMaster11Transmitter17PacketStatusState11serialDebugEv>
     362:	0c 94 80 23 	jmp	0x4700	; 0x4700 <_ZN9frt_queueIiE16ISR_num_items_inEv>
     366:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <_ZN14frt_text_queue7getcharEv>
     36a:	0c 94 d4 23 	jmp	0x47a8	; 0x47a8 <_ZN9frt_queueIjE10get_a_copyERj>
     36e:	0c 94 80 04 	jmp	0x900	; 0x900 <_ZN9I2CMaster10ErrorState11serialDebugEv>
     372:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <_ZN9frt_queueIhE7ISR_getEPh>
     376:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <_ZN9frt_queueIhE10get_a_copyERh>
     37a:	0c 94 95 04 	jmp	0x92a	; 0x92a <_ZN9I2CMaster9DoneState11serialDebugEv>
     37e:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <_ZN9I2CMaster11Transmitter13ExchangeState11serialDebugEv>
     382:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <_ZN9frt_queueIhE11ISR_butt_inERKh>
     386:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <_ZN9frt_queueIhE9not_emptyEv>
     38a:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <_ZN8emstreamlsE15ser_manipulator+0x1e>
     38e:	0c 94 0a 25 	jmp	0x4a14	; 0x4a14 <_ZN9frt_queueIiE7ISR_putERKi>
     392:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <_ZN9frt_queueIhE3getEv>
     396:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <_ZN9frt_queueIhE7ISR_putERKh>
     39a:	0c 94 55 24 	jmp	0x48aa	; 0x48aa <_ZN9frt_queueIiE3getEv>
     39e:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <_ZN8emstream12clear_screenEv>
     3a2:	0c 94 6f 08 	jmp	0x10de	; 0x10de <_ZN9I2CMaster10StartState7executeER6Packet>
     3a6:	0c 94 9c 23 	jmp	0x4738	; 0x4738 <_ZN9frt_queueIjE12num_items_inEv>

000003aa <__trampolines_end>:
     3aa:	53 6f       	ori	r21, 0xF3	; 243
     3ac:	6e 61       	ori	r22, 0x1E	; 30
     3ae:	72 3a       	cpi	r23, 0xA2	; 162
     3b0:	20 00       	.word	0x0020	; ????

000003b2 <_ZZN9task_user11show_statusEvE3__c_4>:
     3b2:	2c 20 54 43 43 30 43 43 41 3d 00                    , TCC0CCA=.

000003bd <_ZZN9task_user11show_statusEvE3__c_3>:
     3bd:	2f 00                                               /.

000003bf <_ZZN9task_user11show_statusEvE3__c_2>:
     3bf:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

000003cd <_ZZN9task_user11show_statusEvE3__c_1>:
     3cd:	54 69 6d 65 3a 20 00                                Time: .

000003d4 <_ZZN9task_user11show_statusEvE3__c_0>:
     3d4:	4e 6f 76 20 32 33 20 32 30 31 38 00                 Nov 23 2018.

000003e0 <_ZZN9task_user11show_statusEvE3__c>:
     3e0:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     3f0:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

000003ff <_ZZN9task_user18print_help_messageEvE3__c_10>:
     3ff:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

0000040e <_ZZN9task_user18print_help_messageEvE3__c_9>:
     40e:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     41e:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

00000429 <_ZZN9task_user18print_help_messageEvE3__c_8>:
     429:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     439:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

00000447 <_ZZN9task_user18print_help_messageEvE3__c_7>:
     447:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     457:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     467:	6d 61 74 69 6f 6e 00                                mation.

0000046e <_ZZN9task_user18print_help_messageEvE3__c_6>:
     46e:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     47e:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

0000048f <_ZZN9task_user18print_help_messageEvE3__c_5>:
     48f:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     49f:	65 20 6f 6e 6c 79 3a 00                             e only:.

000004a7 <_ZZN9task_user18print_help_messageEvE3__c_4>:
     4a7:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     4b7:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

000004c3 <_ZZN9task_user18print_help_messageEvE3__c_3>:
     4c3:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     4d3:	68 65 20 41 56 52 00                                he AVR.

000004da <_ZZN9task_user18print_help_messageEvE3__c_2>:
     4da:	20 68 65 6c 70 00                                    help.

000004e0 <_ZZN9task_user18print_help_messageEvE3__c_1>:
     4e0:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     4f0:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

000004ff <_ZZN9task_user18print_help_messageEvE3__c_0>:
     4ff:	1b 5b 33 30 6d 00                                   .[30m.

00000505 <_ZZN9task_user18print_help_messageEvE3__c>:
     505:	1b 5b 34 36 6d 00                                   .[46m.

0000050b <_ZZN9task_user3runEvE3__c_3>:
     50b:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     51b:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

00000528 <_ZZN9task_user3runEvE3__c_2>:
     528:	3a 57 54 46 3f 00                                   :WTF?.

0000052e <_ZZN9task_user3runEvE3__c_1>:
     52e:	45 78 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     Exit command mod
     53e:	65 00                                               e.

00000540 <_ZZN9task_user3runEvE3__c_0>:
     540:	52 65 73 65 74 74 69 6e 67 20 41 56 52 00           Resetting AVR.

0000054e <_ZZN9task_user3runEvE3__c>:
     54e:	50 72 65 73 73 20 43 74 72 6c 2d 41 20 66 6f 72     Press Ctrl-A for
     55e:	20 63 6f 6d 6d 61 6e 64 20 6d 6f 64 65 00            command mode.

0000056c <_ZZN8frt_task15emergency_resetEvE3__c_0>:
     56c:	52 65 73 65 74 74 69 6e 67 00                       Resetting.

00000576 <_ZZN8frt_task15emergency_resetEvE3__c>:
     576:	45 52 52 4f 52 20 69 6e 20 74 61 73 6b 20 00        ERROR in task .

00000585 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     585:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     595:	61 73 6b 20 00                                      ask .

0000059a <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     59a:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

000005a8 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     5a8:	20 63 72 65 61 74 65 64 00                           created.

000005b1 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     5b1:	54 61 73 6b 20 00                                   Task .

000005b7 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_1>:
     5b7:	1b 5b 32 32 6d 00                                   .[22m.

000005bd <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_0>:
     5bd:	54 61 73 6b 3a 20 00                                Task: .

000005c4 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c>:
     5c4:	1b 5b 31 6d 00                                      .[1m.

000005c9 <_ZZ17print_task_stacksP8emstreamE3__c_1>:
     5c9:	1b 5b 32 32 6d 00                                   .[22m.

000005cf <_ZZ17print_task_stacksP8emstreamE3__c_0>:
     5cf:	54 61 73 6b 3a 20 49 44 4c 45 00                    Task: IDLE.

000005da <_ZZ17print_task_stacksP8emstreamE3__c>:
     5da:	1b 5b 31 6d 00                                      .[1m.

000005df <_ZZ15print_task_listP8emstreamE3__c_9>:
     5df:	09 09 00                                            ...

000005e2 <_ZZ15print_task_listP8emstreamE3__c_8>:
     5e2:	2f 00                                               /.

000005e4 <_ZZ15print_task_listP8emstreamE3__c_7>:
     5e4:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

000005ef <_ZZ15print_task_listP8emstreamE3__c_6>:
     5ef:	09 2d 2d 2d 2d 00                                   .----.

000005f5 <_ZZ15print_task_listP8emstreamE3__c_5>:
     5f5:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

00000601 <_ZZ15print_task_listP8emstreamE3__c_4>:
     601:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

00000612 <_ZZ15print_task_listP8emstreamE3__c_3>:
     612:	09 52 75 6e 73 00                                   .Runs.

00000618 <_ZZ15print_task_listP8emstreamE3__c_2>:
     618:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

00000624 <_ZZ15print_task_listP8emstreamE3__c_1>:
     624:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

00000635 <_ZZ15print_task_listP8emstreamE3__c_0>:
     635:	09 53 74 61 63 6b 00                                .Stack.

0000063c <_ZZ15print_task_listP8emstreamE3__c>:
     63c:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

00000647 <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     647:	09 00                                               ..

00000649 <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     649:	09 00                                               ..

0000064b <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     64b:	2f 00                                               /.

0000064d <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     64d:	09 00                                               ..

0000064f <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     64f:	09 00                                               ..

00000651 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_2>:
     651:	1b 5b 32 32 6d 00                                   .[22m.

00000657 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_1>:
     657:	1b 5b 31 6d 00                                      .[1m.

0000065c <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_0>:
     65c:	1b 5b 31 6d 00                                      .[1m.

00000661 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c>:
     661:	20 20 00                                              .

00000664 <_call_static_run_method>:
 *                the pointer is used to find the task's static run method
 */

extern "C" inline void _call_static_run_method (frt_task* p_task)
{
	frt_task::_call_users_run_method (p_task);
     664:	0e 94 b6 19 	call	0x336c	; 0x336c <_ZN8frt_task22_call_users_run_methodEPS_>

00000668 <__ctors_start>:
     668:	04 26       	eor	r0, r20

0000066a <__ctors_end>:
     66a:	11 24       	eor	r1, r1
     66c:	1f be       	out	0x3f, r1	; 63
     66e:	cf ef       	ldi	r28, 0xFF	; 255
     670:	cd bf       	out	0x3d, r28	; 61
     672:	df e3       	ldi	r29, 0x3F	; 63
     674:	de bf       	out	0x3e, r29	; 62
     676:	00 e0       	ldi	r16, 0x00	; 0
     678:	0c bf       	out	0x3c, r16	; 60
     67a:	18 be       	out	0x38, r1	; 56
     67c:	19 be       	out	0x39, r1	; 57
     67e:	1a be       	out	0x3a, r1	; 58
     680:	1b be       	out	0x3b, r1	; 59

00000682 <__do_copy_data>:
     682:	12 e2       	ldi	r17, 0x22	; 34
     684:	a0 e0       	ldi	r26, 0x00	; 0
     686:	b0 e2       	ldi	r27, 0x20	; 32
     688:	e0 ef       	ldi	r30, 0xF0	; 240
     68a:	fe e4       	ldi	r31, 0x4E	; 78
     68c:	00 e0       	ldi	r16, 0x00	; 0
     68e:	0b bf       	out	0x3b, r16	; 59
     690:	02 c0       	rjmp	.+4      	; 0x696 <__do_copy_data+0x14>
     692:	07 90       	elpm	r0, Z+
     694:	0d 92       	st	X+, r0
     696:	a2 3a       	cpi	r26, 0xA2	; 162
     698:	b1 07       	cpc	r27, r17
     69a:	d9 f7       	brne	.-10     	; 0x692 <__do_copy_data+0x10>
     69c:	1b be       	out	0x3b, r1	; 59

0000069e <__do_clear_bss>:
     69e:	23 e3       	ldi	r18, 0x33	; 51
     6a0:	a2 ea       	ldi	r26, 0xA2	; 162
     6a2:	b2 e2       	ldi	r27, 0x22	; 34
     6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <.do_clear_bss_start>

000006a6 <.do_clear_bss_loop>:
     6a6:	1d 92       	st	X+, r1

000006a8 <.do_clear_bss_start>:
     6a8:	a0 37       	cpi	r26, 0x70	; 112
     6aa:	b2 07       	cpc	r27, r18
     6ac:	e1 f7       	brne	.-8      	; 0x6a6 <.do_clear_bss_loop>

000006ae <__do_global_ctors>:
     6ae:	13 e0       	ldi	r17, 0x03	; 3
     6b0:	c5 e3       	ldi	r28, 0x35	; 53
     6b2:	d3 e0       	ldi	r29, 0x03	; 3
     6b4:	00 e0       	ldi	r16, 0x00	; 0
     6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <__do_global_ctors+0x16>
     6b8:	21 97       	sbiw	r28, 0x01	; 1
     6ba:	01 09       	sbc	r16, r1
     6bc:	80 2f       	mov	r24, r16
     6be:	fe 01       	movw	r30, r28
     6c0:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <__tablejump2__>
     6c4:	c4 33       	cpi	r28, 0x34	; 52
     6c6:	d1 07       	cpc	r29, r17
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	08 07       	cpc	r16, r24
     6cc:	a9 f7       	brne	.-22     	; 0x6b8 <__do_global_ctors+0xa>
     6ce:	0e 94 7f 25 	call	0x4afe	; 0x4afe <main>
     6d2:	0c 94 76 27 	jmp	0x4eec	; 0x4eec <_exit>

000006d6 <__bad_interrupt>:
     6d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006da <_ZN8I2CAgent10readPacketEv>:
  cmd.writePacket(outPacket_);
}

void I2CAgent::readPacket()
{
  resetPacket(inPacket_);
     6da:	bc 01       	movw	r22, r24
     6dc:	6e 5f       	subi	r22, 0xFE	; 254
     6de:	7f 4f       	sbci	r23, 0xFF	; 255
     6e0:	dc 01       	movw	r26, r24
     6e2:	ed 91       	ld	r30, X+
     6e4:	fc 91       	ld	r31, X
     6e6:	00 84       	ldd	r0, Z+8	; 0x08
     6e8:	f1 85       	ldd	r31, Z+9	; 0x09
     6ea:	e0 2d       	mov	r30, r0
     6ec:	19 95       	eicall
     6ee:	08 95       	ret

000006f0 <_ZN8I2CAgent8transmitER7Command>:
#include "I2CAgent.h"

bool I2CAgent::transmit( Command & cmd )
{
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	ec 01       	movw	r28, r24
     6fe:	7b 01       	movw	r14, r22
  I2CMaster(TWI_t * interface, uint32_t i2c_freq, emstream * s);

  Transmitter * getTransmitter()  { return transmitter_; }
  Receiver *    getReceiver()     { return receiver_; }
  TWI_t *       getInterfacePtr() { return interface_; }
  emstream *    getSerial()       { return p_serial; }
     700:	ea 8d       	ldd	r30, Y+26	; 0x1a
     702:	fb 8d       	ldd	r31, Y+27	; 0x1b
     704:	06 81       	ldd	r16, Z+6	; 0x06
     706:	17 81       	ldd	r17, Z+7	; 0x07
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
     708:	66 e0       	ldi	r22, 0x06	; 6
     70a:	70 e2       	ldi	r23, 0x20	; 32
     70c:	c8 01       	movw	r24, r16
     70e:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
  *(driver_->getSerial()) << "trans" << endl;
     712:	66 e0       	ldi	r22, 0x06	; 6
     714:	c8 01       	movw	r24, r16
     716:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
  writePacket(cmd);
     71a:	e8 81       	ld	r30, Y
     71c:	f9 81       	ldd	r31, Y+1	; 0x01
     71e:	04 80       	ldd	r0, Z+4	; 0x04
     720:	f5 81       	ldd	r31, Z+5	; 0x05
     722:	e0 2d       	mov	r30, r0
     724:	b7 01       	movw	r22, r14
     726:	ce 01       	movw	r24, r28
     728:	19 95       	eicall
  bool status = driver_->getTransmitter()->run(outPacket_);
     72a:	be 01       	movw	r22, r28
     72c:	63 5f       	subi	r22, 0xF3	; 243
     72e:	7f 4f       	sbci	r23, 0xFF	; 255
  };

  // I2CMaster(TWI_t * interface, uint32_t i2c_freq);
  I2CMaster(TWI_t * interface, uint32_t i2c_freq, emstream * s);

  Transmitter * getTransmitter()  { return transmitter_; }
     730:	ea 8d       	ldd	r30, Y+26	; 0x1a
     732:	fb 8d       	ldd	r31, Y+27	; 0x1b
     734:	80 81       	ld	r24, Z
     736:	91 81       	ldd	r25, Z+1	; 0x01
     738:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN9I2CMaster11Transmitter3runER6Packet>
  return status;
}
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	08 95       	ret

0000074a <_ZN8I2CAgent7receiveEv>:

Packet & I2CAgent::receive()
{
     74a:	ef 92       	push	r14
     74c:	ff 92       	push	r15
     74e:	0f 93       	push	r16
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	ec 01       	movw	r28, r24
  resetPacket(inPacket_);
     756:	7c 01       	movw	r14, r24
     758:	82 e0       	ldi	r24, 0x02	; 2
     75a:	e8 0e       	add	r14, r24
     75c:	f1 1c       	adc	r15, r1
     75e:	e8 81       	ld	r30, Y
     760:	f9 81       	ldd	r31, Y+1	; 0x01
     762:	00 84       	ldd	r0, Z+8	; 0x08
     764:	f1 85       	ldd	r31, Z+9	; 0x09
     766:	e0 2d       	mov	r30, r0
     768:	b7 01       	movw	r22, r14
     76a:	ce 01       	movw	r24, r28
     76c:	19 95       	eicall
		 *  @param item Reference to the item which is going to be put into the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool put (const data_type& item)
		{
			return ((bool)(xQueueSendToBack (handle, &item, ticks_to_wait)));
     76e:	28 85       	ldd	r18, Y+8	; 0x08
     770:	39 85       	ldd	r19, Y+9	; 0x09
     772:	4a 85       	ldd	r20, Y+10	; 0x0a
     774:	5b 85       	ldd	r21, Y+11	; 0x0b
  inPacket_.put(readCommand_);
     776:	be 01       	movw	r22, r28
     778:	62 5e       	subi	r22, 0xE2	; 226
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	00 e0       	ldi	r16, 0x00	; 0
     77e:	8e 81       	ldd	r24, Y+6	; 0x06
     780:	9f 81       	ldd	r25, Y+7	; 0x07
     782:	0e 94 99 12 	call	0x2532	; 0x2532 <xQueueGenericSend>
  Receiver *    getReceiver()     { return receiver_; }
     786:	ea 8d       	ldd	r30, Y+26	; 0x1a
     788:	fb 8d       	ldd	r31, Y+27	; 0x1b
  return driver_->getReceiver()->run(inPacket_);
     78a:	b7 01       	movw	r22, r14
     78c:	82 81       	ldd	r24, Z+2	; 0x02
     78e:	93 81       	ldd	r25, Z+3	; 0x03
     790:	0e 94 fe 07 	call	0xffc	; 0xffc <_ZN9I2CMaster8Receiver3runER6Packet>
}
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	0f 91       	pop	r16
     79a:	ff 90       	pop	r15
     79c:	ef 90       	pop	r14
     79e:	08 95       	ret

000007a0 <_ZN8I2CAgent11writePacketER7Command>:
  writeCommand_ = addr << 1;
  readCommand_ = addr << 1 | 1 << 0;
}

void I2CAgent::writePacket( Command & cmd )
{
     7a0:	cf 92       	push	r12
     7a2:	df 92       	push	r13
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	ec 01       	movw	r28, r24
     7b0:	7b 01       	movw	r14, r22
  resetPacket(outPacket_);
     7b2:	6c 01       	movw	r12, r24
     7b4:	8d e0       	ldi	r24, 0x0D	; 13
     7b6:	c8 0e       	add	r12, r24
     7b8:	d1 1c       	adc	r13, r1
     7ba:	e8 81       	ld	r30, Y
     7bc:	f9 81       	ldd	r31, Y+1	; 0x01
     7be:	00 84       	ldd	r0, Z+8	; 0x08
     7c0:	f1 85       	ldd	r31, Z+9	; 0x09
     7c2:	e0 2d       	mov	r30, r0
     7c4:	b6 01       	movw	r22, r12
     7c6:	ce 01       	movw	r24, r28
     7c8:	19 95       	eicall
     7ca:	2b 89       	ldd	r18, Y+19	; 0x13
     7cc:	3c 89       	ldd	r19, Y+20	; 0x14
     7ce:	4d 89       	ldd	r20, Y+21	; 0x15
     7d0:	5e 89       	ldd	r21, Y+22	; 0x16
  outPacket_.put(writeCommand_);
     7d2:	be 01       	movw	r22, r28
     7d4:	63 5e       	subi	r22, 0xE3	; 227
     7d6:	7f 4f       	sbci	r23, 0xFF	; 255
     7d8:	00 e0       	ldi	r16, 0x00	; 0
     7da:	89 89       	ldd	r24, Y+17	; 0x11
     7dc:	9a 89       	ldd	r25, Y+18	; 0x12
     7de:	0e 94 99 12 	call	0x2532	; 0x2532 <xQueueGenericSend>
  cmd.writePacket(outPacket_);
     7e2:	d7 01       	movw	r26, r14
     7e4:	ed 91       	ld	r30, X+
     7e6:	fc 91       	ld	r31, X
     7e8:	01 90       	ld	r0, Z+
     7ea:	f0 81       	ld	r31, Z
     7ec:	e0 2d       	mov	r30, r0
     7ee:	b6 01       	movw	r22, r12
     7f0:	c7 01       	movw	r24, r14
     7f2:	19 95       	eicall
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	0f 91       	pop	r16
     7fa:	ff 90       	pop	r15
     7fc:	ef 90       	pop	r14
     7fe:	df 90       	pop	r13
     800:	cf 90       	pop	r12
     802:	08 95       	ret

00000804 <_ZN8I2CAgent11resetPacketER6Packet>:
{
  resetPacket(inPacket_);
}

void I2CAgent::resetPacket( Packet & packet )
{
     804:	cb 01       	movw	r24, r22
  packet.resetContent();
     806:	0e 94 af 0b 	call	0x175e	; 0x175e <_ZN6Packet12resetContentEv>
     80a:	08 95       	ret

0000080c <_ZN8I2CAgent12setSlaveAddrEh>:
  inPacket_.put(readCommand_);
  return driver_->getReceiver()->run(inPacket_);
}

void I2CAgent::setSlaveAddr( uint8_t addr )
{
     80c:	fc 01       	movw	r30, r24
  slaveAddr_ = addr;
     80e:	64 8f       	std	Z+28, r22	; 0x1c
  writeCommand_ = addr << 1;
     810:	86 2f       	mov	r24, r22
     812:	88 0f       	add	r24, r24
     814:	85 8f       	std	Z+29, r24	; 0x1d
  readCommand_ = addr << 1 | 1 << 0;
     816:	68 2f       	mov	r22, r24
     818:	61 60       	ori	r22, 0x01	; 1
     81a:	66 8f       	std	Z+30, r22	; 0x1e
     81c:	08 95       	ret

0000081e <_ZN9I2CMaster11Transmitter11StatusState7executeER6Packet>:
  }
  else
  {
    return false;
  }
}
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	1f 92       	push	r1
     824:	1f 92       	push	r1
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	fc 01       	movw	r30, r24
     82c:	81 85       	ldd	r24, Z+9	; 0x09
     82e:	92 85       	ldd	r25, Z+10	; 0x0a
     830:	89 83       	std	Y+1, r24	; 0x01
     832:	9a 83       	std	Y+2, r25	; 0x02
     834:	29 81       	ldd	r18, Y+1	; 0x01
     836:	3a 81       	ldd	r19, Y+2	; 0x02
     838:	21 50       	subi	r18, 0x01	; 1
     83a:	31 09       	sbc	r19, r1
     83c:	29 83       	std	Y+1, r18	; 0x01
     83e:	3a 83       	std	Y+2, r19	; 0x02
     840:	23 2b       	or	r18, r19
     842:	41 f0       	breq	.+16     	; 0x854 <_ZN9I2CMaster11Transmitter11StatusState7executeER6Packet+0x36>
     844:	a7 81       	ldd	r26, Z+7	; 0x07
     846:	b0 85       	ldd	r27, Z+8	; 0x08
     848:	14 96       	adiw	r26, 0x04	; 4
     84a:	0d 90       	ld	r0, X+
     84c:	bc 91       	ld	r27, X
     84e:	a0 2d       	mov	r26, r0
     850:	14 96       	adiw	r26, 0x04	; 4
     852:	8c 91       	ld	r24, X
     854:	a7 81       	ldd	r26, Z+7	; 0x07
     856:	b0 85       	ldd	r27, Z+8	; 0x08
     858:	14 96       	adiw	r26, 0x04	; 4
     85a:	0d 90       	ld	r0, X+
     85c:	bc 91       	ld	r27, X
     85e:	a0 2d       	mov	r26, r0
     860:	14 96       	adiw	r26, 0x04	; 4
     862:	8c 91       	ld	r24, X
     864:	84 81       	ldd	r24, Z+4	; 0x04
     866:	95 81       	ldd	r25, Z+5	; 0x05
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <_ZN9I2CMaster8Receiver11StatusState7executeER6Packet>:
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	1f 92       	push	r1
     878:	1f 92       	push	r1
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	fc 01       	movw	r30, r24
     880:	81 85       	ldd	r24, Z+9	; 0x09
     882:	92 85       	ldd	r25, Z+10	; 0x0a
     884:	89 83       	std	Y+1, r24	; 0x01
     886:	9a 83       	std	Y+2, r25	; 0x02
     888:	29 81       	ldd	r18, Y+1	; 0x01
     88a:	3a 81       	ldd	r19, Y+2	; 0x02
     88c:	21 50       	subi	r18, 0x01	; 1
     88e:	31 09       	sbc	r19, r1
     890:	29 83       	std	Y+1, r18	; 0x01
     892:	3a 83       	std	Y+2, r19	; 0x02
     894:	23 2b       	or	r18, r19
     896:	41 f0       	breq	.+16     	; 0x8a8 <_ZN9I2CMaster8Receiver11StatusState7executeER6Packet+0x36>
     898:	a7 81       	ldd	r26, Z+7	; 0x07
     89a:	b0 85       	ldd	r27, Z+8	; 0x08
     89c:	14 96       	adiw	r26, 0x04	; 4
     89e:	0d 90       	ld	r0, X+
     8a0:	bc 91       	ld	r27, X
     8a2:	a0 2d       	mov	r26, r0
     8a4:	14 96       	adiw	r26, 0x04	; 4
     8a6:	8c 91       	ld	r24, X
     8a8:	a7 81       	ldd	r26, Z+7	; 0x07
     8aa:	b0 85       	ldd	r27, Z+8	; 0x08
     8ac:	14 96       	adiw	r26, 0x04	; 4
     8ae:	0d 90       	ld	r0, X+
     8b0:	bc 91       	ld	r27, X
     8b2:	a0 2d       	mov	r26, r0
     8b4:	14 96       	adiw	r26, 0x04	; 4
     8b6:	8c 91       	ld	r24, X
     8b8:	84 81       	ldd	r24, Z+4	; 0x04
     8ba:	95 81       	ldd	r25, Z+5	; 0x05
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <_ZN9I2CMaster11Transmitter17PacketStatusState7executeER6Packet>:
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	ec 01       	movw	r28, r24
     8cc:	cb 01       	movw	r24, r22
     8ce:	db 01       	movw	r26, r22
     8d0:	ed 91       	ld	r30, X+
     8d2:	fc 91       	ld	r31, X
     8d4:	04 88       	ldd	r0, Z+20	; 0x14
     8d6:	f5 89       	ldd	r31, Z+21	; 0x15
     8d8:	e0 2d       	mov	r30, r0
     8da:	19 95       	eicall
     8dc:	88 23       	and	r24, r24
     8de:	19 f0       	breq	.+6      	; 0x8e6 <_ZN9I2CMaster11Transmitter17PacketStatusState7executeER6Packet+0x20>
     8e0:	8a 81       	ldd	r24, Y+2	; 0x02
     8e2:	9b 81       	ldd	r25, Y+3	; 0x03
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <_ZN9I2CMaster11Transmitter17PacketStatusState7executeER6Packet+0x24>
     8e6:	8c 81       	ldd	r24, Y+4	; 0x04
     8e8:	9d 81       	ldd	r25, Y+5	; 0x05
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	08 95       	ret

000008f0 <_ZN9I2CMaster9DoneState7executeER6Packet>:
     8f0:	fc 01       	movw	r30, r24
     8f2:	82 81       	ldd	r24, Z+2	; 0x02
     8f4:	93 81       	ldd	r25, Z+3	; 0x03
     8f6:	08 95       	ret

000008f8 <_ZN9I2CMaster10ErrorState7executeER6Packet>:
     8f8:	fc 01       	movw	r30, r24
     8fa:	82 81       	ldd	r24, Z+2	; 0x02
     8fc:	93 81       	ldd	r25, Z+3	; 0x03
     8fe:	08 95       	ret

00000900 <_ZN9I2CMaster10ErrorState11serialDebugEv>:
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	dc 01       	movw	r26, r24
     906:	17 96       	adiw	r26, 0x07	; 7
     908:	ed 91       	ld	r30, X+
     90a:	fc 91       	ld	r31, X
     90c:	18 97       	sbiw	r26, 0x08	; 8
     90e:	c6 81       	ldd	r28, Z+6	; 0x06
     910:	d7 81       	ldd	r29, Z+7	; 0x07
     912:	6a e1       	ldi	r22, 0x1A	; 26
     914:	70 e2       	ldi	r23, 0x20	; 32
     916:	ce 01       	movw	r24, r28
     918:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
     91c:	66 e0       	ldi	r22, 0x06	; 6
     91e:	ce 01       	movw	r24, r28
     920:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <_ZN9I2CMaster9DoneState11serialDebugEv>:
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	dc 01       	movw	r26, r24
     930:	17 96       	adiw	r26, 0x07	; 7
     932:	ed 91       	ld	r30, X+
     934:	fc 91       	ld	r31, X
     936:	18 97       	sbiw	r26, 0x08	; 8
     938:	c6 81       	ldd	r28, Z+6	; 0x06
     93a:	d7 81       	ldd	r29, Z+7	; 0x07
     93c:	60 e2       	ldi	r22, 0x20	; 32
     93e:	70 e2       	ldi	r23, 0x20	; 32
     940:	ce 01       	movw	r24, r28
     942:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
     946:	66 e0       	ldi	r22, 0x06	; 6
     948:	ce 01       	movw	r24, r28
     94a:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <_ZN9I2CMaster8Receiver17PacketStatusState11serialDebugEv>:
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	dc 01       	movw	r26, r24
     95a:	17 96       	adiw	r26, 0x07	; 7
     95c:	ed 91       	ld	r30, X+
     95e:	fc 91       	ld	r31, X
     960:	18 97       	sbiw	r26, 0x08	; 8
     962:	c6 81       	ldd	r28, Z+6	; 0x06
     964:	d7 81       	ldd	r29, Z+7	; 0x07
     966:	65 e2       	ldi	r22, 0x25	; 37
     968:	70 e2       	ldi	r23, 0x20	; 32
     96a:	ce 01       	movw	r24, r28
     96c:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
     970:	66 e0       	ldi	r22, 0x06	; 6
     972:	ce 01       	movw	r24, r28
     974:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	08 95       	ret

0000097e <_ZN9I2CMaster11Transmitter17PacketStatusState11serialDebugEv>:
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	dc 01       	movw	r26, r24
     984:	17 96       	adiw	r26, 0x07	; 7
     986:	ed 91       	ld	r30, X+
     988:	fc 91       	ld	r31, X
     98a:	18 97       	sbiw	r26, 0x08	; 8
     98c:	c6 81       	ldd	r28, Z+6	; 0x06
     98e:	d7 81       	ldd	r29, Z+7	; 0x07
     990:	6e e2       	ldi	r22, 0x2E	; 46
     992:	70 e2       	ldi	r23, 0x20	; 32
     994:	ce 01       	movw	r24, r28
     996:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
     99a:	66 e0       	ldi	r22, 0x06	; 6
     99c:	ce 01       	movw	r24, r28
     99e:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <_ZN9I2CMaster8Receiver13ExchangeState11serialDebugEv>:
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	dc 01       	movw	r26, r24
     9ae:	17 96       	adiw	r26, 0x07	; 7
     9b0:	ed 91       	ld	r30, X+
     9b2:	fc 91       	ld	r31, X
     9b4:	18 97       	sbiw	r26, 0x08	; 8
     9b6:	c6 81       	ldd	r28, Z+6	; 0x06
     9b8:	d7 81       	ldd	r29, Z+7	; 0x07
     9ba:	67 e3       	ldi	r22, 0x37	; 55
     9bc:	70 e2       	ldi	r23, 0x20	; 32
     9be:	ce 01       	movw	r24, r28
     9c0:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
     9c4:	66 e0       	ldi	r22, 0x06	; 6
     9c6:	ce 01       	movw	r24, r28
     9c8:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	08 95       	ret

000009d2 <_ZN9I2CMaster11Transmitter13ExchangeState11serialDebugEv>:
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	dc 01       	movw	r26, r24
     9d8:	17 96       	adiw	r26, 0x07	; 7
     9da:	ed 91       	ld	r30, X+
     9dc:	fc 91       	ld	r31, X
     9de:	18 97       	sbiw	r26, 0x08	; 8
     9e0:	c6 81       	ldd	r28, Z+6	; 0x06
     9e2:	d7 81       	ldd	r29, Z+7	; 0x07
     9e4:	62 e4       	ldi	r22, 0x42	; 66
     9e6:	70 e2       	ldi	r23, 0x20	; 32
     9e8:	ce 01       	movw	r24, r28
     9ea:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
     9ee:	66 e0       	ldi	r22, 0x06	; 6
     9f0:	ce 01       	movw	r24, r28
     9f2:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	08 95       	ret

000009fc <_ZN9I2CMaster10StartState11serialDebugEv>:
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	dc 01       	movw	r26, r24
     a02:	17 96       	adiw	r26, 0x07	; 7
     a04:	ed 91       	ld	r30, X+
     a06:	fc 91       	ld	r31, X
     a08:	18 97       	sbiw	r26, 0x08	; 8
     a0a:	c6 81       	ldd	r28, Z+6	; 0x06
     a0c:	d7 81       	ldd	r29, Z+7	; 0x07
     a0e:	6d e4       	ldi	r22, 0x4D	; 77
     a10:	70 e2       	ldi	r23, 0x20	; 32
     a12:	ce 01       	movw	r24, r28
     a14:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
     a18:	66 e0       	ldi	r22, 0x06	; 6
     a1a:	ce 01       	movw	r24, r28
     a1c:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <_ZN9I2CMaster11Transmitter11StatusState11serialDebugEv>:
     a26:	1f 93       	push	r17
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	dc 01       	movw	r26, r24
     a2e:	17 96       	adiw	r26, 0x07	; 7
     a30:	ed 91       	ld	r30, X+
     a32:	fc 91       	ld	r31, X
     a34:	18 97       	sbiw	r26, 0x08	; 8
     a36:	a4 81       	ldd	r26, Z+4	; 0x04
     a38:	b5 81       	ldd	r27, Z+5	; 0x05
     a3a:	14 96       	adiw	r26, 0x04	; 4
     a3c:	1c 91       	ld	r17, X
     a3e:	c6 81       	ldd	r28, Z+6	; 0x06
     a40:	d7 81       	ldd	r29, Z+7	; 0x07
     a42:	63 e5       	ldi	r22, 0x53	; 83
     a44:	70 e2       	ldi	r23, 0x20	; 32
     a46:	ce 01       	movw	r24, r28
     a48:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
     a4c:	61 2f       	mov	r22, r17
     a4e:	ce 01       	movw	r24, r28
     a50:	0e 94 28 20 	call	0x4050	; 0x4050 <_ZN8emstreamlsEh>
     a54:	66 e0       	ldi	r22, 0x06	; 6
     a56:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	1f 91       	pop	r17
     a60:	08 95       	ret

00000a62 <_ZN9I2CMaster8Receiver11StatusState11serialDebugEv>:
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	dc 01       	movw	r26, r24
     a6a:	17 96       	adiw	r26, 0x07	; 7
     a6c:	ed 91       	ld	r30, X+
     a6e:	fc 91       	ld	r31, X
     a70:	18 97       	sbiw	r26, 0x08	; 8
     a72:	a4 81       	ldd	r26, Z+4	; 0x04
     a74:	b5 81       	ldd	r27, Z+5	; 0x05
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	1c 91       	ld	r17, X
     a7a:	c6 81       	ldd	r28, Z+6	; 0x06
     a7c:	d7 81       	ldd	r29, Z+7	; 0x07
     a7e:	6e e5       	ldi	r22, 0x5E	; 94
     a80:	70 e2       	ldi	r23, 0x20	; 32
     a82:	ce 01       	movw	r24, r28
     a84:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
     a88:	61 2f       	mov	r22, r17
     a8a:	ce 01       	movw	r24, r28
     a8c:	0e 94 28 20 	call	0x4050	; 0x4050 <_ZN8emstreamlsEh>
     a90:	66 e0       	ldi	r22, 0x06	; 6
     a92:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	08 95       	ret

00000a9e <_ZN9I2CMaster11Transmitter13ExchangeState7executeER6Packet>:
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	8c 01       	movw	r16, r24
     aac:	eb 01       	movw	r28, r22
     aae:	e8 81       	ld	r30, Y
     ab0:	f9 81       	ldd	r31, Y+1	; 0x01
     ab2:	00 8c       	ldd	r0, Z+24	; 0x18
     ab4:	f1 8d       	ldd	r31, Z+25	; 0x19
     ab6:	e0 2d       	mov	r30, r0
     ab8:	cb 01       	movw	r24, r22
     aba:	19 95       	eicall
     abc:	88 23       	and	r24, r24
     abe:	41 f1       	breq	.+80     	; 0xb10 <_ZN9I2CMaster11Transmitter13ExchangeState7executeER6Packet+0x72>
     ac0:	e8 81       	ld	r30, Y
     ac2:	f9 81       	ldd	r31, Y+1	; 0x01
     ac4:	02 84       	ldd	r0, Z+10	; 0x0a
     ac6:	f3 85       	ldd	r31, Z+11	; 0x0b
     ac8:	e0 2d       	mov	r30, r0
     aca:	e1 2c       	mov	r14, r1
     acc:	f1 2c       	mov	r15, r1
     ace:	b7 01       	movw	r22, r14
     ad0:	ce 01       	movw	r24, r28
     ad2:	19 95       	eicall
     ad4:	d7 01       	movw	r26, r14
     ad6:	cc 91       	ld	r28, X
     ad8:	d8 01       	movw	r26, r16
     ada:	17 96       	adiw	r26, 0x07	; 7
     adc:	ed 91       	ld	r30, X+
     ade:	fc 91       	ld	r31, X
     ae0:	18 97       	sbiw	r26, 0x08	; 8
     ae2:	e6 80       	ldd	r14, Z+6	; 0x06
     ae4:	f7 80       	ldd	r15, Z+7	; 0x07
     ae6:	69 e6       	ldi	r22, 0x69	; 105
     ae8:	70 e2       	ldi	r23, 0x20	; 32
     aea:	c7 01       	movw	r24, r14
     aec:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
     af0:	6c 2f       	mov	r22, r28
     af2:	c7 01       	movw	r24, r14
     af4:	0e 94 28 20 	call	0x4050	; 0x4050 <_ZN8emstreamlsEh>
     af8:	66 e0       	ldi	r22, 0x06	; 6
     afa:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
     afe:	d8 01       	movw	r26, r16
     b00:	17 96       	adiw	r26, 0x07	; 7
     b02:	ed 91       	ld	r30, X+
     b04:	fc 91       	ld	r31, X
     b06:	18 97       	sbiw	r26, 0x08	; 8
     b08:	04 80       	ldd	r0, Z+4	; 0x04
     b0a:	f5 81       	ldd	r31, Z+5	; 0x05
     b0c:	e0 2d       	mov	r30, r0
     b0e:	c7 83       	std	Z+7, r28	; 0x07
     b10:	f8 01       	movw	r30, r16
     b12:	82 81       	ldd	r24, Z+2	; 0x02
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	ff 90       	pop	r15
     b20:	ef 90       	pop	r14
     b22:	08 95       	ret

00000b24 <_ZN9I2CMaster8Receiver13ExchangeState7executeER6Packet>:
     b24:	bf 92       	push	r11
     b26:	cf 92       	push	r12
     b28:	df 92       	push	r13
     b2a:	ef 92       	push	r14
     b2c:	ff 92       	push	r15
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	1f 92       	push	r1
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
     b3c:	8c 01       	movw	r16, r24
     b3e:	7b 01       	movw	r14, r22
     b40:	dc 01       	movw	r26, r24
     b42:	17 96       	adiw	r26, 0x07	; 7
     b44:	ed 91       	ld	r30, X+
     b46:	fc 91       	ld	r31, X
     b48:	18 97       	sbiw	r26, 0x08	; 8
     b4a:	a4 81       	ldd	r26, Z+4	; 0x04
     b4c:	b5 81       	ldd	r27, Z+5	; 0x05
     b4e:	17 96       	adiw	r26, 0x07	; 7
     b50:	bc 90       	ld	r11, X
     b52:	b9 82       	std	Y+1, r11	; 0x01
     b54:	c6 80       	ldd	r12, Z+6	; 0x06
     b56:	d7 80       	ldd	r13, Z+7	; 0x07
     b58:	6b e7       	ldi	r22, 0x7B	; 123
     b5a:	70 e2       	ldi	r23, 0x20	; 32
     b5c:	c6 01       	movw	r24, r12
     b5e:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
     b62:	6b 2d       	mov	r22, r11
     b64:	c6 01       	movw	r24, r12
     b66:	0e 94 28 20 	call	0x4050	; 0x4050 <_ZN8emstreamlsEh>
     b6a:	66 e0       	ldi	r22, 0x06	; 6
     b6c:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
     b70:	d7 01       	movw	r26, r14
     b72:	ed 91       	ld	r30, X+
     b74:	fc 91       	ld	r31, X
     b76:	01 90       	ld	r0, Z+
     b78:	f0 81       	ld	r31, Z
     b7a:	e0 2d       	mov	r30, r0
     b7c:	be 01       	movw	r22, r28
     b7e:	6f 5f       	subi	r22, 0xFF	; 255
     b80:	7f 4f       	sbci	r23, 0xFF	; 255
     b82:	c7 01       	movw	r24, r14
     b84:	19 95       	eicall
     b86:	f8 01       	movw	r30, r16
     b88:	82 81       	ldd	r24, Z+2	; 0x02
     b8a:	93 81       	ldd	r25, Z+3	; 0x03
     b8c:	0f 90       	pop	r0
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	bf 90       	pop	r11
     ba0:	08 95       	ret

00000ba2 <_ZN9I2CMaster8Receiver17PacketStatusState7executeER6Packet>:
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	8c 01       	movw	r16, r24
     bac:	eb 01       	movw	r28, r22
     bae:	e8 81       	ld	r30, Y
     bb0:	f9 81       	ldd	r31, Y+1	; 0x01
     bb2:	04 8c       	ldd	r0, Z+28	; 0x1c
     bb4:	f5 8d       	ldd	r31, Z+29	; 0x1d
     bb6:	e0 2d       	mov	r30, r0
     bb8:	cb 01       	movw	r24, r22
     bba:	19 95       	eicall
     bbc:	2a 85       	ldd	r18, Y+10	; 0x0a
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	82 17       	cp	r24, r18
     bc2:	93 07       	cpc	r25, r19
     bc4:	e9 f4       	brne	.+58     	; 0xc00 <_ZN9I2CMaster8Receiver17PacketStatusState7executeER6Packet+0x5e>
     bc6:	d8 01       	movw	r26, r16
     bc8:	17 96       	adiw	r26, 0x07	; 7
     bca:	ed 91       	ld	r30, X+
     bcc:	fc 91       	ld	r31, X
     bce:	18 97       	sbiw	r26, 0x08	; 8
     bd0:	04 80       	ldd	r0, Z+4	; 0x04
     bd2:	f5 81       	ldd	r31, Z+5	; 0x05
     bd4:	e0 2d       	mov	r30, r0
     bd6:	87 e0       	ldi	r24, 0x07	; 7
     bd8:	83 83       	std	Z+3, r24	; 0x03
     bda:	17 96       	adiw	r26, 0x07	; 7
     bdc:	ed 91       	ld	r30, X+
     bde:	fc 91       	ld	r31, X
     be0:	18 97       	sbiw	r26, 0x08	; 8
     be2:	c6 81       	ldd	r28, Z+6	; 0x06
     be4:	d7 81       	ldd	r29, Z+7	; 0x07
     be6:	6b e8       	ldi	r22, 0x8B	; 139
     be8:	70 e2       	ldi	r23, 0x20	; 32
     bea:	ce 01       	movw	r24, r28
     bec:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
     bf0:	66 e0       	ldi	r22, 0x06	; 6
     bf2:	ce 01       	movw	r24, r28
     bf4:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
     bf8:	f8 01       	movw	r30, r16
     bfa:	82 81       	ldd	r24, Z+2	; 0x02
     bfc:	93 81       	ldd	r25, Z+3	; 0x03
     bfe:	1c c0       	rjmp	.+56     	; 0xc38 <_ZN9I2CMaster8Receiver17PacketStatusState7executeER6Packet+0x96>
     c00:	d8 01       	movw	r26, r16
     c02:	17 96       	adiw	r26, 0x07	; 7
     c04:	ed 91       	ld	r30, X+
     c06:	fc 91       	ld	r31, X
     c08:	18 97       	sbiw	r26, 0x08	; 8
     c0a:	04 80       	ldd	r0, Z+4	; 0x04
     c0c:	f5 81       	ldd	r31, Z+5	; 0x05
     c0e:	e0 2d       	mov	r30, r0
     c10:	82 e0       	ldi	r24, 0x02	; 2
     c12:	83 83       	std	Z+3, r24	; 0x03
     c14:	17 96       	adiw	r26, 0x07	; 7
     c16:	ed 91       	ld	r30, X+
     c18:	fc 91       	ld	r31, X
     c1a:	18 97       	sbiw	r26, 0x08	; 8
     c1c:	c6 81       	ldd	r28, Z+6	; 0x06
     c1e:	d7 81       	ldd	r29, Z+7	; 0x07
     c20:	60 e9       	ldi	r22, 0x90	; 144
     c22:	70 e2       	ldi	r23, 0x20	; 32
     c24:	ce 01       	movw	r24, r28
     c26:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
     c2a:	66 e0       	ldi	r22, 0x06	; 6
     c2c:	ce 01       	movw	r24, r28
     c2e:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
     c32:	f8 01       	movw	r30, r16
     c34:	84 81       	ldd	r24, Z+4	; 0x04
     c36:	95 81       	ldd	r25, Z+5	; 0x05
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	08 95       	ret

00000c42 <_ZN9I2CMaster11TransmitterC1EPS_P8emstream>:
     c42:	af 92       	push	r10
     c44:	bf 92       	push	r11
     c46:	cf 92       	push	r12
     c48:	df 92       	push	r13
     c4a:	ef 92       	push	r14
     c4c:	ff 92       	push	r15
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	ec 01       	movw	r28, r24
     c58:	8b 01       	movw	r16, r22
     c5a:	7a 01       	movw	r14, r20
     c5c:	68 83       	st	Y, r22
     c5e:	79 83       	std	Y+1, r23	; 0x01
     c60:	4a 83       	std	Y+2, r20	; 0x02
     c62:	5b 83       	std	Y+3, r21	; 0x03
     c64:	8b e0       	ldi	r24, 0x0B	; 11
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <_Znwj>
     c6c:	6c 01       	movw	r12, r24
     c6e:	fc 01       	movw	r30, r24
     c70:	16 82       	std	Z+6, r1	; 0x06
     c72:	8f e3       	ldi	r24, 0x3F	; 63
     c74:	91 e2       	ldi	r25, 0x21	; 33
     c76:	80 83       	st	Z, r24
     c78:	91 83       	std	Z+1, r25	; 0x01
     c7a:	07 83       	std	Z+7, r16	; 0x07
     c7c:	10 87       	std	Z+8, r17	; 0x08
     c7e:	e1 86       	std	Z+9, r14	; 0x09
     c80:	f2 86       	std	Z+10, r15	; 0x0a
     c82:	f8 01       	movw	r30, r16
     c84:	a6 80       	ldd	r10, Z+6	; 0x06
     c86:	b7 80       	ldd	r11, Z+7	; 0x07
     c88:	69 e9       	ldi	r22, 0x99	; 153
     c8a:	70 e2       	ldi	r23, 0x20	; 32
     c8c:	c5 01       	movw	r24, r10
     c8e:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
     c92:	b5 01       	movw	r22, r10
     c94:	c5 01       	movw	r24, r10
     c96:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <_ZN8emstreamlsEPv>
     c9a:	66 e0       	ldi	r22, 0x06	; 6
     c9c:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
     ca0:	ce 82       	std	Y+6, r12	; 0x06
     ca2:	df 82       	std	Y+7, r13	; 0x07
     ca4:	8b e0       	ldi	r24, 0x0B	; 11
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <_Znwj>
     cac:	fc 01       	movw	r30, r24
     cae:	8d 89       	ldd	r24, Y+21	; 0x15
     cb0:	9e 89       	ldd	r25, Y+22	; 0x16
     cb2:	16 82       	std	Z+6, r1	; 0x06
     cb4:	27 e4       	ldi	r18, 0x47	; 71
     cb6:	31 e2       	ldi	r19, 0x21	; 33
     cb8:	20 83       	st	Z, r18
     cba:	31 83       	std	Z+1, r19	; 0x01
     cbc:	07 83       	std	Z+7, r16	; 0x07
     cbe:	10 87       	std	Z+8, r17	; 0x08
     cc0:	81 87       	std	Z+9, r24	; 0x09
     cc2:	92 87       	std	Z+10, r25	; 0x0a
     cc4:	e8 87       	std	Y+8, r30	; 0x08
     cc6:	f9 87       	std	Y+9, r31	; 0x09
     cc8:	89 e0       	ldi	r24, 0x09	; 9
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <_Znwj>
     cd0:	fc 01       	movw	r30, r24
     cd2:	16 82       	std	Z+6, r1	; 0x06
     cd4:	87 e5       	ldi	r24, 0x57	; 87
     cd6:	91 e2       	ldi	r25, 0x21	; 33
     cd8:	80 83       	st	Z, r24
     cda:	91 83       	std	Z+1, r25	; 0x01
     cdc:	07 83       	std	Z+7, r16	; 0x07
     cde:	10 87       	std	Z+8, r17	; 0x08
     ce0:	ea 87       	std	Y+10, r30	; 0x0a
     ce2:	fb 87       	std	Y+11, r31	; 0x0b
     ce4:	89 e0       	ldi	r24, 0x09	; 9
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <_Znwj>
     cec:	fc 01       	movw	r30, r24
     cee:	16 82       	std	Z+6, r1	; 0x06
     cf0:	87 e6       	ldi	r24, 0x67	; 103
     cf2:	91 e2       	ldi	r25, 0x21	; 33
     cf4:	80 83       	st	Z, r24
     cf6:	91 83       	std	Z+1, r25	; 0x01
     cf8:	07 83       	std	Z+7, r16	; 0x07
     cfa:	10 87       	std	Z+8, r17	; 0x08
     cfc:	ec 87       	std	Y+12, r30	; 0x0c
     cfe:	fd 87       	std	Y+13, r31	; 0x0d
     d00:	89 e0       	ldi	r24, 0x09	; 9
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <_Znwj>
     d08:	fc 01       	movw	r30, r24
     d0a:	16 82       	std	Z+6, r1	; 0x06
     d0c:	8f e7       	ldi	r24, 0x7F	; 127
     d0e:	91 e2       	ldi	r25, 0x21	; 33
     d10:	80 83       	st	Z, r24
     d12:	91 83       	std	Z+1, r25	; 0x01
     d14:	07 83       	std	Z+7, r16	; 0x07
     d16:	10 87       	std	Z+8, r17	; 0x08
     d18:	ee 87       	std	Y+14, r30	; 0x0e
     d1a:	ff 87       	std	Y+15, r31	; 0x0f
     d1c:	89 e0       	ldi	r24, 0x09	; 9
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <_Znwj>
     d24:	fc 01       	movw	r30, r24
     d26:	16 82       	std	Z+6, r1	; 0x06
     d28:	87 e7       	ldi	r24, 0x77	; 119
     d2a:	91 e2       	ldi	r25, 0x21	; 33
     d2c:	80 83       	st	Z, r24
     d2e:	91 83       	std	Z+1, r25	; 0x01
     d30:	07 83       	std	Z+7, r16	; 0x07
     d32:	10 87       	std	Z+8, r17	; 0x08
     d34:	e8 8b       	std	Y+16, r30	; 0x10
     d36:	f9 8b       	std	Y+17, r31	; 0x11
     d38:	80 e1       	ldi	r24, 0x10	; 16
     d3a:	97 e2       	ldi	r25, 0x27	; 39
     d3c:	8d 8b       	std	Y+21, r24	; 0x15
     d3e:	9e 8b       	std	Y+22, r25	; 0x16
     d40:	62 eb       	ldi	r22, 0xB2	; 178
     d42:	70 e2       	ldi	r23, 0x20	; 32
     d44:	c7 01       	movw	r24, r14
     d46:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
     d4a:	b8 01       	movw	r22, r16
     d4c:	c7 01       	movw	r24, r14
     d4e:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <_ZN8emstreamlsEPv>
     d52:	66 e0       	ldi	r22, 0x06	; 6
     d54:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
     d58:	f8 01       	movw	r30, r16
     d5a:	06 81       	ldd	r16, Z+6	; 0x06
     d5c:	17 81       	ldd	r17, Z+7	; 0x07
     d5e:	6e ec       	ldi	r22, 0xCE	; 206
     d60:	70 e2       	ldi	r23, 0x20	; 32
     d62:	c7 01       	movw	r24, r14
     d64:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
     d68:	b8 01       	movw	r22, r16
     d6a:	c7 01       	movw	r24, r14
     d6c:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <_ZN8emstreamlsEPv>
     d70:	66 e0       	ldi	r22, 0x06	; 6
     d72:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
     d76:	64 ee       	ldi	r22, 0xE4	; 228
     d78:	70 e2       	ldi	r23, 0x20	; 32
     d7a:	c7 01       	movw	r24, r14
     d7c:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
     d80:	b7 01       	movw	r22, r14
     d82:	c7 01       	movw	r24, r14
     d84:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <_ZN8emstreamlsEPv>
     d88:	66 e0       	ldi	r22, 0x06	; 6
     d8a:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
     d8e:	88 85       	ldd	r24, Y+8	; 0x08
     d90:	99 85       	ldd	r25, Y+9	; 0x09
     d92:	ee 81       	ldd	r30, Y+6	; 0x06
     d94:	ff 81       	ldd	r31, Y+7	; 0x07
     d96:	82 83       	std	Z+2, r24	; 0x02
     d98:	93 83       	std	Z+3, r25	; 0x03
     d9a:	84 83       	std	Z+4, r24	; 0x04
     d9c:	95 83       	std	Z+5, r25	; 0x05
     d9e:	8e 85       	ldd	r24, Y+14	; 0x0e
     da0:	9f 85       	ldd	r25, Y+15	; 0x0f
     da2:	2a 85       	ldd	r18, Y+10	; 0x0a
     da4:	3b 85       	ldd	r19, Y+11	; 0x0b
     da6:	e8 85       	ldd	r30, Y+8	; 0x08
     da8:	f9 85       	ldd	r31, Y+9	; 0x09
     daa:	22 83       	std	Z+2, r18	; 0x02
     dac:	33 83       	std	Z+3, r19	; 0x03
     dae:	84 83       	std	Z+4, r24	; 0x04
     db0:	95 83       	std	Z+5, r25	; 0x05
     db2:	8c 85       	ldd	r24, Y+12	; 0x0c
     db4:	9d 85       	ldd	r25, Y+13	; 0x0d
     db6:	ea 85       	ldd	r30, Y+10	; 0x0a
     db8:	fb 85       	ldd	r31, Y+11	; 0x0b
     dba:	82 83       	std	Z+2, r24	; 0x02
     dbc:	93 83       	std	Z+3, r25	; 0x03
     dbe:	84 83       	std	Z+4, r24	; 0x04
     dc0:	95 83       	std	Z+5, r25	; 0x05
     dc2:	88 85       	ldd	r24, Y+8	; 0x08
     dc4:	99 85       	ldd	r25, Y+9	; 0x09
     dc6:	28 89       	ldd	r18, Y+16	; 0x10
     dc8:	39 89       	ldd	r19, Y+17	; 0x11
     dca:	ec 85       	ldd	r30, Y+12	; 0x0c
     dcc:	fd 85       	ldd	r31, Y+13	; 0x0d
     dce:	22 83       	std	Z+2, r18	; 0x02
     dd0:	33 83       	std	Z+3, r19	; 0x03
     dd2:	84 83       	std	Z+4, r24	; 0x04
     dd4:	95 83       	std	Z+5, r25	; 0x05
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	ff 90       	pop	r15
     de0:	ef 90       	pop	r14
     de2:	df 90       	pop	r13
     de4:	cf 90       	pop	r12
     de6:	bf 90       	pop	r11
     de8:	af 90       	pop	r10
     dea:	08 95       	ret

00000dec <_ZN9I2CMaster8ReceiverC1EPS_P8emstream>:
     dec:	cf 92       	push	r12
     dee:	df 92       	push	r13
     df0:	ef 92       	push	r14
     df2:	ff 92       	push	r15
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	ec 01       	movw	r28, r24
     dfe:	8b 01       	movw	r16, r22
     e00:	6a 01       	movw	r12, r20
     e02:	68 83       	st	Y, r22
     e04:	79 83       	std	Y+1, r23	; 0x01
     e06:	4a 83       	std	Y+2, r20	; 0x02
     e08:	5b 83       	std	Y+3, r21	; 0x03
     e0a:	8b e0       	ldi	r24, 0x0B	; 11
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <_Znwj>
     e12:	7c 01       	movw	r14, r24
     e14:	fc 01       	movw	r30, r24
     e16:	16 82       	std	Z+6, r1	; 0x06
     e18:	8f e3       	ldi	r24, 0x3F	; 63
     e1a:	91 e2       	ldi	r25, 0x21	; 33
     e1c:	80 83       	st	Z, r24
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	07 83       	std	Z+7, r16	; 0x07
     e22:	10 87       	std	Z+8, r17	; 0x08
     e24:	c1 86       	std	Z+9, r12	; 0x09
     e26:	d2 86       	std	Z+10, r13	; 0x0a
     e28:	f8 01       	movw	r30, r16
     e2a:	c6 80       	ldd	r12, Z+6	; 0x06
     e2c:	d7 80       	ldd	r13, Z+7	; 0x07
     e2e:	69 e9       	ldi	r22, 0x99	; 153
     e30:	70 e2       	ldi	r23, 0x20	; 32
     e32:	c6 01       	movw	r24, r12
     e34:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
     e38:	b6 01       	movw	r22, r12
     e3a:	c6 01       	movw	r24, r12
     e3c:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <_ZN8emstreamlsEPv>
     e40:	66 e0       	ldi	r22, 0x06	; 6
     e42:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
     e46:	ee 82       	std	Y+6, r14	; 0x06
     e48:	ff 82       	std	Y+7, r15	; 0x07
     e4a:	8b e0       	ldi	r24, 0x0B	; 11
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <_Znwj>
     e52:	fc 01       	movw	r30, r24
     e54:	8d 89       	ldd	r24, Y+21	; 0x15
     e56:	9e 89       	ldd	r25, Y+22	; 0x16
     e58:	16 82       	std	Z+6, r1	; 0x06
     e5a:	2f e4       	ldi	r18, 0x4F	; 79
     e5c:	31 e2       	ldi	r19, 0x21	; 33
     e5e:	20 83       	st	Z, r18
     e60:	31 83       	std	Z+1, r19	; 0x01
     e62:	07 83       	std	Z+7, r16	; 0x07
     e64:	10 87       	std	Z+8, r17	; 0x08
     e66:	81 87       	std	Z+9, r24	; 0x09
     e68:	92 87       	std	Z+10, r25	; 0x0a
     e6a:	e8 87       	std	Y+8, r30	; 0x08
     e6c:	f9 87       	std	Y+9, r31	; 0x09
     e6e:	89 e0       	ldi	r24, 0x09	; 9
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <_Znwj>
     e76:	fc 01       	movw	r30, r24
     e78:	16 82       	std	Z+6, r1	; 0x06
     e7a:	8f e5       	ldi	r24, 0x5F	; 95
     e7c:	91 e2       	ldi	r25, 0x21	; 33
     e7e:	80 83       	st	Z, r24
     e80:	91 83       	std	Z+1, r25	; 0x01
     e82:	07 83       	std	Z+7, r16	; 0x07
     e84:	10 87       	std	Z+8, r17	; 0x08
     e86:	ea 87       	std	Y+10, r30	; 0x0a
     e88:	fb 87       	std	Y+11, r31	; 0x0b
     e8a:	89 e0       	ldi	r24, 0x09	; 9
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <_Znwj>
     e92:	fc 01       	movw	r30, r24
     e94:	16 82       	std	Z+6, r1	; 0x06
     e96:	8f e6       	ldi	r24, 0x6F	; 111
     e98:	91 e2       	ldi	r25, 0x21	; 33
     e9a:	80 83       	st	Z, r24
     e9c:	91 83       	std	Z+1, r25	; 0x01
     e9e:	07 83       	std	Z+7, r16	; 0x07
     ea0:	10 87       	std	Z+8, r17	; 0x08
     ea2:	ec 87       	std	Y+12, r30	; 0x0c
     ea4:	fd 87       	std	Y+13, r31	; 0x0d
     ea6:	89 e0       	ldi	r24, 0x09	; 9
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <_Znwj>
     eae:	fc 01       	movw	r30, r24
     eb0:	16 82       	std	Z+6, r1	; 0x06
     eb2:	8f e7       	ldi	r24, 0x7F	; 127
     eb4:	91 e2       	ldi	r25, 0x21	; 33
     eb6:	80 83       	st	Z, r24
     eb8:	91 83       	std	Z+1, r25	; 0x01
     eba:	07 83       	std	Z+7, r16	; 0x07
     ebc:	10 87       	std	Z+8, r17	; 0x08
     ebe:	ee 87       	std	Y+14, r30	; 0x0e
     ec0:	ff 87       	std	Y+15, r31	; 0x0f
     ec2:	89 e0       	ldi	r24, 0x09	; 9
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <_Znwj>
     eca:	fc 01       	movw	r30, r24
     ecc:	16 82       	std	Z+6, r1	; 0x06
     ece:	87 e7       	ldi	r24, 0x77	; 119
     ed0:	91 e2       	ldi	r25, 0x21	; 33
     ed2:	80 83       	st	Z, r24
     ed4:	91 83       	std	Z+1, r25	; 0x01
     ed6:	07 83       	std	Z+7, r16	; 0x07
     ed8:	10 87       	std	Z+8, r17	; 0x08
     eda:	e8 8b       	std	Y+16, r30	; 0x10
     edc:	f9 8b       	std	Y+17, r31	; 0x11
     ede:	80 e1       	ldi	r24, 0x10	; 16
     ee0:	97 e2       	ldi	r25, 0x27	; 39
     ee2:	8d 8b       	std	Y+21, r24	; 0x15
     ee4:	9e 8b       	std	Y+22, r25	; 0x16
     ee6:	88 85       	ldd	r24, Y+8	; 0x08
     ee8:	99 85       	ldd	r25, Y+9	; 0x09
     eea:	ee 81       	ldd	r30, Y+6	; 0x06
     eec:	ff 81       	ldd	r31, Y+7	; 0x07
     eee:	82 83       	std	Z+2, r24	; 0x02
     ef0:	93 83       	std	Z+3, r25	; 0x03
     ef2:	84 83       	std	Z+4, r24	; 0x04
     ef4:	95 83       	std	Z+5, r25	; 0x05
     ef6:	8e 85       	ldd	r24, Y+14	; 0x0e
     ef8:	9f 85       	ldd	r25, Y+15	; 0x0f
     efa:	2a 85       	ldd	r18, Y+10	; 0x0a
     efc:	3b 85       	ldd	r19, Y+11	; 0x0b
     efe:	e8 85       	ldd	r30, Y+8	; 0x08
     f00:	f9 85       	ldd	r31, Y+9	; 0x09
     f02:	22 83       	std	Z+2, r18	; 0x02
     f04:	33 83       	std	Z+3, r19	; 0x03
     f06:	84 83       	std	Z+4, r24	; 0x04
     f08:	95 83       	std	Z+5, r25	; 0x05
     f0a:	8c 85       	ldd	r24, Y+12	; 0x0c
     f0c:	9d 85       	ldd	r25, Y+13	; 0x0d
     f0e:	ea 85       	ldd	r30, Y+10	; 0x0a
     f10:	fb 85       	ldd	r31, Y+11	; 0x0b
     f12:	82 83       	std	Z+2, r24	; 0x02
     f14:	93 83       	std	Z+3, r25	; 0x03
     f16:	84 83       	std	Z+4, r24	; 0x04
     f18:	95 83       	std	Z+5, r25	; 0x05
     f1a:	88 85       	ldd	r24, Y+8	; 0x08
     f1c:	99 85       	ldd	r25, Y+9	; 0x09
     f1e:	28 89       	ldd	r18, Y+16	; 0x10
     f20:	39 89       	ldd	r19, Y+17	; 0x11
     f22:	ec 85       	ldd	r30, Y+12	; 0x0c
     f24:	fd 85       	ldd	r31, Y+13	; 0x0d
     f26:	22 83       	std	Z+2, r18	; 0x02
     f28:	33 83       	std	Z+3, r19	; 0x03
     f2a:	84 83       	std	Z+4, r24	; 0x04
     f2c:	95 83       	std	Z+5, r25	; 0x05
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	ff 90       	pop	r15
     f38:	ef 90       	pop	r14
     f3a:	df 90       	pop	r13
     f3c:	cf 90       	pop	r12
     f3e:	08 95       	ret

00000f40 <_ZN9I2CMaster11Transmitter3runER6Packet>:
     f40:	ef 92       	push	r14
     f42:	ff 92       	push	r15
     f44:	0f 93       	push	r16
     f46:	1f 93       	push	r17
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	8c 01       	movw	r16, r24
     f4e:	7b 01       	movw	r14, r22
     f50:	dc 01       	movw	r26, r24
     f52:	16 96       	adiw	r26, 0x06	; 6
     f54:	8d 91       	ld	r24, X+
     f56:	9c 91       	ld	r25, X
     f58:	17 97       	sbiw	r26, 0x07	; 7
     f5a:	14 96       	adiw	r26, 0x04	; 4
     f5c:	8d 93       	st	X+, r24
     f5e:	9c 93       	st	X, r25
     f60:	15 97       	sbiw	r26, 0x05	; 5
     f62:	50 96       	adiw	r26, 0x10	; 16
     f64:	0d 90       	ld	r0, X+
     f66:	bc 91       	ld	r27, X
     f68:	a0 2d       	mov	r26, r0
     f6a:	8a 17       	cp	r24, r26
     f6c:	9b 07       	cpc	r25, r27
     f6e:	49 f1       	breq	.+82     	; 0xfc2 <_ZN9I2CMaster11Transmitter3runER6Packet+0x82>
     f70:	f8 01       	movw	r30, r16
     f72:	a6 85       	ldd	r26, Z+14	; 0x0e
     f74:	b7 85       	ldd	r27, Z+15	; 0x0f
     f76:	8a 17       	cp	r24, r26
     f78:	9b 07       	cpc	r25, r27
     f7a:	41 f4       	brne	.+16     	; 0xf8c <_ZN9I2CMaster11Transmitter3runER6Packet+0x4c>
     f7c:	22 c0       	rjmp	.+68     	; 0xfc2 <_ZN9I2CMaster11Transmitter3runER6Packet+0x82>
     f7e:	f8 01       	movw	r30, r16
     f80:	a6 85       	ldd	r26, Z+14	; 0x0e
     f82:	b7 85       	ldd	r27, Z+15	; 0x0f
     f84:	ce 01       	movw	r24, r28
     f86:	ac 17       	cp	r26, r28
     f88:	bd 07       	cpc	r27, r29
     f8a:	d9 f0       	breq	.+54     	; 0xfc2 <_ZN9I2CMaster11Transmitter3runER6Packet+0x82>
     f8c:	dc 01       	movw	r26, r24
     f8e:	ed 91       	ld	r30, X+
     f90:	fc 91       	ld	r31, X
     f92:	01 90       	ld	r0, Z+
     f94:	f0 81       	ld	r31, Z
     f96:	e0 2d       	mov	r30, r0
     f98:	b7 01       	movw	r22, r14
     f9a:	19 95       	eicall
     f9c:	ec 01       	movw	r28, r24
     f9e:	f8 01       	movw	r30, r16
     fa0:	84 81       	ldd	r24, Z+4	; 0x04
     fa2:	95 81       	ldd	r25, Z+5	; 0x05
     fa4:	dc 01       	movw	r26, r24
     fa6:	ed 91       	ld	r30, X+
     fa8:	fc 91       	ld	r31, X
     faa:	02 80       	ldd	r0, Z+2	; 0x02
     fac:	f3 81       	ldd	r31, Z+3	; 0x03
     fae:	e0 2d       	mov	r30, r0
     fb0:	19 95       	eicall
     fb2:	f8 01       	movw	r30, r16
     fb4:	c4 83       	std	Z+4, r28	; 0x04
     fb6:	d5 83       	std	Z+5, r29	; 0x05
     fb8:	a0 89       	ldd	r26, Z+16	; 0x10
     fba:	b1 89       	ldd	r27, Z+17	; 0x11
     fbc:	ac 17       	cp	r26, r28
     fbe:	bd 07       	cpc	r27, r29
     fc0:	f1 f6       	brne	.-68     	; 0xf7e <_ZN9I2CMaster11Transmitter3runER6Packet+0x3e>
     fc2:	ed 91       	ld	r30, X+
     fc4:	fc 91       	ld	r31, X
     fc6:	11 97       	sbiw	r26, 0x01	; 1
     fc8:	02 80       	ldd	r0, Z+2	; 0x02
     fca:	f3 81       	ldd	r31, Z+3	; 0x03
     fcc:	e0 2d       	mov	r30, r0
     fce:	cd 01       	movw	r24, r26
     fd0:	19 95       	eicall
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	d8 01       	movw	r26, r16
     fd6:	14 96       	adiw	r26, 0x04	; 4
     fd8:	4d 91       	ld	r20, X+
     fda:	5c 91       	ld	r21, X
     fdc:	15 97       	sbiw	r26, 0x05	; 5
     fde:	50 96       	adiw	r26, 0x10	; 16
     fe0:	2d 91       	ld	r18, X+
     fe2:	3c 91       	ld	r19, X
     fe4:	51 97       	sbiw	r26, 0x11	; 17
     fe6:	42 17       	cp	r20, r18
     fe8:	53 07       	cpc	r21, r19
     fea:	09 f0       	breq	.+2      	; 0xfee <_ZN9I2CMaster11Transmitter3runER6Packet+0xae>
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	ff 90       	pop	r15
     ff8:	ef 90       	pop	r14
     ffa:	08 95       	ret

00000ffc <_ZN9I2CMaster8Receiver3runER6Packet>:
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	8c 01       	movw	r16, r24
    100a:	7b 01       	movw	r14, r22
    100c:	dc 01       	movw	r26, r24
    100e:	16 96       	adiw	r26, 0x06	; 6
    1010:	8d 91       	ld	r24, X+
    1012:	9c 91       	ld	r25, X
    1014:	17 97       	sbiw	r26, 0x07	; 7
    1016:	14 96       	adiw	r26, 0x04	; 4
    1018:	8d 93       	st	X+, r24
    101a:	9c 93       	st	X, r25
    101c:	15 97       	sbiw	r26, 0x05	; 5
    101e:	50 96       	adiw	r26, 0x10	; 16
    1020:	0d 90       	ld	r0, X+
    1022:	bc 91       	ld	r27, X
    1024:	a0 2d       	mov	r26, r0
    1026:	8a 17       	cp	r24, r26
    1028:	9b 07       	cpc	r25, r27
    102a:	49 f1       	breq	.+82     	; 0x107e <_ZN9I2CMaster8Receiver3runER6Packet+0x82>
    102c:	f8 01       	movw	r30, r16
    102e:	a6 85       	ldd	r26, Z+14	; 0x0e
    1030:	b7 85       	ldd	r27, Z+15	; 0x0f
    1032:	8a 17       	cp	r24, r26
    1034:	9b 07       	cpc	r25, r27
    1036:	41 f4       	brne	.+16     	; 0x1048 <_ZN9I2CMaster8Receiver3runER6Packet+0x4c>
    1038:	22 c0       	rjmp	.+68     	; 0x107e <_ZN9I2CMaster8Receiver3runER6Packet+0x82>
    103a:	f8 01       	movw	r30, r16
    103c:	a6 85       	ldd	r26, Z+14	; 0x0e
    103e:	b7 85       	ldd	r27, Z+15	; 0x0f
    1040:	ce 01       	movw	r24, r28
    1042:	ac 17       	cp	r26, r28
    1044:	bd 07       	cpc	r27, r29
    1046:	d9 f0       	breq	.+54     	; 0x107e <_ZN9I2CMaster8Receiver3runER6Packet+0x82>
    1048:	dc 01       	movw	r26, r24
    104a:	ed 91       	ld	r30, X+
    104c:	fc 91       	ld	r31, X
    104e:	01 90       	ld	r0, Z+
    1050:	f0 81       	ld	r31, Z
    1052:	e0 2d       	mov	r30, r0
    1054:	b7 01       	movw	r22, r14
    1056:	19 95       	eicall
    1058:	ec 01       	movw	r28, r24
    105a:	f8 01       	movw	r30, r16
    105c:	84 81       	ldd	r24, Z+4	; 0x04
    105e:	95 81       	ldd	r25, Z+5	; 0x05
    1060:	dc 01       	movw	r26, r24
    1062:	ed 91       	ld	r30, X+
    1064:	fc 91       	ld	r31, X
    1066:	02 80       	ldd	r0, Z+2	; 0x02
    1068:	f3 81       	ldd	r31, Z+3	; 0x03
    106a:	e0 2d       	mov	r30, r0
    106c:	19 95       	eicall
    106e:	f8 01       	movw	r30, r16
    1070:	c4 83       	std	Z+4, r28	; 0x04
    1072:	d5 83       	std	Z+5, r29	; 0x05
    1074:	a0 89       	ldd	r26, Z+16	; 0x10
    1076:	b1 89       	ldd	r27, Z+17	; 0x11
    1078:	ac 17       	cp	r26, r28
    107a:	bd 07       	cpc	r27, r29
    107c:	f1 f6       	brne	.-68     	; 0x103a <_ZN9I2CMaster8Receiver3runER6Packet+0x3e>
    107e:	ed 91       	ld	r30, X+
    1080:	fc 91       	ld	r31, X
    1082:	11 97       	sbiw	r26, 0x01	; 1
    1084:	02 80       	ldd	r0, Z+2	; 0x02
    1086:	f3 81       	ldd	r31, Z+3	; 0x03
    1088:	e0 2d       	mov	r30, r0
    108a:	cd 01       	movw	r24, r26
    108c:	19 95       	eicall
    108e:	c7 01       	movw	r24, r14
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	ff 90       	pop	r15
    109a:	ef 90       	pop	r14
    109c:	08 95       	ret

0000109e <_ZN9I2CMaster12set_baudrateEm>:
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	ec 01       	movw	r28, r24
    10a4:	9a 01       	movw	r18, r20
    10a6:	ab 01       	movw	r20, r22
    10a8:	22 0f       	add	r18, r18
    10aa:	33 1f       	adc	r19, r19
    10ac:	44 1f       	adc	r20, r20
    10ae:	55 1f       	adc	r21, r21
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	78 e4       	ldi	r23, 0x48	; 72
    10b4:	88 ee       	ldi	r24, 0xE8	; 232
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    10b8:	0e 94 91 26 	call	0x4d22	; 0x4d22 <__udivmodsi4>
    10bc:	25 50       	subi	r18, 0x05	; 5
    10be:	2a 87       	std	Y+10, r18	; 0x0a
    10c0:	ec 81       	ldd	r30, Y+4	; 0x04
    10c2:	fd 81       	ldd	r31, Y+5	; 0x05
    10c4:	25 83       	std	Z+5, r18	; 0x05
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	08 95       	ret

000010cc <_ZN9I2CMaster10send_startEv>:


void I2CMaster::send_start(void)
{
  interface_->MASTER.CTRLC |= (1<<TWI_MASTER_CMD0_bp);
    10cc:	dc 01       	movw	r26, r24
    10ce:	14 96       	adiw	r26, 0x04	; 4
    10d0:	ed 91       	ld	r30, X+
    10d2:	fc 91       	ld	r31, X
    10d4:	15 97       	sbiw	r26, 0x05	; 5
    10d6:	83 81       	ldd	r24, Z+3	; 0x03
    10d8:	81 60       	ori	r24, 0x01	; 1
    10da:	83 83       	std	Z+3, r24	; 0x03
    10dc:	08 95       	ret

000010de <_ZN9I2CMaster10StartState7executeER6Packet>:
  // statusState_->serialDebug();
  // return packet;
}

I2CMaster::State * I2CMaster::StartState::execute( Packet & packet )
{
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	ec 01       	movw	r28, r24
    10e8:	cb 01       	movw	r24, r22
  uint8_t * startCommand;
  packet.get(startCommand);
    10ea:	db 01       	movw	r26, r22
    10ec:	ed 91       	ld	r30, X+
    10ee:	fc 91       	ld	r31, X
    10f0:	02 84       	ldd	r0, Z+10	; 0x0a
    10f2:	f3 85       	ldd	r31, Z+11	; 0x0b
    10f4:	e0 2d       	mov	r30, r0
    10f6:	00 e0       	ldi	r16, 0x00	; 0
    10f8:	10 e0       	ldi	r17, 0x00	; 0
    10fa:	b8 01       	movw	r22, r16
    10fc:	19 95       	eicall
  driver_->send_start();
    10fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1100:	98 85       	ldd	r25, Y+8	; 0x08
    1102:	0e 94 66 08 	call	0x10cc	; 0x10cc <_ZN9I2CMaster10send_startEv>
  TWI_t *       getInterfacePtr() { return interface_; }
    1106:	ef 81       	ldd	r30, Y+7	; 0x07
    1108:	f8 85       	ldd	r31, Y+8	; 0x08
    110a:	04 80       	ldd	r0, Z+4	; 0x04
    110c:	f5 81       	ldd	r31, Z+5	; 0x05
    110e:	e0 2d       	mov	r30, r0
  driver_->getInterfacePtr()->MASTER.ADDR = *startCommand;
    1110:	d8 01       	movw	r26, r16
    1112:	8c 91       	ld	r24, X
    1114:	86 83       	std	Z+6, r24	; 0x06
  return nextState_;
}
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	9b 81       	ldd	r25, Y+3	; 0x03
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	08 95       	ret

00001124 <_ZN9I2CMaster8is_readyEh>:
  
  return addr_list;
}

bool I2CMaster::is_ready (uint8_t addr)
{
    1124:	ff 92       	push	r15
    1126:	0f 93       	push	r16
    1128:	1f 93       	push	r17
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	1f 92       	push	r1
    1130:	1f 92       	push	r1
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	8c 01       	movw	r16, r24
    1138:	f6 2e       	mov	r15, r22
  volatile uint16_t counter = 500;
    113a:	84 ef       	ldi	r24, 0xF4	; 244
    113c:	91 e0       	ldi	r25, 0x01	; 1
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	9a 83       	std	Y+2, r25	; 0x02
  send_start();
    1142:	c8 01       	movw	r24, r16
    1144:	0e 94 66 08 	call	0x10cc	; 0x10cc <_ZN9I2CMaster10send_startEv>
  interface_->MASTER.ADDR = addr << 1;
    1148:	d8 01       	movw	r26, r16
    114a:	14 96       	adiw	r26, 0x04	; 4
    114c:	ed 91       	ld	r30, X+
    114e:	fc 91       	ld	r31, X
    1150:	15 97       	sbiw	r26, 0x05	; 5
    1152:	ff 0c       	add	r15, r15
    1154:	f6 82       	std	Z+6, r15	; 0x06
  
  while ((--counter != 0) && (interface_->MASTER.STATUS & TWI_MASTER_RXACK_bm)){ }
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	9a 81       	ldd	r25, Y+2	; 0x02
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	9a 83       	std	Y+2, r25	; 0x02
    1160:	89 2b       	or	r24, r25
    1162:	41 f0       	breq	.+16     	; 0x1174 <_ZN9I2CMaster8is_readyEh+0x50>
    1164:	d8 01       	movw	r26, r16
    1166:	14 96       	adiw	r26, 0x04	; 4
    1168:	ed 91       	ld	r30, X+
    116a:	fc 91       	ld	r31, X
    116c:	15 97       	sbiw	r26, 0x05	; 5
    116e:	84 81       	ldd	r24, Z+4	; 0x04
    1170:	84 fd       	sbrc	r24, 4
    1172:	f1 cf       	rjmp	.-30     	; 0x1156 <_ZN9I2CMaster8is_readyEh+0x32>
  if(counter != 0)
    1174:	29 81       	ldd	r18, Y+1	; 0x01
    1176:	3a 81       	ldd	r19, Y+2	; 0x02
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	23 2b       	or	r18, r19
    117c:	09 f4       	brne	.+2      	; 0x1180 <_ZN9I2CMaster8is_readyEh+0x5c>
    117e:	80 e0       	ldi	r24, 0x00	; 0
  else
  {
    return false;
  }
  send_nack_stop();
}
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	ff 90       	pop	r15
    118e:	08 95       	ret

00001190 <_ZN9I2CMaster4scanEv>:
  baudrate = (F_CPU / (2 * i2c_freq)) - 5;
  interface_->MASTER.BAUD = baudrate;
}

uint8_t* I2CMaster::scan (void)
{
    1190:	8f 92       	push	r8
    1192:	9f 92       	push	r9
    1194:	af 92       	push	r10
    1196:	bf 92       	push	r11
    1198:	cf 92       	push	r12
    119a:	df 92       	push	r13
    119c:	ef 92       	push	r14
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	1f 92       	push	r1
    11aa:	1f 92       	push	r1
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	8c 01       	movw	r16, r24
    11b2:	dd 24       	eor	r13, r13
    11b4:	d3 94       	inc	r13
    11b6:	b1 2c       	mov	r11, r1
  uint8_t addr_list_index;
  addr_list_index = 0;
  
  for (uint8_t addr = 1; addr < 128; addr++)
  {
    counter = 100;
    11b8:	0f 2e       	mov	r0, r31
    11ba:	f4 e6       	ldi	r31, 0x64	; 100
    11bc:	ef 2e       	mov	r14, r31
    11be:	f1 2c       	mov	r15, r1
    11c0:	f0 2d       	mov	r31, r0
  interface_->MASTER.CTRLC |= TWI_MASTER_CMD_REPSTART_gc;
}

void I2CMaster::send_nack_stop(void)
{
  interface_->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    11c2:	0f 2e       	mov	r0, r31
    11c4:	f7 e0       	ldi	r31, 0x07	; 7
    11c6:	cf 2e       	mov	r12, r31
    11c8:	f0 2d       	mov	r31, r0
  uint8_t addr_list_index;
  addr_list_index = 0;
  
  for (uint8_t addr = 1; addr < 128; addr++)
  {
    counter = 100;
    11ca:	e9 82       	std	Y+1, r14	; 0x01
    11cc:	fa 82       	std	Y+2, r15	; 0x02
    send_start();
    11ce:	c8 01       	movw	r24, r16
    11d0:	0e 94 66 08 	call	0x10cc	; 0x10cc <_ZN9I2CMaster10send_startEv>
    interface_->MASTER.ADDR = addr << 1;
    11d4:	d8 01       	movw	r26, r16
    11d6:	14 96       	adiw	r26, 0x04	; 4
    11d8:	ed 91       	ld	r30, X+
    11da:	fc 91       	ld	r31, X
    11dc:	15 97       	sbiw	r26, 0x05	; 5
    11de:	8d 2d       	mov	r24, r13
    11e0:	88 0f       	add	r24, r24
    11e2:	86 83       	std	Z+6, r24	; 0x06
    
    while ((--counter != 0) && (interface_->MASTER.STATUS & TWI_MASTER_RXACK_bm)){ }
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	9a 81       	ldd	r25, Y+2	; 0x02
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	9a 83       	std	Y+2, r25	; 0x02
    11ee:	89 2b       	or	r24, r25
    11f0:	89 f1       	breq	.+98     	; 0x1254 <_ZN9I2CMaster4scanEv+0xc4>
    11f2:	d8 01       	movw	r26, r16
    11f4:	14 96       	adiw	r26, 0x04	; 4
    11f6:	ed 91       	ld	r30, X+
    11f8:	fc 91       	ld	r31, X
    11fa:	15 97       	sbiw	r26, 0x05	; 5
    11fc:	84 81       	ldd	r24, Z+4	; 0x04
    11fe:	84 fd       	sbrc	r24, 4
    1200:	f1 cf       	rjmp	.-30     	; 0x11e4 <_ZN9I2CMaster4scanEv+0x54>
    1202:	28 c0       	rjmp	.+80     	; 0x1254 <_ZN9I2CMaster4scanEv+0xc4>
    if(counter != 0)
    {
      uint8_t addr_reg = interface_->MASTER.ADDR;
    1204:	d8 01       	movw	r26, r16
    1206:	14 96       	adiw	r26, 0x04	; 4
    1208:	ed 91       	ld	r30, X+
    120a:	fc 91       	ld	r31, X
    120c:	15 97       	sbiw	r26, 0x05	; 5
    120e:	a6 80       	ldd	r10, Z+6	; 0x06
      *p_serial << "Detected i2c addr: " << addr_reg << endl;
    1210:	16 96       	adiw	r26, 0x06	; 6
    1212:	8d 90       	ld	r8, X+
    1214:	9c 90       	ld	r9, X
    1216:	17 97       	sbiw	r26, 0x07	; 7
    1218:	6d ee       	ldi	r22, 0xED	; 237
    121a:	70 e2       	ldi	r23, 0x20	; 32
    121c:	c4 01       	movw	r24, r8
    121e:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    1222:	6a 2d       	mov	r22, r10
    1224:	c4 01       	movw	r24, r8
    1226:	0e 94 28 20 	call	0x4050	; 0x4050 <_ZN8emstreamlsEh>
    122a:	66 e0       	ldi	r22, 0x06	; 6
    122c:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
      addr_list[addr_list_index] = addr;
    1230:	f8 01       	movw	r30, r16
    1232:	eb 0d       	add	r30, r11
    1234:	f1 1d       	adc	r31, r1
    1236:	d7 86       	std	Z+15, r13	; 0x0f
      addr_list_index++;
    1238:	b3 94       	inc	r11
  interface_->MASTER.CTRLC |= TWI_MASTER_CMD_REPSTART_gc;
}

void I2CMaster::send_nack_stop(void)
{
  interface_->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    123a:	d8 01       	movw	r26, r16
    123c:	14 96       	adiw	r26, 0x04	; 4
    123e:	ed 91       	ld	r30, X+
    1240:	fc 91       	ld	r31, X
    1242:	15 97       	sbiw	r26, 0x05	; 5
    1244:	c3 82       	std	Z+3, r12	; 0x03
  volatile uint16_t counter;
  
  uint8_t addr_list_index;
  addr_list_index = 0;
  
  for (uint8_t addr = 1; addr < 128; addr++)
    1246:	d3 94       	inc	r13
    1248:	b0 e8       	ldi	r27, 0x80	; 128
    124a:	db 12       	cpse	r13, r27
    124c:	be cf       	rjmp	.-132    	; 0x11ca <_ZN9I2CMaster4scanEv+0x3a>

    send_nack_stop();
      
  }
  
  return addr_list;
    124e:	c8 01       	movw	r24, r16
    1250:	0f 96       	adiw	r24, 0x0f	; 15
    1252:	05 c0       	rjmp	.+10     	; 0x125e <_ZN9I2CMaster4scanEv+0xce>
    counter = 100;
    send_start();
    interface_->MASTER.ADDR = addr << 1;
    
    while ((--counter != 0) && (interface_->MASTER.STATUS & TWI_MASTER_RXACK_bm)){ }
    if(counter != 0)
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	9a 81       	ldd	r25, Y+2	; 0x02
    1258:	89 2b       	or	r24, r25
    125a:	79 f3       	breq	.-34     	; 0x123a <_ZN9I2CMaster4scanEv+0xaa>
    125c:	d3 cf       	rjmp	.-90     	; 0x1204 <_ZN9I2CMaster4scanEv+0x74>
    send_nack_stop();
      
  }
  
  return addr_list;
}
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	df 90       	pop	r13
    1270:	cf 90       	pop	r12
    1272:	bf 90       	pop	r11
    1274:	af 90       	pop	r10
    1276:	9f 90       	pop	r9
    1278:	8f 90       	pop	r8
    127a:	08 95       	ret

0000127c <_ZN9I2CMasterC1EP10TWI_structmP8emstream>:
//   interface->MASTER.STATUS |= TWI_MASTER_RIF_bm | TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm | TWI_MASTER_BUSERR_bm | TWI_MASTER_BUSSTATE_IDLE_gc; //clear all flags initially and select bus state IDLE

//   interface->MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
// }

I2CMaster::I2CMaster(TWI_t * interface, uint32_t i2c_freq, emstream * s)
    127c:	ef 92       	push	r14
    127e:	ff 92       	push	r15
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	ec 01       	movw	r28, r24
    128a:	7b 01       	movw	r14, r22
    128c:	ba 01       	movw	r22, r20
    128e:	a9 01       	movw	r20, r18
  : interface_(interface), 
    i2c_freq(i2c_freq),
    p_serial(s)
    1290:	ec 82       	std	Y+4, r14	; 0x04
    1292:	fd 82       	std	Y+5, r15	; 0x05
    1294:	0e 83       	std	Y+6, r16	; 0x06
    1296:	1f 83       	std	Y+7, r17	; 0x07
    1298:	4b 87       	std	Y+11, r20	; 0x0b
    129a:	5c 87       	std	Y+12, r21	; 0x0c
    129c:	6d 87       	std	Y+13, r22	; 0x0d
    129e:	7e 87       	std	Y+14, r23	; 0x0e
    // transmitter_(new Transmitter(this, s)),
    // receiver_(new Receiver(this, s))
{ 
  if (interface == &TWIC)
    12a0:	80 e8       	ldi	r24, 0x80	; 128
    12a2:	e8 16       	cp	r14, r24
    12a4:	84 e0       	ldi	r24, 0x04	; 4
    12a6:	f8 06       	cpc	r15, r24
    12a8:	29 f4       	brne	.+10     	; 0x12b4 <_ZN9I2CMasterC1EP10TWI_structmP8emstream+0x38>
  {
    bus_port = &PORTC;
    12aa:	80 e4       	ldi	r24, 0x40	; 64
    12ac:	96 e0       	ldi	r25, 0x06	; 6
    12ae:	88 87       	std	Y+8, r24	; 0x08
    12b0:	99 87       	std	Y+9, r25	; 0x09
    12b2:	09 c0       	rjmp	.+18     	; 0x12c6 <_ZN9I2CMasterC1EP10TWI_structmP8emstream+0x4a>
  }
  if (interface == &TWIE)
    12b4:	e0 ea       	ldi	r30, 0xA0	; 160
    12b6:	ee 16       	cp	r14, r30
    12b8:	e4 e0       	ldi	r30, 0x04	; 4
    12ba:	fe 06       	cpc	r15, r30
    12bc:	21 f4       	brne	.+8      	; 0x12c6 <_ZN9I2CMasterC1EP10TWI_structmP8emstream+0x4a>
  {
    bus_port = &PORTE;
    12be:	80 e8       	ldi	r24, 0x80	; 128
    12c0:	96 e0       	ldi	r25, 0x06	; 6
    12c2:	88 87       	std	Y+8, r24	; 0x08
    12c4:	99 87       	std	Y+9, r25	; 0x09
  }
  
  bus_port->DIRSET = PIN0_bm | PIN1_bm;
    12c6:	e8 85       	ldd	r30, Y+8	; 0x08
    12c8:	f9 85       	ldd	r31, Y+9	; 0x09
    12ca:	83 e0       	ldi	r24, 0x03	; 3
    12cc:	81 83       	std	Z+1, r24	; 0x01
  bus_port->PIN0CTRL = PORT_OPC_WIREDANDPULL_gc; //SDA pull up output
    12ce:	e8 85       	ldd	r30, Y+8	; 0x08
    12d0:	f9 85       	ldd	r31, Y+9	; 0x09
    12d2:	88 e3       	ldi	r24, 0x38	; 56
    12d4:	80 8b       	std	Z+16, r24	; 0x10
  bus_port->PIN1CTRL = PORT_OPC_WIREDANDPULL_gc; //SCL pull up output
    12d6:	e8 85       	ldd	r30, Y+8	; 0x08
    12d8:	f9 85       	ldd	r31, Y+9	; 0x09
    12da:	81 8b       	std	Z+17, r24	; 0x11
  
  interface->MASTER.CTRLB = 1 << 1;
    12dc:	82 e0       	ldi	r24, 0x02	; 2
    12de:	f7 01       	movw	r30, r14
    12e0:	82 83       	std	Z+2, r24	; 0x02
  
  set_baudrate(i2c_freq); //baud rate is set such that TWI freq=100KHz
    12e2:	ce 01       	movw	r24, r28
    12e4:	0e 94 4f 08 	call	0x109e	; 0x109e <_ZN9I2CMaster12set_baudrateEm>
  
//  ptwiport->MASTER.CTRLB = 0x00; //TWI_MASTER_QCEN_bm; //no inactive bus timeout, quick command and smart mode enabled
  
//  ptwiport->MASTER.CTRLC = 0x00; //initially send ACK and no CMD selected

  interface->MASTER.STATUS |= TWI_MASTER_RIF_bm | TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm | TWI_MASTER_BUSERR_bm | TWI_MASTER_BUSSTATE_IDLE_gc; //clear all flags initially and select bus state IDLE
    12e8:	f7 01       	movw	r30, r14
    12ea:	84 81       	ldd	r24, Z+4	; 0x04
    12ec:	8d 6c       	ori	r24, 0xCD	; 205
    12ee:	84 83       	std	Z+4, r24	; 0x04

  interface->MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    12f0:	88 e0       	ldi	r24, 0x08	; 8
    12f2:	81 83       	std	Z+1, r24	; 0x01
    12f4:	61 e0       	ldi	r22, 0x01	; 1
    12f6:	71 e2       	ldi	r23, 0x21	; 33
    12f8:	c8 01       	movw	r24, r16
    12fa:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>


  *s << "i2c constructor this: " << this << endl;
    12fe:	be 01       	movw	r22, r28
    1300:	c8 01       	movw	r24, r16
    1302:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <_ZN8emstreamlsEPv>
    1306:	66 e0       	ldi	r22, 0x06	; 6
    1308:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
  emstream *    getSerial()       { return p_serial; }
    130c:	ee 80       	ldd	r14, Y+6	; 0x06
    130e:	ff 80       	ldd	r15, Y+7	; 0x07
    1310:	68 e1       	ldi	r22, 0x18	; 24
    1312:	71 e2       	ldi	r23, 0x21	; 33
    1314:	c8 01       	movw	r24, r16
    1316:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
  *s << "i2c serial ptr: " << getSerial() << endl;
    131a:	b7 01       	movw	r22, r14
    131c:	c8 01       	movw	r24, r16
    131e:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <_ZN8emstreamlsEPv>
    1322:	66 e0       	ldi	r22, 0x06	; 6
    1324:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>

  transmitter_ = new Transmitter(this, s);
    1328:	87 e1       	ldi	r24, 0x17	; 23
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <_Znwj>
    1330:	7c 01       	movw	r14, r24
    1332:	a8 01       	movw	r20, r16
    1334:	be 01       	movw	r22, r28
    1336:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN9I2CMaster11TransmitterC1EPS_P8emstream>
    133a:	e8 82       	st	Y, r14
    133c:	f9 82       	std	Y+1, r15	; 0x01
  receiver_ = new Receiver(this, s);
    133e:	88 e1       	ldi	r24, 0x18	; 24
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <_Znwj>
    1346:	7c 01       	movw	r14, r24
    1348:	a8 01       	movw	r20, r16
    134a:	be 01       	movw	r22, r28
    134c:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN9I2CMaster8ReceiverC1EPS_P8emstream>
    1350:	ea 82       	std	Y+2, r14	; 0x02
    1352:	fb 82       	std	Y+3, r15	; 0x03

  scan();
    1354:	ce 01       	movw	r24, r28
    1356:	0e 94 c8 08 	call	0x1190	; 0x1190 <_ZN9I2CMaster4scanEv>
  *s << is_ready(29) << endl;
    135a:	6d e1       	ldi	r22, 0x1D	; 29
    135c:	ce 01       	movw	r24, r28
    135e:	0e 94 92 08 	call	0x1124	; 0x1124 <_ZN9I2CMaster8is_readyEh>
    1362:	68 2f       	mov	r22, r24
    1364:	c8 01       	movw	r24, r16
    1366:	0e 94 75 1f 	call	0x3eea	; 0x3eea <_ZN8emstreamlsEb>
    136a:	66 e0       	ldi	r22, 0x06	; 6
    136c:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    1370:	0e 80       	ldd	r0, Y+6	; 0x06
    1372:	df 81       	ldd	r29, Y+7	; 0x07
    1374:	c0 2d       	mov	r28, r0
    1376:	69 e2       	ldi	r22, 0x29	; 41
    1378:	71 e2       	ldi	r23, 0x21	; 33
    137a:	ce 01       	movw	r24, r28
    137c:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>

  *(getSerial()) << "I2CMaster created" << endl;
    1380:	66 e0       	ldi	r22, 0x06	; 6
    1382:	ce 01       	movw	r24, r28
    1384:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
}
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	ff 90       	pop	r15
    1392:	ef 90       	pop	r14
    1394:	08 95       	ret

00001396 <_ZN9frt_queueIhE16ISR_num_items_inEv>:
		 *  called only from within an interrupt service routine.
		 *  @return The number of items in the queue
		 */
		size_t ISR_num_items_in (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle));
    1396:	fc 01       	movw	r30, r24
    1398:	84 81       	ldd	r24, Z+4	; 0x04
    139a:	95 81       	ldd	r25, Z+5	; 0x05
    139c:	0e 94 59 14 	call	0x28b2	; 0x28b2 <uxQueueMessagesWaitingFromISR>
		}
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	08 95       	ret

000013a4 <_ZN9frt_queueIhE13ISR_not_emptyEv>:
		 *  an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool ISR_not_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) != 0);
    13a4:	fc 01       	movw	r30, r24
    13a6:	84 81       	ldd	r24, Z+4	; 0x04
    13a8:	95 81       	ldd	r25, Z+5	; 0x05
    13aa:	0e 94 59 14 	call	0x28b2	; 0x28b2 <uxQueueMessagesWaitingFromISR>
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	81 11       	cpse	r24, r1
    13b2:	01 c0       	rjmp	.+2      	; 0x13b6 <_ZN9frt_queueIhE13ISR_not_emptyEv+0x12>
    13b4:	90 e0       	ldi	r25, 0x00	; 0
		}
    13b6:	89 2f       	mov	r24, r25
    13b8:	08 95       	ret

000013ba <_ZN9frt_queueIhE12ISR_is_emptyEv>:
		 *  routine. It must not be used in normal non-ISR code. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool ISR_is_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) == 0);
    13ba:	fc 01       	movw	r30, r24
    13bc:	84 81       	ldd	r24, Z+4	; 0x04
    13be:	95 81       	ldd	r25, Z+5	; 0x05
    13c0:	0e 94 59 14 	call	0x28b2	; 0x28b2 <uxQueueMessagesWaitingFromISR>
    13c4:	91 e0       	ldi	r25, 0x01	; 1
    13c6:	81 11       	cpse	r24, r1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
		}
    13ca:	89 2f       	mov	r24, r25
    13cc:	08 95       	ret

000013ce <_ZN9frt_queueIhE12num_items_inEv>:
		 *  ISR_num_items_in() can be called from within an ISR. 
		 *  @return The number of items in the queue
		 */
		size_t num_items_in (void)
		{
			return (uxQueueMessagesWaiting (handle));
    13ce:	fc 01       	movw	r30, r24
    13d0:	84 81       	ldd	r24, Z+4	; 0x04
    13d2:	95 81       	ldd	r25, Z+5	; 0x05
    13d4:	0e 94 51 14 	call	0x28a2	; 0x28a2 <uxQueueMessagesWaiting>
		}
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	08 95       	ret

000013dc <_ZN9frt_queueIhE9not_emptyEv>:
		 *  \b not be called from within an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool not_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) != 0);
    13dc:	fc 01       	movw	r30, r24
    13de:	84 81       	ldd	r24, Z+4	; 0x04
    13e0:	95 81       	ldd	r25, Z+5	; 0x05
    13e2:	0e 94 51 14 	call	0x28a2	; 0x28a2 <uxQueueMessagesWaiting>
    13e6:	91 e0       	ldi	r25, 0x01	; 1
    13e8:	81 11       	cpse	r24, r1
    13ea:	01 c0       	rjmp	.+2      	; 0x13ee <_ZN9frt_queueIhE9not_emptyEv+0x12>
    13ec:	90 e0       	ldi	r25, 0x00	; 0
		}
    13ee:	89 2f       	mov	r24, r25
    13f0:	08 95       	ret

000013f2 <_ZN9frt_queueIhE8is_emptyEv>:
		/** This method checks if the queue is empty. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool is_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) == 0);
    13f2:	fc 01       	movw	r30, r24
    13f4:	84 81       	ldd	r24, Z+4	; 0x04
    13f6:	95 81       	ldd	r25, Z+5	; 0x05
    13f8:	0e 94 51 14 	call	0x28a2	; 0x28a2 <uxQueueMessagesWaiting>
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	81 11       	cpse	r24, r1
    1400:	90 e0       	ldi	r25, 0x00	; 0
		}
    1402:	89 2f       	mov	r24, r25
    1404:	08 95       	ret

00001406 <_ZN9frt_queueIhE10get_a_copyERh>:
 *  \c xQueuePeekFromISR() which would allow copying items from a queue in an ISR. 
 *  @param item A reference to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get_a_copy (data_type& item)
    1406:	0f 93       	push	r16
{
	xQueuePeek (handle, &item, portMAX_DELAY);
    1408:	01 e0       	ldi	r16, 0x01	; 1
    140a:	2f ef       	ldi	r18, 0xFF	; 255
    140c:	3f ef       	ldi	r19, 0xFF	; 255
    140e:	a9 01       	movw	r20, r18
    1410:	fc 01       	movw	r30, r24
    1412:	84 81       	ldd	r24, Z+4	; 0x04
    1414:	95 81       	ldd	r25, Z+5	; 0x05
    1416:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xQueueGenericReceive>
}
    141a:	0f 91       	pop	r16
    141c:	08 95       	ret

0000141e <_ZN9frt_queueIhE10get_a_copyEv>:
 *          data type if we couldn't get any data from the queue and the attempt
 *          timed out
 */

template <class data_type>
inline data_type frt_queue<data_type>::get_a_copy (void)
    141e:	0f 93       	push	r16
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	1f 92       	push	r1
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueuePeek (handle, &recv_item, portMAX_DELAY);
    142a:	01 e0       	ldi	r16, 0x01	; 1
    142c:	2f ef       	ldi	r18, 0xFF	; 255
    142e:	3f ef       	ldi	r19, 0xFF	; 255
    1430:	a9 01       	movw	r20, r18
    1432:	be 01       	movw	r22, r28
    1434:	6f 5f       	subi	r22, 0xFF	; 255
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	fc 01       	movw	r30, r24
    143a:	84 81       	ldd	r24, Z+4	; 0x04
    143c:	95 81       	ldd	r25, Z+5	; 0x05
    143e:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xQueueGenericReceive>
	return (recv_item);
}
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	0f 90       	pop	r0
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	0f 91       	pop	r16
    144c:	08 95       	ret

0000144e <_ZN9frt_queueIhE3getEPh>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get (data_type* p_item)
    144e:	0f 93       	push	r16
{
	xQueueReceive (handle, p_item, portMAX_DELAY);
    1450:	00 e0       	ldi	r16, 0x00	; 0
    1452:	2f ef       	ldi	r18, 0xFF	; 255
    1454:	3f ef       	ldi	r19, 0xFF	; 255
    1456:	a9 01       	movw	r20, r18
    1458:	fc 01       	movw	r30, r24
    145a:	84 81       	ldd	r24, Z+4	; 0x04
    145c:	95 81       	ldd	r25, Z+5	; 0x05
    145e:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xQueueGenericReceive>
}
    1462:	0f 91       	pop	r16
    1464:	08 95       	ret

00001466 <_ZN9frt_queueIhE3getEv>:
 *  up. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::get (void)
    1466:	0f 93       	push	r16
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	1f 92       	push	r1
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceive (handle, &recv_item, portMAX_DELAY);
    1472:	00 e0       	ldi	r16, 0x00	; 0
    1474:	2f ef       	ldi	r18, 0xFF	; 255
    1476:	3f ef       	ldi	r19, 0xFF	; 255
    1478:	a9 01       	movw	r20, r18
    147a:	be 01       	movw	r22, r28
    147c:	6f 5f       	subi	r22, 0xFF	; 255
    147e:	7f 4f       	sbci	r23, 0xFF	; 255
    1480:	fc 01       	movw	r30, r24
    1482:	84 81       	ldd	r24, Z+4	; 0x04
    1484:	95 81       	ldd	r25, Z+5	; 0x05
    1486:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xQueueGenericReceive>
	return (recv_item);
}
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	0f 90       	pop	r0
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	0f 91       	pop	r16
    1494:	08 95       	ret

00001496 <_ZN9frt_queueIhE7ISR_getEPh>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::ISR_get (data_type* p_item)
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	1f 92       	push	r1
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
{
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, and
	// nothing will actually be copied
	xQueueReceiveFromISR (handle, p_item, &task_awakened);
    14a0:	ae 01       	movw	r20, r28
    14a2:	4f 5f       	subi	r20, 0xFF	; 255
    14a4:	5f 4f       	sbci	r21, 0xFF	; 255
    14a6:	fc 01       	movw	r30, r24
    14a8:	84 81       	ldd	r24, Z+4	; 0x04
    14aa:	95 81       	ldd	r25, Z+5	; 0x05
    14ac:	0e 94 24 14 	call	0x2848	; 0x2848 <xQueueReceiveFromISR>
}
    14b0:	0f 90       	pop	r0
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

000014b8 <_ZN9frt_queueIhE7ISR_getEv>:
 *  service routine. This method must not be called from within normal non-ISR code. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::ISR_get (void)
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	1f 92       	push	r1
    14be:	1f 92       	push	r1
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
	data_type recv_item;                    // Data item read from the queue
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceiveFromISR (handle, &recv_item, &task_awakened);
    14c4:	ae 01       	movw	r20, r28
    14c6:	4e 5f       	subi	r20, 0xFE	; 254
    14c8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ca:	be 01       	movw	r22, r28
    14cc:	6f 5f       	subi	r22, 0xFF	; 255
    14ce:	7f 4f       	sbci	r23, 0xFF	; 255
    14d0:	fc 01       	movw	r30, r24
    14d2:	84 81       	ldd	r24, Z+4	; 0x04
    14d4:	95 81       	ldd	r25, Z+5	; 0x05
    14d6:	0e 94 24 14 	call	0x2848	; 0x2848 <xQueueReceiveFromISR>
	return (recv_item);
}
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	08 95       	ret

000014e6 <_ZN9frt_queueIhE11ISR_butt_inERKh>:
 *              the front of the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
bool frt_queue<data_type>::ISR_butt_in (const data_type& item)
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	1f 92       	push	r1
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    14f0:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;                      // Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToFrontFromISR (handle, &item, &shouldSwitch));
    14f2:	21 e0       	ldi	r18, 0x01	; 1
    14f4:	ae 01       	movw	r20, r28
    14f6:	4f 5f       	subi	r20, 0xFF	; 255
    14f8:	5f 4f       	sbci	r21, 0xFF	; 255
    14fa:	fc 01       	movw	r30, r24
    14fc:	84 81       	ldd	r24, Z+4	; 0x04
    14fe:	95 81       	ldd	r25, Z+5	; 0x05
    1500:	0e 94 34 13 	call	0x2668	; 0x2668 <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    1504:	91 e0       	ldi	r25, 0x01	; 1
    1506:	81 11       	cpse	r24, r1
    1508:	01 c0       	rjmp	.+2      	; 0x150c <_ZN9frt_queueIhE11ISR_butt_inERKh+0x26>
    150a:	90 e0       	ldi	r25, 0x00	; 0
}
    150c:	89 2f       	mov	r24, r25
    150e:	0f 90       	pop	r0
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	08 95       	ret

00001516 <_ZN9frt_queueIhE7ISR_putERKh>:
 *  @param item Reference to the item which is going to be put into the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
inline bool frt_queue<data_type>::ISR_put (const data_type& item)
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	1f 92       	push	r1
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    1520:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;						// Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToBackFromISR (handle, &item, &shouldSwitch));
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	ae 01       	movw	r20, r28
    1526:	4f 5f       	subi	r20, 0xFF	; 255
    1528:	5f 4f       	sbci	r21, 0xFF	; 255
    152a:	fc 01       	movw	r30, r24
    152c:	84 81       	ldd	r24, Z+4	; 0x04
    152e:	95 81       	ldd	r25, Z+5	; 0x05
    1530:	0e 94 34 13 	call	0x2668	; 0x2668 <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    1534:	91 e0       	ldi	r25, 0x01	; 1
    1536:	81 11       	cpse	r24, r1
    1538:	01 c0       	rjmp	.+2      	; 0x153c <_ZN9frt_queueIhE7ISR_putERKh+0x26>
    153a:	90 e0       	ldi	r25, 0x00	; 0
}
    153c:	89 2f       	mov	r24, r25
    153e:	0f 90       	pop	r0
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	08 95       	ret

00001546 <_ZN9frt_queueIhE7butt_inERKh>:
		 *  \b not be used within an interrupt service routine. 
		 *  @param item Reference to the item which is going to be (rudely) put into 
		 *              the front of the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool butt_in (const data_type& item)
    1546:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToFront (handle, &item, ticks_to_wait)));
    1548:	fc 01       	movw	r30, r24
    154a:	26 81       	ldd	r18, Z+6	; 0x06
    154c:	37 81       	ldd	r19, Z+7	; 0x07
    154e:	40 85       	ldd	r20, Z+8	; 0x08
    1550:	51 85       	ldd	r21, Z+9	; 0x09
    1552:	01 e0       	ldi	r16, 0x01	; 1
    1554:	84 81       	ldd	r24, Z+4	; 0x04
    1556:	95 81       	ldd	r25, Z+5	; 0x05
    1558:	0e 94 99 12 	call	0x2532	; 0x2532 <xQueueGenericSend>
    155c:	91 e0       	ldi	r25, 0x01	; 1
    155e:	81 11       	cpse	r24, r1
    1560:	01 c0       	rjmp	.+2      	; 0x1564 <_ZN9frt_queueIhE7butt_inERKh+0x1e>
    1562:	90 e0       	ldi	r25, 0x00	; 0
		}
    1564:	89 2f       	mov	r24, r25
    1566:	0f 91       	pop	r16
    1568:	08 95       	ret

0000156a <_ZN9frt_queueIhE3putERKh>:
		 *  an item into the front of the queue so it will be retreived first, use 
		 *  \c butt_in() instead. This method must \b not be used within an ISR.
		 *  @param item Reference to the item which is going to be put into the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool put (const data_type& item)
    156a:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToBack (handle, &item, ticks_to_wait)));
    156c:	fc 01       	movw	r30, r24
    156e:	26 81       	ldd	r18, Z+6	; 0x06
    1570:	37 81       	ldd	r19, Z+7	; 0x07
    1572:	40 85       	ldd	r20, Z+8	; 0x08
    1574:	51 85       	ldd	r21, Z+9	; 0x09
    1576:	00 e0       	ldi	r16, 0x00	; 0
    1578:	84 81       	ldd	r24, Z+4	; 0x04
    157a:	95 81       	ldd	r25, Z+5	; 0x05
    157c:	0e 94 99 12 	call	0x2532	; 0x2532 <xQueueGenericSend>
    1580:	91 e0       	ldi	r25, 0x01	; 1
    1582:	81 11       	cpse	r24, r1
    1584:	01 c0       	rjmp	.+2      	; 0x1588 <_ZN9frt_queueIhE3putERKh+0x1e>
    1586:	90 e0       	ldi	r25, 0x00	; 0
		}
    1588:	89 2f       	mov	r24, r25
    158a:	0f 91       	pop	r16
    158c:	08 95       	ret

0000158e <_ZN7MMA845113ActiveCommand11writePacketER9frt_queueIhE>:

bool MMA8451::takeReading()
{
  *p_serial << "mb1202 range cmd" << endl;
  return i2cAgent_->transmit(*activeCommand_);
}
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	8c 01       	movw	r16, r24
    1598:	eb 01       	movw	r28, r22
    159a:	bc 01       	movw	r22, r24
    159c:	6e 5f       	subi	r22, 0xFE	; 254
    159e:	7f 4f       	sbci	r23, 0xFF	; 255
    15a0:	e8 81       	ld	r30, Y
    15a2:	f9 81       	ldd	r31, Y+1	; 0x01
    15a4:	01 90       	ld	r0, Z+
    15a6:	f0 81       	ld	r31, Z
    15a8:	e0 2d       	mov	r30, r0
    15aa:	ce 01       	movw	r24, r28
    15ac:	19 95       	eicall
    15ae:	b8 01       	movw	r22, r16
    15b0:	6d 5f       	subi	r22, 0xFD	; 253
    15b2:	7f 4f       	sbci	r23, 0xFF	; 255
    15b4:	e8 81       	ld	r30, Y
    15b6:	f9 81       	ldd	r31, Y+1	; 0x01
    15b8:	01 90       	ld	r0, Z+
    15ba:	f0 81       	ld	r31, Z
    15bc:	e0 2d       	mov	r30, r0
    15be:	ce 01       	movw	r24, r28
    15c0:	19 95       	eicall
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	1f 91       	pop	r17
    15c8:	0f 91       	pop	r16
    15ca:	08 95       	ret

000015cc <_ZN7MMA8451C1EP9I2CMasterP8emstream>:
    15cc:	4f 92       	push	r4
    15ce:	5f 92       	push	r5
    15d0:	6f 92       	push	r6
    15d2:	7f 92       	push	r7
    15d4:	8f 92       	push	r8
    15d6:	9f 92       	push	r9
    15d8:	af 92       	push	r10
    15da:	bf 92       	push	r11
    15dc:	cf 92       	push	r12
    15de:	df 92       	push	r13
    15e0:	ef 92       	push	r14
    15e2:	ff 92       	push	r15
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	8c 01       	movw	r16, r24
    15ee:	7b 01       	movw	r14, r22
    15f0:	6a 01       	movw	r12, r20
    15f2:	dc 01       	movw	r26, r24
    15f4:	6d 93       	st	X+, r22
    15f6:	7c 93       	st	X, r23
    15f8:	11 97       	sbiw	r26, 0x01	; 1
    15fa:	12 96       	adiw	r26, 0x02	; 2
    15fc:	4d 93       	st	X+, r20
    15fe:	5c 93       	st	X, r21
    1600:	13 97       	sbiw	r26, 0x03	; 3
    1602:	8f e1       	ldi	r24, 0x1F	; 31
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <_Znwj>
    160a:	ec 01       	movw	r28, r24
    160c:	8f ec       	ldi	r24, 0xCF	; 207
    160e:	91 e2       	ldi	r25, 0x21	; 33
    1610:	88 83       	st	Y, r24
    1612:	99 83       	std	Y+1, r25	; 0x01
    1614:	1c 82       	std	Y+4, r1	; 0x04
    1616:	1d 82       	std	Y+5, r1	; 0x05
    1618:	0f 2e       	mov	r0, r31
    161a:	f7 e8       	ldi	r31, 0x87	; 135
    161c:	af 2e       	mov	r10, r31
    161e:	f1 e2       	ldi	r31, 0x21	; 33
    1620:	bf 2e       	mov	r11, r31
    1622:	f0 2d       	mov	r31, r0
    1624:	aa 82       	std	Y+2, r10	; 0x02
    1626:	bb 82       	std	Y+3, r11	; 0x03
    1628:	40 e0       	ldi	r20, 0x00	; 0
    162a:	61 e0       	ldi	r22, 0x01	; 1
    162c:	82 e0       	ldi	r24, 0x02	; 2
    162e:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <xQueueGenericCreate>
    1632:	8e 83       	std	Y+6, r24	; 0x06
    1634:	9f 83       	std	Y+7, r25	; 0x07
    1636:	0f 2e       	mov	r0, r31
    1638:	fa e0       	ldi	r31, 0x0A	; 10
    163a:	4f 2e       	mov	r4, r31
    163c:	51 2c       	mov	r5, r1
    163e:	61 2c       	mov	r6, r1
    1640:	71 2c       	mov	r7, r1
    1642:	f0 2d       	mov	r31, r0
    1644:	48 86       	std	Y+8, r4	; 0x08
    1646:	59 86       	std	Y+9, r5	; 0x09
    1648:	6a 86       	std	Y+10, r6	; 0x0a
    164a:	7b 86       	std	Y+11, r7	; 0x0b
    164c:	0f 2e       	mov	r0, r31
    164e:	fb ea       	ldi	r31, 0xAB	; 171
    1650:	8f 2e       	mov	r8, r31
    1652:	f1 e2       	ldi	r31, 0x21	; 33
    1654:	9f 2e       	mov	r9, r31
    1656:	f0 2d       	mov	r31, r0
    1658:	8a 82       	std	Y+2, r8	; 0x02
    165a:	9b 82       	std	Y+3, r9	; 0x03
    165c:	82 e0       	ldi	r24, 0x02	; 2
    165e:	8c 87       	std	Y+12, r24	; 0x0c
    1660:	1f 86       	std	Y+15, r1	; 0x0f
    1662:	18 8a       	std	Y+16, r1	; 0x10
    1664:	ad 86       	std	Y+13, r10	; 0x0d
    1666:	be 86       	std	Y+14, r11	; 0x0e
    1668:	40 e0       	ldi	r20, 0x00	; 0
    166a:	61 e0       	ldi	r22, 0x01	; 1
    166c:	83 e0       	ldi	r24, 0x03	; 3
    166e:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <xQueueGenericCreate>
    1672:	89 8b       	std	Y+17, r24	; 0x11
    1674:	9a 8b       	std	Y+18, r25	; 0x12
    1676:	4b 8a       	std	Y+19, r4	; 0x13
    1678:	5c 8a       	std	Y+20, r5	; 0x14
    167a:	6d 8a       	std	Y+21, r6	; 0x15
    167c:	7e 8a       	std	Y+22, r7	; 0x16
    167e:	8d 86       	std	Y+13, r8	; 0x0d
    1680:	9e 86       	std	Y+14, r9	; 0x0e
    1682:	83 e0       	ldi	r24, 0x03	; 3
    1684:	8f 8b       	std	Y+23, r24	; 0x17
    1686:	80 e1       	ldi	r24, 0x10	; 16
    1688:	90 e2       	ldi	r25, 0x20	; 32
    168a:	88 83       	st	Y, r24
    168c:	99 83       	std	Y+1, r25	; 0x01
    168e:	c8 8e       	std	Y+24, r12	; 0x18
    1690:	d9 8e       	std	Y+25, r13	; 0x19
    1692:	f8 01       	movw	r30, r16
    1694:	c4 83       	std	Z+4, r28	; 0x04
    1696:	d5 83       	std	Z+5, r29	; 0x05
    1698:	8d e1       	ldi	r24, 0x1D	; 29
    169a:	86 83       	std	Z+6, r24	; 0x06
    169c:	84 e0       	ldi	r24, 0x04	; 4
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <_Znwj>
    16a4:	fc 01       	movw	r30, r24
    16a6:	8d ed       	ldi	r24, 0xDD	; 221
    16a8:	91 e2       	ldi	r25, 0x21	; 33
    16aa:	80 83       	st	Z, r24
    16ac:	91 83       	std	Z+1, r25	; 0x01
    16ae:	8a e2       	ldi	r24, 0x2A	; 42
    16b0:	82 83       	std	Z+2, r24	; 0x02
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	83 83       	std	Z+3, r24	; 0x03
    16b6:	d8 01       	movw	r26, r16
    16b8:	19 96       	adiw	r26, 0x09	; 9
    16ba:	ed 93       	st	X+, r30
    16bc:	fc 93       	st	X, r31
    16be:	1a 97       	sbiw	r26, 0x0a	; 10
    16c0:	14 96       	adiw	r26, 0x04	; 4
    16c2:	ed 91       	ld	r30, X+
    16c4:	fc 91       	ld	r31, X
    16c6:	15 97       	sbiw	r26, 0x05	; 5
    16c8:	e2 8e       	std	Z+26, r14	; 0x1a
    16ca:	f3 8e       	std	Z+27, r15	; 0x1b
    16cc:	16 96       	adiw	r26, 0x06	; 6
    16ce:	6c 91       	ld	r22, X
    16d0:	16 97       	sbiw	r26, 0x06	; 6
    16d2:	14 96       	adiw	r26, 0x04	; 4
    16d4:	8d 91       	ld	r24, X+
    16d6:	9c 91       	ld	r25, X
    16d8:	15 97       	sbiw	r26, 0x05	; 5
    16da:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8I2CAgent12setSlaveAddrEh>
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	1f 91       	pop	r17
    16e4:	0f 91       	pop	r16
    16e6:	ff 90       	pop	r15
    16e8:	ef 90       	pop	r14
    16ea:	df 90       	pop	r13
    16ec:	cf 90       	pop	r12
    16ee:	bf 90       	pop	r11
    16f0:	af 90       	pop	r10
    16f2:	9f 90       	pop	r9
    16f4:	8f 90       	pop	r8
    16f6:	7f 90       	pop	r7
    16f8:	6f 90       	pop	r6
    16fa:	5f 90       	pop	r5
    16fc:	4f 90       	pop	r4
    16fe:	08 95       	ret

00001700 <_ZN7MMA845110getReadingEv>:

uint16_t MMA8451::getReading()
{
    1700:	ff 92       	push	r15
    1702:	0f 93       	push	r16
    1704:	1f 93       	push	r17
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	ec 01       	movw	r28, r24
  Packet & data = i2cAgent_->receive();
    170c:	8c 81       	ldd	r24, Y+4	; 0x04
    170e:	9d 81       	ldd	r25, Y+5	; 0x05
    1710:	dc 01       	movw	r26, r24
    1712:	ed 91       	ld	r30, X+
    1714:	fc 91       	ld	r31, X
    1716:	02 80       	ldd	r0, Z+2	; 0x02
    1718:	f3 81       	ldd	r31, Z+3	; 0x03
    171a:	e0 2d       	mov	r30, r0
    171c:	19 95       	eicall
    171e:	8c 01       	movw	r16, r24
  reading_ = ((uint16_t) data.get() << 8) | ((uint16_t) data.get());
    1720:	dc 01       	movw	r26, r24
    1722:	ed 91       	ld	r30, X+
    1724:	fc 91       	ld	r31, X
    1726:	00 84       	ldd	r0, Z+8	; 0x08
    1728:	f1 85       	ldd	r31, Z+9	; 0x09
    172a:	e0 2d       	mov	r30, r0
    172c:	19 95       	eicall
    172e:	f8 2e       	mov	r15, r24
    1730:	d8 01       	movw	r26, r16
    1732:	ed 91       	ld	r30, X+
    1734:	fc 91       	ld	r31, X
    1736:	00 84       	ldd	r0, Z+8	; 0x08
    1738:	f1 85       	ldd	r31, Z+9	; 0x09
    173a:	e0 2d       	mov	r30, r0
    173c:	c8 01       	movw	r24, r16
    173e:	19 95       	eicall
    1740:	2f 2d       	mov	r18, r15
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	32 2f       	mov	r19, r18
    1746:	22 27       	eor	r18, r18
    1748:	a9 01       	movw	r20, r18
    174a:	48 2b       	or	r20, r24
    174c:	ca 01       	movw	r24, r20
    174e:	8f 83       	std	Y+7, r24	; 0x07
    1750:	98 87       	std	Y+8, r25	; 0x08
  return reading_;
}
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	ff 90       	pop	r15
    175c:	08 95       	ret

0000175e <_ZN6Packet12resetContentEv>:
#include "Packet.h"

void Packet::resetContent()
{
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
    1762:	ec 01       	movw	r28, r24
  while( not_empty() )
    1764:	e8 81       	ld	r30, Y
    1766:	f9 81       	ldd	r31, Y+1	; 0x01
    1768:	00 8c       	ldd	r0, Z+24	; 0x18
    176a:	f1 8d       	ldd	r31, Z+25	; 0x19
    176c:	e0 2d       	mov	r30, r0
    176e:	ce 01       	movw	r24, r28
    1770:	19 95       	eicall
    1772:	88 23       	and	r24, r24
    1774:	41 f0       	breq	.+16     	; 0x1786 <_ZN6Packet12resetContentEv+0x28>
  {
    get();
    1776:	e8 81       	ld	r30, Y
    1778:	f9 81       	ldd	r31, Y+1	; 0x01
    177a:	00 84       	ldd	r0, Z+8	; 0x08
    177c:	f1 85       	ldd	r31, Z+9	; 0x09
    177e:	e0 2d       	mov	r30, r0
    1780:	ce 01       	movw	r24, r28
    1782:	19 95       	eicall
#include "Packet.h"

void Packet::resetContent()
{
  while( not_empty() )
    1784:	ef cf       	rjmp	.-34     	; 0x1764 <_ZN6Packet12resetContentEv+0x6>
  {
    get();
  }
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	08 95       	ret

0000178c <_ZN10task_sonar3runEv>:
 *  is just following the modern government model of "This is the land of the free...
 *  free to do exactly what you're told." 
 */

void task_sonar::run (void)
{
    178c:	ec 01       	movw	r28, r24
	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
	{
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
    178e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	e1 f4       	brne	.+56     	; 0x17cc <_ZN10task_sonar3runEv+0x40>
			
			  break;
				
			case (1):
			
				rangeReading_ = mma8451_->getReading();
    1794:	8c 89       	ldd	r24, Y+20	; 0x14
    1796:	9d 89       	ldd	r25, Y+21	; 0x15
    1798:	0e 94 80 0b 	call	0x1700	; 0x1700 <_ZN7MMA845110getReadingEv>
    179c:	7c 01       	movw	r14, r24
    179e:	8a 8b       	std	Y+18, r24	; 0x12
    17a0:	9b 8b       	std	Y+19, r25	; 0x13
				*p_serial << PMS ("Sonar: ") << rangeReading_ << endl;
    17a2:	6a e0       	ldi	r22, 0x0A	; 10
    17a4:	8e 81       	ldd	r24, Y+6	; 0x06
    17a6:	9f 81       	ldd	r25, Y+7	; 0x07
    17a8:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    17ac:	8c 01       	movw	r16, r24
    17ae:	6a ea       	ldi	r22, 0xAA	; 170
    17b0:	73 e0       	ldi	r23, 0x03	; 3
    17b2:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    17b6:	b7 01       	movw	r22, r14
    17b8:	c8 01       	movw	r24, r16
    17ba:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <_ZN8emstreamlsEj>
    17be:	66 e0       	ldi	r22, 0x06	; 6
    17c0:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
				
				transition_to(0);
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	ce 01       	movw	r24, r28
    17c8:	0e 94 c5 19 	call	0x338a	; 0x338a <_ZN8frt_task13transition_toEh>
				break;
			

		} // End switch state

		runs++;                             // Increment counter for debugging
    17cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    17ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    17d0:	a8 89       	ldd	r26, Y+16	; 0x10
    17d2:	b9 89       	ldd	r27, Y+17	; 0x11
    17d4:	01 96       	adiw	r24, 0x01	; 1
    17d6:	a1 1d       	adc	r26, r1
    17d8:	b1 1d       	adc	r27, r1
    17da:	8e 87       	std	Y+14, r24	; 0x0e
    17dc:	9f 87       	std	Y+15, r25	; 0x0f
    17de:	a8 8b       	std	Y+16, r26	; 0x10
    17e0:	b9 8b       	std	Y+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (1000));
    17e2:	68 ee       	ldi	r22, 0xE8	; 232
    17e4:	73 e0       	ldi	r23, 0x03	; 3
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	0e 94 99 17 	call	0x2f32	; 0x2f32 <vTaskDelay>
	uint8_t addrs[10];
	

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
    17ee:	cf cf       	rjmp	.-98     	; 0x178e <_ZN10task_sonar3runEv+0x2>

000017f0 <_ZN10task_sonarC1EPKchjP8emstreamP7MMA8451>:
 *                      (default: configMINIMAL_STACK_SIZE)
 *  @param p_ser_dev Pointer to a serial device (port, radio, SD card, etc.) which can
 *                   be used by this task to communicate (default: NULL)
 */

task_sonar::task_sonar (const char* a_name, 
    17f0:	cf 92       	push	r12
    17f2:	df 92       	push	r13
    17f4:	ef 92       	push	r14
    17f6:	ff 92       	push	r15
    17f8:	0f 93       	push	r16
    17fa:	1f 93       	push	r17
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	ec 01       	movw	r28, r24
    1802:	6b 01       	movw	r12, r22
					  size_t a_stack_size,
					  emstream* p_ser_dev,
					  MMA8451 * mma8451
					 )
	: frt_task (a_name, a_priority, a_stack_size, p_ser_dev), 
		mma8451_(mma8451)
    1804:	0e 94 c9 19 	call	0x3392	; 0x3392 <_ZN8frt_taskC1EPKchjP8emstream>
    1808:	83 ee       	ldi	r24, 0xE3	; 227
    180a:	91 e2       	ldi	r25, 0x21	; 33
    180c:	88 83       	st	Y, r24
    180e:	99 83       	std	Y+1, r25	; 0x01
    1810:	ec 8a       	std	Y+20, r14	; 0x14
    1812:	fd 8a       	std	Y+21, r15	; 0x15
{
	task_name = a_name;
    1814:	ce 8a       	std	Y+22, r12	; 0x16
    1816:	df 8a       	std	Y+23, r13	; 0x17
}
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	ff 90       	pop	r15
    1822:	ef 90       	pop	r14
    1824:	df 90       	pop	r13
    1826:	cf 90       	pop	r12
    1828:	08 95       	ret

0000182a <_ZN9task_userC1EPKchjP8emstream>:
 *                      (default: configMINIMAL_STACK_SIZE)
 *  @param p_ser_dev Pointer to a serial device (port, radio, SD card, etc.) which can
 *                   be used by this task to communicate (default: NULL)
 */

task_user::task_user (const char* a_name, 
    182a:	0f 93       	push	r16
    182c:	1f 93       	push	r17
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	ec 01       	movw	r28, r24
					  unsigned portBASE_TYPE a_priority, 
					  size_t a_stack_size,
					  emstream* p_ser_dev
					 )
	: frt_task (a_name, a_priority, a_stack_size, p_ser_dev)
    1834:	0e 94 c9 19 	call	0x3392	; 0x3392 <_ZN8frt_taskC1EPKchjP8emstream>
    1838:	8b ee       	ldi	r24, 0xEB	; 235
    183a:	91 e2       	ldi	r25, 0x21	; 33
    183c:	88 83       	st	Y, r24
    183e:	99 83       	std	Y+1, r25	; 0x01
{
	// Nothing is done in the body of this constructor. All the work is done in the
	// call to the frt_task constructor on the line just above this one
}
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	1f 91       	pop	r17
    1846:	0f 91       	pop	r16
    1848:	08 95       	ret

0000184a <_ZN9task_user18print_help_messageEv>:
//-------------------------------------------------------------------------------------
/** This method prints a simple help message.
 */

void task_user::print_help_message (void)
{
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	ec 01       	movw	r28, r24
	*p_serial << ATERM_BKG_CYAN << ATERM_TXT_BLACK << clrscr;
    1854:	6a e0       	ldi	r22, 0x0A	; 10
    1856:	8e 81       	ldd	r24, Y+6	; 0x06
    1858:	9f 81       	ldd	r25, Y+7	; 0x07
    185a:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    185e:	8c 01       	movw	r16, r24
    1860:	65 e0       	ldi	r22, 0x05	; 5
    1862:	75 e0       	ldi	r23, 0x05	; 5
    1864:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    1868:	6a e0       	ldi	r22, 0x0A	; 10
    186a:	c8 01       	movw	r24, r16
    186c:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    1870:	8c 01       	movw	r16, r24
    1872:	6f ef       	ldi	r22, 0xFF	; 255
    1874:	74 e0       	ldi	r23, 0x04	; 4
    1876:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    187a:	67 e0       	ldi	r22, 0x07	; 7
    187c:	c8 01       	movw	r24, r16
    187e:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PROGRAM_VERSION << PMS (" help") << endl;
    1882:	6a e0       	ldi	r22, 0x0A	; 10
    1884:	8e 81       	ldd	r24, Y+6	; 0x06
    1886:	9f 81       	ldd	r25, Y+7	; 0x07
    1888:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    188c:	8c 01       	movw	r16, r24
    188e:	60 ee       	ldi	r22, 0xE0	; 224
    1890:	74 e0       	ldi	r23, 0x04	; 4
    1892:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    1896:	6a e0       	ldi	r22, 0x0A	; 10
    1898:	c8 01       	movw	r24, r16
    189a:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    189e:	8c 01       	movw	r16, r24
    18a0:	6a ed       	ldi	r22, 0xDA	; 218
    18a2:	74 e0       	ldi	r23, 0x04	; 4
    18a4:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    18a8:	66 e0       	ldi	r22, 0x06	; 6
    18aa:	c8 01       	movw	r24, r16
    18ac:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("  Ctl-C: Reset the AVR") << endl;
    18b0:	6a e0       	ldi	r22, 0x0A	; 10
    18b2:	8e 81       	ldd	r24, Y+6	; 0x06
    18b4:	9f 81       	ldd	r25, Y+7	; 0x07
    18b6:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    18ba:	8c 01       	movw	r16, r24
    18bc:	63 ec       	ldi	r22, 0xC3	; 195
    18be:	74 e0       	ldi	r23, 0x04	; 4
    18c0:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    18c4:	66 e0       	ldi	r22, 0x06	; 6
    18c6:	c8 01       	movw	r24, r16
    18c8:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("  Ctl-A: Enter command mode") << endl;
    18cc:	6a e0       	ldi	r22, 0x0A	; 10
    18ce:	8e 81       	ldd	r24, Y+6	; 0x06
    18d0:	9f 81       	ldd	r25, Y+7	; 0x07
    18d2:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    18d6:	8c 01       	movw	r16, r24
    18d8:	67 ea       	ldi	r22, 0xA7	; 167
    18da:	74 e0       	ldi	r23, 0x04	; 4
    18dc:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    18e0:	66 e0       	ldi	r22, 0x06	; 6
    18e2:	c8 01       	movw	r24, r16
    18e4:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("  In command mode only:") << endl;
    18e8:	6a e0       	ldi	r22, 0x0A	; 10
    18ea:	8e 81       	ldd	r24, Y+6	; 0x06
    18ec:	9f 81       	ldd	r25, Y+7	; 0x07
    18ee:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    18f2:	8c 01       	movw	r16, r24
    18f4:	6f e8       	ldi	r22, 0x8F	; 143
    18f6:	74 e0       	ldi	r23, 0x04	; 4
    18f8:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    18fc:	66 e0       	ldi	r22, 0x06	; 6
    18fe:	c8 01       	movw	r24, r16
    1900:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    n:   Show the time right now") << endl;
    1904:	6a e0       	ldi	r22, 0x0A	; 10
    1906:	8e 81       	ldd	r24, Y+6	; 0x06
    1908:	9f 81       	ldd	r25, Y+7	; 0x07
    190a:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    190e:	8c 01       	movw	r16, r24
    1910:	6e e6       	ldi	r22, 0x6E	; 110
    1912:	74 e0       	ldi	r23, 0x04	; 4
    1914:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    1918:	66 e0       	ldi	r22, 0x06	; 6
    191a:	c8 01       	movw	r24, r16
    191c:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    v:   Version and setup information") << endl;
    1920:	6a e0       	ldi	r22, 0x0A	; 10
    1922:	8e 81       	ldd	r24, Y+6	; 0x06
    1924:	9f 81       	ldd	r25, Y+7	; 0x07
    1926:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    192a:	8c 01       	movw	r16, r24
    192c:	67 e4       	ldi	r22, 0x47	; 71
    192e:	74 e0       	ldi	r23, 0x04	; 4
    1930:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    1934:	66 e0       	ldi	r22, 0x06	; 6
    1936:	c8 01       	movw	r24, r16
    1938:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    s:   Stack dump for tasks") << endl;
    193c:	6a e0       	ldi	r22, 0x0A	; 10
    193e:	8e 81       	ldd	r24, Y+6	; 0x06
    1940:	9f 81       	ldd	r25, Y+7	; 0x07
    1942:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    1946:	8c 01       	movw	r16, r24
    1948:	69 e2       	ldi	r22, 0x29	; 41
    194a:	74 e0       	ldi	r23, 0x04	; 4
    194c:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    1950:	66 e0       	ldi	r22, 0x06	; 6
    1952:	c8 01       	movw	r24, r16
    1954:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    e:   Exit command mode") << endl;
    1958:	6a e0       	ldi	r22, 0x0A	; 10
    195a:	8e 81       	ldd	r24, Y+6	; 0x06
    195c:	9f 81       	ldd	r25, Y+7	; 0x07
    195e:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    1962:	8c 01       	movw	r16, r24
    1964:	6e e0       	ldi	r22, 0x0E	; 14
    1966:	74 e0       	ldi	r23, 0x04	; 4
    1968:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    196c:	66 e0       	ldi	r22, 0x06	; 6
    196e:	c8 01       	movw	r24, r16
    1970:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    h:   HALP!") << endl;
    1974:	6a e0       	ldi	r22, 0x0A	; 10
    1976:	8e 81       	ldd	r24, Y+6	; 0x06
    1978:	9f 81       	ldd	r25, Y+7	; 0x07
    197a:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    197e:	ec 01       	movw	r28, r24
    1980:	6f ef       	ldi	r22, 0xFF	; 255
    1982:	73 e0       	ldi	r23, 0x03	; 3
    1984:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    1988:	66 e0       	ldi	r22, 0x06	; 6
    198a:	ce 01       	movw	r24, r28
    198c:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
}
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	08 95       	ret

0000199a <_ZN9task_user11show_statusEv>:
 *    \li Processor cycles used by each task
 *    \li Amount of heap space free and setting of RTOS tick timer
 */

void task_user::show_status (void)
{
    199a:	af 92       	push	r10
    199c:	bf 92       	push	r11
    199e:	cf 92       	push	r12
    19a0:	df 92       	push	r13
    19a2:	ef 92       	push	r14
    19a4:	ff 92       	push	r15
    19a6:	0f 93       	push	r16
    19a8:	1f 93       	push	r17
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <_ZN9task_user11show_statusEv+0x16>
    19b0:	00 d0       	rcall	.+0      	; 0x19b2 <_ZN9task_user11show_statusEv+0x18>
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	8c 01       	movw	r16, r24
	public:
		/** This constructor creates a time stamp with its time set to zero.
		 */
		time_stamp (void)
		{
			tick_count = 0;
    19b8:	19 82       	std	Y+1, r1	; 0x01
    19ba:	1a 82       	std	Y+2, r1	; 0x02
    19bc:	1b 82       	std	Y+3, r1	; 0x03
    19be:	1c 82       	std	Y+4, r1	; 0x04
			hardware_count = 0;
    19c0:	1d 82       	std	Y+5, r1	; 0x05
    19c2:	1e 82       	std	Y+6, r1	; 0x06
		 *  means that the number returned is how many bytes are currently unused. 
		 *  @return The approximate number of bytes left for use in the heap
		 */
		size_t heap_left (void)
		{
			return (xPortGetFreeHeapSize ());
    19c4:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <xPortGetFreeHeapSize>
    19c8:	6c 01       	movw	r12, r24
	time_stamp the_time;					// Holds current time for printing

	// Show program vesion, time, and free heap space
	*p_serial << endl << PROGRAM_VERSION << PMS (__DATE__) << endl 
			  << PMS ("Time: ") << the_time.set_to_now ()
    19ca:	ce 01       	movw	r24, r28
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <_ZN10time_stamp10set_to_nowEv>
    19d2:	5c 01       	movw	r10, r24
void task_user::show_status (void)
{
	time_stamp the_time;					// Holds current time for printing

	// Show program vesion, time, and free heap space
	*p_serial << endl << PROGRAM_VERSION << PMS (__DATE__) << endl 
    19d4:	66 e0       	ldi	r22, 0x06	; 6
    19d6:	f8 01       	movw	r30, r16
    19d8:	86 81       	ldd	r24, Z+6	; 0x06
    19da:	97 81       	ldd	r25, Z+7	; 0x07
    19dc:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    19e0:	6a e0       	ldi	r22, 0x0A	; 10
    19e2:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    19e6:	7c 01       	movw	r14, r24
    19e8:	60 ee       	ldi	r22, 0xE0	; 224
    19ea:	73 e0       	ldi	r23, 0x03	; 3
    19ec:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    19f0:	6a e0       	ldi	r22, 0x0A	; 10
    19f2:	c7 01       	movw	r24, r14
    19f4:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    19f8:	7c 01       	movw	r14, r24
    19fa:	64 ed       	ldi	r22, 0xD4	; 212
    19fc:	73 e0       	ldi	r23, 0x03	; 3
    19fe:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    1a02:	66 e0       	ldi	r22, 0x06	; 6
    1a04:	c7 01       	movw	r24, r14
    1a06:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
			  << PMS ("Time: ") << the_time.set_to_now ()
    1a0a:	6a e0       	ldi	r22, 0x0A	; 10
    1a0c:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    1a10:	7c 01       	movw	r14, r24
    1a12:	6d ec       	ldi	r22, 0xCD	; 205
    1a14:	73 e0       	ldi	r23, 0x03	; 3
    1a16:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    1a1a:	b5 01       	movw	r22, r10
    1a1c:	c7 01       	movw	r24, r14
    1a1e:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_ZlsR8emstreamR10time_stamp>
			  << PMS (", Heap free: ") << heap_left() << PMS ("/") 
    1a22:	6a e0       	ldi	r22, 0x0A	; 10
    1a24:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    1a28:	7c 01       	movw	r14, r24
    1a2a:	6f eb       	ldi	r22, 0xBF	; 191
    1a2c:	73 e0       	ldi	r23, 0x03	; 3
    1a2e:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    1a32:	b6 01       	movw	r22, r12
    1a34:	c7 01       	movw	r24, r14
    1a36:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <_ZN8emstreamlsEj>
    1a3a:	6a e0       	ldi	r22, 0x0A	; 10
    1a3c:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    1a40:	7c 01       	movw	r14, r24
    1a42:	6d eb       	ldi	r22, 0xBD	; 189
    1a44:	73 e0       	ldi	r23, 0x03	; 3
    1a46:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
			  << configTOTAL_HEAP_SIZE;
    1a4a:	4f ef       	ldi	r20, 0xFF	; 255
    1a4c:	5f e0       	ldi	r21, 0x0F	; 15
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	70 e0       	ldi	r23, 0x00	; 0
    1a52:	c7 01       	movw	r24, r14
    1a54:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <_ZN8emstreamlsEm>

	// Show how the timer/counter is set up to cause RTOS timer ticks
	*p_serial << PMS (", TCC0CCA=") << TCC0.CCA << endl << endl;
    1a58:	c0 90 28 08 	lds	r12, 0x0828	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1a5c:	d0 90 29 08 	lds	r13, 0x0829	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    1a60:	6a e0       	ldi	r22, 0x0A	; 10
    1a62:	f8 01       	movw	r30, r16
    1a64:	86 81       	ldd	r24, Z+6	; 0x06
    1a66:	97 81       	ldd	r25, Z+7	; 0x07
    1a68:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    1a6c:	7c 01       	movw	r14, r24
    1a6e:	62 eb       	ldi	r22, 0xB2	; 178
    1a70:	73 e0       	ldi	r23, 0x03	; 3
    1a72:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    1a76:	b6 01       	movw	r22, r12
    1a78:	c7 01       	movw	r24, r14
    1a7a:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <_ZN8emstreamlsEj>
    1a7e:	66 e0       	ldi	r22, 0x06	; 6
    1a80:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    1a84:	66 e0       	ldi	r22, 0x06	; 6
    1a86:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>

	// Have the tasks print their status
	print_task_list (p_serial);
    1a8a:	f8 01       	movw	r30, r16
    1a8c:	86 81       	ldd	r24, Z+6	; 0x06
    1a8e:	97 81       	ldd	r25, Z+7	; 0x07
    1a90:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <_Z15print_task_listP8emstream>
}
    1a94:	26 96       	adiw	r28, 0x06	; 6
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	de bf       	out	0x3e, r29	; 62
    1a9a:	df 91       	pop	r29
    1a9c:	cf 91       	pop	r28
    1a9e:	1f 91       	pop	r17
    1aa0:	0f 91       	pop	r16
    1aa2:	ff 90       	pop	r15
    1aa4:	ef 90       	pop	r14
    1aa6:	df 90       	pop	r13
    1aa8:	cf 90       	pop	r12
    1aaa:	bf 90       	pop	r11
    1aac:	af 90       	pop	r10
    1aae:	08 95       	ret

00001ab0 <_ZN9task_user3runEv>:
 *  is just following the modern government model of "This is the land of the free...
 *  free to do exactly what you're told." 
 */

void task_user::run (void)
{
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	00 d0       	rcall	.+0      	; 0x1ab6 <_ZN9task_user3runEv+0x6>
    1ab6:	00 d0       	rcall	.+0      	; 0x1ab8 <_ZN9task_user3runEv+0x8>
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
    1abc:	8c 01       	movw	r16, r24
	public:
		/** This constructor creates a time stamp with its time set to zero.
		 */
		time_stamp (void)
		{
			tick_count = 0;
    1abe:	19 82       	std	Y+1, r1	; 0x01
    1ac0:	1a 82       	std	Y+2, r1	; 0x02
    1ac2:	1b 82       	std	Y+3, r1	; 0x03
    1ac4:	1c 82       	std	Y+4, r1	; 0x04
			hardware_count = 0;
    1ac6:	1d 82       	std	Y+5, r1	; 0x05
    1ac8:	1e 82       	std	Y+6, r1	; 0x06
	char char_in;                           // Character read from serial device
	time_stamp a_time;                      // Holds the time so it can be displayed

	// Tell the user how to get into command mode (state 1), where the user interface
	// task does interesting things such as diagnostic printouts
	*p_serial << PMS ("Press Ctrl-A for command mode") << endl;
    1aca:	6a e0       	ldi	r22, 0x0A	; 10
    1acc:	dc 01       	movw	r26, r24
    1ace:	16 96       	adiw	r26, 0x06	; 6
    1ad0:	8d 91       	ld	r24, X+
    1ad2:	9c 91       	ld	r25, X
    1ad4:	17 97       	sbiw	r26, 0x07	; 7
    1ad6:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    1ada:	7c 01       	movw	r14, r24
    1adc:	6e e4       	ldi	r22, 0x4E	; 78
    1ade:	75 e0       	ldi	r23, 0x05	; 5
    1ae0:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    1ae4:	66 e0       	ldi	r22, 0x06	; 6
    1ae6:	c7 01       	movw	r24, r14
    1ae8:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
	{
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
    1aec:	f8 01       	movw	r30, r16
    1aee:	84 85       	ldd	r24, Z+12	; 0x0c
    1af0:	88 23       	and	r24, r24
    1af2:	21 f0       	breq	.+8      	; 0x1afc <_ZN9task_user3runEv+0x4c>
    1af4:	81 30       	cpi	r24, 0x01	; 1
    1af6:	09 f4       	brne	.+2      	; 0x1afa <_ZN9task_user3runEv+0x4a>
    1af8:	5d c0       	rjmp	.+186    	; 0x1bb4 <_ZN9task_user3runEv+0x104>
    1afa:	d8 c0       	rjmp	.+432    	; 0x1cac <_ZN9task_user3runEv+0x1fc>
		{
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 0, we transparently relay characters from the radio to the USB 
			// serial port and vice versa but watch for certain control characters
			case (0):
				if (p_serial->check_for_char ())        // If the user typed a
    1afc:	86 81       	ldd	r24, Z+6	; 0x06
    1afe:	97 81       	ldd	r25, Z+7	; 0x07
    1b00:	dc 01       	movw	r26, r24
    1b02:	ed 91       	ld	r30, X+
    1b04:	fc 91       	ld	r31, X
    1b06:	04 80       	ldd	r0, Z+4	; 0x04
    1b08:	f5 81       	ldd	r31, Z+5	; 0x05
    1b0a:	e0 2d       	mov	r30, r0
    1b0c:	19 95       	eicall
    1b0e:	88 23       	and	r24, r24
    1b10:	a9 f1       	breq	.+106    	; 0x1b7c <_ZN9task_user3runEv+0xcc>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    1b12:	f8 01       	movw	r30, r16
    1b14:	86 81       	ldd	r24, Z+6	; 0x06
    1b16:	97 81       	ldd	r25, Z+7	; 0x07
    1b18:	dc 01       	movw	r26, r24
    1b1a:	ed 91       	ld	r30, X+
    1b1c:	fc 91       	ld	r31, X
    1b1e:	06 80       	ldd	r0, Z+6	; 0x06
    1b20:	f7 81       	ldd	r31, Z+7	; 0x07
    1b22:	e0 2d       	mov	r30, r0
    1b24:	19 95       	eicall

					// In this switch statement, we respond to different characters
					switch (char_in)
    1b26:	99 27       	eor	r25, r25
    1b28:	81 30       	cpi	r24, 0x01	; 1
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	f9 f0       	breq	.+62     	; 0x1b6c <_ZN9task_user3runEv+0xbc>
    1b2e:	03 97       	sbiw	r24, 0x03	; 3
    1b30:	09 f0       	breq	.+2      	; 0x1b34 <_ZN9task_user3runEv+0x84>
    1b32:	d8 c0       	rjmp	.+432    	; 0x1ce4 <_ZN9task_user3runEv+0x234>
					{
						// Control-C means reset the AVR computer
						case (3):
							*p_serial << PMS ("Resetting AVR") << endl;
    1b34:	6a e0       	ldi	r22, 0x0A	; 10
    1b36:	f8 01       	movw	r30, r16
    1b38:	86 81       	ldd	r24, Z+6	; 0x06
    1b3a:	97 81       	ldd	r25, Z+7	; 0x07
    1b3c:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    1b40:	8c 01       	movw	r16, r24
    1b42:	60 e4       	ldi	r22, 0x40	; 64
    1b44:	75 e0       	ldi	r23, 0x05	; 5
    1b46:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    1b4a:	66 e0       	ldi	r22, 0x06	; 6
    1b4c:	c8 01       	movw	r24, r16
    1b4e:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
							wdt_enable (WDTO_120MS);
    1b52:	93 e0       	ldi	r25, 0x03	; 3
    1b54:	88 ed       	ldi	r24, 0xD8	; 216
    1b56:	08 b6       	in	r0, 0x38	; 56
    1b58:	18 be       	out	0x38, r1	; 56
    1b5a:	84 bf       	out	0x34, r24	; 52
    1b5c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1b60:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    1b64:	81 fd       	sbrc	r24, 1
    1b66:	fc cf       	rjmp	.-8      	; 0x1b60 <_ZN9task_user3runEv+0xb0>
    1b68:	08 be       	out	0x38, r0	; 56
    1b6a:	ff cf       	rjmp	.-2      	; 0x1b6a <_ZN9task_user3runEv+0xba>
							for (;;);
							break;

						// Control-A puts this task in command mode
						case (1):
							print_help_message ();
    1b6c:	c8 01       	movw	r24, r16
    1b6e:	0e 94 25 0c 	call	0x184a	; 0x184a <_ZN9task_user18print_help_messageEv>
							transition_to (1);
    1b72:	61 e0       	ldi	r22, 0x01	; 1
    1b74:	c8 01       	movw	r24, r16
    1b76:	0e 94 c5 19 	call	0x338a	; 0x338a <_ZN8frt_task13transition_toEh>
							break;
    1b7a:	b4 c0       	rjmp	.+360    	; 0x1ce4 <_ZN9task_user3runEv+0x234>
					};
				}

				// Check the print queue to see if another task has sent this task 
				// something to be printed
				else if (print_ser_queue.check_for_char ())
    1b7c:	8e e5       	ldi	r24, 0x5E	; 94
    1b7e:	93 e3       	ldi	r25, 0x33	; 51
    1b80:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN14frt_text_queue14check_for_charEv>
    1b84:	88 23       	and	r24, r24
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <_ZN9task_user3runEv+0xda>
    1b88:	ad c0       	rjmp	.+346    	; 0x1ce4 <_ZN9task_user3runEv+0x234>
				{
					p_serial->putchar (print_ser_queue.getchar ());
    1b8a:	d8 01       	movw	r26, r16
    1b8c:	16 96       	adiw	r26, 0x06	; 6
    1b8e:	ed 91       	ld	r30, X+
    1b90:	fc 91       	ld	r31, X
    1b92:	17 97       	sbiw	r26, 0x07	; 7
    1b94:	01 90       	ld	r0, Z+
    1b96:	f0 81       	ld	r31, Z
    1b98:	e0 2d       	mov	r30, r0
    1b9a:	e2 80       	ldd	r14, Z+2	; 0x02
    1b9c:	f3 80       	ldd	r15, Z+3	; 0x03
    1b9e:	8e e5       	ldi	r24, 0x5E	; 94
    1ba0:	93 e3       	ldi	r25, 0x33	; 51
    1ba2:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <_ZN14frt_text_queue7getcharEv>
    1ba6:	68 2f       	mov	r22, r24
    1ba8:	f8 01       	movw	r30, r16
    1baa:	86 81       	ldd	r24, Z+6	; 0x06
    1bac:	97 81       	ldd	r25, Z+7	; 0x07
    1bae:	f7 01       	movw	r30, r14
    1bb0:	19 95       	eicall
    1bb2:	98 c0       	rjmp	.+304    	; 0x1ce4 <_ZN9task_user3runEv+0x234>

			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 1, we're in command mode, so when the user types characters, the
			// characters are interpreted as commands to do something
			case (1):
				if (p_serial->check_for_char ())				// If the user typed a
    1bb4:	86 81       	ldd	r24, Z+6	; 0x06
    1bb6:	97 81       	ldd	r25, Z+7	; 0x07
    1bb8:	dc 01       	movw	r26, r24
    1bba:	ed 91       	ld	r30, X+
    1bbc:	fc 91       	ld	r31, X
    1bbe:	04 80       	ldd	r0, Z+4	; 0x04
    1bc0:	f5 81       	ldd	r31, Z+5	; 0x05
    1bc2:	e0 2d       	mov	r30, r0
    1bc4:	19 95       	eicall
    1bc6:	88 23       	and	r24, r24
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <_ZN9task_user3runEv+0x11c>
    1bca:	8c c0       	rjmp	.+280    	; 0x1ce4 <_ZN9task_user3runEv+0x234>
				{											// character, read
					char_in = p_serial->getchar ();			// the character
    1bcc:	f8 01       	movw	r30, r16
    1bce:	86 81       	ldd	r24, Z+6	; 0x06
    1bd0:	97 81       	ldd	r25, Z+7	; 0x07
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	ed 91       	ld	r30, X+
    1bd6:	fc 91       	ld	r31, X
    1bd8:	06 80       	ldd	r0, Z+6	; 0x06
    1bda:	f7 81       	ldd	r31, Z+7	; 0x07
    1bdc:	e0 2d       	mov	r30, r0
    1bde:	19 95       	eicall

					// In this switch statement, we respond to different characters as
					// commands typed in by the user
					switch (char_in)
    1be0:	9c 01       	movw	r18, r24
    1be2:	33 27       	eor	r19, r19
    1be4:	28 36       	cpi	r18, 0x68	; 104
    1be6:	31 05       	cpc	r19, r1
    1be8:	59 f1       	breq	.+86     	; 0x1c40 <_ZN9task_user3runEv+0x190>
    1bea:	3c f4       	brge	.+14     	; 0x1bfa <_ZN9task_user3runEv+0x14a>
    1bec:	2b 31       	cpi	r18, 0x1B	; 27
    1bee:	31 05       	cpc	r19, r1
    1bf0:	59 f1       	breq	.+86     	; 0x1c48 <_ZN9task_user3runEv+0x198>
    1bf2:	25 36       	cpi	r18, 0x65	; 101
    1bf4:	31 05       	cpc	r19, r1
    1bf6:	41 f1       	breq	.+80     	; 0x1c48 <_ZN9task_user3runEv+0x198>
    1bf8:	3b c0       	rjmp	.+118    	; 0x1c70 <_ZN9task_user3runEv+0x1c0>
    1bfa:	23 37       	cpi	r18, 0x73	; 115
    1bfc:	31 05       	cpc	r19, r1
    1bfe:	c1 f0       	breq	.+48     	; 0x1c30 <_ZN9task_user3runEv+0x180>
    1c00:	26 37       	cpi	r18, 0x76	; 118
    1c02:	31 05       	cpc	r19, r1
    1c04:	89 f0       	breq	.+34     	; 0x1c28 <_ZN9task_user3runEv+0x178>
    1c06:	2e 36       	cpi	r18, 0x6E	; 110
    1c08:	31 05       	cpc	r19, r1
    1c0a:	91 f5       	brne	.+100    	; 0x1c70 <_ZN9task_user3runEv+0x1c0>
					{
						// The 'n' command asks what time it is right now
						case ('n'):
							*p_serial << (a_time.set_to_now ()) << endl;
    1c0c:	ce 01       	movw	r24, r28
    1c0e:	01 96       	adiw	r24, 0x01	; 1
    1c10:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <_ZN10time_stamp10set_to_nowEv>
    1c14:	bc 01       	movw	r22, r24
    1c16:	f8 01       	movw	r30, r16
    1c18:	86 81       	ldd	r24, Z+6	; 0x06
    1c1a:	97 81       	ldd	r25, Z+7	; 0x07
    1c1c:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_ZlsR8emstreamR10time_stamp>
    1c20:	66 e0       	ldi	r22, 0x06	; 6
    1c22:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
							break;
    1c26:	5e c0       	rjmp	.+188    	; 0x1ce4 <_ZN9task_user3runEv+0x234>

						// The 'v' command asks for version and status information
						case ('v'):
							show_status ();
    1c28:	c8 01       	movw	r24, r16
    1c2a:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN9task_user11show_statusEv>
							break;
    1c2e:	5a c0       	rjmp	.+180    	; 0x1ce4 <_ZN9task_user3runEv+0x234>

						// The 's' command has all the tasks dump their stacks
						case ('s'):
							print_task_stacks (p_serial);
    1c30:	d8 01       	movw	r26, r16
    1c32:	16 96       	adiw	r26, 0x06	; 6
    1c34:	8d 91       	ld	r24, X+
    1c36:	9c 91       	ld	r25, X
    1c38:	17 97       	sbiw	r26, 0x07	; 7
    1c3a:	0e 94 de 1a 	call	0x35bc	; 0x35bc <_Z17print_task_stacksP8emstream>
							break;
    1c3e:	52 c0       	rjmp	.+164    	; 0x1ce4 <_ZN9task_user3runEv+0x234>

						// The 'h' command is a plea for help
						case ('h'):
							print_help_message ();
    1c40:	c8 01       	movw	r24, r16
    1c42:	0e 94 25 0c 	call	0x184a	; 0x184a <_ZN9task_user18print_help_messageEv>
							break;
    1c46:	4e c0       	rjmp	.+156    	; 0x1ce4 <_ZN9task_user3runEv+0x234>

						// The escape key or 'e' key go back to non-command mode
						case (27):
						case ('e'):
							*p_serial << PMS ("Exit command mode") << endl;
    1c48:	6a e0       	ldi	r22, 0x0A	; 10
    1c4a:	f8 01       	movw	r30, r16
    1c4c:	86 81       	ldd	r24, Z+6	; 0x06
    1c4e:	97 81       	ldd	r25, Z+7	; 0x07
    1c50:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    1c54:	7c 01       	movw	r14, r24
    1c56:	6e e2       	ldi	r22, 0x2E	; 46
    1c58:	75 e0       	ldi	r23, 0x05	; 5
    1c5a:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    1c5e:	66 e0       	ldi	r22, 0x06	; 6
    1c60:	c7 01       	movw	r24, r14
    1c62:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
							transition_to (0);
    1c66:	60 e0       	ldi	r22, 0x00	; 0
    1c68:	c8 01       	movw	r24, r16
    1c6a:	0e 94 c5 19 	call	0x338a	; 0x338a <_ZN8frt_task13transition_toEh>
							break;
    1c6e:	3a c0       	rjmp	.+116    	; 0x1ce4 <_ZN9task_user3runEv+0x234>

						// If the character isn't recognized, ask: What's That Function?
						default:
							p_serial->putchar (char_in);
    1c70:	f8 01       	movw	r30, r16
    1c72:	a6 81       	ldd	r26, Z+6	; 0x06
    1c74:	b7 81       	ldd	r27, Z+7	; 0x07
    1c76:	ed 91       	ld	r30, X+
    1c78:	fc 91       	ld	r31, X
    1c7a:	11 97       	sbiw	r26, 0x01	; 1
    1c7c:	02 80       	ldd	r0, Z+2	; 0x02
    1c7e:	f3 81       	ldd	r31, Z+3	; 0x03
    1c80:	e0 2d       	mov	r30, r0
    1c82:	68 2f       	mov	r22, r24
    1c84:	cd 01       	movw	r24, r26
    1c86:	19 95       	eicall
							*p_serial << PMS (":WTF?") << endl;
    1c88:	6a e0       	ldi	r22, 0x0A	; 10
    1c8a:	d8 01       	movw	r26, r16
    1c8c:	16 96       	adiw	r26, 0x06	; 6
    1c8e:	8d 91       	ld	r24, X+
    1c90:	9c 91       	ld	r25, X
    1c92:	17 97       	sbiw	r26, 0x07	; 7
    1c94:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    1c98:	7c 01       	movw	r14, r24
    1c9a:	68 e2       	ldi	r22, 0x28	; 40
    1c9c:	75 e0       	ldi	r23, 0x05	; 5
    1c9e:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    1ca2:	66 e0       	ldi	r22, 0x06	; 6
    1ca4:	c7 01       	movw	r24, r14
    1ca6:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
							break;
    1caa:	1c c0       	rjmp	.+56     	; 0x1ce4 <_ZN9task_user3runEv+0x234>
				break; // End of state 1

			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// We should never get to the default state. If we do, complain and restart
			default:
				*p_serial << PMS ("Illegal state! Resetting AVR") << endl;
    1cac:	6a e0       	ldi	r22, 0x0A	; 10
    1cae:	f8 01       	movw	r30, r16
    1cb0:	86 81       	ldd	r24, Z+6	; 0x06
    1cb2:	97 81       	ldd	r25, Z+7	; 0x07
    1cb4:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    1cb8:	8c 01       	movw	r16, r24
    1cba:	6b e0       	ldi	r22, 0x0B	; 11
    1cbc:	75 e0       	ldi	r23, 0x05	; 5
    1cbe:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    1cc2:	66 e0       	ldi	r22, 0x06	; 6
    1cc4:	c8 01       	movw	r24, r16
    1cc6:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
				wdt_enable (WDTO_120MS);
    1cca:	93 e0       	ldi	r25, 0x03	; 3
    1ccc:	88 ed       	ldi	r24, 0xD8	; 216
    1cce:	08 b6       	in	r0, 0x38	; 56
    1cd0:	18 be       	out	0x38, r1	; 56
    1cd2:	84 bf       	out	0x34, r24	; 52
    1cd4:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1cd8:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    1cdc:	81 fd       	sbrc	r24, 1
    1cde:	fc cf       	rjmp	.-8      	; 0x1cd8 <_ZN9task_user3runEv+0x228>
    1ce0:	08 be       	out	0x38, r0	; 56
    1ce2:	ff cf       	rjmp	.-2      	; 0x1ce2 <_ZN9task_user3runEv+0x232>
				for (;;);
				break;

		} // End switch state

		runs++;                             // Increment counter for debugging
    1ce4:	f8 01       	movw	r30, r16
    1ce6:	86 85       	ldd	r24, Z+14	; 0x0e
    1ce8:	97 85       	ldd	r25, Z+15	; 0x0f
    1cea:	a0 89       	ldd	r26, Z+16	; 0x10
    1cec:	b1 89       	ldd	r27, Z+17	; 0x11
    1cee:	01 96       	adiw	r24, 0x01	; 1
    1cf0:	a1 1d       	adc	r26, r1
    1cf2:	b1 1d       	adc	r27, r1
    1cf4:	86 87       	std	Z+14, r24	; 0x0e
    1cf6:	97 87       	std	Z+15, r25	; 0x0f
    1cf8:	a0 8b       	std	Z+16, r26	; 0x10
    1cfa:	b1 8b       	std	Z+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (1000));
    1cfc:	68 ee       	ldi	r22, 0xE8	; 232
    1cfe:	73 e0       	ldi	r23, 0x03	; 3
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0e 94 99 17 	call	0x2f32	; 0x2f32 <vTaskDelay>
	// task does interesting things such as diagnostic printouts
	*p_serial << PMS ("Press Ctrl-A for command mode") << endl;

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
    1d08:	f1 ce       	rjmp	.-542    	; 0x1aec <_ZN9task_user3runEv+0x3c>

00001d0a <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1d0a:	0f 93       	push	r16
    1d0c:	1f 93       	push	r17
    1d0e:	cf 93       	push	r28
    1d10:	df 93       	push	r29
    1d12:	ec 01       	movw	r28, r24
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    1d14:	0e 94 f5 15 	call	0x2bea	; 0x2bea <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    1d18:	80 91 a2 22 	lds	r24, 0x22A2	; 0x8022a2 <__data_end>
    1d1c:	81 11       	cpse	r24, r1
    1d1e:	1d c0       	rjmp	.+58     	; 0x1d5a <pvPortMalloc+0x50>
		{
			prvHeapInit();
    1d20:	a7 ea       	ldi	r26, 0xA7	; 167
    1d22:	b2 e2       	ldi	r27, 0x22	; 34
    1d24:	eb ea       	ldi	r30, 0xAB	; 171
    1d26:	f2 e2       	ldi	r31, 0x22	; 34
    1d28:	ed 93       	st	X+, r30
    1d2a:	fc 93       	st	X, r31
    1d2c:	11 97       	sbiw	r26, 0x01	; 1
    1d2e:	12 96       	adiw	r26, 0x02	; 2
    1d30:	1d 92       	st	X+, r1
    1d32:	1c 92       	st	X, r1
    1d34:	13 97       	sbiw	r26, 0x03	; 3
    1d36:	a3 ea       	ldi	r26, 0xA3	; 163
    1d38:	b2 e2       	ldi	r27, 0x22	; 34
    1d3a:	8f ef       	ldi	r24, 0xFF	; 255
    1d3c:	9f e0       	ldi	r25, 0x0F	; 15
    1d3e:	12 96       	adiw	r26, 0x02	; 2
    1d40:	8d 93       	st	X+, r24
    1d42:	9c 93       	st	X, r25
    1d44:	13 97       	sbiw	r26, 0x03	; 3
    1d46:	1d 92       	st	X+, r1
    1d48:	1c 92       	st	X, r1
    1d4a:	11 97       	sbiw	r26, 0x01	; 1
    1d4c:	82 83       	std	Z+2, r24	; 0x02
    1d4e:	93 83       	std	Z+3, r25	; 0x03
    1d50:	a0 83       	st	Z, r26
    1d52:	b1 83       	std	Z+1, r27	; 0x01
			xHeapHasBeenInitialised = pdTRUE;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	80 93 a2 22 	sts	0x22A2, r24	; 0x8022a2 <__data_end>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    1d5a:	20 97       	sbiw	r28, 0x00	; 0
    1d5c:	09 f4       	brne	.+2      	; 0x1d60 <pvPortMalloc+0x56>
    1d5e:	5f c0       	rjmp	.+190    	; 0x1e1e <pvPortMalloc+0x114>
		{
			xWantedSize += heapSTRUCT_SIZE;
    1d60:	9e 01       	movw	r18, r28
    1d62:	2b 5f       	subi	r18, 0xFB	; 251
    1d64:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    1d66:	24 96       	adiw	r28, 0x04	; 4
    1d68:	ce 3f       	cpi	r28, 0xFE	; 254
    1d6a:	df 40       	sbci	r29, 0x0F	; 15
    1d6c:	08 f0       	brcs	.+2      	; 0x1d70 <pvPortMalloc+0x66>
    1d6e:	5a c0       	rjmp	.+180    	; 0x1e24 <pvPortMalloc+0x11a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    1d70:	e0 91 a7 22 	lds	r30, 0x22A7	; 0x8022a7 <xStart>
    1d74:	f0 91 a8 22 	lds	r31, 0x22A8	; 0x8022a8 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    1d78:	a7 ea       	ldi	r26, 0xA7	; 167
    1d7a:	b2 e2       	ldi	r27, 0x22	; 34
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <pvPortMalloc+0x78>
    1d7e:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
    1d80:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    1d82:	82 81       	ldd	r24, Z+2	; 0x02
    1d84:	93 81       	ldd	r25, Z+3	; 0x03
    1d86:	82 17       	cp	r24, r18
    1d88:	93 07       	cpc	r25, r19
    1d8a:	20 f4       	brcc	.+8      	; 0x1d94 <pvPortMalloc+0x8a>
    1d8c:	80 81       	ld	r24, Z
    1d8e:	91 81       	ldd	r25, Z+1	; 0x01
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	a9 f7       	brne	.-22     	; 0x1d7e <pvPortMalloc+0x74>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    1d94:	c2 e2       	ldi	r28, 0x22	; 34
    1d96:	e3 3a       	cpi	r30, 0xA3	; 163
    1d98:	fc 07       	cpc	r31, r28
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <pvPortMalloc+0x94>
    1d9c:	46 c0       	rjmp	.+140    	; 0x1e2a <pvPortMalloc+0x120>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    1d9e:	cd 91       	ld	r28, X+
    1da0:	dc 91       	ld	r29, X
    1da2:	11 97       	sbiw	r26, 0x01	; 1
    1da4:	8e 01       	movw	r16, r28
    1da6:	0b 5f       	subi	r16, 0xFB	; 251
    1da8:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1daa:	80 81       	ld	r24, Z
    1dac:	91 81       	ldd	r25, Z+1	; 0x01
    1dae:	8d 93       	st	X+, r24
    1db0:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1db2:	82 81       	ldd	r24, Z+2	; 0x02
    1db4:	93 81       	ldd	r25, Z+3	; 0x03
    1db6:	82 1b       	sub	r24, r18
    1db8:	93 0b       	sbc	r25, r19
    1dba:	8b 30       	cpi	r24, 0x0B	; 11
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	10 f1       	brcs	.+68     	; 0x1e04 <pvPortMalloc+0xfa>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    1dc0:	bf 01       	movw	r22, r30
    1dc2:	62 0f       	add	r22, r18
    1dc4:	73 1f       	adc	r23, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1dc6:	db 01       	movw	r26, r22
    1dc8:	12 96       	adiw	r26, 0x02	; 2
    1dca:	8d 93       	st	X+, r24
    1dcc:	9c 93       	st	X, r25
    1dce:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
    1dd0:	22 83       	std	Z+2, r18	; 0x02
    1dd2:	33 83       	std	Z+3, r19	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    1dd4:	12 96       	adiw	r26, 0x02	; 2
    1dd6:	4d 91       	ld	r20, X+
    1dd8:	5c 91       	ld	r21, X
    1dda:	13 97       	sbiw	r26, 0x03	; 3
    1ddc:	87 ea       	ldi	r24, 0xA7	; 167
    1dde:	92 e2       	ldi	r25, 0x22	; 34
    1de0:	01 c0       	rjmp	.+2      	; 0x1de4 <pvPortMalloc+0xda>
    1de2:	cd 01       	movw	r24, r26
    1de4:	ec 01       	movw	r28, r24
    1de6:	a8 81       	ld	r26, Y
    1de8:	b9 81       	ldd	r27, Y+1	; 0x01
    1dea:	12 96       	adiw	r26, 0x02	; 2
    1dec:	2d 91       	ld	r18, X+
    1dee:	3c 91       	ld	r19, X
    1df0:	13 97       	sbiw	r26, 0x03	; 3
    1df2:	24 17       	cp	r18, r20
    1df4:	35 07       	cpc	r19, r21
    1df6:	a8 f3       	brcs	.-22     	; 0x1de2 <pvPortMalloc+0xd8>
    1df8:	eb 01       	movw	r28, r22
    1dfa:	a8 83       	st	Y, r26
    1dfc:	b9 83       	std	Y+1, r27	; 0x01
    1dfe:	dc 01       	movw	r26, r24
    1e00:	6d 93       	st	X+, r22
    1e02:	7c 93       	st	X, r23
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    1e04:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    1e08:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    1e0c:	22 81       	ldd	r18, Z+2	; 0x02
    1e0e:	33 81       	ldd	r19, Z+3	; 0x03
    1e10:	82 1b       	sub	r24, r18
    1e12:	93 0b       	sbc	r25, r19
    1e14:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    1e18:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    1e1c:	08 c0       	rjmp	.+16     	; 0x1e2e <pvPortMalloc+0x124>

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    1e1e:	00 e0       	ldi	r16, 0x00	; 0
    1e20:	10 e0       	ldi	r17, 0x00	; 0
    1e22:	05 c0       	rjmp	.+10     	; 0x1e2e <pvPortMalloc+0x124>
    1e24:	00 e0       	ldi	r16, 0x00	; 0
    1e26:	10 e0       	ldi	r17, 0x00	; 0
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <pvPortMalloc+0x124>
    1e2a:	00 e0       	ldi	r16, 0x00	; 0
    1e2c:	10 e0       	ldi	r17, 0x00	; 0
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
    1e2e:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    1e32:	c8 01       	movw	r24, r16
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	1f 91       	pop	r17
    1e3a:	0f 91       	pop	r16
    1e3c:	08 95       	ret

00001e3e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1e3e:	0f 93       	push	r16
    1e40:	1f 93       	push	r17
    1e42:	cf 93       	push	r28
    1e44:	df 93       	push	r29
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv )
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	41 f1       	breq	.+80     	; 0x1e9a <vPortFree+0x5c>
    1e4a:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    1e4c:	8c 01       	movw	r16, r24
    1e4e:	05 50       	subi	r16, 0x05	; 5
    1e50:	11 09       	sbc	r17, r1

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
    1e52:	0e 94 f5 15 	call	0x2bea	; 0x2bea <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    1e56:	f8 01       	movw	r30, r16
    1e58:	42 81       	ldd	r20, Z+2	; 0x02
    1e5a:	53 81       	ldd	r21, Z+3	; 0x03
    1e5c:	a7 ea       	ldi	r26, 0xA7	; 167
    1e5e:	b2 e2       	ldi	r27, 0x22	; 34
    1e60:	01 c0       	rjmp	.+2      	; 0x1e64 <vPortFree+0x26>
    1e62:	df 01       	movw	r26, r30
    1e64:	ed 91       	ld	r30, X+
    1e66:	fc 91       	ld	r31, X
    1e68:	11 97       	sbiw	r26, 0x01	; 1
    1e6a:	22 81       	ldd	r18, Z+2	; 0x02
    1e6c:	33 81       	ldd	r19, Z+3	; 0x03
    1e6e:	24 17       	cp	r18, r20
    1e70:	35 07       	cpc	r19, r21
    1e72:	b8 f3       	brcs	.-18     	; 0x1e62 <vPortFree+0x24>
    1e74:	25 97       	sbiw	r28, 0x05	; 5
    1e76:	e8 83       	st	Y, r30
    1e78:	f9 83       	std	Y+1, r31	; 0x01
    1e7a:	0d 93       	st	X+, r16
    1e7c:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
    1e7e:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    1e82:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8a:	82 0f       	add	r24, r18
    1e8c:	93 1f       	adc	r25, r19
    1e8e:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    1e92:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
		}
		xTaskResumeAll();
    1e96:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <xTaskResumeAll>
	}
}
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	1f 91       	pop	r17
    1ea0:	0f 91       	pop	r16
    1ea2:	08 95       	ret

00001ea4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
    1ea4:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    1ea8:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    1eac:	08 95       	ret

00001eae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    1eae:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    1eb0:	03 96       	adiw	r24, 0x03	; 3
    1eb2:	81 83       	std	Z+1, r24	; 0x01
    1eb4:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1eb6:	4f ef       	ldi	r20, 0xFF	; 255
    1eb8:	5f ef       	ldi	r21, 0xFF	; 255
    1eba:	ba 01       	movw	r22, r20
    1ebc:	43 83       	std	Z+3, r20	; 0x03
    1ebe:	54 83       	std	Z+4, r21	; 0x04
    1ec0:	65 83       	std	Z+5, r22	; 0x05
    1ec2:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    1ec4:	87 83       	std	Z+7, r24	; 0x07
    1ec6:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    1ec8:	81 87       	std	Z+9, r24	; 0x09
    1eca:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    1ecc:	10 82       	st	Z, r1
    1ece:	08 95       	ret

00001ed0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	12 86       	std	Z+10, r1	; 0x0a
    1ed4:	13 86       	std	Z+11, r1	; 0x0b
    1ed6:	08 95       	ret

00001ed8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	fc 01       	movw	r30, r24
    1ede:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    1ee0:	21 81       	ldd	r18, Z+1	; 0x01
    1ee2:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    1ee4:	e9 01       	movw	r28, r18
    1ee6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eea:	14 96       	adiw	r26, 0x04	; 4
    1eec:	8d 93       	st	X+, r24
    1eee:	9c 93       	st	X, r25
    1ef0:	15 97       	sbiw	r26, 0x05	; 5
	pxNewListItem->pxPrevious = pxList->pxIndex;
    1ef2:	81 81       	ldd	r24, Z+1	; 0x01
    1ef4:	92 81       	ldd	r25, Z+2	; 0x02
    1ef6:	16 96       	adiw	r26, 0x06	; 6
    1ef8:	8d 93       	st	X+, r24
    1efa:	9c 93       	st	X, r25
    1efc:	17 97       	sbiw	r26, 0x07	; 7
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1efe:	8c 81       	ldd	r24, Y+4	; 0x04
    1f00:	9d 81       	ldd	r25, Y+5	; 0x05
    1f02:	ec 01       	movw	r28, r24
    1f04:	6e 83       	std	Y+6, r22	; 0x06
    1f06:	7f 83       	std	Y+7, r23	; 0x07
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    1f08:	e9 01       	movw	r28, r18
    1f0a:	6c 83       	std	Y+4, r22	; 0x04
    1f0c:	7d 83       	std	Y+5, r23	; 0x05
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    1f0e:	61 83       	std	Z+1, r22	; 0x01
    1f10:	72 83       	std	Z+2, r23	; 0x02

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1f12:	1a 96       	adiw	r26, 0x0a	; 10
    1f14:	ed 93       	st	X+, r30
    1f16:	fc 93       	st	X, r31
    1f18:	1b 97       	sbiw	r26, 0x0b	; 11

	( pxList->uxNumberOfItems )++;
    1f1a:	80 81       	ld	r24, Z
    1f1c:	8f 5f       	subi	r24, 0xFF	; 255
    1f1e:	80 83       	st	Z, r24
}
    1f20:	df 91       	pop	r29
    1f22:	cf 91       	pop	r28
    1f24:	08 95       	ret

00001f26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    1f26:	0f 93       	push	r16
    1f28:	1f 93       	push	r17
    1f2a:	cf 93       	push	r28
    1f2c:	df 93       	push	r29
    1f2e:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    1f30:	08 81       	ld	r16, Y
    1f32:	19 81       	ldd	r17, Y+1	; 0x01
    1f34:	2a 81       	ldd	r18, Y+2	; 0x02
    1f36:	3b 81       	ldd	r19, Y+3	; 0x03
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1f38:	0f 3f       	cpi	r16, 0xFF	; 255
    1f3a:	4f ef       	ldi	r20, 0xFF	; 255
    1f3c:	14 07       	cpc	r17, r20
    1f3e:	24 07       	cpc	r18, r20
    1f40:	34 07       	cpc	r19, r20
    1f42:	31 f4       	brne	.+12     	; 0x1f50 <vListInsert+0x2a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1f44:	dc 01       	movw	r26, r24
    1f46:	19 96       	adiw	r26, 0x09	; 9
    1f48:	ed 91       	ld	r30, X+
    1f4a:	fc 91       	ld	r31, X
    1f4c:	1a 97       	sbiw	r26, 0x0a	; 10
    1f4e:	1f c0       	rjmp	.+62     	; 0x1f8e <vListInsert+0x68>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    1f50:	fc 01       	movw	r30, r24
    1f52:	33 96       	adiw	r30, 0x03	; 3
    1f54:	dc 01       	movw	r26, r24
    1f56:	17 96       	adiw	r26, 0x07	; 7
    1f58:	4d 91       	ld	r20, X+
    1f5a:	5c 91       	ld	r21, X
    1f5c:	18 97       	sbiw	r26, 0x08	; 8
    1f5e:	da 01       	movw	r26, r20
    1f60:	4d 91       	ld	r20, X+
    1f62:	5d 91       	ld	r21, X+
    1f64:	6d 91       	ld	r22, X+
    1f66:	7c 91       	ld	r23, X
    1f68:	04 17       	cp	r16, r20
    1f6a:	15 07       	cpc	r17, r21
    1f6c:	26 07       	cpc	r18, r22
    1f6e:	37 07       	cpc	r19, r23
    1f70:	70 f0       	brcs	.+28     	; 0x1f8e <vListInsert+0x68>
    1f72:	04 80       	ldd	r0, Z+4	; 0x04
    1f74:	f5 81       	ldd	r31, Z+5	; 0x05
    1f76:	e0 2d       	mov	r30, r0
    1f78:	a4 81       	ldd	r26, Z+4	; 0x04
    1f7a:	b5 81       	ldd	r27, Z+5	; 0x05
    1f7c:	4d 91       	ld	r20, X+
    1f7e:	5d 91       	ld	r21, X+
    1f80:	6d 91       	ld	r22, X+
    1f82:	7c 91       	ld	r23, X
    1f84:	04 17       	cp	r16, r20
    1f86:	15 07       	cpc	r17, r21
    1f88:	26 07       	cpc	r18, r22
    1f8a:	37 07       	cpc	r19, r23
    1f8c:	90 f7       	brcc	.-28     	; 0x1f72 <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1f8e:	a4 81       	ldd	r26, Z+4	; 0x04
    1f90:	b5 81       	ldd	r27, Z+5	; 0x05
    1f92:	ac 83       	std	Y+4, r26	; 0x04
    1f94:	bd 83       	std	Y+5, r27	; 0x05
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1f96:	16 96       	adiw	r26, 0x06	; 6
    1f98:	cd 93       	st	X+, r28
    1f9a:	dc 93       	st	X, r29
    1f9c:	17 97       	sbiw	r26, 0x07	; 7
	pxNewListItem->pxPrevious = pxIterator;
    1f9e:	ee 83       	std	Y+6, r30	; 0x06
    1fa0:	ff 83       	std	Y+7, r31	; 0x07
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    1fa2:	c4 83       	std	Z+4, r28	; 0x04
    1fa4:	d5 83       	std	Z+5, r29	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1fa6:	8a 87       	std	Y+10, r24	; 0x0a
    1fa8:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
    1faa:	fc 01       	movw	r30, r24
    1fac:	20 81       	ld	r18, Z
    1fae:	2f 5f       	subi	r18, 0xFF	; 255
    1fb0:	20 83       	st	Z, r18
}
    1fb2:	df 91       	pop	r29
    1fb4:	cf 91       	pop	r28
    1fb6:	1f 91       	pop	r17
    1fb8:	0f 91       	pop	r16
    1fba:	08 95       	ret

00001fbc <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    1fbc:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1fbe:	a4 81       	ldd	r26, Z+4	; 0x04
    1fc0:	b5 81       	ldd	r27, Z+5	; 0x05
    1fc2:	86 81       	ldd	r24, Z+6	; 0x06
    1fc4:	97 81       	ldd	r25, Z+7	; 0x07
    1fc6:	16 96       	adiw	r26, 0x06	; 6
    1fc8:	8d 93       	st	X+, r24
    1fca:	9c 93       	st	X, r25
    1fcc:	17 97       	sbiw	r26, 0x07	; 7
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1fce:	a6 81       	ldd	r26, Z+6	; 0x06
    1fd0:	b7 81       	ldd	r27, Z+7	; 0x07
    1fd2:	84 81       	ldd	r24, Z+4	; 0x04
    1fd4:	95 81       	ldd	r25, Z+5	; 0x05
    1fd6:	14 96       	adiw	r26, 0x04	; 4
    1fd8:	8d 93       	st	X+, r24
    1fda:	9c 93       	st	X, r25
    1fdc:	15 97       	sbiw	r26, 0x05	; 5
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    1fde:	a2 85       	ldd	r26, Z+10	; 0x0a
    1fe0:	b3 85       	ldd	r27, Z+11	; 0x0b

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1fe2:	11 96       	adiw	r26, 0x01	; 1
    1fe4:	8d 91       	ld	r24, X+
    1fe6:	9c 91       	ld	r25, X
    1fe8:	12 97       	sbiw	r26, 0x02	; 2
    1fea:	e8 17       	cp	r30, r24
    1fec:	f9 07       	cpc	r31, r25
    1fee:	31 f4       	brne	.+12     	; 0x1ffc <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1ff0:	86 81       	ldd	r24, Z+6	; 0x06
    1ff2:	97 81       	ldd	r25, Z+7	; 0x07
    1ff4:	11 96       	adiw	r26, 0x01	; 1
    1ff6:	8d 93       	st	X+, r24
    1ff8:	9c 93       	st	X, r25
    1ffa:	12 97       	sbiw	r26, 0x02	; 2
	}

	pxItemToRemove->pvContainer = NULL;
    1ffc:	12 86       	std	Z+10, r1	; 0x0a
    1ffe:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    2000:	8c 91       	ld	r24, X
    2002:	81 50       	subi	r24, 0x01	; 1
    2004:	8c 93       	st	X, r24
    2006:	08 95       	ret

00002008 <pxPortInitialiseStack>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2008:	80 93 6e 33 	sts	0x336E, r24	; 0x80336e <portStackTopForTask>
    200c:	90 93 6f 33 	sts	0x336F, r25	; 0x80336f <portStackTopForTask+0x1>
    2010:	31 e1       	ldi	r19, 0x11	; 17
    2012:	fc 01       	movw	r30, r24
    2014:	30 83       	st	Z, r19
    2016:	31 97       	sbiw	r30, 0x01	; 1
    2018:	22 e2       	ldi	r18, 0x22	; 34
    201a:	20 83       	st	Z, r18
    201c:	31 97       	sbiw	r30, 0x01	; 1
    201e:	a3 e3       	ldi	r26, 0x33	; 51
    2020:	a0 83       	st	Z, r26
    2022:	31 97       	sbiw	r30, 0x01	; 1
    2024:	60 83       	st	Z, r22
    2026:	31 97       	sbiw	r30, 0x01	; 1
    2028:	70 83       	st	Z, r23
    202a:	31 97       	sbiw	r30, 0x01	; 1
    202c:	10 82       	st	Z, r1
    202e:	31 97       	sbiw	r30, 0x01	; 1
    2030:	10 82       	st	Z, r1
    2032:	31 97       	sbiw	r30, 0x01	; 1
    2034:	60 e8       	ldi	r22, 0x80	; 128
    2036:	60 83       	st	Z, r22
    2038:	31 97       	sbiw	r30, 0x01	; 1
    203a:	10 82       	st	Z, r1
    203c:	31 97       	sbiw	r30, 0x01	; 1
    203e:	10 82       	st	Z, r1
    2040:	31 97       	sbiw	r30, 0x01	; 1
    2042:	10 82       	st	Z, r1
    2044:	31 97       	sbiw	r30, 0x01	; 1
    2046:	62 e0       	ldi	r22, 0x02	; 2
    2048:	60 83       	st	Z, r22
    204a:	31 97       	sbiw	r30, 0x01	; 1
    204c:	63 e0       	ldi	r22, 0x03	; 3
    204e:	60 83       	st	Z, r22
    2050:	31 97       	sbiw	r30, 0x01	; 1
    2052:	64 e0       	ldi	r22, 0x04	; 4
    2054:	60 83       	st	Z, r22
    2056:	31 97       	sbiw	r30, 0x01	; 1
    2058:	65 e0       	ldi	r22, 0x05	; 5
    205a:	60 83       	st	Z, r22
    205c:	31 97       	sbiw	r30, 0x01	; 1
    205e:	66 e0       	ldi	r22, 0x06	; 6
    2060:	60 83       	st	Z, r22
    2062:	31 97       	sbiw	r30, 0x01	; 1
    2064:	67 e0       	ldi	r22, 0x07	; 7
    2066:	60 83       	st	Z, r22
    2068:	31 97       	sbiw	r30, 0x01	; 1
    206a:	68 e0       	ldi	r22, 0x08	; 8
    206c:	60 83       	st	Z, r22
    206e:	31 97       	sbiw	r30, 0x01	; 1
    2070:	69 e0       	ldi	r22, 0x09	; 9
    2072:	60 83       	st	Z, r22
    2074:	31 97       	sbiw	r30, 0x01	; 1
    2076:	60 e1       	ldi	r22, 0x10	; 16
    2078:	60 83       	st	Z, r22
    207a:	31 97       	sbiw	r30, 0x01	; 1
    207c:	30 83       	st	Z, r19
    207e:	31 97       	sbiw	r30, 0x01	; 1
    2080:	32 e1       	ldi	r19, 0x12	; 18
    2082:	30 83       	st	Z, r19
    2084:	31 97       	sbiw	r30, 0x01	; 1
    2086:	33 e1       	ldi	r19, 0x13	; 19
    2088:	30 83       	st	Z, r19
    208a:	31 97       	sbiw	r30, 0x01	; 1
    208c:	34 e1       	ldi	r19, 0x14	; 20
    208e:	30 83       	st	Z, r19
    2090:	31 97       	sbiw	r30, 0x01	; 1
    2092:	35 e1       	ldi	r19, 0x15	; 21
    2094:	30 83       	st	Z, r19
    2096:	31 97       	sbiw	r30, 0x01	; 1
    2098:	36 e1       	ldi	r19, 0x16	; 22
    209a:	30 83       	st	Z, r19
    209c:	31 97       	sbiw	r30, 0x01	; 1
    209e:	37 e1       	ldi	r19, 0x17	; 23
    20a0:	30 83       	st	Z, r19
    20a2:	31 97       	sbiw	r30, 0x01	; 1
    20a4:	38 e1       	ldi	r19, 0x18	; 24
    20a6:	30 83       	st	Z, r19
    20a8:	31 97       	sbiw	r30, 0x01	; 1
    20aa:	39 e1       	ldi	r19, 0x19	; 25
    20ac:	30 83       	st	Z, r19
    20ae:	31 97       	sbiw	r30, 0x01	; 1
    20b0:	30 e2       	ldi	r19, 0x20	; 32
    20b2:	30 83       	st	Z, r19
    20b4:	31 97       	sbiw	r30, 0x01	; 1
    20b6:	31 e2       	ldi	r19, 0x21	; 33
    20b8:	30 83       	st	Z, r19
    20ba:	31 97       	sbiw	r30, 0x01	; 1
    20bc:	20 83       	st	Z, r18
    20be:	31 97       	sbiw	r30, 0x01	; 1
    20c0:	23 e2       	ldi	r18, 0x23	; 35
    20c2:	20 83       	st	Z, r18
    20c4:	31 97       	sbiw	r30, 0x01	; 1
    20c6:	40 83       	st	Z, r20
    20c8:	31 97       	sbiw	r30, 0x01	; 1
    20ca:	50 83       	st	Z, r21
    20cc:	31 97       	sbiw	r30, 0x01	; 1
    20ce:	26 e2       	ldi	r18, 0x26	; 38
    20d0:	20 83       	st	Z, r18
    20d2:	31 97       	sbiw	r30, 0x01	; 1
    20d4:	27 e2       	ldi	r18, 0x27	; 39
    20d6:	20 83       	st	Z, r18
    20d8:	31 97       	sbiw	r30, 0x01	; 1
    20da:	28 e2       	ldi	r18, 0x28	; 40
    20dc:	20 83       	st	Z, r18
    20de:	31 97       	sbiw	r30, 0x01	; 1
    20e0:	29 e2       	ldi	r18, 0x29	; 41
    20e2:	20 83       	st	Z, r18
    20e4:	31 97       	sbiw	r30, 0x01	; 1
    20e6:	20 e3       	ldi	r18, 0x30	; 48
    20e8:	20 83       	st	Z, r18
    20ea:	31 97       	sbiw	r30, 0x01	; 1
    20ec:	21 e3       	ldi	r18, 0x31	; 49
    20ee:	20 83       	st	Z, r18
    20f0:	89 97       	sbiw	r24, 0x29	; 41
    20f2:	08 95       	ret

000020f4 <xPortStartScheduler>:
    20f4:	8c e7       	ldi	r24, 0x7C	; 124
    20f6:	80 93 69 08 	sts	0x0869, r24	; 0x800869 <__TEXT_REGION_LENGTH__+0x700869>
    20fa:	8f ef       	ldi	r24, 0xFF	; 255
    20fc:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x700868>
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
    2106:	91 e1       	ldi	r25, 0x11	; 17
    2108:	90 93 41 08 	sts	0x0841, r25	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    210c:	80 93 47 08 	sts	0x0847, r24	; 0x800847 <__TEXT_REGION_LENGTH__+0x700847>
    2110:	a0 91 0a 33 	lds	r26, 0x330A	; 0x80330a <pxCurrentTCB>
    2114:	b0 91 0b 33 	lds	r27, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
    2118:	cd 91       	ld	r28, X+
    211a:	cd bf       	out	0x3d, r28	; 61
    211c:	dd 91       	ld	r29, X+
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	ff 91       	pop	r31
    2122:	ef 91       	pop	r30
    2124:	df 91       	pop	r29
    2126:	cf 91       	pop	r28
    2128:	bf 91       	pop	r27
    212a:	af 91       	pop	r26
    212c:	9f 91       	pop	r25
    212e:	8f 91       	pop	r24
    2130:	7f 91       	pop	r23
    2132:	6f 91       	pop	r22
    2134:	5f 91       	pop	r21
    2136:	4f 91       	pop	r20
    2138:	3f 91       	pop	r19
    213a:	2f 91       	pop	r18
    213c:	1f 91       	pop	r17
    213e:	0f 91       	pop	r16
    2140:	ff 90       	pop	r15
    2142:	ef 90       	pop	r14
    2144:	df 90       	pop	r13
    2146:	cf 90       	pop	r12
    2148:	bf 90       	pop	r11
    214a:	af 90       	pop	r10
    214c:	9f 90       	pop	r9
    214e:	8f 90       	pop	r8
    2150:	7f 90       	pop	r7
    2152:	6f 90       	pop	r6
    2154:	5f 90       	pop	r5
    2156:	4f 90       	pop	r4
    2158:	3f 90       	pop	r3
    215a:	2f 90       	pop	r2
    215c:	1f 90       	pop	r1
    215e:	0f 90       	pop	r0
    2160:	0c be       	out	0x3c, r0	; 60
    2162:	0f 90       	pop	r0
    2164:	0b be       	out	0x3b, r0	; 59
    2166:	0f 90       	pop	r0
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	0f 90       	pop	r0
    216c:	08 95       	ret
    216e:	08 95       	ret

00002170 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2170:	0f 92       	push	r0
    2172:	0f b6       	in	r0, 0x3f	; 63
    2174:	f8 94       	cli
    2176:	0f 92       	push	r0
    2178:	0b b6       	in	r0, 0x3b	; 59
    217a:	0f 92       	push	r0
    217c:	0c b6       	in	r0, 0x3c	; 60
    217e:	0f 92       	push	r0
    2180:	1f 92       	push	r1
    2182:	11 24       	eor	r1, r1
    2184:	2f 92       	push	r2
    2186:	3f 92       	push	r3
    2188:	4f 92       	push	r4
    218a:	5f 92       	push	r5
    218c:	6f 92       	push	r6
    218e:	7f 92       	push	r7
    2190:	8f 92       	push	r8
    2192:	9f 92       	push	r9
    2194:	af 92       	push	r10
    2196:	bf 92       	push	r11
    2198:	cf 92       	push	r12
    219a:	df 92       	push	r13
    219c:	ef 92       	push	r14
    219e:	ff 92       	push	r15
    21a0:	0f 93       	push	r16
    21a2:	1f 93       	push	r17
    21a4:	2f 93       	push	r18
    21a6:	3f 93       	push	r19
    21a8:	4f 93       	push	r20
    21aa:	5f 93       	push	r21
    21ac:	6f 93       	push	r22
    21ae:	7f 93       	push	r23
    21b0:	8f 93       	push	r24
    21b2:	9f 93       	push	r25
    21b4:	af 93       	push	r26
    21b6:	bf 93       	push	r27
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	ef 93       	push	r30
    21be:	ff 93       	push	r31
    21c0:	a0 91 0a 33 	lds	r26, 0x330A	; 0x80330a <pxCurrentTCB>
    21c4:	b0 91 0b 33 	lds	r27, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
    21c8:	0d b6       	in	r0, 0x3d	; 61
    21ca:	0d 92       	st	X+, r0
    21cc:	0e b6       	in	r0, 0x3e	; 62
    21ce:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    21d0:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    21d4:	a0 91 0a 33 	lds	r26, 0x330A	; 0x80330a <pxCurrentTCB>
    21d8:	b0 91 0b 33 	lds	r27, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
    21dc:	cd 91       	ld	r28, X+
    21de:	cd bf       	out	0x3d, r28	; 61
    21e0:	dd 91       	ld	r29, X+
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	ff 91       	pop	r31
    21e6:	ef 91       	pop	r30
    21e8:	df 91       	pop	r29
    21ea:	cf 91       	pop	r28
    21ec:	bf 91       	pop	r27
    21ee:	af 91       	pop	r26
    21f0:	9f 91       	pop	r25
    21f2:	8f 91       	pop	r24
    21f4:	7f 91       	pop	r23
    21f6:	6f 91       	pop	r22
    21f8:	5f 91       	pop	r21
    21fa:	4f 91       	pop	r20
    21fc:	3f 91       	pop	r19
    21fe:	2f 91       	pop	r18
    2200:	1f 91       	pop	r17
    2202:	0f 91       	pop	r16
    2204:	ff 90       	pop	r15
    2206:	ef 90       	pop	r14
    2208:	df 90       	pop	r13
    220a:	cf 90       	pop	r12
    220c:	bf 90       	pop	r11
    220e:	af 90       	pop	r10
    2210:	9f 90       	pop	r9
    2212:	8f 90       	pop	r8
    2214:	7f 90       	pop	r7
    2216:	6f 90       	pop	r6
    2218:	5f 90       	pop	r5
    221a:	4f 90       	pop	r4
    221c:	3f 90       	pop	r3
    221e:	2f 90       	pop	r2
    2220:	1f 90       	pop	r1
    2222:	0f 90       	pop	r0
    2224:	0c be       	out	0x3c, r0	; 60
    2226:	0f 90       	pop	r0
    2228:	0b be       	out	0x3b, r0	; 59
    222a:	0f 90       	pop	r0
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2230:	08 95       	ret

00002232 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2232:	0f 92       	push	r0
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	0f 92       	push	r0
    223a:	0b b6       	in	r0, 0x3b	; 59
    223c:	0f 92       	push	r0
    223e:	0c b6       	in	r0, 0x3c	; 60
    2240:	0f 92       	push	r0
    2242:	1f 92       	push	r1
    2244:	11 24       	eor	r1, r1
    2246:	2f 92       	push	r2
    2248:	3f 92       	push	r3
    224a:	4f 92       	push	r4
    224c:	5f 92       	push	r5
    224e:	6f 92       	push	r6
    2250:	7f 92       	push	r7
    2252:	8f 92       	push	r8
    2254:	9f 92       	push	r9
    2256:	af 92       	push	r10
    2258:	bf 92       	push	r11
    225a:	cf 92       	push	r12
    225c:	df 92       	push	r13
    225e:	ef 92       	push	r14
    2260:	ff 92       	push	r15
    2262:	0f 93       	push	r16
    2264:	1f 93       	push	r17
    2266:	2f 93       	push	r18
    2268:	3f 93       	push	r19
    226a:	4f 93       	push	r20
    226c:	5f 93       	push	r21
    226e:	6f 93       	push	r22
    2270:	7f 93       	push	r23
    2272:	8f 93       	push	r24
    2274:	9f 93       	push	r25
    2276:	af 93       	push	r26
    2278:	bf 93       	push	r27
    227a:	cf 93       	push	r28
    227c:	df 93       	push	r29
    227e:	ef 93       	push	r30
    2280:	ff 93       	push	r31
    2282:	a0 91 0a 33 	lds	r26, 0x330A	; 0x80330a <pxCurrentTCB>
    2286:	b0 91 0b 33 	lds	r27, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
    228a:	0d b6       	in	r0, 0x3d	; 61
    228c:	0d 92       	st	X+, r0
    228e:	0e b6       	in	r0, 0x3e	; 62
    2290:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    2292:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <vTaskIncrementTick>
	vTaskSwitchContext();
    2296:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    229a:	a0 91 0a 33 	lds	r26, 0x330A	; 0x80330a <pxCurrentTCB>
    229e:	b0 91 0b 33 	lds	r27, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
    22a2:	cd 91       	ld	r28, X+
    22a4:	cd bf       	out	0x3d, r28	; 61
    22a6:	dd 91       	ld	r29, X+
    22a8:	de bf       	out	0x3e, r29	; 62
    22aa:	ff 91       	pop	r31
    22ac:	ef 91       	pop	r30
    22ae:	df 91       	pop	r29
    22b0:	cf 91       	pop	r28
    22b2:	bf 91       	pop	r27
    22b4:	af 91       	pop	r26
    22b6:	9f 91       	pop	r25
    22b8:	8f 91       	pop	r24
    22ba:	7f 91       	pop	r23
    22bc:	6f 91       	pop	r22
    22be:	5f 91       	pop	r21
    22c0:	4f 91       	pop	r20
    22c2:	3f 91       	pop	r19
    22c4:	2f 91       	pop	r18
    22c6:	1f 91       	pop	r17
    22c8:	0f 91       	pop	r16
    22ca:	ff 90       	pop	r15
    22cc:	ef 90       	pop	r14
    22ce:	df 90       	pop	r13
    22d0:	cf 90       	pop	r12
    22d2:	bf 90       	pop	r11
    22d4:	af 90       	pop	r10
    22d6:	9f 90       	pop	r9
    22d8:	8f 90       	pop	r8
    22da:	7f 90       	pop	r7
    22dc:	6f 90       	pop	r6
    22de:	5f 90       	pop	r5
    22e0:	4f 90       	pop	r4
    22e2:	3f 90       	pop	r3
    22e4:	2f 90       	pop	r2
    22e6:	1f 90       	pop	r1
    22e8:	0f 90       	pop	r0
    22ea:	0c be       	out	0x3c, r0	; 60
    22ec:	0f 90       	pop	r0
    22ee:	0b be       	out	0x3b, r0	; 59
    22f0:	0f 90       	pop	r0
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	0f 90       	pop	r0

	asm volatile ( "ret" );
    22f6:	08 95       	ret

000022f8 <__vector_22>:
void RT_VECT (void) __attribute__ ((signal, naked));
void RT_VECT (void)
{
	// For the preemptive scheduler, enable a context switch
	#if configUSE_PREEMPTION == 1
		vPortYieldFromTick ();
    22f8:	0e 94 19 11 	call	0x2232	; 0x2232 <vPortYieldFromTick>
		asm volatile ( "reti" );
    22fc:	18 95       	reti

000022fe <prvCopyDataToQueue>:
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
    22fe:	cf 93       	push	r28
    2300:	df 93       	push	r29
    2302:	ec 01       	movw	r28, r24
    2304:	88 a1       	ldd	r24, Y+32	; 0x20
    2306:	81 11       	cpse	r24, r1
    2308:	0b c0       	rjmp	.+22     	; 0x2320 <prvCopyDataToQueue+0x22>
    230a:	88 81       	ld	r24, Y
    230c:	99 81       	ldd	r25, Y+1	; 0x01
    230e:	89 2b       	or	r24, r25
    2310:	e1 f5       	brne	.+120    	; 0x238a <prvCopyDataToQueue+0x8c>
    2312:	8a 81       	ldd	r24, Y+2	; 0x02
    2314:	9b 81       	ldd	r25, Y+3	; 0x03
    2316:	0e 94 82 19 	call	0x3304	; 0x3304 <vTaskPriorityDisinherit>
    231a:	1a 82       	std	Y+2, r1	; 0x02
    231c:	1b 82       	std	Y+3, r1	; 0x03
    231e:	35 c0       	rjmp	.+106    	; 0x238a <prvCopyDataToQueue+0x8c>
    2320:	41 11       	cpse	r20, r1
    2322:	17 c0       	rjmp	.+46     	; 0x2352 <prvCopyDataToQueue+0x54>
    2324:	48 2f       	mov	r20, r24
    2326:	50 e0       	ldi	r21, 0x00	; 0
    2328:	8c 81       	ldd	r24, Y+4	; 0x04
    232a:	9d 81       	ldd	r25, Y+5	; 0x05
    232c:	0e 94 f5 26 	call	0x4dea	; 0x4dea <memcpy>
    2330:	28 a1       	ldd	r18, Y+32	; 0x20
    2332:	8c 81       	ldd	r24, Y+4	; 0x04
    2334:	9d 81       	ldd	r25, Y+5	; 0x05
    2336:	82 0f       	add	r24, r18
    2338:	91 1d       	adc	r25, r1
    233a:	8c 83       	std	Y+4, r24	; 0x04
    233c:	9d 83       	std	Y+5, r25	; 0x05
    233e:	2a 81       	ldd	r18, Y+2	; 0x02
    2340:	3b 81       	ldd	r19, Y+3	; 0x03
    2342:	82 17       	cp	r24, r18
    2344:	93 07       	cpc	r25, r19
    2346:	08 f1       	brcs	.+66     	; 0x238a <prvCopyDataToQueue+0x8c>
    2348:	88 81       	ld	r24, Y
    234a:	99 81       	ldd	r25, Y+1	; 0x01
    234c:	8c 83       	std	Y+4, r24	; 0x04
    234e:	9d 83       	std	Y+5, r25	; 0x05
    2350:	1c c0       	rjmp	.+56     	; 0x238a <prvCopyDataToQueue+0x8c>
    2352:	48 2f       	mov	r20, r24
    2354:	50 e0       	ldi	r21, 0x00	; 0
    2356:	8e 81       	ldd	r24, Y+6	; 0x06
    2358:	9f 81       	ldd	r25, Y+7	; 0x07
    235a:	0e 94 f5 26 	call	0x4dea	; 0x4dea <memcpy>
    235e:	88 a1       	ldd	r24, Y+32	; 0x20
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	91 95       	neg	r25
    2364:	81 95       	neg	r24
    2366:	91 09       	sbc	r25, r1
    2368:	2e 81       	ldd	r18, Y+6	; 0x06
    236a:	3f 81       	ldd	r19, Y+7	; 0x07
    236c:	28 0f       	add	r18, r24
    236e:	39 1f       	adc	r19, r25
    2370:	2e 83       	std	Y+6, r18	; 0x06
    2372:	3f 83       	std	Y+7, r19	; 0x07
    2374:	48 81       	ld	r20, Y
    2376:	59 81       	ldd	r21, Y+1	; 0x01
    2378:	24 17       	cp	r18, r20
    237a:	35 07       	cpc	r19, r21
    237c:	30 f4       	brcc	.+12     	; 0x238a <prvCopyDataToQueue+0x8c>
    237e:	2a 81       	ldd	r18, Y+2	; 0x02
    2380:	3b 81       	ldd	r19, Y+3	; 0x03
    2382:	82 0f       	add	r24, r18
    2384:	93 1f       	adc	r25, r19
    2386:	8e 83       	std	Y+6, r24	; 0x06
    2388:	9f 83       	std	Y+7, r25	; 0x07
    238a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    238c:	8f 5f       	subi	r24, 0xFF	; 255
    238e:	8e 8f       	std	Y+30, r24	; 0x1e
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	08 95       	ret

00002396 <prvCopyDataFromQueue>:
    2396:	fc 01       	movw	r30, r24
    2398:	80 81       	ld	r24, Z
    239a:	91 81       	ldd	r25, Z+1	; 0x01
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	a1 f0       	breq	.+40     	; 0x23c8 <prvCopyDataFromQueue+0x32>
    23a0:	40 a1       	ldd	r20, Z+32	; 0x20
    23a2:	50 e0       	ldi	r21, 0x00	; 0
    23a4:	26 81       	ldd	r18, Z+6	; 0x06
    23a6:	37 81       	ldd	r19, Z+7	; 0x07
    23a8:	24 0f       	add	r18, r20
    23aa:	35 1f       	adc	r19, r21
    23ac:	26 83       	std	Z+6, r18	; 0x06
    23ae:	37 83       	std	Z+7, r19	; 0x07
    23b0:	a2 81       	ldd	r26, Z+2	; 0x02
    23b2:	b3 81       	ldd	r27, Z+3	; 0x03
    23b4:	2a 17       	cp	r18, r26
    23b6:	3b 07       	cpc	r19, r27
    23b8:	10 f0       	brcs	.+4      	; 0x23be <prvCopyDataFromQueue+0x28>
    23ba:	86 83       	std	Z+6, r24	; 0x06
    23bc:	97 83       	std	Z+7, r25	; 0x07
    23be:	cb 01       	movw	r24, r22
    23c0:	66 81       	ldd	r22, Z+6	; 0x06
    23c2:	77 81       	ldd	r23, Z+7	; 0x07
    23c4:	0e 94 f5 26 	call	0x4dea	; 0x4dea <memcpy>
    23c8:	08 95       	ret

000023ca <prvUnlockQueue>:
    23ca:	0f 93       	push	r16
    23cc:	1f 93       	push	r17
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
    23d2:	ec 01       	movw	r28, r24
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	0f 92       	push	r0
    23da:	8a a1       	ldd	r24, Y+34	; 0x22
    23dc:	18 16       	cp	r1, r24
    23de:	b4 f4       	brge	.+44     	; 0x240c <prvUnlockQueue+0x42>
    23e0:	8b 89       	ldd	r24, Y+19	; 0x13
    23e2:	81 11       	cpse	r24, r1
    23e4:	05 c0       	rjmp	.+10     	; 0x23f0 <prvUnlockQueue+0x26>
    23e6:	12 c0       	rjmp	.+36     	; 0x240c <prvUnlockQueue+0x42>
    23e8:	8b 89       	ldd	r24, Y+19	; 0x13
    23ea:	81 11       	cpse	r24, r1
    23ec:	04 c0       	rjmp	.+8      	; 0x23f6 <prvUnlockQueue+0x2c>
    23ee:	0e c0       	rjmp	.+28     	; 0x240c <prvUnlockQueue+0x42>
    23f0:	8e 01       	movw	r16, r28
    23f2:	0d 5e       	subi	r16, 0xED	; 237
    23f4:	1f 4f       	sbci	r17, 0xFF	; 255
    23f6:	c8 01       	movw	r24, r16
    23f8:	0e 94 4e 18 	call	0x309c	; 0x309c <xTaskRemoveFromEventList>
    23fc:	81 11       	cpse	r24, r1
    23fe:	0e 94 0b 19 	call	0x3216	; 0x3216 <vTaskMissedYield>
    2402:	8a a1       	ldd	r24, Y+34	; 0x22
    2404:	81 50       	subi	r24, 0x01	; 1
    2406:	8a a3       	std	Y+34, r24	; 0x22
    2408:	18 16       	cp	r1, r24
    240a:	74 f3       	brlt	.-36     	; 0x23e8 <prvUnlockQueue+0x1e>
    240c:	8f ef       	ldi	r24, 0xFF	; 255
    240e:	8a a3       	std	Y+34, r24	; 0x22
    2410:	0f 90       	pop	r0
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	0f 92       	push	r0
    241a:	89 a1       	ldd	r24, Y+33	; 0x21
    241c:	18 16       	cp	r1, r24
    241e:	b4 f4       	brge	.+44     	; 0x244c <prvUnlockQueue+0x82>
    2420:	88 85       	ldd	r24, Y+8	; 0x08
    2422:	81 11       	cpse	r24, r1
    2424:	05 c0       	rjmp	.+10     	; 0x2430 <prvUnlockQueue+0x66>
    2426:	12 c0       	rjmp	.+36     	; 0x244c <prvUnlockQueue+0x82>
    2428:	88 85       	ldd	r24, Y+8	; 0x08
    242a:	81 11       	cpse	r24, r1
    242c:	04 c0       	rjmp	.+8      	; 0x2436 <prvUnlockQueue+0x6c>
    242e:	0e c0       	rjmp	.+28     	; 0x244c <prvUnlockQueue+0x82>
    2430:	8e 01       	movw	r16, r28
    2432:	08 5f       	subi	r16, 0xF8	; 248
    2434:	1f 4f       	sbci	r17, 0xFF	; 255
    2436:	c8 01       	movw	r24, r16
    2438:	0e 94 4e 18 	call	0x309c	; 0x309c <xTaskRemoveFromEventList>
    243c:	81 11       	cpse	r24, r1
    243e:	0e 94 0b 19 	call	0x3216	; 0x3216 <vTaskMissedYield>
    2442:	89 a1       	ldd	r24, Y+33	; 0x21
    2444:	81 50       	subi	r24, 0x01	; 1
    2446:	89 a3       	std	Y+33, r24	; 0x21
    2448:	18 16       	cp	r1, r24
    244a:	74 f3       	brlt	.-36     	; 0x2428 <prvUnlockQueue+0x5e>
    244c:	8f ef       	ldi	r24, 0xFF	; 255
    244e:	89 a3       	std	Y+33, r24	; 0x21
    2450:	0f 90       	pop	r0
    2452:	0f be       	out	0x3f, r0	; 63
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	1f 91       	pop	r17
    245a:	0f 91       	pop	r16
    245c:	08 95       	ret

0000245e <xQueueGenericReset>:
    245e:	1f 93       	push	r17
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	61 30       	cpi	r22, 0x01	; 1
    2466:	59 f0       	breq	.+22     	; 0x247e <xQueueGenericReset+0x20>
    2468:	fc 01       	movw	r30, r24
    246a:	23 89       	ldd	r18, Z+19	; 0x13
    246c:	30 85       	ldd	r19, Z+8	; 0x08
    246e:	31 11       	cpse	r19, r1
    2470:	2c c0       	rjmp	.+88     	; 0x24ca <xQueueGenericReset+0x6c>
    2472:	11 e0       	ldi	r17, 0x01	; 1
    2474:	21 11       	cpse	r18, r1
    2476:	10 e0       	ldi	r17, 0x00	; 0
    2478:	21 11       	cpse	r18, r1
    247a:	28 c0       	rjmp	.+80     	; 0x24cc <xQueueGenericReset+0x6e>
    247c:	01 c0       	rjmp	.+2      	; 0x2480 <xQueueGenericReset+0x22>
    247e:	11 e0       	ldi	r17, 0x01	; 1
    2480:	ec 01       	movw	r28, r24
    2482:	48 81       	ld	r20, Y
    2484:	59 81       	ldd	r21, Y+1	; 0x01
    2486:	28 a1       	ldd	r18, Y+32	; 0x20
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    248c:	62 9f       	mul	r22, r18
    248e:	c0 01       	movw	r24, r0
    2490:	63 9f       	mul	r22, r19
    2492:	90 0d       	add	r25, r0
    2494:	11 24       	eor	r1, r1
    2496:	ba 01       	movw	r22, r20
    2498:	68 0f       	add	r22, r24
    249a:	79 1f       	adc	r23, r25
    249c:	6a 83       	std	Y+2, r22	; 0x02
    249e:	7b 83       	std	Y+3, r23	; 0x03
    24a0:	1e 8e       	std	Y+30, r1	; 0x1e
    24a2:	4c 83       	std	Y+4, r20	; 0x04
    24a4:	5d 83       	std	Y+5, r21	; 0x05
    24a6:	82 1b       	sub	r24, r18
    24a8:	93 0b       	sbc	r25, r19
    24aa:	84 0f       	add	r24, r20
    24ac:	95 1f       	adc	r25, r21
    24ae:	8e 83       	std	Y+6, r24	; 0x06
    24b0:	9f 83       	std	Y+7, r25	; 0x07
    24b2:	8f ef       	ldi	r24, 0xFF	; 255
    24b4:	89 a3       	std	Y+33, r24	; 0x21
    24b6:	8a a3       	std	Y+34, r24	; 0x22
    24b8:	ce 01       	movw	r24, r28
    24ba:	08 96       	adiw	r24, 0x08	; 8
    24bc:	0e 94 57 0f 	call	0x1eae	; 0x1eae <vListInitialise>
    24c0:	ce 01       	movw	r24, r28
    24c2:	43 96       	adiw	r24, 0x13	; 19
    24c4:	0e 94 57 0f 	call	0x1eae	; 0x1eae <vListInitialise>
    24c8:	01 c0       	rjmp	.+2      	; 0x24cc <xQueueGenericReset+0x6e>
    24ca:	10 e0       	ldi	r17, 0x00	; 0
    24cc:	81 2f       	mov	r24, r17
    24ce:	df 91       	pop	r29
    24d0:	cf 91       	pop	r28
    24d2:	1f 91       	pop	r17
    24d4:	08 95       	ret

000024d6 <xQueueGenericCreate>:
    24d6:	0f 93       	push	r16
    24d8:	1f 93       	push	r17
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	88 23       	and	r24, r24
    24e0:	01 f1       	breq	.+64     	; 0x2522 <xQueueGenericCreate+0x4c>
    24e2:	06 2f       	mov	r16, r22
    24e4:	18 2f       	mov	r17, r24
    24e6:	83 e2       	ldi	r24, 0x23	; 35
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <pvPortMalloc>
    24ee:	ec 01       	movw	r28, r24
    24f0:	89 2b       	or	r24, r25
    24f2:	c9 f0       	breq	.+50     	; 0x2526 <xQueueGenericCreate+0x50>
    24f4:	10 9f       	mul	r17, r16
    24f6:	c0 01       	movw	r24, r0
    24f8:	11 24       	eor	r1, r1
    24fa:	01 96       	adiw	r24, 0x01	; 1
    24fc:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <pvPortMalloc>
    2500:	88 83       	st	Y, r24
    2502:	99 83       	std	Y+1, r25	; 0x01
    2504:	89 2b       	or	r24, r25
    2506:	39 f0       	breq	.+14     	; 0x2516 <xQueueGenericCreate+0x40>
    2508:	1f 8f       	std	Y+31, r17	; 0x1f
    250a:	08 a3       	std	Y+32, r16	; 0x20
    250c:	61 e0       	ldi	r22, 0x01	; 1
    250e:	ce 01       	movw	r24, r28
    2510:	0e 94 2f 12 	call	0x245e	; 0x245e <xQueueGenericReset>
    2514:	08 c0       	rjmp	.+16     	; 0x2526 <xQueueGenericCreate+0x50>
    2516:	ce 01       	movw	r24, r28
    2518:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <vPortFree>
    251c:	c0 e0       	ldi	r28, 0x00	; 0
    251e:	d0 e0       	ldi	r29, 0x00	; 0
    2520:	02 c0       	rjmp	.+4      	; 0x2526 <xQueueGenericCreate+0x50>
    2522:	c0 e0       	ldi	r28, 0x00	; 0
    2524:	d0 e0       	ldi	r29, 0x00	; 0
    2526:	ce 01       	movw	r24, r28
    2528:	df 91       	pop	r29
    252a:	cf 91       	pop	r28
    252c:	1f 91       	pop	r17
    252e:	0f 91       	pop	r16
    2530:	08 95       	ret

00002532 <xQueueGenericSend>:
    2532:	af 92       	push	r10
    2534:	bf 92       	push	r11
    2536:	cf 92       	push	r12
    2538:	df 92       	push	r13
    253a:	ef 92       	push	r14
    253c:	ff 92       	push	r15
    253e:	0f 93       	push	r16
    2540:	1f 93       	push	r17
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	29 97       	sbiw	r28, 0x09	; 9
    254c:	cd bf       	out	0x3d, r28	; 61
    254e:	de bf       	out	0x3e, r29	; 62
    2550:	7c 01       	movw	r14, r24
    2552:	5b 01       	movw	r10, r22
    2554:	2e 83       	std	Y+6, r18	; 0x06
    2556:	3f 83       	std	Y+7, r19	; 0x07
    2558:	48 87       	std	Y+8, r20	; 0x08
    255a:	59 87       	std	Y+9, r21	; 0x09
    255c:	10 e0       	ldi	r17, 0x00	; 0
    255e:	6c 01       	movw	r12, r24
    2560:	88 e0       	ldi	r24, 0x08	; 8
    2562:	c8 0e       	add	r12, r24
    2564:	d1 1c       	adc	r13, r1
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	f8 94       	cli
    256a:	0f 92       	push	r0
    256c:	f7 01       	movw	r30, r14
    256e:	96 8d       	ldd	r25, Z+30	; 0x1e
    2570:	87 8d       	ldd	r24, Z+31	; 0x1f
    2572:	98 17       	cp	r25, r24
    2574:	a8 f4       	brcc	.+42     	; 0x25a0 <xQueueGenericSend+0x6e>
    2576:	40 2f       	mov	r20, r16
    2578:	b5 01       	movw	r22, r10
    257a:	c7 01       	movw	r24, r14
    257c:	0e 94 7f 11 	call	0x22fe	; 0x22fe <prvCopyDataToQueue>
    2580:	f7 01       	movw	r30, r14
    2582:	83 89       	ldd	r24, Z+19	; 0x13
    2584:	88 23       	and	r24, r24
    2586:	41 f0       	breq	.+16     	; 0x2598 <xQueueGenericSend+0x66>
    2588:	c7 01       	movw	r24, r14
    258a:	43 96       	adiw	r24, 0x13	; 19
    258c:	0e 94 4e 18 	call	0x309c	; 0x309c <xTaskRemoveFromEventList>
    2590:	81 30       	cpi	r24, 0x01	; 1
    2592:	11 f4       	brne	.+4      	; 0x2598 <xQueueGenericSend+0x66>
    2594:	0e 94 b8 10 	call	0x2170	; 0x2170 <vPortYield>
    2598:	0f 90       	pop	r0
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	56 c0       	rjmp	.+172    	; 0x264c <xQueueGenericSend+0x11a>
    25a0:	8e 81       	ldd	r24, Y+6	; 0x06
    25a2:	9f 81       	ldd	r25, Y+7	; 0x07
    25a4:	a8 85       	ldd	r26, Y+8	; 0x08
    25a6:	b9 85       	ldd	r27, Y+9	; 0x09
    25a8:	89 2b       	or	r24, r25
    25aa:	8a 2b       	or	r24, r26
    25ac:	8b 2b       	or	r24, r27
    25ae:	21 f4       	brne	.+8      	; 0x25b8 <xQueueGenericSend+0x86>
    25b0:	0f 90       	pop	r0
    25b2:	0f be       	out	0x3f, r0	; 63
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	4a c0       	rjmp	.+148    	; 0x264c <xQueueGenericSend+0x11a>
    25b8:	11 11       	cpse	r17, r1
    25ba:	05 c0       	rjmp	.+10     	; 0x25c6 <xQueueGenericSend+0x94>
    25bc:	ce 01       	movw	r24, r28
    25be:	01 96       	adiw	r24, 0x01	; 1
    25c0:	0e 94 8d 18 	call	0x311a	; 0x311a <vTaskSetTimeOutState>
    25c4:	11 e0       	ldi	r17, 0x01	; 1
    25c6:	0f 90       	pop	r0
    25c8:	0f be       	out	0x3f, r0	; 63
    25ca:	0e 94 f5 15 	call	0x2bea	; 0x2bea <vTaskSuspendAll>
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	0f 92       	push	r0
    25d4:	f7 01       	movw	r30, r14
    25d6:	81 a1       	ldd	r24, Z+33	; 0x21
    25d8:	8f 3f       	cpi	r24, 0xFF	; 255
    25da:	09 f4       	brne	.+2      	; 0x25de <xQueueGenericSend+0xac>
    25dc:	11 a2       	std	Z+33, r1	; 0x21
    25de:	f7 01       	movw	r30, r14
    25e0:	82 a1       	ldd	r24, Z+34	; 0x22
    25e2:	8f 3f       	cpi	r24, 0xFF	; 255
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <xQueueGenericSend+0xb6>
    25e6:	12 a2       	std	Z+34, r1	; 0x22
    25e8:	0f 90       	pop	r0
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	be 01       	movw	r22, r28
    25ee:	6a 5f       	subi	r22, 0xFA	; 250
    25f0:	7f 4f       	sbci	r23, 0xFF	; 255
    25f2:	ce 01       	movw	r24, r28
    25f4:	01 96       	adiw	r24, 0x01	; 1
    25f6:	0e 94 9e 18 	call	0x313c	; 0x313c <xTaskCheckForTimeOut>
    25fa:	81 11       	cpse	r24, r1
    25fc:	21 c0       	rjmp	.+66     	; 0x2640 <xQueueGenericSend+0x10e>
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	0f 92       	push	r0
    2604:	f7 01       	movw	r30, r14
    2606:	96 8d       	ldd	r25, Z+30	; 0x1e
    2608:	0f 90       	pop	r0
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	87 8d       	ldd	r24, Z+31	; 0x1f
    260e:	98 13       	cpse	r25, r24
    2610:	11 c0       	rjmp	.+34     	; 0x2634 <xQueueGenericSend+0x102>
    2612:	4e 81       	ldd	r20, Y+6	; 0x06
    2614:	5f 81       	ldd	r21, Y+7	; 0x07
    2616:	68 85       	ldd	r22, Y+8	; 0x08
    2618:	79 85       	ldd	r23, Y+9	; 0x09
    261a:	c6 01       	movw	r24, r12
    261c:	0e 94 24 18 	call	0x3048	; 0x3048 <vTaskPlaceOnEventList>
    2620:	c7 01       	movw	r24, r14
    2622:	0e 94 e5 11 	call	0x23ca	; 0x23ca <prvUnlockQueue>
    2626:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <xTaskResumeAll>
    262a:	81 11       	cpse	r24, r1
    262c:	9c cf       	rjmp	.-200    	; 0x2566 <xQueueGenericSend+0x34>
    262e:	0e 94 b8 10 	call	0x2170	; 0x2170 <vPortYield>
    2632:	99 cf       	rjmp	.-206    	; 0x2566 <xQueueGenericSend+0x34>
    2634:	c7 01       	movw	r24, r14
    2636:	0e 94 e5 11 	call	0x23ca	; 0x23ca <prvUnlockQueue>
    263a:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <xTaskResumeAll>
    263e:	93 cf       	rjmp	.-218    	; 0x2566 <xQueueGenericSend+0x34>
    2640:	c7 01       	movw	r24, r14
    2642:	0e 94 e5 11 	call	0x23ca	; 0x23ca <prvUnlockQueue>
    2646:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <xTaskResumeAll>
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	29 96       	adiw	r28, 0x09	; 9
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	de bf       	out	0x3e, r29	; 62
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	1f 91       	pop	r17
    2658:	0f 91       	pop	r16
    265a:	ff 90       	pop	r15
    265c:	ef 90       	pop	r14
    265e:	df 90       	pop	r13
    2660:	cf 90       	pop	r12
    2662:	bf 90       	pop	r11
    2664:	af 90       	pop	r10
    2666:	08 95       	ret

00002668 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    2668:	0f 93       	push	r16
    266a:	1f 93       	push	r17
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	8a 01       	movw	r16, r20
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2672:	fc 01       	movw	r30, r24
    2674:	56 8d       	ldd	r21, Z+30	; 0x1e
    2676:	37 8d       	ldd	r19, Z+31	; 0x1f
    2678:	53 17       	cp	r21, r19
    267a:	c0 f4       	brcc	.+48     	; 0x26ac <xQueueGenericSendFromISR+0x44>
    267c:	42 2f       	mov	r20, r18
    267e:	ec 01       	movw	r28, r24
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2680:	0e 94 7f 11 	call	0x22fe	; 0x22fe <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    2684:	8a a1       	ldd	r24, Y+34	; 0x22
    2686:	8f 3f       	cpi	r24, 0xFF	; 255
    2688:	69 f4       	brne	.+26     	; 0x26a4 <xQueueGenericSendFromISR+0x3c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    268a:	8b 89       	ldd	r24, Y+19	; 0x13
    268c:	88 23       	and	r24, r24
    268e:	81 f0       	breq	.+32     	; 0x26b0 <xQueueGenericSendFromISR+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2690:	ce 01       	movw	r24, r28
    2692:	43 96       	adiw	r24, 0x13	; 19
    2694:	0e 94 4e 18 	call	0x309c	; 0x309c <xTaskRemoveFromEventList>
    2698:	88 23       	and	r24, r24
    269a:	61 f0       	breq	.+24     	; 0x26b4 <xQueueGenericSendFromISR+0x4c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	f8 01       	movw	r30, r16
    26a0:	80 83       	st	Z, r24
    26a2:	09 c0       	rjmp	.+18     	; 0x26b6 <xQueueGenericSendFromISR+0x4e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    26a4:	8f 5f       	subi	r24, 0xFF	; 255
    26a6:	8a a3       	std	Y+34, r24	; 0x22
			}

			xReturn = pdPASS;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	05 c0       	rjmp	.+10     	; 0x26b6 <xQueueGenericSendFromISR+0x4e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	03 c0       	rjmp	.+6      	; 0x26b6 <xQueueGenericSendFromISR+0x4e>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	01 c0       	rjmp	.+2      	; 0x26b6 <xQueueGenericSendFromISR+0x4e>
    26b4:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	1f 91       	pop	r17
    26bc:	0f 91       	pop	r16
    26be:	08 95       	ret

000026c0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    26c0:	af 92       	push	r10
    26c2:	bf 92       	push	r11
    26c4:	cf 92       	push	r12
    26c6:	df 92       	push	r13
    26c8:	ef 92       	push	r14
    26ca:	ff 92       	push	r15
    26cc:	0f 93       	push	r16
    26ce:	1f 93       	push	r17
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
    26d8:	29 97       	sbiw	r28, 0x09	; 9
    26da:	cd bf       	out	0x3d, r28	; 61
    26dc:	de bf       	out	0x3e, r29	; 62
    26de:	7c 01       	movw	r14, r24
    26e0:	5b 01       	movw	r10, r22
    26e2:	2e 83       	std	Y+6, r18	; 0x06
    26e4:	3f 83       	std	Y+7, r19	; 0x07
    26e6:	48 87       	std	Y+8, r20	; 0x08
    26e8:	59 87       	std	Y+9, r21	; 0x09
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    26ea:	10 e0       	ldi	r17, 0x00	; 0
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    26ec:	6c 01       	movw	r12, r24
    26ee:	83 e1       	ldi	r24, 0x13	; 19
    26f0:	c8 0e       	add	r12, r24
    26f2:	d1 1c       	adc	r13, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    26fa:	f7 01       	movw	r30, r14
    26fc:	86 8d       	ldd	r24, Z+30	; 0x1e
    26fe:	88 23       	and	r24, r24
    2700:	99 f1       	breq	.+102    	; 0x2768 <xQueueGenericReceive+0xa8>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2702:	c6 80       	ldd	r12, Z+6	; 0x06
    2704:	d7 80       	ldd	r13, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2706:	b5 01       	movw	r22, r10
    2708:	c7 01       	movw	r24, r14
    270a:	0e 94 cb 11 	call	0x2396	; 0x2396 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    270e:	01 11       	cpse	r16, r1
    2710:	1a c0       	rjmp	.+52     	; 0x2746 <xQueueGenericReceive+0x86>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    2712:	f7 01       	movw	r30, r14
    2714:	86 8d       	ldd	r24, Z+30	; 0x1e
    2716:	81 50       	subi	r24, 0x01	; 1
    2718:	86 8f       	std	Z+30, r24	; 0x1e

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    271a:	80 81       	ld	r24, Z
    271c:	91 81       	ldd	r25, Z+1	; 0x01
    271e:	89 2b       	or	r24, r25
    2720:	29 f4       	brne	.+10     	; 0x272c <xQueueGenericReceive+0x6c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    2722:	0e 94 28 19 	call	0x3250	; 0x3250 <xTaskGetCurrentTaskHandle>
    2726:	f7 01       	movw	r30, r14
    2728:	82 83       	std	Z+2, r24	; 0x02
    272a:	93 83       	std	Z+3, r25	; 0x03
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    272c:	f7 01       	movw	r30, r14
    272e:	80 85       	ldd	r24, Z+8	; 0x08
    2730:	88 23       	and	r24, r24
    2732:	b1 f0       	breq	.+44     	; 0x2760 <xQueueGenericReceive+0xa0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2734:	c7 01       	movw	r24, r14
    2736:	08 96       	adiw	r24, 0x08	; 8
    2738:	0e 94 4e 18 	call	0x309c	; 0x309c <xTaskRemoveFromEventList>
    273c:	81 30       	cpi	r24, 0x01	; 1
    273e:	81 f4       	brne	.+32     	; 0x2760 <xQueueGenericReceive+0xa0>
						{
							portYIELD_WITHIN_API();
    2740:	0e 94 b8 10 	call	0x2170	; 0x2170 <vPortYield>
    2744:	0d c0       	rjmp	.+26     	; 0x2760 <xQueueGenericReceive+0xa0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    2746:	f7 01       	movw	r30, r14
    2748:	c6 82       	std	Z+6, r12	; 0x06
    274a:	d7 82       	std	Z+7, r13	; 0x07

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    274c:	83 89       	ldd	r24, Z+19	; 0x13
    274e:	88 23       	and	r24, r24
    2750:	39 f0       	breq	.+14     	; 0x2760 <xQueueGenericReceive+0xa0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2752:	c7 01       	movw	r24, r14
    2754:	43 96       	adiw	r24, 0x13	; 19
    2756:	0e 94 4e 18 	call	0x309c	; 0x309c <xTaskRemoveFromEventList>
    275a:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    275c:	0e 94 b8 10 	call	0x2170	; 0x2170 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    2760:	0f 90       	pop	r0
    2762:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	62 c0       	rjmp	.+196    	; 0x282c <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2768:	8e 81       	ldd	r24, Y+6	; 0x06
    276a:	9f 81       	ldd	r25, Y+7	; 0x07
    276c:	a8 85       	ldd	r26, Y+8	; 0x08
    276e:	b9 85       	ldd	r27, Y+9	; 0x09
    2770:	89 2b       	or	r24, r25
    2772:	8a 2b       	or	r24, r26
    2774:	8b 2b       	or	r24, r27
    2776:	21 f4       	brne	.+8      	; 0x2780 <xQueueGenericReceive+0xc0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2778:	0f 90       	pop	r0
    277a:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	56 c0       	rjmp	.+172    	; 0x282c <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    2780:	11 11       	cpse	r17, r1
    2782:	05 c0       	rjmp	.+10     	; 0x278e <xQueueGenericReceive+0xce>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2784:	ce 01       	movw	r24, r28
    2786:	01 96       	adiw	r24, 0x01	; 1
    2788:	0e 94 8d 18 	call	0x311a	; 0x311a <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    278c:	11 e0       	ldi	r17, 0x01	; 1
				}
			}
		}
		taskEXIT_CRITICAL();
    278e:	0f 90       	pop	r0
    2790:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2792:	0e 94 f5 15 	call	0x2bea	; 0x2bea <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	f8 94       	cli
    279a:	0f 92       	push	r0
    279c:	f7 01       	movw	r30, r14
    279e:	81 a1       	ldd	r24, Z+33	; 0x21
    27a0:	8f 3f       	cpi	r24, 0xFF	; 255
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <xQueueGenericReceive+0xe6>
    27a4:	11 a2       	std	Z+33, r1	; 0x21
    27a6:	f7 01       	movw	r30, r14
    27a8:	82 a1       	ldd	r24, Z+34	; 0x22
    27aa:	8f 3f       	cpi	r24, 0xFF	; 255
    27ac:	09 f4       	brne	.+2      	; 0x27b0 <xQueueGenericReceive+0xf0>
    27ae:	12 a2       	std	Z+34, r1	; 0x22
    27b0:	0f 90       	pop	r0
    27b2:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    27b4:	be 01       	movw	r22, r28
    27b6:	6a 5f       	subi	r22, 0xFA	; 250
    27b8:	7f 4f       	sbci	r23, 0xFF	; 255
    27ba:	ce 01       	movw	r24, r28
    27bc:	01 96       	adiw	r24, 0x01	; 1
    27be:	0e 94 9e 18 	call	0x313c	; 0x313c <xTaskCheckForTimeOut>
    27c2:	81 11       	cpse	r24, r1
    27c4:	2d c0       	rjmp	.+90     	; 0x2820 <xQueueGenericReceive+0x160>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    27cc:	f7 01       	movw	r30, r14
    27ce:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    27d0:	0f 90       	pop	r0
    27d2:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    27d4:	81 11       	cpse	r24, r1
    27d6:	1e c0       	rjmp	.+60     	; 0x2814 <xQueueGenericReceive+0x154>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    27d8:	80 81       	ld	r24, Z
    27da:	91 81       	ldd	r25, Z+1	; 0x01
    27dc:	89 2b       	or	r24, r25
    27de:	49 f4       	brne	.+18     	; 0x27f2 <xQueueGenericReceive+0x132>
					{
						portENTER_CRITICAL();
    27e0:	0f b6       	in	r0, 0x3f	; 63
    27e2:	f8 94       	cli
    27e4:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    27e6:	82 81       	ldd	r24, Z+2	; 0x02
    27e8:	93 81       	ldd	r25, Z+3	; 0x03
    27ea:	0e 94 2d 19 	call	0x325a	; 0x325a <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    27ee:	0f 90       	pop	r0
    27f0:	0f be       	out	0x3f, r0	; 63
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    27f2:	4e 81       	ldd	r20, Y+6	; 0x06
    27f4:	5f 81       	ldd	r21, Y+7	; 0x07
    27f6:	68 85       	ldd	r22, Y+8	; 0x08
    27f8:	79 85       	ldd	r23, Y+9	; 0x09
    27fa:	c6 01       	movw	r24, r12
    27fc:	0e 94 24 18 	call	0x3048	; 0x3048 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2800:	c7 01       	movw	r24, r14
    2802:	0e 94 e5 11 	call	0x23ca	; 0x23ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2806:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <xTaskResumeAll>
    280a:	81 11       	cpse	r24, r1
    280c:	73 cf       	rjmp	.-282    	; 0x26f4 <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
    280e:	0e 94 b8 10 	call	0x2170	; 0x2170 <vPortYield>
    2812:	70 cf       	rjmp	.-288    	; 0x26f4 <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2814:	c7 01       	movw	r24, r14
    2816:	0e 94 e5 11 	call	0x23ca	; 0x23ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
    281a:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <xTaskResumeAll>
    281e:	6a cf       	rjmp	.-300    	; 0x26f4 <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2820:	c7 01       	movw	r24, r14
    2822:	0e 94 e5 11 	call	0x23ca	; 0x23ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2826:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    282a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    282c:	29 96       	adiw	r28, 0x09	; 9
    282e:	cd bf       	out	0x3d, r28	; 61
    2830:	de bf       	out	0x3e, r29	; 62
    2832:	df 91       	pop	r29
    2834:	cf 91       	pop	r28
    2836:	1f 91       	pop	r17
    2838:	0f 91       	pop	r16
    283a:	ff 90       	pop	r15
    283c:	ef 90       	pop	r14
    283e:	df 90       	pop	r13
    2840:	cf 90       	pop	r12
    2842:	bf 90       	pop	r11
    2844:	af 90       	pop	r10
    2846:	08 95       	ret

00002848 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    2848:	0f 93       	push	r16
    284a:	1f 93       	push	r17
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2850:	fc 01       	movw	r30, r24
    2852:	26 8d       	ldd	r18, Z+30	; 0x1e
    2854:	22 23       	and	r18, r18
    2856:	d9 f0       	breq	.+54     	; 0x288e <xQueueReceiveFromISR+0x46>
    2858:	8a 01       	movw	r16, r20
    285a:	ec 01       	movw	r28, r24
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    285c:	0e 94 cb 11 	call	0x2396	; 0x2396 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    2860:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2862:	81 50       	subi	r24, 0x01	; 1
    2864:	8e 8f       	std	Y+30, r24	; 0x1e

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    2866:	89 a1       	ldd	r24, Y+33	; 0x21
    2868:	8f 3f       	cpi	r24, 0xFF	; 255
    286a:	69 f4       	brne	.+26     	; 0x2886 <xQueueReceiveFromISR+0x3e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    286c:	88 85       	ldd	r24, Y+8	; 0x08
    286e:	88 23       	and	r24, r24
    2870:	81 f0       	breq	.+32     	; 0x2892 <xQueueReceiveFromISR+0x4a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2872:	ce 01       	movw	r24, r28
    2874:	08 96       	adiw	r24, 0x08	; 8
    2876:	0e 94 4e 18 	call	0x309c	; 0x309c <xTaskRemoveFromEventList>
    287a:	88 23       	and	r24, r24
    287c:	61 f0       	breq	.+24     	; 0x2896 <xQueueReceiveFromISR+0x4e>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	f8 01       	movw	r30, r16
    2882:	80 83       	st	Z, r24
    2884:	09 c0       	rjmp	.+18     	; 0x2898 <xQueueReceiveFromISR+0x50>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    2886:	8f 5f       	subi	r24, 0xFF	; 255
    2888:	89 a3       	std	Y+33, r24	; 0x21
			}

			xReturn = pdPASS;
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	05 c0       	rjmp	.+10     	; 0x2898 <xQueueReceiveFromISR+0x50>
		}
		else
		{
			xReturn = pdFAIL;
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	03 c0       	rjmp	.+6      	; 0x2898 <xQueueReceiveFromISR+0x50>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
			}

			xReturn = pdPASS;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	01 c0       	rjmp	.+2      	; 0x2898 <xQueueReceiveFromISR+0x50>
    2896:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    2898:	df 91       	pop	r29
    289a:	cf 91       	pop	r28
    289c:	1f 91       	pop	r17
    289e:	0f 91       	pop	r16
    28a0:	08 95       	ret

000028a2 <uxQueueMessagesWaiting>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    28a2:	0f b6       	in	r0, 0x3f	; 63
    28a4:	f8 94       	cli
    28a6:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    28a8:	fc 01       	movw	r30, r24
    28aa:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    28ac:	0f 90       	pop	r0
    28ae:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    28b0:	08 95       	ret

000028b2 <uxQueueMessagesWaitingFromISR>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    28b2:	fc 01       	movw	r30, r24
    28b4:	86 8d       	ldd	r24, Z+30	; 0x1e

	return uxReturn;
}
    28b6:	08 95       	ret

000028b8 <prvIdleTask>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    28b8:	ce ed       	ldi	r28, 0xDE	; 222
    28ba:	d2 e3       	ldi	r29, 0x32	; 50
    28bc:	88 81       	ld	r24, Y
    28be:	82 30       	cpi	r24, 0x02	; 2
    28c0:	e8 f3       	brcs	.-6      	; 0x28bc <prvIdleTask+0x4>
    28c2:	0e 94 b8 10 	call	0x2170	; 0x2170 <vPortYield>
    28c6:	fa cf       	rjmp	.-12     	; 0x28bc <prvIdleTask+0x4>

000028c8 <prvAddCurrentTaskToDelayedList>:
    28c8:	cf 92       	push	r12
    28ca:	df 92       	push	r13
    28cc:	ef 92       	push	r14
    28ce:	ff 92       	push	r15
    28d0:	6b 01       	movw	r12, r22
    28d2:	7c 01       	movw	r14, r24
    28d4:	e0 91 0a 33 	lds	r30, 0x330A	; 0x80330a <pxCurrentTCB>
    28d8:	f0 91 0b 33 	lds	r31, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
    28dc:	62 83       	std	Z+2, r22	; 0x02
    28de:	73 83       	std	Z+3, r23	; 0x03
    28e0:	84 83       	std	Z+4, r24	; 0x04
    28e2:	95 83       	std	Z+5, r25	; 0x05
    28e4:	80 91 b2 32 	lds	r24, 0x32B2	; 0x8032b2 <xTickCount>
    28e8:	90 91 b3 32 	lds	r25, 0x32B3	; 0x8032b3 <xTickCount+0x1>
    28ec:	a0 91 b4 32 	lds	r26, 0x32B4	; 0x8032b4 <xTickCount+0x2>
    28f0:	b0 91 b5 32 	lds	r27, 0x32B5	; 0x8032b5 <xTickCount+0x3>
    28f4:	c8 16       	cp	r12, r24
    28f6:	d9 06       	cpc	r13, r25
    28f8:	ea 06       	cpc	r14, r26
    28fa:	fb 06       	cpc	r15, r27
    28fc:	68 f4       	brcc	.+26     	; 0x2918 <prvAddCurrentTaskToDelayedList+0x50>
    28fe:	60 91 0a 33 	lds	r22, 0x330A	; 0x80330a <pxCurrentTCB>
    2902:	70 91 0b 33 	lds	r23, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
    2906:	80 91 c4 32 	lds	r24, 0x32C4	; 0x8032c4 <pxOverflowDelayedTaskList>
    290a:	90 91 c5 32 	lds	r25, 0x32C5	; 0x8032c5 <pxOverflowDelayedTaskList+0x1>
    290e:	6e 5f       	subi	r22, 0xFE	; 254
    2910:	7f 4f       	sbci	r23, 0xFF	; 255
    2912:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <vListInsert>
    2916:	21 c0       	rjmp	.+66     	; 0x295a <prvAddCurrentTaskToDelayedList+0x92>
    2918:	60 91 0a 33 	lds	r22, 0x330A	; 0x80330a <pxCurrentTCB>
    291c:	70 91 0b 33 	lds	r23, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
    2920:	80 91 c6 32 	lds	r24, 0x32C6	; 0x8032c6 <pxDelayedTaskList>
    2924:	90 91 c7 32 	lds	r25, 0x32C7	; 0x8032c7 <pxDelayedTaskList+0x1>
    2928:	6e 5f       	subi	r22, 0xFE	; 254
    292a:	7f 4f       	sbci	r23, 0xFF	; 255
    292c:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <vListInsert>
    2930:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    2934:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    2938:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    293c:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    2940:	c8 16       	cp	r12, r24
    2942:	d9 06       	cpc	r13, r25
    2944:	ea 06       	cpc	r14, r26
    2946:	fb 06       	cpc	r15, r27
    2948:	40 f4       	brcc	.+16     	; 0x295a <prvAddCurrentTaskToDelayedList+0x92>
    294a:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    294e:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    2952:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    2956:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    295a:	ff 90       	pop	r15
    295c:	ef 90       	pop	r14
    295e:	df 90       	pop	r13
    2960:	cf 90       	pop	r12
    2962:	08 95       	ret

00002964 <xTaskGenericCreate>:
    2964:	4f 92       	push	r4
    2966:	5f 92       	push	r5
    2968:	6f 92       	push	r6
    296a:	7f 92       	push	r7
    296c:	8f 92       	push	r8
    296e:	9f 92       	push	r9
    2970:	af 92       	push	r10
    2972:	bf 92       	push	r11
    2974:	cf 92       	push	r12
    2976:	df 92       	push	r13
    2978:	ef 92       	push	r14
    297a:	ff 92       	push	r15
    297c:	0f 93       	push	r16
    297e:	1f 93       	push	r17
    2980:	cf 93       	push	r28
    2982:	df 93       	push	r29
    2984:	5c 01       	movw	r10, r24
    2986:	4b 01       	movw	r8, r22
    2988:	3a 01       	movw	r6, r20
    298a:	29 01       	movw	r4, r18
    298c:	88 e2       	ldi	r24, 0x28	; 40
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <pvPortMalloc>
    2994:	ec 01       	movw	r28, r24
    2996:	89 2b       	or	r24, r25
    2998:	09 f4       	brne	.+2      	; 0x299c <xTaskGenericCreate+0x38>
    299a:	d4 c0       	rjmp	.+424    	; 0x2b44 <xTaskGenericCreate+0x1e0>
    299c:	c1 14       	cp	r12, r1
    299e:	d1 04       	cpc	r13, r1
    29a0:	09 f0       	breq	.+2      	; 0x29a4 <xTaskGenericCreate+0x40>
    29a2:	cc c0       	rjmp	.+408    	; 0x2b3c <xTaskGenericCreate+0x1d8>
    29a4:	c3 01       	movw	r24, r6
    29a6:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <pvPortMalloc>
    29aa:	8b 8f       	std	Y+27, r24	; 0x1b
    29ac:	9c 8f       	std	Y+28, r25	; 0x1c
    29ae:	00 97       	sbiw	r24, 0x00	; 0
    29b0:	21 f4       	brne	.+8      	; 0x29ba <xTaskGenericCreate+0x56>
    29b2:	ce 01       	movw	r24, r28
    29b4:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <vPortFree>
    29b8:	c5 c0       	rjmp	.+394    	; 0x2b44 <xTaskGenericCreate+0x1e0>
    29ba:	a3 01       	movw	r20, r6
    29bc:	61 e1       	ldi	r22, 0x11	; 17
    29be:	70 e0       	ldi	r23, 0x00	; 0
    29c0:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <memset>
    29c4:	93 01       	movw	r18, r6
    29c6:	21 50       	subi	r18, 0x01	; 1
    29c8:	31 09       	sbc	r19, r1
    29ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29ce:	3c 01       	movw	r6, r24
    29d0:	62 0e       	add	r6, r18
    29d2:	73 1e       	adc	r7, r19
    29d4:	4a e0       	ldi	r20, 0x0A	; 10
    29d6:	50 e0       	ldi	r21, 0x00	; 0
    29d8:	b4 01       	movw	r22, r8
    29da:	ce 01       	movw	r24, r28
    29dc:	4d 96       	adiw	r24, 0x1d	; 29
    29de:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <strncpy>
    29e2:	1e a2       	std	Y+38, r1	; 0x26
    29e4:	10 2f       	mov	r17, r16
    29e6:	04 30       	cpi	r16, 0x04	; 4
    29e8:	08 f0       	brcs	.+2      	; 0x29ec <xTaskGenericCreate+0x88>
    29ea:	13 e0       	ldi	r17, 0x03	; 3
    29ec:	1a 8f       	std	Y+26, r17	; 0x1a
    29ee:	1f a3       	std	Y+39, r17	; 0x27
    29f0:	6e 01       	movw	r12, r28
    29f2:	22 e0       	ldi	r18, 0x02	; 2
    29f4:	c2 0e       	add	r12, r18
    29f6:	d1 1c       	adc	r13, r1
    29f8:	c6 01       	movw	r24, r12
    29fa:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <vListInitialiseItem>
    29fe:	ce 01       	movw	r24, r28
    2a00:	0e 96       	adiw	r24, 0x0e	; 14
    2a02:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <vListInitialiseItem>
    2a06:	ca 87       	std	Y+10, r28	; 0x0a
    2a08:	db 87       	std	Y+11, r29	; 0x0b
    2a0a:	84 e0       	ldi	r24, 0x04	; 4
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	a0 e0       	ldi	r26, 0x00	; 0
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	81 1b       	sub	r24, r17
    2a14:	91 09       	sbc	r25, r1
    2a16:	a1 09       	sbc	r26, r1
    2a18:	b1 09       	sbc	r27, r1
    2a1a:	8e 87       	std	Y+14, r24	; 0x0e
    2a1c:	9f 87       	std	Y+15, r25	; 0x0f
    2a1e:	a8 8b       	std	Y+16, r26	; 0x10
    2a20:	b9 8b       	std	Y+17, r27	; 0x11
    2a22:	ce 8b       	std	Y+22, r28	; 0x16
    2a24:	df 8b       	std	Y+23, r29	; 0x17
    2a26:	a2 01       	movw	r20, r4
    2a28:	b5 01       	movw	r22, r10
    2a2a:	c3 01       	movw	r24, r6
    2a2c:	0e 94 04 10 	call	0x2008	; 0x2008 <pxPortInitialiseStack>
    2a30:	88 83       	st	Y, r24
    2a32:	99 83       	std	Y+1, r25	; 0x01
    2a34:	e1 14       	cp	r14, r1
    2a36:	f1 04       	cpc	r15, r1
    2a38:	19 f0       	breq	.+6      	; 0x2a40 <xTaskGenericCreate+0xdc>
    2a3a:	f7 01       	movw	r30, r14
    2a3c:	c0 83       	st	Z, r28
    2a3e:	d1 83       	std	Z+1, r29	; 0x01
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	f8 94       	cli
    2a44:	0f 92       	push	r0
    2a46:	80 91 b6 32 	lds	r24, 0x32B6	; 0x8032b6 <uxCurrentNumberOfTasks>
    2a4a:	8f 5f       	subi	r24, 0xFF	; 255
    2a4c:	80 93 b6 32 	sts	0x32B6, r24	; 0x8032b6 <uxCurrentNumberOfTasks>
    2a50:	80 91 0a 33 	lds	r24, 0x330A	; 0x80330a <pxCurrentTCB>
    2a54:	90 91 0b 33 	lds	r25, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
    2a58:	89 2b       	or	r24, r25
    2a5a:	89 f5       	brne	.+98     	; 0x2abe <xTaskGenericCreate+0x15a>
    2a5c:	c0 93 0a 33 	sts	0x330A, r28	; 0x80330a <pxCurrentTCB>
    2a60:	d0 93 0b 33 	sts	0x330B, r29	; 0x80330b <pxCurrentTCB+0x1>
    2a64:	80 91 b6 32 	lds	r24, 0x32B6	; 0x8032b6 <uxCurrentNumberOfTasks>
    2a68:	81 30       	cpi	r24, 0x01	; 1
    2a6a:	c1 f5       	brne	.+112    	; 0x2adc <xTaskGenericCreate+0x178>
    2a6c:	8e ed       	ldi	r24, 0xDE	; 222
    2a6e:	92 e3       	ldi	r25, 0x32	; 50
    2a70:	0e 94 57 0f 	call	0x1eae	; 0x1eae <vListInitialise>
    2a74:	89 ee       	ldi	r24, 0xE9	; 233
    2a76:	92 e3       	ldi	r25, 0x32	; 50
    2a78:	0e 94 57 0f 	call	0x1eae	; 0x1eae <vListInitialise>
    2a7c:	84 ef       	ldi	r24, 0xF4	; 244
    2a7e:	92 e3       	ldi	r25, 0x32	; 50
    2a80:	0e 94 57 0f 	call	0x1eae	; 0x1eae <vListInitialise>
    2a84:	8f ef       	ldi	r24, 0xFF	; 255
    2a86:	92 e3       	ldi	r25, 0x32	; 50
    2a88:	0e 94 57 0f 	call	0x1eae	; 0x1eae <vListInitialise>
    2a8c:	83 ed       	ldi	r24, 0xD3	; 211
    2a8e:	92 e3       	ldi	r25, 0x32	; 50
    2a90:	0e 94 57 0f 	call	0x1eae	; 0x1eae <vListInitialise>
    2a94:	88 ec       	ldi	r24, 0xC8	; 200
    2a96:	92 e3       	ldi	r25, 0x32	; 50
    2a98:	0e 94 57 0f 	call	0x1eae	; 0x1eae <vListInitialise>
    2a9c:	89 eb       	ldi	r24, 0xB9	; 185
    2a9e:	92 e3       	ldi	r25, 0x32	; 50
    2aa0:	0e 94 57 0f 	call	0x1eae	; 0x1eae <vListInitialise>
    2aa4:	83 ed       	ldi	r24, 0xD3	; 211
    2aa6:	92 e3       	ldi	r25, 0x32	; 50
    2aa8:	80 93 c6 32 	sts	0x32C6, r24	; 0x8032c6 <pxDelayedTaskList>
    2aac:	90 93 c7 32 	sts	0x32C7, r25	; 0x8032c7 <pxDelayedTaskList+0x1>
    2ab0:	88 ec       	ldi	r24, 0xC8	; 200
    2ab2:	92 e3       	ldi	r25, 0x32	; 50
    2ab4:	80 93 c4 32 	sts	0x32C4, r24	; 0x8032c4 <pxOverflowDelayedTaskList>
    2ab8:	90 93 c5 32 	sts	0x32C5, r25	; 0x8032c5 <pxOverflowDelayedTaskList+0x1>
    2abc:	0f c0       	rjmp	.+30     	; 0x2adc <xTaskGenericCreate+0x178>
    2abe:	80 91 af 32 	lds	r24, 0x32AF	; 0x8032af <xSchedulerRunning>
    2ac2:	81 11       	cpse	r24, r1
    2ac4:	0b c0       	rjmp	.+22     	; 0x2adc <xTaskGenericCreate+0x178>
    2ac6:	e0 91 0a 33 	lds	r30, 0x330A	; 0x80330a <pxCurrentTCB>
    2aca:	f0 91 0b 33 	lds	r31, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
    2ace:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ad0:	08 17       	cp	r16, r24
    2ad2:	20 f0       	brcs	.+8      	; 0x2adc <xTaskGenericCreate+0x178>
    2ad4:	c0 93 0a 33 	sts	0x330A, r28	; 0x80330a <pxCurrentTCB>
    2ad8:	d0 93 0b 33 	sts	0x330B, r29	; 0x80330b <pxCurrentTCB+0x1>
    2adc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ade:	90 91 b1 32 	lds	r25, 0x32B1	; 0x8032b1 <uxTopUsedPriority>
    2ae2:	98 17       	cp	r25, r24
    2ae4:	10 f4       	brcc	.+4      	; 0x2aea <xTaskGenericCreate+0x186>
    2ae6:	80 93 b1 32 	sts	0x32B1, r24	; 0x8032b1 <uxTopUsedPriority>
    2aea:	90 91 aa 32 	lds	r25, 0x32AA	; 0x8032aa <uxTaskNumber>
    2aee:	9f 5f       	subi	r25, 0xFF	; 255
    2af0:	90 93 aa 32 	sts	0x32AA, r25	; 0x8032aa <uxTaskNumber>
    2af4:	90 91 b0 32 	lds	r25, 0x32B0	; 0x8032b0 <uxTopReadyPriority>
    2af8:	98 17       	cp	r25, r24
    2afa:	10 f4       	brcc	.+4      	; 0x2b00 <xTaskGenericCreate+0x19c>
    2afc:	80 93 b0 32 	sts	0x32B0, r24	; 0x8032b0 <uxTopReadyPriority>
    2b00:	fb e0       	ldi	r31, 0x0B	; 11
    2b02:	8f 9f       	mul	r24, r31
    2b04:	c0 01       	movw	r24, r0
    2b06:	11 24       	eor	r1, r1
    2b08:	b6 01       	movw	r22, r12
    2b0a:	82 52       	subi	r24, 0x22	; 34
    2b0c:	9d 4c       	sbci	r25, 0xCD	; 205
    2b0e:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <vListInsertEnd>
    2b12:	0f 90       	pop	r0
    2b14:	0f be       	out	0x3f, r0	; 63
    2b16:	80 91 af 32 	lds	r24, 0x32AF	; 0x8032af <xSchedulerRunning>
    2b1a:	88 23       	and	r24, r24
    2b1c:	59 f0       	breq	.+22     	; 0x2b34 <xTaskGenericCreate+0x1d0>
    2b1e:	e0 91 0a 33 	lds	r30, 0x330A	; 0x80330a <pxCurrentTCB>
    2b22:	f0 91 0b 33 	lds	r31, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
    2b26:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b28:	80 17       	cp	r24, r16
    2b2a:	30 f4       	brcc	.+12     	; 0x2b38 <xTaskGenericCreate+0x1d4>
    2b2c:	0e 94 b8 10 	call	0x2170	; 0x2170 <vPortYield>
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	09 c0       	rjmp	.+18     	; 0x2b46 <xTaskGenericCreate+0x1e2>
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	07 c0       	rjmp	.+14     	; 0x2b46 <xTaskGenericCreate+0x1e2>
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	05 c0       	rjmp	.+10     	; 0x2b46 <xTaskGenericCreate+0x1e2>
    2b3c:	cb 8e       	std	Y+27, r12	; 0x1b
    2b3e:	dc 8e       	std	Y+28, r13	; 0x1c
    2b40:	c6 01       	movw	r24, r12
    2b42:	3b cf       	rjmp	.-394    	; 0x29ba <xTaskGenericCreate+0x56>
    2b44:	8f ef       	ldi	r24, 0xFF	; 255
    2b46:	df 91       	pop	r29
    2b48:	cf 91       	pop	r28
    2b4a:	1f 91       	pop	r17
    2b4c:	0f 91       	pop	r16
    2b4e:	ff 90       	pop	r15
    2b50:	ef 90       	pop	r14
    2b52:	df 90       	pop	r13
    2b54:	cf 90       	pop	r12
    2b56:	bf 90       	pop	r11
    2b58:	af 90       	pop	r10
    2b5a:	9f 90       	pop	r9
    2b5c:	8f 90       	pop	r8
    2b5e:	7f 90       	pop	r7
    2b60:	6f 90       	pop	r6
    2b62:	5f 90       	pop	r5
    2b64:	4f 90       	pop	r4
    2b66:	08 95       	ret

00002b68 <uxTaskPriorityGet>:
    2b68:	0f b6       	in	r0, 0x3f	; 63
    2b6a:	f8 94       	cli
    2b6c:	0f 92       	push	r0
    2b6e:	00 97       	sbiw	r24, 0x00	; 0
    2b70:	21 f4       	brne	.+8      	; 0x2b7a <uxTaskPriorityGet+0x12>
    2b72:	80 91 0a 33 	lds	r24, 0x330A	; 0x80330a <pxCurrentTCB>
    2b76:	90 91 0b 33 	lds	r25, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
    2b7a:	0f 90       	pop	r0
    2b7c:	0f be       	out	0x3f, r0	; 63
    2b7e:	fc 01       	movw	r30, r24
    2b80:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b82:	08 95       	ret

00002b84 <vTaskStartScheduler>:
    2b84:	af 92       	push	r10
    2b86:	bf 92       	push	r11
    2b88:	cf 92       	push	r12
    2b8a:	df 92       	push	r13
    2b8c:	ef 92       	push	r14
    2b8e:	ff 92       	push	r15
    2b90:	0f 93       	push	r16
    2b92:	a1 2c       	mov	r10, r1
    2b94:	b1 2c       	mov	r11, r1
    2b96:	c1 2c       	mov	r12, r1
    2b98:	d1 2c       	mov	r13, r1
    2b9a:	0f 2e       	mov	r0, r31
    2b9c:	f7 eb       	ldi	r31, 0xB7	; 183
    2b9e:	ef 2e       	mov	r14, r31
    2ba0:	f2 e3       	ldi	r31, 0x32	; 50
    2ba2:	ff 2e       	mov	r15, r31
    2ba4:	f0 2d       	mov	r31, r0
    2ba6:	00 e0       	ldi	r16, 0x00	; 0
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	44 e6       	ldi	r20, 0x64	; 100
    2bae:	50 e0       	ldi	r21, 0x00	; 0
    2bb0:	6f ee       	ldi	r22, 0xEF	; 239
    2bb2:	71 e2       	ldi	r23, 0x21	; 33
    2bb4:	8c e5       	ldi	r24, 0x5C	; 92
    2bb6:	94 e1       	ldi	r25, 0x14	; 20
    2bb8:	0e 94 b2 14 	call	0x2964	; 0x2964 <xTaskGenericCreate>
    2bbc:	81 30       	cpi	r24, 0x01	; 1
    2bbe:	69 f4       	brne	.+26     	; 0x2bda <vTaskStartScheduler+0x56>
    2bc0:	f8 94       	cli
    2bc2:	80 93 af 32 	sts	0x32AF, r24	; 0x8032af <xSchedulerRunning>
    2bc6:	10 92 b2 32 	sts	0x32B2, r1	; 0x8032b2 <xTickCount>
    2bca:	10 92 b3 32 	sts	0x32B3, r1	; 0x8032b3 <xTickCount+0x1>
    2bce:	10 92 b4 32 	sts	0x32B4, r1	; 0x8032b4 <xTickCount+0x2>
    2bd2:	10 92 b5 32 	sts	0x32B5, r1	; 0x8032b5 <xTickCount+0x3>
    2bd6:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <xPortStartScheduler>
    2bda:	0f 91       	pop	r16
    2bdc:	ff 90       	pop	r15
    2bde:	ef 90       	pop	r14
    2be0:	df 90       	pop	r13
    2be2:	cf 90       	pop	r12
    2be4:	bf 90       	pop	r11
    2be6:	af 90       	pop	r10
    2be8:	08 95       	ret

00002bea <vTaskSuspendAll>:
    2bea:	80 91 ae 32 	lds	r24, 0x32AE	; 0x8032ae <uxSchedulerSuspended>
    2bee:	8f 5f       	subi	r24, 0xFF	; 255
    2bf0:	80 93 ae 32 	sts	0x32AE, r24	; 0x8032ae <uxSchedulerSuspended>
    2bf4:	08 95       	ret

00002bf6 <xTaskGetTickCount>:
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	0f 92       	push	r0
    2bfc:	60 91 b2 32 	lds	r22, 0x32B2	; 0x8032b2 <xTickCount>
    2c00:	70 91 b3 32 	lds	r23, 0x32B3	; 0x8032b3 <xTickCount+0x1>
    2c04:	80 91 b4 32 	lds	r24, 0x32B4	; 0x8032b4 <xTickCount+0x2>
    2c08:	90 91 b5 32 	lds	r25, 0x32B5	; 0x8032b5 <xTickCount+0x3>
    2c0c:	0f 90       	pop	r0
    2c0e:	0f be       	out	0x3f, r0	; 63
    2c10:	08 95       	ret

00002c12 <pcTaskGetTaskName>:
    2c12:	00 97       	sbiw	r24, 0x00	; 0
    2c14:	21 f4       	brne	.+8      	; 0x2c1e <pcTaskGetTaskName+0xc>
    2c16:	80 91 0a 33 	lds	r24, 0x330A	; 0x80330a <pxCurrentTCB>
    2c1a:	90 91 0b 33 	lds	r25, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
    2c1e:	4d 96       	adiw	r24, 0x1d	; 29
    2c20:	08 95       	ret

00002c22 <xTaskGetIdleTaskHandle>:
    2c22:	80 91 b7 32 	lds	r24, 0x32B7	; 0x8032b7 <xIdleTaskHandle>
    2c26:	90 91 b8 32 	lds	r25, 0x32B8	; 0x8032b8 <xIdleTaskHandle+0x1>
    2c2a:	08 95       	ret

00002c2c <vTaskIncrementTick>:
    2c2c:	ff 92       	push	r15
    2c2e:	0f 93       	push	r16
    2c30:	1f 93       	push	r17
    2c32:	cf 93       	push	r28
    2c34:	df 93       	push	r29
    2c36:	80 91 ae 32 	lds	r24, 0x32AE	; 0x8032ae <uxSchedulerSuspended>
    2c3a:	81 11       	cpse	r24, r1
    2c3c:	ed c0       	rjmp	.+474    	; 0x2e18 <vTaskIncrementTick+0x1ec>
    2c3e:	80 91 b2 32 	lds	r24, 0x32B2	; 0x8032b2 <xTickCount>
    2c42:	90 91 b3 32 	lds	r25, 0x32B3	; 0x8032b3 <xTickCount+0x1>
    2c46:	a0 91 b4 32 	lds	r26, 0x32B4	; 0x8032b4 <xTickCount+0x2>
    2c4a:	b0 91 b5 32 	lds	r27, 0x32B5	; 0x8032b5 <xTickCount+0x3>
    2c4e:	01 96       	adiw	r24, 0x01	; 1
    2c50:	a1 1d       	adc	r26, r1
    2c52:	b1 1d       	adc	r27, r1
    2c54:	80 93 b2 32 	sts	0x32B2, r24	; 0x8032b2 <xTickCount>
    2c58:	90 93 b3 32 	sts	0x32B3, r25	; 0x8032b3 <xTickCount+0x1>
    2c5c:	a0 93 b4 32 	sts	0x32B4, r26	; 0x8032b4 <xTickCount+0x2>
    2c60:	b0 93 b5 32 	sts	0x32B5, r27	; 0x8032b5 <xTickCount+0x3>
    2c64:	80 91 b2 32 	lds	r24, 0x32B2	; 0x8032b2 <xTickCount>
    2c68:	90 91 b3 32 	lds	r25, 0x32B3	; 0x8032b3 <xTickCount+0x1>
    2c6c:	a0 91 b4 32 	lds	r26, 0x32B4	; 0x8032b4 <xTickCount+0x2>
    2c70:	b0 91 b5 32 	lds	r27, 0x32B5	; 0x8032b5 <xTickCount+0x3>
    2c74:	89 2b       	or	r24, r25
    2c76:	8a 2b       	or	r24, r26
    2c78:	8b 2b       	or	r24, r27
    2c7a:	f1 f5       	brne	.+124    	; 0x2cf8 <vTaskIncrementTick+0xcc>
    2c7c:	80 91 c6 32 	lds	r24, 0x32C6	; 0x8032c6 <pxDelayedTaskList>
    2c80:	90 91 c7 32 	lds	r25, 0x32C7	; 0x8032c7 <pxDelayedTaskList+0x1>
    2c84:	20 91 c4 32 	lds	r18, 0x32C4	; 0x8032c4 <pxOverflowDelayedTaskList>
    2c88:	30 91 c5 32 	lds	r19, 0x32C5	; 0x8032c5 <pxOverflowDelayedTaskList+0x1>
    2c8c:	20 93 c6 32 	sts	0x32C6, r18	; 0x8032c6 <pxDelayedTaskList>
    2c90:	30 93 c7 32 	sts	0x32C7, r19	; 0x8032c7 <pxDelayedTaskList+0x1>
    2c94:	80 93 c4 32 	sts	0x32C4, r24	; 0x8032c4 <pxOverflowDelayedTaskList>
    2c98:	90 93 c5 32 	sts	0x32C5, r25	; 0x8032c5 <pxOverflowDelayedTaskList+0x1>
    2c9c:	80 91 ab 32 	lds	r24, 0x32AB	; 0x8032ab <xNumOfOverflows>
    2ca0:	8f 5f       	subi	r24, 0xFF	; 255
    2ca2:	80 93 ab 32 	sts	0x32AB, r24	; 0x8032ab <xNumOfOverflows>
    2ca6:	e0 91 c6 32 	lds	r30, 0x32C6	; 0x8032c6 <pxDelayedTaskList>
    2caa:	f0 91 c7 32 	lds	r31, 0x32C7	; 0x8032c7 <pxDelayedTaskList+0x1>
    2cae:	80 81       	ld	r24, Z
    2cb0:	81 11       	cpse	r24, r1
    2cb2:	0c c0       	rjmp	.+24     	; 0x2ccc <vTaskIncrementTick+0xa0>
    2cb4:	8f ef       	ldi	r24, 0xFF	; 255
    2cb6:	9f ef       	ldi	r25, 0xFF	; 255
    2cb8:	dc 01       	movw	r26, r24
    2cba:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2cbe:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2cc2:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2cc6:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    2cca:	16 c0       	rjmp	.+44     	; 0x2cf8 <vTaskIncrementTick+0xcc>
    2ccc:	e0 91 c6 32 	lds	r30, 0x32C6	; 0x8032c6 <pxDelayedTaskList>
    2cd0:	f0 91 c7 32 	lds	r31, 0x32C7	; 0x8032c7 <pxDelayedTaskList+0x1>
    2cd4:	07 80       	ldd	r0, Z+7	; 0x07
    2cd6:	f0 85       	ldd	r31, Z+8	; 0x08
    2cd8:	e0 2d       	mov	r30, r0
    2cda:	00 84       	ldd	r0, Z+8	; 0x08
    2cdc:	f1 85       	ldd	r31, Z+9	; 0x09
    2cde:	e0 2d       	mov	r30, r0
    2ce0:	82 81       	ldd	r24, Z+2	; 0x02
    2ce2:	93 81       	ldd	r25, Z+3	; 0x03
    2ce4:	a4 81       	ldd	r26, Z+4	; 0x04
    2ce6:	b5 81       	ldd	r27, Z+5	; 0x05
    2ce8:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2cec:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2cf0:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2cf4:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    2cf8:	40 91 b2 32 	lds	r20, 0x32B2	; 0x8032b2 <xTickCount>
    2cfc:	50 91 b3 32 	lds	r21, 0x32B3	; 0x8032b3 <xTickCount+0x1>
    2d00:	60 91 b4 32 	lds	r22, 0x32B4	; 0x8032b4 <xTickCount+0x2>
    2d04:	70 91 b5 32 	lds	r23, 0x32B5	; 0x8032b5 <xTickCount+0x3>
    2d08:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    2d0c:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    2d10:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    2d14:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    2d18:	48 17       	cp	r20, r24
    2d1a:	59 07       	cpc	r21, r25
    2d1c:	6a 07       	cpc	r22, r26
    2d1e:	7b 07       	cpc	r23, r27
    2d20:	08 f4       	brcc	.+2      	; 0x2d24 <vTaskIncrementTick+0xf8>
    2d22:	7f c0       	rjmp	.+254    	; 0x2e22 <vTaskIncrementTick+0x1f6>
    2d24:	e0 91 c6 32 	lds	r30, 0x32C6	; 0x8032c6 <pxDelayedTaskList>
    2d28:	f0 91 c7 32 	lds	r31, 0x32C7	; 0x8032c7 <pxDelayedTaskList+0x1>
    2d2c:	80 81       	ld	r24, Z
    2d2e:	88 23       	and	r24, r24
    2d30:	f9 f0       	breq	.+62     	; 0x2d70 <vTaskIncrementTick+0x144>
    2d32:	e0 91 c6 32 	lds	r30, 0x32C6	; 0x8032c6 <pxDelayedTaskList>
    2d36:	f0 91 c7 32 	lds	r31, 0x32C7	; 0x8032c7 <pxDelayedTaskList+0x1>
    2d3a:	07 80       	ldd	r0, Z+7	; 0x07
    2d3c:	f0 85       	ldd	r31, Z+8	; 0x08
    2d3e:	e0 2d       	mov	r30, r0
    2d40:	c0 85       	ldd	r28, Z+8	; 0x08
    2d42:	d1 85       	ldd	r29, Z+9	; 0x09
    2d44:	8a 81       	ldd	r24, Y+2	; 0x02
    2d46:	9b 81       	ldd	r25, Y+3	; 0x03
    2d48:	ac 81       	ldd	r26, Y+4	; 0x04
    2d4a:	bd 81       	ldd	r27, Y+5	; 0x05
    2d4c:	40 91 b2 32 	lds	r20, 0x32B2	; 0x8032b2 <xTickCount>
    2d50:	50 91 b3 32 	lds	r21, 0x32B3	; 0x8032b3 <xTickCount+0x1>
    2d54:	60 91 b4 32 	lds	r22, 0x32B4	; 0x8032b4 <xTickCount+0x2>
    2d58:	70 91 b5 32 	lds	r23, 0x32B5	; 0x8032b5 <xTickCount+0x3>
    2d5c:	48 17       	cp	r20, r24
    2d5e:	59 07       	cpc	r21, r25
    2d60:	6a 07       	cpc	r22, r26
    2d62:	7b 07       	cpc	r23, r27
    2d64:	58 f1       	brcs	.+86     	; 0x2dbc <vTaskIncrementTick+0x190>
    2d66:	0f 2e       	mov	r0, r31
    2d68:	fb e0       	ldi	r31, 0x0B	; 11
    2d6a:	ff 2e       	mov	r15, r31
    2d6c:	f0 2d       	mov	r31, r0
    2d6e:	2f c0       	rjmp	.+94     	; 0x2dce <vTaskIncrementTick+0x1a2>
    2d70:	8f ef       	ldi	r24, 0xFF	; 255
    2d72:	9f ef       	ldi	r25, 0xFF	; 255
    2d74:	dc 01       	movw	r26, r24
    2d76:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2d7a:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2d7e:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2d82:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    2d86:	4d c0       	rjmp	.+154    	; 0x2e22 <vTaskIncrementTick+0x1f6>
    2d88:	e0 91 c6 32 	lds	r30, 0x32C6	; 0x8032c6 <pxDelayedTaskList>
    2d8c:	f0 91 c7 32 	lds	r31, 0x32C7	; 0x8032c7 <pxDelayedTaskList+0x1>
    2d90:	07 80       	ldd	r0, Z+7	; 0x07
    2d92:	f0 85       	ldd	r31, Z+8	; 0x08
    2d94:	e0 2d       	mov	r30, r0
    2d96:	c0 85       	ldd	r28, Z+8	; 0x08
    2d98:	d1 85       	ldd	r29, Z+9	; 0x09
    2d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9e:	ac 81       	ldd	r26, Y+4	; 0x04
    2da0:	bd 81       	ldd	r27, Y+5	; 0x05
    2da2:	40 91 b2 32 	lds	r20, 0x32B2	; 0x8032b2 <xTickCount>
    2da6:	50 91 b3 32 	lds	r21, 0x32B3	; 0x8032b3 <xTickCount+0x1>
    2daa:	60 91 b4 32 	lds	r22, 0x32B4	; 0x8032b4 <xTickCount+0x2>
    2dae:	70 91 b5 32 	lds	r23, 0x32B5	; 0x8032b5 <xTickCount+0x3>
    2db2:	48 17       	cp	r20, r24
    2db4:	59 07       	cpc	r21, r25
    2db6:	6a 07       	cpc	r22, r26
    2db8:	7b 07       	cpc	r23, r27
    2dba:	48 f4       	brcc	.+18     	; 0x2dce <vTaskIncrementTick+0x1a2>
    2dbc:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2dc0:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2dc4:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2dc8:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    2dcc:	2a c0       	rjmp	.+84     	; 0x2e22 <vTaskIncrementTick+0x1f6>
    2dce:	8e 01       	movw	r16, r28
    2dd0:	0e 5f       	subi	r16, 0xFE	; 254
    2dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd4:	c8 01       	movw	r24, r16
    2dd6:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vListRemove>
    2dda:	88 8d       	ldd	r24, Y+24	; 0x18
    2ddc:	99 8d       	ldd	r25, Y+25	; 0x19
    2dde:	89 2b       	or	r24, r25
    2de0:	21 f0       	breq	.+8      	; 0x2dea <vTaskIncrementTick+0x1be>
    2de2:	ce 01       	movw	r24, r28
    2de4:	0e 96       	adiw	r24, 0x0e	; 14
    2de6:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vListRemove>
    2dea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2dec:	90 91 b0 32 	lds	r25, 0x32B0	; 0x8032b0 <uxTopReadyPriority>
    2df0:	98 17       	cp	r25, r24
    2df2:	10 f4       	brcc	.+4      	; 0x2df8 <vTaskIncrementTick+0x1cc>
    2df4:	80 93 b0 32 	sts	0x32B0, r24	; 0x8032b0 <uxTopReadyPriority>
    2df8:	f8 9e       	mul	r15, r24
    2dfa:	c0 01       	movw	r24, r0
    2dfc:	11 24       	eor	r1, r1
    2dfe:	b8 01       	movw	r22, r16
    2e00:	82 52       	subi	r24, 0x22	; 34
    2e02:	9d 4c       	sbci	r25, 0xCD	; 205
    2e04:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <vListInsertEnd>
    2e08:	e0 91 c6 32 	lds	r30, 0x32C6	; 0x8032c6 <pxDelayedTaskList>
    2e0c:	f0 91 c7 32 	lds	r31, 0x32C7	; 0x8032c7 <pxDelayedTaskList+0x1>
    2e10:	80 81       	ld	r24, Z
    2e12:	81 11       	cpse	r24, r1
    2e14:	b9 cf       	rjmp	.-142    	; 0x2d88 <vTaskIncrementTick+0x15c>
    2e16:	ac cf       	rjmp	.-168    	; 0x2d70 <vTaskIncrementTick+0x144>
    2e18:	80 91 ad 32 	lds	r24, 0x32AD	; 0x8032ad <uxMissedTicks>
    2e1c:	8f 5f       	subi	r24, 0xFF	; 255
    2e1e:	80 93 ad 32 	sts	0x32AD, r24	; 0x8032ad <uxMissedTicks>
    2e22:	df 91       	pop	r29
    2e24:	cf 91       	pop	r28
    2e26:	1f 91       	pop	r17
    2e28:	0f 91       	pop	r16
    2e2a:	ff 90       	pop	r15
    2e2c:	08 95       	ret

00002e2e <xTaskResumeAll>:
    2e2e:	cf 92       	push	r12
    2e30:	df 92       	push	r13
    2e32:	ef 92       	push	r14
    2e34:	ff 92       	push	r15
    2e36:	0f 93       	push	r16
    2e38:	1f 93       	push	r17
    2e3a:	cf 93       	push	r28
    2e3c:	df 93       	push	r29
    2e3e:	0f b6       	in	r0, 0x3f	; 63
    2e40:	f8 94       	cli
    2e42:	0f 92       	push	r0
    2e44:	80 91 ae 32 	lds	r24, 0x32AE	; 0x8032ae <uxSchedulerSuspended>
    2e48:	81 50       	subi	r24, 0x01	; 1
    2e4a:	80 93 ae 32 	sts	0x32AE, r24	; 0x8032ae <uxSchedulerSuspended>
    2e4e:	80 91 ae 32 	lds	r24, 0x32AE	; 0x8032ae <uxSchedulerSuspended>
    2e52:	81 11       	cpse	r24, r1
    2e54:	60 c0       	rjmp	.+192    	; 0x2f16 <xTaskResumeAll+0xe8>
    2e56:	80 91 b6 32 	lds	r24, 0x32B6	; 0x8032b6 <uxCurrentNumberOfTasks>
    2e5a:	81 11       	cpse	r24, r1
    2e5c:	2c c0       	rjmp	.+88     	; 0x2eb6 <xTaskResumeAll+0x88>
    2e5e:	5e c0       	rjmp	.+188    	; 0x2f1c <xTaskResumeAll+0xee>
    2e60:	d7 01       	movw	r26, r14
    2e62:	17 96       	adiw	r26, 0x07	; 7
    2e64:	ed 91       	ld	r30, X+
    2e66:	fc 91       	ld	r31, X
    2e68:	18 97       	sbiw	r26, 0x08	; 8
    2e6a:	c0 85       	ldd	r28, Z+8	; 0x08
    2e6c:	d1 85       	ldd	r29, Z+9	; 0x09
    2e6e:	ce 01       	movw	r24, r28
    2e70:	0e 96       	adiw	r24, 0x0e	; 14
    2e72:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vListRemove>
    2e76:	8e 01       	movw	r16, r28
    2e78:	0e 5f       	subi	r16, 0xFE	; 254
    2e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e7c:	c8 01       	movw	r24, r16
    2e7e:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vListRemove>
    2e82:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e84:	90 91 b0 32 	lds	r25, 0x32B0	; 0x8032b0 <uxTopReadyPriority>
    2e88:	98 17       	cp	r25, r24
    2e8a:	10 f4       	brcc	.+4      	; 0x2e90 <xTaskResumeAll+0x62>
    2e8c:	80 93 b0 32 	sts	0x32B0, r24	; 0x8032b0 <uxTopReadyPriority>
    2e90:	d8 9e       	mul	r13, r24
    2e92:	c0 01       	movw	r24, r0
    2e94:	11 24       	eor	r1, r1
    2e96:	b8 01       	movw	r22, r16
    2e98:	82 52       	subi	r24, 0x22	; 34
    2e9a:	9d 4c       	sbci	r25, 0xCD	; 205
    2e9c:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <vListInsertEnd>
    2ea0:	e0 91 0a 33 	lds	r30, 0x330A	; 0x80330a <pxCurrentTCB>
    2ea4:	f0 91 0b 33 	lds	r31, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
    2ea8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2eaa:	82 8d       	ldd	r24, Z+26	; 0x1a
    2eac:	98 17       	cp	r25, r24
    2eae:	70 f0       	brcs	.+28     	; 0x2ecc <xTaskResumeAll+0x9e>
    2eb0:	cc 24       	eor	r12, r12
    2eb2:	c3 94       	inc	r12
    2eb4:	0b c0       	rjmp	.+22     	; 0x2ecc <xTaskResumeAll+0x9e>
    2eb6:	c1 2c       	mov	r12, r1
    2eb8:	0f 2e       	mov	r0, r31
    2eba:	f9 eb       	ldi	r31, 0xB9	; 185
    2ebc:	ef 2e       	mov	r14, r31
    2ebe:	f2 e3       	ldi	r31, 0x32	; 50
    2ec0:	ff 2e       	mov	r15, r31
    2ec2:	f0 2d       	mov	r31, r0
    2ec4:	0f 2e       	mov	r0, r31
    2ec6:	fb e0       	ldi	r31, 0x0B	; 11
    2ec8:	df 2e       	mov	r13, r31
    2eca:	f0 2d       	mov	r31, r0
    2ecc:	f7 01       	movw	r30, r14
    2ece:	80 81       	ld	r24, Z
    2ed0:	81 11       	cpse	r24, r1
    2ed2:	c6 cf       	rjmp	.-116    	; 0x2e60 <xTaskResumeAll+0x32>
    2ed4:	80 91 ad 32 	lds	r24, 0x32AD	; 0x8032ad <uxMissedTicks>
    2ed8:	88 23       	and	r24, r24
    2eda:	81 f0       	breq	.+32     	; 0x2efc <xTaskResumeAll+0xce>
    2edc:	80 91 ad 32 	lds	r24, 0x32AD	; 0x8032ad <uxMissedTicks>
    2ee0:	88 23       	and	r24, r24
    2ee2:	99 f0       	breq	.+38     	; 0x2f0a <xTaskResumeAll+0xdc>
    2ee4:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <vTaskIncrementTick>
    2ee8:	80 91 ad 32 	lds	r24, 0x32AD	; 0x8032ad <uxMissedTicks>
    2eec:	81 50       	subi	r24, 0x01	; 1
    2eee:	80 93 ad 32 	sts	0x32AD, r24	; 0x8032ad <uxMissedTicks>
    2ef2:	80 91 ad 32 	lds	r24, 0x32AD	; 0x8032ad <uxMissedTicks>
    2ef6:	81 11       	cpse	r24, r1
    2ef8:	f5 cf       	rjmp	.-22     	; 0x2ee4 <xTaskResumeAll+0xb6>
    2efa:	07 c0       	rjmp	.+14     	; 0x2f0a <xTaskResumeAll+0xdc>
    2efc:	f1 e0       	ldi	r31, 0x01	; 1
    2efe:	cf 16       	cp	r12, r31
    2f00:	21 f0       	breq	.+8      	; 0x2f0a <xTaskResumeAll+0xdc>
    2f02:	80 91 ac 32 	lds	r24, 0x32AC	; 0x8032ac <xMissedYield>
    2f06:	81 30       	cpi	r24, 0x01	; 1
    2f08:	41 f4       	brne	.+16     	; 0x2f1a <xTaskResumeAll+0xec>
    2f0a:	10 92 ac 32 	sts	0x32AC, r1	; 0x8032ac <xMissedYield>
    2f0e:	0e 94 b8 10 	call	0x2170	; 0x2170 <vPortYield>
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	03 c0       	rjmp	.+6      	; 0x2f1c <xTaskResumeAll+0xee>
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	01 c0       	rjmp	.+2      	; 0x2f1c <xTaskResumeAll+0xee>
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	0f 90       	pop	r0
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	df 91       	pop	r29
    2f22:	cf 91       	pop	r28
    2f24:	1f 91       	pop	r17
    2f26:	0f 91       	pop	r16
    2f28:	ff 90       	pop	r15
    2f2a:	ef 90       	pop	r14
    2f2c:	df 90       	pop	r13
    2f2e:	cf 90       	pop	r12
    2f30:	08 95       	ret

00002f32 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    2f32:	cf 92       	push	r12
    2f34:	df 92       	push	r13
    2f36:	ef 92       	push	r14
    2f38:	ff 92       	push	r15
    2f3a:	6b 01       	movw	r12, r22
    2f3c:	7c 01       	movw	r14, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    2f3e:	67 2b       	or	r22, r23
    2f40:	68 2b       	or	r22, r24
    2f42:	69 2b       	or	r22, r25
    2f44:	e9 f0       	breq	.+58     	; 0x2f80 <vTaskDelay+0x4e>
		{
			vTaskSuspendAll();
    2f46:	0e 94 f5 15 	call	0x2bea	; 0x2bea <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2f4a:	80 91 b2 32 	lds	r24, 0x32B2	; 0x8032b2 <xTickCount>
    2f4e:	90 91 b3 32 	lds	r25, 0x32B3	; 0x8032b3 <xTickCount+0x1>
    2f52:	a0 91 b4 32 	lds	r26, 0x32B4	; 0x8032b4 <xTickCount+0x2>
    2f56:	b0 91 b5 32 	lds	r27, 0x32B5	; 0x8032b5 <xTickCount+0x3>
    2f5a:	c8 0e       	add	r12, r24
    2f5c:	d9 1e       	adc	r13, r25
    2f5e:	ea 1e       	adc	r14, r26
    2f60:	fb 1e       	adc	r15, r27

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2f62:	80 91 0a 33 	lds	r24, 0x330A	; 0x80330a <pxCurrentTCB>
    2f66:	90 91 0b 33 	lds	r25, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
    2f6a:	02 96       	adiw	r24, 0x02	; 2
    2f6c:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2f70:	c7 01       	movw	r24, r14
    2f72:	b6 01       	movw	r22, r12
    2f74:	0e 94 64 14 	call	0x28c8	; 0x28c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    2f78:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2f7c:	81 11       	cpse	r24, r1
    2f7e:	02 c0       	rjmp	.+4      	; 0x2f84 <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    2f80:	0e 94 b8 10 	call	0x2170	; 0x2170 <vPortYield>
		}
	}
    2f84:	ff 90       	pop	r15
    2f86:	ef 90       	pop	r14
    2f88:	df 90       	pop	r13
    2f8a:	cf 90       	pop	r12
    2f8c:	08 95       	ret

00002f8e <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    2f8e:	80 91 ae 32 	lds	r24, 0x32AE	; 0x8032ae <uxSchedulerSuspended>
    2f92:	81 11       	cpse	r24, r1
    2f94:	0c c0       	rjmp	.+24     	; 0x2fae <vTaskSwitchContext+0x20>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    2f96:	e0 91 b0 32 	lds	r30, 0x32B0	; 0x8032b0 <uxTopReadyPriority>
    2f9a:	4b e0       	ldi	r20, 0x0B	; 11
    2f9c:	e4 9f       	mul	r30, r20
    2f9e:	f0 01       	movw	r30, r0
    2fa0:	11 24       	eor	r1, r1
    2fa2:	e2 52       	subi	r30, 0x22	; 34
    2fa4:	fd 4c       	sbci	r31, 0xCD	; 205
    2fa6:	80 81       	ld	r24, Z
    2fa8:	88 23       	and	r24, r24
    2faa:	29 f0       	breq	.+10     	; 0x2fb6 <vTaskSwitchContext+0x28>
    2fac:	14 c0       	rjmp	.+40     	; 0x2fd6 <vTaskSwitchContext+0x48>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	80 93 ac 32 	sts	0x32AC, r24	; 0x8032ac <xMissedYield>
    2fb4:	08 95       	ret
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    2fb6:	9b e0       	ldi	r25, 0x0B	; 11
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    2fb8:	80 91 b0 32 	lds	r24, 0x32B0	; 0x8032b0 <uxTopReadyPriority>
    2fbc:	81 50       	subi	r24, 0x01	; 1
    2fbe:	80 93 b0 32 	sts	0x32B0, r24	; 0x8032b0 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    2fc2:	e0 91 b0 32 	lds	r30, 0x32B0	; 0x8032b0 <uxTopReadyPriority>
    2fc6:	9e 9f       	mul	r25, r30
    2fc8:	f0 01       	movw	r30, r0
    2fca:	11 24       	eor	r1, r1
    2fcc:	e2 52       	subi	r30, 0x22	; 34
    2fce:	fd 4c       	sbci	r31, 0xCD	; 205
    2fd0:	80 81       	ld	r24, Z
    2fd2:	88 23       	and	r24, r24
    2fd4:	89 f3       	breq	.-30     	; 0x2fb8 <vTaskSwitchContext+0x2a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    2fd6:	80 91 b0 32 	lds	r24, 0x32B0	; 0x8032b0 <uxTopReadyPriority>
    2fda:	28 2f       	mov	r18, r24
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	4b e0       	ldi	r20, 0x0B	; 11
    2fe0:	84 9f       	mul	r24, r20
    2fe2:	c0 01       	movw	r24, r0
    2fe4:	11 24       	eor	r1, r1
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	a2 52       	subi	r26, 0x22	; 34
    2fea:	bd 4c       	sbci	r27, 0xCD	; 205
    2fec:	11 96       	adiw	r26, 0x01	; 1
    2fee:	ed 91       	ld	r30, X+
    2ff0:	fc 91       	ld	r31, X
    2ff2:	12 97       	sbiw	r26, 0x02	; 2
    2ff4:	04 80       	ldd	r0, Z+4	; 0x04
    2ff6:	f5 81       	ldd	r31, Z+5	; 0x05
    2ff8:	e0 2d       	mov	r30, r0
    2ffa:	11 96       	adiw	r26, 0x01	; 1
    2ffc:	ed 93       	st	X+, r30
    2ffe:	fc 93       	st	X, r31
    3000:	12 97       	sbiw	r26, 0x02	; 2
    3002:	8f 51       	subi	r24, 0x1F	; 31
    3004:	9d 4c       	sbci	r25, 0xCD	; 205
    3006:	e8 17       	cp	r30, r24
    3008:	f9 07       	cpc	r31, r25
    300a:	61 f4       	brne	.+24     	; 0x3024 <vTaskSwitchContext+0x96>
    300c:	84 81       	ldd	r24, Z+4	; 0x04
    300e:	95 81       	ldd	r25, Z+5	; 0x05
    3010:	4b e0       	ldi	r20, 0x0B	; 11
    3012:	42 9f       	mul	r20, r18
    3014:	f0 01       	movw	r30, r0
    3016:	43 9f       	mul	r20, r19
    3018:	f0 0d       	add	r31, r0
    301a:	11 24       	eor	r1, r1
    301c:	e2 52       	subi	r30, 0x22	; 34
    301e:	fd 4c       	sbci	r31, 0xCD	; 205
    3020:	81 83       	std	Z+1, r24	; 0x01
    3022:	92 83       	std	Z+2, r25	; 0x02
    3024:	8b e0       	ldi	r24, 0x0B	; 11
    3026:	82 9f       	mul	r24, r18
    3028:	f0 01       	movw	r30, r0
    302a:	83 9f       	mul	r24, r19
    302c:	f0 0d       	add	r31, r0
    302e:	11 24       	eor	r1, r1
    3030:	e2 52       	subi	r30, 0x22	; 34
    3032:	fd 4c       	sbci	r31, 0xCD	; 205
    3034:	01 80       	ldd	r0, Z+1	; 0x01
    3036:	f2 81       	ldd	r31, Z+2	; 0x02
    3038:	e0 2d       	mov	r30, r0
    303a:	80 85       	ldd	r24, Z+8	; 0x08
    303c:	91 85       	ldd	r25, Z+9	; 0x09
    303e:	80 93 0a 33 	sts	0x330A, r24	; 0x80330a <pxCurrentTCB>
    3042:	90 93 0b 33 	sts	0x330B, r25	; 0x80330b <pxCurrentTCB+0x1>
    3046:	08 95       	ret

00003048 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3048:	cf 92       	push	r12
    304a:	df 92       	push	r13
    304c:	ef 92       	push	r14
    304e:	ff 92       	push	r15
    3050:	6a 01       	movw	r12, r20
    3052:	7b 01       	movw	r14, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3054:	60 91 0a 33 	lds	r22, 0x330A	; 0x80330a <pxCurrentTCB>
    3058:	70 91 0b 33 	lds	r23, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
    305c:	62 5f       	subi	r22, 0xF2	; 242
    305e:	7f 4f       	sbci	r23, 0xFF	; 255
    3060:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3064:	80 91 0a 33 	lds	r24, 0x330A	; 0x80330a <pxCurrentTCB>
    3068:	90 91 0b 33 	lds	r25, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
    306c:	02 96       	adiw	r24, 0x02	; 2
    306e:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3072:	80 91 b2 32 	lds	r24, 0x32B2	; 0x8032b2 <xTickCount>
    3076:	90 91 b3 32 	lds	r25, 0x32B3	; 0x8032b3 <xTickCount+0x1>
    307a:	a0 91 b4 32 	lds	r26, 0x32B4	; 0x8032b4 <xTickCount+0x2>
    307e:	b0 91 b5 32 	lds	r27, 0x32B5	; 0x8032b5 <xTickCount+0x3>
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3082:	bc 01       	movw	r22, r24
    3084:	cd 01       	movw	r24, r26
    3086:	6c 0d       	add	r22, r12
    3088:	7d 1d       	adc	r23, r13
    308a:	8e 1d       	adc	r24, r14
    308c:	9f 1d       	adc	r25, r15
    308e:	0e 94 64 14 	call	0x28c8	; 0x28c8 <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    3092:	ff 90       	pop	r15
    3094:	ef 90       	pop	r14
    3096:	df 90       	pop	r13
    3098:	cf 90       	pop	r12
    309a:	08 95       	ret

0000309c <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    309c:	0f 93       	push	r16
    309e:	1f 93       	push	r17
    30a0:	cf 93       	push	r28
    30a2:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    30a4:	dc 01       	movw	r26, r24
    30a6:	17 96       	adiw	r26, 0x07	; 7
    30a8:	ed 91       	ld	r30, X+
    30aa:	fc 91       	ld	r31, X
    30ac:	18 97       	sbiw	r26, 0x08	; 8
    30ae:	c0 85       	ldd	r28, Z+8	; 0x08
    30b0:	d1 85       	ldd	r29, Z+9	; 0x09
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    30b2:	8e 01       	movw	r16, r28
    30b4:	02 5f       	subi	r16, 0xF2	; 242
    30b6:	1f 4f       	sbci	r17, 0xFF	; 255
    30b8:	c8 01       	movw	r24, r16
    30ba:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    30be:	80 91 ae 32 	lds	r24, 0x32AE	; 0x8032ae <uxSchedulerSuspended>
    30c2:	81 11       	cpse	r24, r1
    30c4:	16 c0       	rjmp	.+44     	; 0x30f2 <xTaskRemoveFromEventList+0x56>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    30c6:	0c 50       	subi	r16, 0x0C	; 12
    30c8:	11 09       	sbc	r17, r1
    30ca:	c8 01       	movw	r24, r16
    30cc:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    30d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30d2:	90 91 b0 32 	lds	r25, 0x32B0	; 0x8032b0 <uxTopReadyPriority>
    30d6:	98 17       	cp	r25, r24
    30d8:	10 f4       	brcc	.+4      	; 0x30de <xTaskRemoveFromEventList+0x42>
    30da:	80 93 b0 32 	sts	0x32B0, r24	; 0x8032b0 <uxTopReadyPriority>
    30de:	bb e0       	ldi	r27, 0x0B	; 11
    30e0:	8b 9f       	mul	r24, r27
    30e2:	c0 01       	movw	r24, r0
    30e4:	11 24       	eor	r1, r1
    30e6:	b8 01       	movw	r22, r16
    30e8:	82 52       	subi	r24, 0x22	; 34
    30ea:	9d 4c       	sbci	r25, 0xCD	; 205
    30ec:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <vListInsertEnd>
    30f0:	05 c0       	rjmp	.+10     	; 0x30fc <xTaskRemoveFromEventList+0x60>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    30f2:	b8 01       	movw	r22, r16
    30f4:	89 eb       	ldi	r24, 0xB9	; 185
    30f6:	92 e3       	ldi	r25, 0x32	; 50
    30f8:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    30fc:	e0 91 0a 33 	lds	r30, 0x330A	; 0x80330a <pxCurrentTCB>
    3100:	f0 91 0b 33 	lds	r31, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	2a 8d       	ldd	r18, Y+26	; 0x1a
    3108:	92 8d       	ldd	r25, Z+26	; 0x1a
    310a:	29 17       	cp	r18, r25
    310c:	08 f4       	brcc	.+2      	; 0x3110 <xTaskRemoveFromEventList+0x74>
    310e:	80 e0       	ldi	r24, 0x00	; 0
}
    3110:	df 91       	pop	r29
    3112:	cf 91       	pop	r28
    3114:	1f 91       	pop	r17
    3116:	0f 91       	pop	r16
    3118:	08 95       	ret

0000311a <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    311a:	20 91 ab 32 	lds	r18, 0x32AB	; 0x8032ab <xNumOfOverflows>
    311e:	fc 01       	movw	r30, r24
    3120:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    3122:	40 91 b2 32 	lds	r20, 0x32B2	; 0x8032b2 <xTickCount>
    3126:	50 91 b3 32 	lds	r21, 0x32B3	; 0x8032b3 <xTickCount+0x1>
    312a:	60 91 b4 32 	lds	r22, 0x32B4	; 0x8032b4 <xTickCount+0x2>
    312e:	70 91 b5 32 	lds	r23, 0x32B5	; 0x8032b5 <xTickCount+0x3>
    3132:	41 83       	std	Z+1, r20	; 0x01
    3134:	52 83       	std	Z+2, r21	; 0x02
    3136:	63 83       	std	Z+3, r22	; 0x03
    3138:	74 83       	std	Z+4, r23	; 0x04
    313a:	08 95       	ret

0000313c <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    313c:	8f 92       	push	r8
    313e:	9f 92       	push	r9
    3140:	af 92       	push	r10
    3142:	bf 92       	push	r11
    3144:	cf 92       	push	r12
    3146:	df 92       	push	r13
    3148:	ef 92       	push	r14
    314a:	ff 92       	push	r15
    314c:	0f 93       	push	r16
    314e:	1f 93       	push	r17
    3150:	cf 93       	push	r28
    3152:	df 93       	push	r29
    3154:	fc 01       	movw	r30, r24
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    315c:	80 91 ab 32 	lds	r24, 0x32AB	; 0x8032ab <xNumOfOverflows>
    3160:	90 81       	ld	r25, Z
    3162:	98 17       	cp	r25, r24
    3164:	89 f0       	breq	.+34     	; 0x3188 <xTaskCheckForTimeOut+0x4c>
    3166:	80 91 b2 32 	lds	r24, 0x32B2	; 0x8032b2 <xTickCount>
    316a:	90 91 b3 32 	lds	r25, 0x32B3	; 0x8032b3 <xTickCount+0x1>
    316e:	a0 91 b4 32 	lds	r26, 0x32B4	; 0x8032b4 <xTickCount+0x2>
    3172:	b0 91 b5 32 	lds	r27, 0x32B5	; 0x8032b5 <xTickCount+0x3>
    3176:	01 81       	ldd	r16, Z+1	; 0x01
    3178:	12 81       	ldd	r17, Z+2	; 0x02
    317a:	23 81       	ldd	r18, Z+3	; 0x03
    317c:	34 81       	ldd	r19, Z+4	; 0x04
    317e:	80 17       	cp	r24, r16
    3180:	91 07       	cpc	r25, r17
    3182:	a2 07       	cpc	r26, r18
    3184:	b3 07       	cpc	r27, r19
    3186:	a8 f5       	brcc	.+106    	; 0x31f2 <xTaskCheckForTimeOut+0xb6>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    3188:	80 91 b2 32 	lds	r24, 0x32B2	; 0x8032b2 <xTickCount>
    318c:	90 91 b3 32 	lds	r25, 0x32B3	; 0x8032b3 <xTickCount+0x1>
    3190:	a0 91 b4 32 	lds	r26, 0x32B4	; 0x8032b4 <xTickCount+0x2>
    3194:	b0 91 b5 32 	lds	r27, 0x32B5	; 0x8032b5 <xTickCount+0x3>
    3198:	c1 80       	ldd	r12, Z+1	; 0x01
    319a:	d2 80       	ldd	r13, Z+2	; 0x02
    319c:	e3 80       	ldd	r14, Z+3	; 0x03
    319e:	f4 80       	ldd	r15, Z+4	; 0x04
    31a0:	eb 01       	movw	r28, r22
    31a2:	08 81       	ld	r16, Y
    31a4:	19 81       	ldd	r17, Y+1	; 0x01
    31a6:	2a 81       	ldd	r18, Y+2	; 0x02
    31a8:	3b 81       	ldd	r19, Y+3	; 0x03
    31aa:	8c 19       	sub	r24, r12
    31ac:	9d 09       	sbc	r25, r13
    31ae:	ae 09       	sbc	r26, r14
    31b0:	bf 09       	sbc	r27, r15
    31b2:	80 17       	cp	r24, r16
    31b4:	91 07       	cpc	r25, r17
    31b6:	a2 07       	cpc	r26, r18
    31b8:	b3 07       	cpc	r27, r19
    31ba:	e8 f4       	brcc	.+58     	; 0x31f6 <xTaskCheckForTimeOut+0xba>
    31bc:	cf 01       	movw	r24, r30
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    31be:	80 90 b2 32 	lds	r8, 0x32B2	; 0x8032b2 <xTickCount>
    31c2:	90 90 b3 32 	lds	r9, 0x32B3	; 0x8032b3 <xTickCount+0x1>
    31c6:	a0 90 b4 32 	lds	r10, 0x32B4	; 0x8032b4 <xTickCount+0x2>
    31ca:	b0 90 b5 32 	lds	r11, 0x32B5	; 0x8032b5 <xTickCount+0x3>
    31ce:	b5 01       	movw	r22, r10
    31d0:	a4 01       	movw	r20, r8
    31d2:	4c 19       	sub	r20, r12
    31d4:	5d 09       	sbc	r21, r13
    31d6:	6e 09       	sbc	r22, r14
    31d8:	7f 09       	sbc	r23, r15
    31da:	04 1b       	sub	r16, r20
    31dc:	15 0b       	sbc	r17, r21
    31de:	26 0b       	sbc	r18, r22
    31e0:	37 0b       	sbc	r19, r23
    31e2:	08 83       	st	Y, r16
    31e4:	19 83       	std	Y+1, r17	; 0x01
    31e6:	2a 83       	std	Y+2, r18	; 0x02
    31e8:	3b 83       	std	Y+3, r19	; 0x03
			vTaskSetTimeOutState( pxTimeOut );
    31ea:	0e 94 8d 18 	call	0x311a	; 0x311a <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	03 c0       	rjmp	.+6      	; 0x31f8 <xTaskCheckForTimeOut+0xbc>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	01 c0       	rjmp	.+2      	; 0x31f8 <xTaskCheckForTimeOut+0xbc>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    31f6:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    31f8:	0f 90       	pop	r0
    31fa:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    31fc:	df 91       	pop	r29
    31fe:	cf 91       	pop	r28
    3200:	1f 91       	pop	r17
    3202:	0f 91       	pop	r16
    3204:	ff 90       	pop	r15
    3206:	ef 90       	pop	r14
    3208:	df 90       	pop	r13
    320a:	cf 90       	pop	r12
    320c:	bf 90       	pop	r11
    320e:	af 90       	pop	r10
    3210:	9f 90       	pop	r9
    3212:	8f 90       	pop	r8
    3214:	08 95       	ret

00003216 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	80 93 ac 32 	sts	0x32AC, r24	; 0x8032ac <xMissedYield>
    321c:	08 95       	ret

0000321e <uxTaskGetStackHighWaterMark>:
	{
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    321e:	00 97       	sbiw	r24, 0x00	; 0
    3220:	21 f4       	brne	.+8      	; 0x322a <uxTaskGetStackHighWaterMark+0xc>
    3222:	80 91 0a 33 	lds	r24, 0x330A	; 0x80330a <pxCurrentTCB>
    3226:	90 91 0b 33 	lds	r25, 0x330B	; 0x80330b <pxCurrentTCB+0x1>

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    322a:	dc 01       	movw	r26, r24
    322c:	5b 96       	adiw	r26, 0x1b	; 27
    322e:	ed 91       	ld	r30, X+
    3230:	fc 91       	ld	r31, X
    3232:	5c 97       	sbiw	r26, 0x1c	; 28

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3234:	80 81       	ld	r24, Z
    3236:	81 31       	cpi	r24, 0x11	; 17
    3238:	41 f4       	brne	.+16     	; 0x324a <uxTaskGetStackHighWaterMark+0x2c>
    323a:	31 96       	adiw	r30, 0x01	; 1
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	90 e0       	ldi	r25, 0x00	; 0
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
    3240:	01 96       	adiw	r24, 0x01	; 1

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3242:	21 91       	ld	r18, Z+
    3244:	21 31       	cpi	r18, 0x11	; 17
    3246:	e1 f3       	breq	.-8      	; 0x3240 <uxTaskGetStackHighWaterMark+0x22>
    3248:	08 95       	ret

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
    324a:	80 e0       	ldi	r24, 0x00	; 0
    324c:	90 e0       	ldi	r25, 0x00	; 0
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    324e:	08 95       	ret

00003250 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    3250:	80 91 0a 33 	lds	r24, 0x330A	; 0x80330a <pxCurrentTCB>
    3254:	90 91 0b 33 	lds	r25, 0x330B	; 0x80330b <pxCurrentTCB+0x1>

		return xReturn;
	}
    3258:	08 95       	ret

0000325a <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    325a:	0f 93       	push	r16
    325c:	1f 93       	push	r17
    325e:	cf 93       	push	r28
    3260:	df 93       	push	r29
    3262:	fc 01       	movw	r30, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    3264:	22 8d       	ldd	r18, Z+26	; 0x1a
    3266:	a0 91 0a 33 	lds	r26, 0x330A	; 0x80330a <pxCurrentTCB>
    326a:	b0 91 0b 33 	lds	r27, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
    326e:	5a 96       	adiw	r26, 0x1a	; 26
    3270:	8c 91       	ld	r24, X
    3272:	28 17       	cp	r18, r24
    3274:	08 f0       	brcs	.+2      	; 0x3278 <vTaskPriorityInherit+0x1e>
    3276:	41 c0       	rjmp	.+130    	; 0x32fa <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    3278:	a0 91 0a 33 	lds	r26, 0x330A	; 0x80330a <pxCurrentTCB>
    327c:	b0 91 0b 33 	lds	r27, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
    3280:	5a 96       	adiw	r26, 0x1a	; 26
    3282:	3c 91       	ld	r19, X
    3284:	84 e0       	ldi	r24, 0x04	; 4
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	a0 e0       	ldi	r26, 0x00	; 0
    328a:	b0 e0       	ldi	r27, 0x00	; 0
    328c:	83 1b       	sub	r24, r19
    328e:	91 09       	sbc	r25, r1
    3290:	a1 09       	sbc	r26, r1
    3292:	b1 09       	sbc	r27, r1
    3294:	86 87       	std	Z+14, r24	; 0x0e
    3296:	97 87       	std	Z+15, r25	; 0x0f
    3298:	a0 8b       	std	Z+16, r26	; 0x10
    329a:	b1 8b       	std	Z+17, r27	; 0x11

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    329c:	8b e0       	ldi	r24, 0x0B	; 11
    329e:	28 9f       	mul	r18, r24
    32a0:	90 01       	movw	r18, r0
    32a2:	11 24       	eor	r1, r1
    32a4:	22 52       	subi	r18, 0x22	; 34
    32a6:	3d 4c       	sbci	r19, 0xCD	; 205
    32a8:	84 85       	ldd	r24, Z+12	; 0x0c
    32aa:	95 85       	ldd	r25, Z+13	; 0x0d
    32ac:	82 17       	cp	r24, r18
    32ae:	93 07       	cpc	r25, r19
    32b0:	e9 f4       	brne	.+58     	; 0x32ec <vTaskPriorityInherit+0x92>
    32b2:	8f 01       	movw	r16, r30
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    32b4:	ef 01       	movw	r28, r30
    32b6:	22 96       	adiw	r28, 0x02	; 2
    32b8:	ce 01       	movw	r24, r28
    32ba:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    32be:	e0 91 0a 33 	lds	r30, 0x330A	; 0x80330a <pxCurrentTCB>
    32c2:	f0 91 0b 33 	lds	r31, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
    32c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    32c8:	f8 01       	movw	r30, r16
    32ca:	82 8f       	std	Z+26, r24	; 0x1a
				prvAddTaskToReadyQueue( pxTCB );
    32cc:	90 91 b0 32 	lds	r25, 0x32B0	; 0x8032b0 <uxTopReadyPriority>
    32d0:	98 17       	cp	r25, r24
    32d2:	10 f4       	brcc	.+4      	; 0x32d8 <vTaskPriorityInherit+0x7e>
    32d4:	80 93 b0 32 	sts	0x32B0, r24	; 0x8032b0 <uxTopReadyPriority>
    32d8:	fb e0       	ldi	r31, 0x0B	; 11
    32da:	8f 9f       	mul	r24, r31
    32dc:	c0 01       	movw	r24, r0
    32de:	11 24       	eor	r1, r1
    32e0:	be 01       	movw	r22, r28
    32e2:	82 52       	subi	r24, 0x22	; 34
    32e4:	9d 4c       	sbci	r25, 0xCD	; 205
    32e6:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <vListInsertEnd>
    32ea:	07 c0       	rjmp	.+14     	; 0x32fa <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    32ec:	a0 91 0a 33 	lds	r26, 0x330A	; 0x80330a <pxCurrentTCB>
    32f0:	b0 91 0b 33 	lds	r27, 0x330B	; 0x80330b <pxCurrentTCB+0x1>
    32f4:	5a 96       	adiw	r26, 0x1a	; 26
    32f6:	8c 91       	ld	r24, X
    32f8:	82 8f       	std	Z+26, r24	; 0x1a
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    32fa:	df 91       	pop	r29
    32fc:	cf 91       	pop	r28
    32fe:	1f 91       	pop	r17
    3300:	0f 91       	pop	r16
    3302:	08 95       	ret

00003304 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    3304:	0f 93       	push	r16
    3306:	1f 93       	push	r17
    3308:	cf 93       	push	r28
    330a:	df 93       	push	r29
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    330c:	00 97       	sbiw	r24, 0x00	; 0
    330e:	49 f1       	breq	.+82     	; 0x3362 <vTaskPriorityDisinherit+0x5e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    3310:	fc 01       	movw	r30, r24
    3312:	32 8d       	ldd	r19, Z+26	; 0x1a
    3314:	27 a1       	ldd	r18, Z+39	; 0x27
    3316:	32 17       	cp	r19, r18
    3318:	21 f1       	breq	.+72     	; 0x3362 <vTaskPriorityDisinherit+0x5e>
    331a:	ec 01       	movw	r28, r24
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    331c:	8c 01       	movw	r16, r24
    331e:	0e 5f       	subi	r16, 0xFE	; 254
    3320:	1f 4f       	sbci	r17, 0xFF	; 255
    3322:	c8 01       	movw	r24, r16
    3324:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    3328:	8f a1       	ldd	r24, Y+39	; 0x27
    332a:	8a 8f       	std	Y+26, r24	; 0x1a
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    332c:	44 e0       	ldi	r20, 0x04	; 4
    332e:	50 e0       	ldi	r21, 0x00	; 0
    3330:	60 e0       	ldi	r22, 0x00	; 0
    3332:	70 e0       	ldi	r23, 0x00	; 0
    3334:	48 1b       	sub	r20, r24
    3336:	51 09       	sbc	r21, r1
    3338:	61 09       	sbc	r22, r1
    333a:	71 09       	sbc	r23, r1
    333c:	4e 87       	std	Y+14, r20	; 0x0e
    333e:	5f 87       	std	Y+15, r21	; 0x0f
    3340:	68 8b       	std	Y+16, r22	; 0x10
    3342:	79 8b       	std	Y+17, r23	; 0x11
				prvAddTaskToReadyQueue( pxTCB );
    3344:	90 91 b0 32 	lds	r25, 0x32B0	; 0x8032b0 <uxTopReadyPriority>
    3348:	98 17       	cp	r25, r24
    334a:	10 f4       	brcc	.+4      	; 0x3350 <vTaskPriorityDisinherit+0x4c>
    334c:	80 93 b0 32 	sts	0x32B0, r24	; 0x8032b0 <uxTopReadyPriority>
    3350:	fb e0       	ldi	r31, 0x0B	; 11
    3352:	8f 9f       	mul	r24, r31
    3354:	c0 01       	movw	r24, r0
    3356:	11 24       	eor	r1, r1
    3358:	b8 01       	movw	r22, r16
    335a:	82 52       	subi	r24, 0x22	; 34
    335c:	9d 4c       	sbci	r25, 0xCD	; 205
    335e:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <vListInsertEnd>
			}
		}
	}
    3362:	df 91       	pop	r29
    3364:	cf 91       	pop	r28
    3366:	1f 91       	pop	r17
    3368:	0f 91       	pop	r16
    336a:	08 95       	ret

0000336c <_ZN8frt_task22_call_users_run_methodEPS_>:
 *  the scheduler.
 *  @param p_task A pointer to the task (this task) whose run method is to be called
 */

void frt_task::_call_users_run_method (frt_task* p_task)
{
    336c:	ec 01       	movw	r28, r24
	// If we're not using setup() and loop(), call the user's run() function instead.
	// This version is more similar to the typical RTOS implementation but not quite
	// as easy to use for execution time profiling
	#else
		// This is where the user's run() method is actually called
		p_task->run ();
    336e:	e8 81       	ld	r30, Y
    3370:	f9 81       	ldd	r31, Y+1	; 0x01
    3372:	01 90       	ld	r0, Z+
    3374:	f0 81       	ld	r31, Z
    3376:	e0 2d       	mov	r30, r0
    3378:	19 95       	eicall
		void* temp_handle = p_task->handle;
		p_task->handle = 0;
		vTaskDelete (temp_handle);
	// If task deletion is disabled, set this task's handle to 0 but don't delete task
	#else
		p_task->handle = 0;
    337a:	1a 82       	std	Y+2, r1	; 0x02
    337c:	1b 82       	std	Y+3, r1	; 0x03

	// If task deletion is not enabled, we get here if the task run method has exited 
	// (which it shouldn't have, though). 
	for (;;)
	{
		vTaskDelay (portMAX_DELAY);
    337e:	6f ef       	ldi	r22, 0xFF	; 255
    3380:	7f ef       	ldi	r23, 0xFF	; 255
    3382:	cb 01       	movw	r24, r22
    3384:	0e 94 99 17 	call	0x2f32	; 0x2f32 <vTaskDelay>
    3388:	fa cf       	rjmp	.-12     	; 0x337e <_ZN8frt_task22_call_users_run_methodEPS_+0x12>

0000338a <_ZN8frt_task13transition_toEh>:
 *  help with debugging.
 *  @param new_state The state to which we will transition
 */
void frt_task::transition_to (uint8_t new_state)
{
	state = new_state;
    338a:	fc 01       	movw	r30, r24
    338c:	64 87       	std	Z+12, r22	; 0x0c
			*p_serial << tick_res_time () << ":" << (char*)(pcTaskGetTaskName (handle))
					<< ":" << previous_state << PMS ("->") << state << endl;
		}
	#endif // TRANSITION_TRACE

	previous_state = state;
    338e:	65 87       	std	Z+13, r22	; 0x0d
    3390:	08 95       	ret

00003392 <_ZN8frt_taskC1EPKchjP8emstream>:
 *                      (default: configMINIMAL_STACK_SIZE)
 *  @param p_ser_dev Pointer to a serial device (port, radio, SD card, etc.) which can
 *                   be used by this task to communicate (default: NULL)
 */

frt_task::frt_task (const char* a_name, 
    3392:	4f 92       	push	r4
    3394:	5f 92       	push	r5
    3396:	6f 92       	push	r6
    3398:	7f 92       	push	r7
    339a:	8f 92       	push	r8
    339c:	9f 92       	push	r9
    339e:	af 92       	push	r10
    33a0:	bf 92       	push	r11
    33a2:	cf 92       	push	r12
    33a4:	df 92       	push	r13
    33a6:	ef 92       	push	r14
    33a8:	ff 92       	push	r15
    33aa:	0f 93       	push	r16
    33ac:	1f 93       	push	r17
    33ae:	cf 93       	push	r28
    33b0:	df 93       	push	r29
    33b2:	cd b7       	in	r28, 0x3d	; 61
    33b4:	de b7       	in	r29, 0x3e	; 62
    33b6:	2a 97       	sbiw	r28, 0x0a	; 10
    33b8:	cd bf       	out	0x3d, r28	; 61
    33ba:	de bf       	out	0x3e, r29	; 62
    33bc:	4c 01       	movw	r8, r24
    33be:	29 01       	movw	r4, r18
    33c0:	38 01       	movw	r6, r16
					unsigned portBASE_TYPE a_priority, 
					size_t a_stack_size,
					emstream* p_ser_dev
					)
    33c2:	88 ef       	ldi	r24, 0xF8	; 248
    33c4:	91 e2       	ldi	r25, 0x21	; 33
    33c6:	f4 01       	movw	r30, r8
    33c8:	80 83       	st	Z, r24
    33ca:	91 83       	std	Z+1, r25	; 0x01
	// Make sure the user doesn't send an excessively long task name to xTaskCreate()
	// by copying at most (configMAX_TASK_NAME_LEN - 1) characters and putting the
	// terminating null character at the end of the string
	char temp_name[configMAX_TASK_NAME_LEN];
	uint8_t index = 0;
	while (*a_name && index < (configMAX_TASK_NAME_LEN - 1))
    33cc:	fb 01       	movw	r30, r22
    33ce:	80 81       	ld	r24, Z
    33d0:	88 23       	and	r24, r24
    33d2:	69 f0       	breq	.+26     	; 0x33ee <_ZN8frt_taskC1EPKchjP8emstream+0x5c>
    33d4:	de 01       	movw	r26, r28
    33d6:	11 96       	adiw	r26, 0x01	; 1
    33d8:	31 96       	adiw	r30, 0x01	; 1
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	02 c0       	rjmp	.+4      	; 0x33e2 <_ZN8frt_taskC1EPKchjP8emstream+0x50>
    33de:	99 30       	cpi	r25, 0x09	; 9
    33e0:	39 f0       	breq	.+14     	; 0x33f0 <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
	{
		temp_name[index++] = *a_name++;
    33e2:	9f 5f       	subi	r25, 0xFF	; 255
    33e4:	8d 93       	st	X+, r24
	// Make sure the user doesn't send an excessively long task name to xTaskCreate()
	// by copying at most (configMAX_TASK_NAME_LEN - 1) characters and putting the
	// terminating null character at the end of the string
	char temp_name[configMAX_TASK_NAME_LEN];
	uint8_t index = 0;
	while (*a_name && index < (configMAX_TASK_NAME_LEN - 1))
    33e6:	81 91       	ld	r24, Z+
    33e8:	81 11       	cpse	r24, r1
    33ea:	f9 cf       	rjmp	.-14     	; 0x33de <_ZN8frt_taskC1EPKchjP8emstream+0x4c>
    33ec:	01 c0       	rjmp	.+2      	; 0x33f0 <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
{
	// Make sure the user doesn't send an excessively long task name to xTaskCreate()
	// by copying at most (configMAX_TASK_NAME_LEN - 1) characters and putting the
	// terminating null character at the end of the string
	char temp_name[configMAX_TASK_NAME_LEN];
	uint8_t index = 0;
    33ee:	90 e0       	ldi	r25, 0x00	; 0
	while (*a_name && index < (configMAX_TASK_NAME_LEN - 1))
	{
		temp_name[index++] = *a_name++;
	}
	temp_name[index] = '\0';
    33f0:	e1 e0       	ldi	r30, 0x01	; 1
    33f2:	f0 e0       	ldi	r31, 0x00	; 0
    33f4:	ec 0f       	add	r30, r28
    33f6:	fd 1f       	adc	r31, r29
    33f8:	e9 0f       	add	r30, r25
    33fa:	f1 1d       	adc	r31, r1
    33fc:	10 82       	st	Z, r1

	// Create the task with a call to the RTOS task creation function
	portBASE_TYPE task_status = xTaskCreate
    33fe:	74 01       	movw	r14, r8
    3400:	f2 e0       	ldi	r31, 0x02	; 2
    3402:	ef 0e       	add	r14, r31
    3404:	f1 1c       	adc	r15, r1
    3406:	a1 2c       	mov	r10, r1
    3408:	b1 2c       	mov	r11, r1
    340a:	c1 2c       	mov	r12, r1
    340c:	d1 2c       	mov	r13, r1
    340e:	04 2f       	mov	r16, r20
    3410:	94 01       	movw	r18, r8
    3412:	a2 01       	movw	r20, r4
    3414:	be 01       	movw	r22, r28
    3416:	6f 5f       	subi	r22, 0xFF	; 255
    3418:	7f 4f       	sbci	r23, 0xFF	; 255
    341a:	82 e3       	ldi	r24, 0x32	; 50
    341c:	93 e0       	ldi	r25, 0x03	; 3
    341e:	0e 94 b2 14 	call	0x2964	; 0x2964 <xTaskGenericCreate>
		 a_priority,                                 // Priority for the new task
		 &handle                                     // The new task's handle
		);

	// Save the serial port pointer and the total stack size
	p_serial = p_ser_dev;
    3422:	f4 01       	movw	r30, r8
    3424:	66 82       	std	Z+6, r6	; 0x06
    3426:	77 82       	std	Z+7, r7	; 0x07
	total_stack = a_stack_size;
    3428:	40 86       	std	Z+8, r4	; 0x08
    342a:	51 86       	std	Z+9, r5	; 0x09

	// Set the handles to the previously and last created tasks
	prev_task_pointer = last_created_task_pointer;
    342c:	20 91 0c 33 	lds	r18, 0x330C	; 0x80330c <last_created_task_pointer>
    3430:	30 91 0d 33 	lds	r19, 0x330D	; 0x80330d <last_created_task_pointer+0x1>
    3434:	24 83       	std	Z+4, r18	; 0x04
    3436:	35 83       	std	Z+5, r19	; 0x05
	last_created_task_pointer = this;
    3438:	80 92 0c 33 	sts	0x330C, r8	; 0x80330c <last_created_task_pointer>
    343c:	90 92 0d 33 	sts	0x330D, r9	; 0x80330d <last_created_task_pointer+0x1>

	// Initialize the finite state machine and its transition logger
	state = 0;
    3440:	14 86       	std	Z+12, r1	; 0x0c
	previous_state = 0;
    3442:	15 86       	std	Z+13, r1	; 0x0d

	// If stack tracing is being used, save the address of the top of the stack
	top_of_stack = ++portStackTopForTask;
    3444:	40 90 6e 33 	lds	r4, 0x336E	; 0x80336e <portStackTopForTask>
    3448:	50 90 6f 33 	lds	r5, 0x336F	; 0x80336f <portStackTopForTask+0x1>
    344c:	ff ef       	ldi	r31, 0xFF	; 255
    344e:	4f 1a       	sub	r4, r31
    3450:	5f 0a       	sbc	r5, r31
    3452:	40 92 6e 33 	sts	0x336E, r4	; 0x80336e <portStackTopForTask>
    3456:	50 92 6f 33 	sts	0x336F, r5	; 0x80336f <portStackTopForTask+0x1>
    345a:	f4 01       	movw	r30, r8
    345c:	42 86       	std	Z+10, r4	; 0x0a
    345e:	53 86       	std	Z+11, r5	; 0x0b

	// Initialize the run counter
	runs = 0;
    3460:	16 86       	std	Z+14, r1	; 0x0e
    3462:	17 86       	std	Z+15, r1	; 0x0f
    3464:	10 8a       	std	Z+16, r1	; 0x10
    3466:	11 8a       	std	Z+17, r1	; 0x11

	// If the serial port is being used, let the user know if the task was created
	// successfully
	if (p_serial != NULL)
    3468:	61 14       	cp	r6, r1
    346a:	71 04       	cpc	r7, r1
    346c:	09 f4       	brne	.+2      	; 0x3470 <_ZN8frt_taskC1EPKchjP8emstream+0xde>
    346e:	44 c0       	rjmp	.+136    	; 0x34f8 <_ZN8frt_taskC1EPKchjP8emstream+0x166>
	{
		if (task_status == pdPASS)
    3470:	81 30       	cpi	r24, 0x01	; 1
    3472:	79 f5       	brne	.+94     	; 0x34d2 <_ZN8frt_taskC1EPKchjP8emstream+0x140>
		{
			*p_serial << PMS ("Task ") << temp_name << PMS (" created")
    3474:	6a e0       	ldi	r22, 0x0A	; 10
    3476:	c3 01       	movw	r24, r6
    3478:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    347c:	7c 01       	movw	r14, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    347e:	61 eb       	ldi	r22, 0xB1	; 177
    3480:	75 e0       	ldi	r23, 0x05	; 5
    3482:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    3486:	be 01       	movw	r22, r28
    3488:	6f 5f       	subi	r22, 0xFF	; 255
    348a:	7f 4f       	sbci	r23, 0xFF	; 255
    348c:	c7 01       	movw	r24, r14
    348e:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    3492:	6a e0       	ldi	r22, 0x0A	; 10
    3494:	c7 01       	movw	r24, r14
    3496:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    349a:	7c 01       	movw	r14, r24
    349c:	68 ea       	ldi	r22, 0xA8	; 168
    349e:	75 e0       	ldi	r23, 0x05	; 5
    34a0:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
				<< PMS (", stack at 0x") << hex << top_of_stack << dec << endl;
    34a4:	6a e0       	ldi	r22, 0x0A	; 10
    34a6:	c7 01       	movw	r24, r14
    34a8:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    34ac:	7c 01       	movw	r14, r24
    34ae:	6a e9       	ldi	r22, 0x9A	; 154
    34b0:	75 e0       	ldi	r23, 0x05	; 5
    34b2:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    34b6:	63 e0       	ldi	r22, 0x03	; 3
    34b8:	c7 01       	movw	r24, r14
    34ba:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    34be:	b2 01       	movw	r22, r4
    34c0:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <_ZN8emstreamlsEj>
    34c4:	62 e0       	ldi	r22, 0x02	; 2
    34c6:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    34ca:	66 e0       	ldi	r22, 0x06	; 6
    34cc:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    34d0:	13 c0       	rjmp	.+38     	; 0x34f8 <_ZN8frt_taskC1EPKchjP8emstream+0x166>
		}
		else
		{
			*p_serial << PMS ("ERROR creating task ") << temp_name << endl;
    34d2:	6a e0       	ldi	r22, 0x0A	; 10
    34d4:	c3 01       	movw	r24, r6
    34d6:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    34da:	4c 01       	movw	r8, r24
    34dc:	65 e8       	ldi	r22, 0x85	; 133
    34de:	75 e0       	ldi	r23, 0x05	; 5
    34e0:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    34e4:	be 01       	movw	r22, r28
    34e6:	6f 5f       	subi	r22, 0xFF	; 255
    34e8:	7f 4f       	sbci	r23, 0xFF	; 255
    34ea:	c4 01       	movw	r24, r8
    34ec:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    34f0:	66 e0       	ldi	r22, 0x06	; 6
    34f2:	c4 01       	movw	r24, r8
    34f4:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
		}
	}
}
    34f8:	2a 96       	adiw	r28, 0x0a	; 10
    34fa:	cd bf       	out	0x3d, r28	; 61
    34fc:	de bf       	out	0x3e, r29	; 62
    34fe:	df 91       	pop	r29
    3500:	cf 91       	pop	r28
    3502:	1f 91       	pop	r17
    3504:	0f 91       	pop	r16
    3506:	ff 90       	pop	r15
    3508:	ef 90       	pop	r14
    350a:	df 90       	pop	r13
    350c:	cf 90       	pop	r12
    350e:	bf 90       	pop	r11
    3510:	af 90       	pop	r10
    3512:	9f 90       	pop	r9
    3514:	8f 90       	pop	r8
    3516:	7f 90       	pop	r7
    3518:	6f 90       	pop	r6
    351a:	5f 90       	pop	r5
    351c:	4f 90       	pop	r4
    351e:	08 95       	ret

00003520 <_ZN8frt_task19print_stack_in_listEP8emstream>:
 *  stacks. The idle task's stack is printed separately afterwards. 
 *  @param ser_device The serial device to which each task prints its stack
 */

void frt_task::print_stack_in_list (emstream* ser_device)
{
    3520:	cf 92       	push	r12
    3522:	df 92       	push	r13
    3524:	ef 92       	push	r14
    3526:	ff 92       	push	r15
    3528:	0f 93       	push	r16
    352a:	1f 93       	push	r17
    352c:	cf 93       	push	r28
    352e:	df 93       	push	r29
    3530:	ec 01       	movw	r28, r24
    3532:	7b 01       	movw	r14, r22
	*ser_device << ATERM_BOLD << PMS ("Task: ") 
				<< (const char*)(pcTaskGetTaskName (handle)) 
    3534:	8a 81       	ldd	r24, Y+2	; 0x02
    3536:	9b 81       	ldd	r25, Y+3	; 0x03
    3538:	0e 94 09 16 	call	0x2c12	; 0x2c12 <pcTaskGetTaskName>
    353c:	6c 01       	movw	r12, r24
 *  @param ser_device The serial device to which each task prints its stack
 */

void frt_task::print_stack_in_list (emstream* ser_device)
{
	*ser_device << ATERM_BOLD << PMS ("Task: ") 
    353e:	6a e0       	ldi	r22, 0x0A	; 10
    3540:	c7 01       	movw	r24, r14
    3542:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    3546:	8c 01       	movw	r16, r24
    3548:	64 ec       	ldi	r22, 0xC4	; 196
    354a:	75 e0       	ldi	r23, 0x05	; 5
    354c:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    3550:	6a e0       	ldi	r22, 0x0A	; 10
    3552:	c8 01       	movw	r24, r16
    3554:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    3558:	8c 01       	movw	r16, r24
    355a:	6d eb       	ldi	r22, 0xBD	; 189
    355c:	75 e0       	ldi	r23, 0x05	; 5
    355e:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    3562:	b6 01       	movw	r22, r12
    3564:	c8 01       	movw	r24, r16
    3566:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
				<< (const char*)(pcTaskGetTaskName (handle)) 
				<< ATERM_NORM_INT << endl;
    356a:	6a e0       	ldi	r22, 0x0A	; 10
    356c:	c8 01       	movw	r24, r16
    356e:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    3572:	8c 01       	movw	r16, r24
    3574:	67 eb       	ldi	r22, 0xB7	; 183
    3576:	75 e0       	ldi	r23, 0x05	; 5
    3578:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    357c:	66 e0       	ldi	r22, 0x06	; 6
    357e:	c8 01       	movw	r24, r16
    3580:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
		 *  @param p_ser_d The serial device to which the stack will be printed
		 */
		void dump_stack (emstream* p_ser_d)
		{
			hex_dump_memory ((uint8_t*)(top_of_stack - total_stack), 
								(uint8_t*)(top_of_stack), p_ser_d, true, 0x11);
    3584:	8a 85       	ldd	r24, Y+10	; 0x0a
    3586:	9b 85       	ldd	r25, Y+11	; 0x0b
    3588:	e8 85       	ldd	r30, Y+8	; 0x08
    358a:	f9 85       	ldd	r31, Y+9	; 0x09
    358c:	01 e1       	ldi	r16, 0x11	; 17
    358e:	21 e0       	ldi	r18, 0x01	; 1
    3590:	a7 01       	movw	r20, r14
    3592:	bc 01       	movw	r22, r24
    3594:	8e 1b       	sub	r24, r30
    3596:	9f 0b       	sbc	r25, r31
    3598:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <_Z15hex_dump_memoryPhS_P8emstreambh>

	dump_stack (ser_device);

	if (prev_task_pointer != NULL)
    359c:	8c 81       	ldd	r24, Y+4	; 0x04
    359e:	9d 81       	ldd	r25, Y+5	; 0x05
    35a0:	00 97       	sbiw	r24, 0x00	; 0
    35a2:	19 f0       	breq	.+6      	; 0x35aa <_ZN8frt_task19print_stack_in_listEP8emstream+0x8a>
	{
		prev_task_pointer->print_stack_in_list (ser_device);
    35a4:	b7 01       	movw	r22, r14
    35a6:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZN8frt_task19print_stack_in_listEP8emstream>
	}
}
    35aa:	df 91       	pop	r29
    35ac:	cf 91       	pop	r28
    35ae:	1f 91       	pop	r17
    35b0:	0f 91       	pop	r16
    35b2:	ff 90       	pop	r15
    35b4:	ef 90       	pop	r14
    35b6:	df 90       	pop	r13
    35b8:	cf 90       	pop	r12
    35ba:	08 95       	ret

000035bc <_Z17print_task_stacksP8emstream>:
/** This function has all the tasks in the task list do a "stack dump", printing their
 *  stacks in hex dump format. The idle task's stack is printed afterwards. 
 *  @param ser_dev Pointer to a serial device on which the information will be printed
 */
void print_task_stacks (emstream* ser_dev)
{
    35bc:	0f 93       	push	r16
    35be:	1f 93       	push	r17
    35c0:	cf 93       	push	r28
    35c2:	df 93       	push	r29
    35c4:	ec 01       	movw	r28, r24
	// Tell the most recently created task to print its stack and keep the process
	// going by telling the next most recently created task to print its stack, etc.
	if (last_created_task_pointer != NULL)
    35c6:	80 91 0c 33 	lds	r24, 0x330C	; 0x80330c <last_created_task_pointer>
    35ca:	90 91 0d 33 	lds	r25, 0x330D	; 0x80330d <last_created_task_pointer+0x1>
    35ce:	00 97       	sbiw	r24, 0x00	; 0
    35d0:	19 f0       	breq	.+6      	; 0x35d8 <_Z17print_task_stacksP8emstream+0x1c>
	{
		last_created_task_pointer->print_stack_in_list (ser_dev);
    35d2:	be 01       	movw	r22, r28
    35d4:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZN8frt_task19print_stack_in_listEP8emstream>
	}

	// Now print the stack for the idle task, which isn't user created and so isn't
	// in the regular task list
	*ser_dev << ATERM_BOLD << PMS ("Task: IDLE") << ATERM_NORM_INT << endl;
    35d8:	6a e0       	ldi	r22, 0x0A	; 10
    35da:	ce 01       	movw	r24, r28
    35dc:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    35e0:	8c 01       	movw	r16, r24
    35e2:	6a ed       	ldi	r22, 0xDA	; 218
    35e4:	75 e0       	ldi	r23, 0x05	; 5
    35e6:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    35ea:	6a e0       	ldi	r22, 0x0A	; 10
    35ec:	c8 01       	movw	r24, r16
    35ee:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    35f2:	8c 01       	movw	r16, r24
    35f4:	6f ec       	ldi	r22, 0xCF	; 207
    35f6:	75 e0       	ldi	r23, 0x05	; 5
    35f8:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    35fc:	6a e0       	ldi	r22, 0x0A	; 10
    35fe:	c8 01       	movw	r24, r16
    3600:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    3604:	8c 01       	movw	r16, r24
    3606:	69 ec       	ldi	r22, 0xC9	; 201
    3608:	75 e0       	ldi	r23, 0x05	; 5
    360a:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    360e:	66 e0       	ldi	r22, 0x06	; 6
    3610:	c8 01       	movw	r24, r16
    3612:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
	hex_dump_memory ((uint8_t*)(portStackTopForTask - configMINIMAL_STACK_SIZE + 1), 
							(uint8_t*)(portStackTopForTask + 1), ser_dev, true, 0x11);
    3616:	80 91 6e 33 	lds	r24, 0x336E	; 0x80336e <portStackTopForTask>
    361a:	90 91 6f 33 	lds	r25, 0x336F	; 0x80336f <portStackTopForTask+0x1>
    361e:	bc 01       	movw	r22, r24
    3620:	6f 5f       	subi	r22, 0xFF	; 255
    3622:	7f 4f       	sbci	r23, 0xFF	; 255
    3624:	01 e1       	ldi	r16, 0x11	; 17
    3626:	21 e0       	ldi	r18, 0x01	; 1
    3628:	ae 01       	movw	r20, r28
    362a:	83 56       	subi	r24, 0x63	; 99
    362c:	91 09       	sbc	r25, r1
    362e:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <_Z15hex_dump_memoryPhS_P8emstreambh>
}
    3632:	df 91       	pop	r29
    3634:	cf 91       	pop	r28
    3636:	1f 91       	pop	r17
    3638:	0f 91       	pop	r16
    363a:	08 95       	ret

0000363c <_ZN8frt_task12print_statusER8emstream>:
 *  information. 
 *  @param ser_dev A reference to the serial device to which to print the task status
 */

void frt_task::print_status (emstream& ser_dev)
{
    363c:	8f 92       	push	r8
    363e:	9f 92       	push	r9
    3640:	af 92       	push	r10
    3642:	bf 92       	push	r11
    3644:	cf 92       	push	r12
    3646:	df 92       	push	r13
    3648:	ef 92       	push	r14
    364a:	ff 92       	push	r15
    364c:	0f 93       	push	r16
    364e:	1f 93       	push	r17
    3650:	cf 93       	push	r28
    3652:	df 93       	push	r29
    3654:	ec 01       	movw	r28, r24
    3656:	8b 01       	movw	r16, r22
	ser_dev << (const char*)(pcTaskGetTaskName (handle));
    3658:	8a 81       	ldd	r24, Y+2	; 0x02
    365a:	9b 81       	ldd	r25, Y+3	; 0x03
    365c:	0e 94 09 16 	call	0x2c12	; 0x2c12 <pcTaskGetTaskName>
    3660:	bc 01       	movw	r22, r24
    3662:	c8 01       	movw	r24, r16
    3664:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
	ser_dev.putchar ('\t');
    3668:	d8 01       	movw	r26, r16
    366a:	ed 91       	ld	r30, X+
    366c:	fc 91       	ld	r31, X
    366e:	02 80       	ldd	r0, Z+2	; 0x02
    3670:	f3 81       	ldd	r31, Z+3	; 0x03
    3672:	e0 2d       	mov	r30, r0
    3674:	69 e0       	ldi	r22, 0x09	; 9
    3676:	c8 01       	movw	r24, r16
    3678:	19 95       	eicall
	if (strlen ((const char*)(pcTaskGetTaskName (handle))) < 8)
    367a:	8a 81       	ldd	r24, Y+2	; 0x02
    367c:	9b 81       	ldd	r25, Y+3	; 0x03
    367e:	0e 94 09 16 	call	0x2c12	; 0x2c12 <pcTaskGetTaskName>
    3682:	fc 01       	movw	r30, r24
    3684:	01 90       	ld	r0, Z+
    3686:	00 20       	and	r0, r0
    3688:	e9 f7       	brne	.-6      	; 0x3684 <_ZN8frt_task12print_statusER8emstream+0x48>
    368a:	31 97       	sbiw	r30, 0x01	; 1
    368c:	e8 1b       	sub	r30, r24
    368e:	f9 0b       	sbc	r31, r25
    3690:	38 97       	sbiw	r30, 0x08	; 8
    3692:	48 f4       	brcc	.+18     	; 0x36a6 <_ZN8frt_task12print_statusER8emstream+0x6a>
	{
		ser_dev.putchar ('\t');
    3694:	d8 01       	movw	r26, r16
    3696:	ed 91       	ld	r30, X+
    3698:	fc 91       	ld	r31, X
    369a:	02 80       	ldd	r0, Z+2	; 0x02
    369c:	f3 81       	ldd	r31, Z+3	; 0x03
    369e:	e0 2d       	mov	r30, r0
    36a0:	69 e0       	ldi	r22, 0x09	; 9
    36a2:	c8 01       	movw	r24, r16
    36a4:	19 95       	eicall
			<< get_state ()
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\t") << uxTaskGetStackHighWaterMark(handle) << PMS ("/") 
			<< get_total_stack () << PMS ("\t")
		#endif
			<< PMS ("\t") << runs;
    36a6:	ce 84       	ldd	r12, Y+14	; 0x0e
    36a8:	df 84       	ldd	r13, Y+15	; 0x0f
    36aa:	e8 88       	ldd	r14, Y+16	; 0x10
    36ac:	f9 88       	ldd	r15, Y+17	; 0x11
		 *  constructor call.
		 *  @return The task's total stack size in bytes
		 */
		size_t get_total_stack (void)
		{
			return (total_stack);
    36ae:	a8 84       	ldd	r10, Y+8	; 0x08
    36b0:	b9 84       	ldd	r11, Y+9	; 0x09
		ser_dev.putchar ('\t');
	}
	ser_dev << uxTaskPriorityGet (handle) << PMS ("\t")
			<< get_state ()
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\t") << uxTaskGetStackHighWaterMark(handle) << PMS ("/") 
    36b2:	8a 81       	ldd	r24, Y+2	; 0x02
    36b4:	9b 81       	ldd	r25, Y+3	; 0x03
    36b6:	0e 94 0f 19 	call	0x321e	; 0x321e <uxTaskGetStackHighWaterMark>
    36ba:	98 2e       	mov	r9, r24
		 *  manipulated by the user within the run() method to cause state transitions.
		 *  @return The current state
		 */
		uint8_t get_state (void)
		{
			return (state);
    36bc:	8c 84       	ldd	r8, Y+12	; 0x0c
	ser_dev.putchar ('\t');
	if (strlen ((const char*)(pcTaskGetTaskName (handle))) < 8)
	{
		ser_dev.putchar ('\t');
	}
	ser_dev << uxTaskPriorityGet (handle) << PMS ("\t")
    36be:	8a 81       	ldd	r24, Y+2	; 0x02
    36c0:	9b 81       	ldd	r25, Y+3	; 0x03
    36c2:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <uxTaskPriorityGet>
    36c6:	68 2f       	mov	r22, r24
    36c8:	c8 01       	movw	r24, r16
    36ca:	0e 94 28 20 	call	0x4050	; 0x4050 <_ZN8emstreamlsEh>
    36ce:	6a e0       	ldi	r22, 0x0A	; 10
    36d0:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    36d4:	ec 01       	movw	r28, r24
    36d6:	6f e4       	ldi	r22, 0x4F	; 79
    36d8:	76 e0       	ldi	r23, 0x06	; 6
    36da:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
			<< get_state ()
    36de:	68 2d       	mov	r22, r8
    36e0:	ce 01       	movw	r24, r28
    36e2:	0e 94 28 20 	call	0x4050	; 0x4050 <_ZN8emstreamlsEh>
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\t") << uxTaskGetStackHighWaterMark(handle) << PMS ("/") 
    36e6:	6a e0       	ldi	r22, 0x0A	; 10
    36e8:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    36ec:	ec 01       	movw	r28, r24
    36ee:	6d e4       	ldi	r22, 0x4D	; 77
    36f0:	76 e0       	ldi	r23, 0x06	; 6
    36f2:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    36f6:	69 2d       	mov	r22, r9
    36f8:	ce 01       	movw	r24, r28
    36fa:	0e 94 28 20 	call	0x4050	; 0x4050 <_ZN8emstreamlsEh>
    36fe:	6a e0       	ldi	r22, 0x0A	; 10
    3700:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    3704:	ec 01       	movw	r28, r24
    3706:	6b e4       	ldi	r22, 0x4B	; 75
    3708:	76 e0       	ldi	r23, 0x06	; 6
    370a:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
			<< get_total_stack () << PMS ("\t")
    370e:	b5 01       	movw	r22, r10
    3710:	ce 01       	movw	r24, r28
    3712:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <_ZN8emstreamlsEj>
    3716:	6a e0       	ldi	r22, 0x0A	; 10
    3718:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    371c:	ec 01       	movw	r28, r24
    371e:	69 e4       	ldi	r22, 0x49	; 73
    3720:	76 e0       	ldi	r23, 0x06	; 6
    3722:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
		#endif
			<< PMS ("\t") << runs;
    3726:	6a e0       	ldi	r22, 0x0A	; 10
    3728:	ce 01       	movw	r24, r28
    372a:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    372e:	ec 01       	movw	r28, r24
    3730:	67 e4       	ldi	r22, 0x47	; 71
    3732:	76 e0       	ldi	r23, 0x06	; 6
    3734:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    3738:	b7 01       	movw	r22, r14
    373a:	a6 01       	movw	r20, r12
    373c:	ce 01       	movw	r24, r28
    373e:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <_ZN8emstreamlsEm>
}
    3742:	df 91       	pop	r29
    3744:	cf 91       	pop	r28
    3746:	1f 91       	pop	r17
    3748:	0f 91       	pop	r16
    374a:	ff 90       	pop	r15
    374c:	ef 90       	pop	r14
    374e:	df 90       	pop	r13
    3750:	cf 90       	pop	r12
    3752:	bf 90       	pop	r11
    3754:	af 90       	pop	r10
    3756:	9f 90       	pop	r9
    3758:	8f 90       	pop	r8
    375a:	08 95       	ret

0000375c <_ZlsR8emstreamR8frt_task>:
 *  @return A reference to the same serial device on which we write information.
 *          This is used to string together things to write with "<<" operators
 */

emstream& operator << (emstream& ser_dev, frt_task& a_task)
{
    375c:	cf 93       	push	r28
    375e:	df 93       	push	r29
    3760:	ec 01       	movw	r28, r24
    3762:	cb 01       	movw	r24, r22
	a_task.print_status (ser_dev);
    3764:	db 01       	movw	r26, r22
    3766:	ed 91       	ld	r30, X+
    3768:	fc 91       	ld	r31, X
    376a:	02 80       	ldd	r0, Z+2	; 0x02
    376c:	f3 81       	ldd	r31, Z+3	; 0x03
    376e:	e0 2d       	mov	r30, r0
    3770:	be 01       	movw	r22, r28
    3772:	19 95       	eicall
	return (ser_dev);
}
    3774:	ce 01       	movw	r24, r28
    3776:	df 91       	pop	r29
    3778:	cf 91       	pop	r28
    377a:	08 95       	ret

0000377c <_ZN8frt_task20print_status_in_listEP8emstream>:
 *  tasks to do so. The list is kept by the tasks, each having a pointer to another.
 *  @param ser_device The serial device to which each task prints its status
 */

void frt_task::print_status_in_list (emstream* ser_device)
{
    377c:	0f 93       	push	r16
    377e:	1f 93       	push	r17
    3780:	cf 93       	push	r28
    3782:	df 93       	push	r29
    3784:	ec 01       	movw	r28, r24
    3786:	8b 01       	movw	r16, r22
	*ser_device << *this << endl;
    3788:	bc 01       	movw	r22, r24
    378a:	c8 01       	movw	r24, r16
    378c:	0e 94 ae 1b 	call	0x375c	; 0x375c <_ZlsR8emstreamR8frt_task>
    3790:	66 e0       	ldi	r22, 0x06	; 6
    3792:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>

	if (prev_task_pointer != NULL)
    3796:	8c 81       	ldd	r24, Y+4	; 0x04
    3798:	9d 81       	ldd	r25, Y+5	; 0x05
    379a:	00 97       	sbiw	r24, 0x00	; 0
    379c:	19 f0       	breq	.+6      	; 0x37a4 <_ZN8frt_task20print_status_in_listEP8emstream+0x28>
	{
		prev_task_pointer->print_status_in_list (ser_device);
    379e:	b8 01       	movw	r22, r16
    37a0:	0e 94 be 1b 	call	0x377c	; 0x377c <_ZN8frt_task20print_status_in_listEP8emstream>
	}
}
    37a4:	df 91       	pop	r29
    37a6:	cf 91       	pop	r28
    37a8:	1f 91       	pop	r17
    37aa:	0f 91       	pop	r16
    37ac:	08 95       	ret

000037ae <_Z15print_task_listP8emstream>:
 *  The author isn't sure if it can always be trusted. 
 *  @param ser_dev Pointer to a serial device on which the information will be printed
 */

void print_task_list (emstream* ser_dev)
{
    37ae:	0f 93       	push	r16
    37b0:	1f 93       	push	r17
    37b2:	cf 93       	push	r28
    37b4:	df 93       	push	r29
    37b6:	ec 01       	movw	r28, r24
	// Print the first line with the top of the headings
	*ser_dev << PMS ("Task\t\t  \t ")
    37b8:	6a e0       	ldi	r22, 0x0A	; 10
    37ba:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    37be:	8c 01       	movw	r16, r24
    37c0:	6c e3       	ldi	r22, 0x3C	; 60
    37c2:	76 e0       	ldi	r23, 0x06	; 6
    37c4:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\tStack")
    37c8:	6a e0       	ldi	r22, 0x0A	; 10
    37ca:	c8 01       	movw	r24, r16
    37cc:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    37d0:	8c 01       	movw	r16, r24
    37d2:	65 e3       	ldi	r22, 0x35	; 53
    37d4:	76 e0       	ldi	r23, 0x06	; 6
    37d6:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
		#endif
			<< endl;
    37da:	66 e0       	ldi	r22, 0x06	; 6
    37dc:	c8 01       	movw	r24, r16
    37de:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>

	// Print the second line with the rest of the headings
	*ser_dev << PMS ("Name\t\tPri.\tState")
    37e2:	6a e0       	ldi	r22, 0x0A	; 10
    37e4:	ce 01       	movw	r24, r28
    37e6:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    37ea:	8c 01       	movw	r16, r24
    37ec:	64 e2       	ldi	r22, 0x24	; 36
    37ee:	76 e0       	ldi	r23, 0x06	; 6
    37f0:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\tFree/Total")
    37f4:	6a e0       	ldi	r22, 0x0A	; 10
    37f6:	c8 01       	movw	r24, r16
    37f8:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    37fc:	8c 01       	movw	r16, r24
    37fe:	68 e1       	ldi	r22, 0x18	; 24
    3800:	76 e0       	ldi	r23, 0x06	; 6
    3802:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
		#endif
			<< PMS ("\tRuns") << endl;
    3806:	6a e0       	ldi	r22, 0x0A	; 10
    3808:	c8 01       	movw	r24, r16
    380a:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    380e:	8c 01       	movw	r16, r24
    3810:	62 e1       	ldi	r22, 0x12	; 18
    3812:	76 e0       	ldi	r23, 0x06	; 6
    3814:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    3818:	66 e0       	ldi	r22, 0x06	; 6
    381a:	c8 01       	movw	r24, r16
    381c:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>

	// Print the third line which shows separators between headers and data
	*ser_dev << PMS ("----\t\t----\t-----")
    3820:	6a e0       	ldi	r22, 0x0A	; 10
    3822:	ce 01       	movw	r24, r28
    3824:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    3828:	8c 01       	movw	r16, r24
    382a:	61 e0       	ldi	r22, 0x01	; 1
    382c:	76 e0       	ldi	r23, 0x06	; 6
    382e:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\t----------")
    3832:	6a e0       	ldi	r22, 0x0A	; 10
    3834:	c8 01       	movw	r24, r16
    3836:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    383a:	8c 01       	movw	r16, r24
    383c:	65 ef       	ldi	r22, 0xF5	; 245
    383e:	75 e0       	ldi	r23, 0x05	; 5
    3840:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
		#endif
			<< PMS ("\t----") << endl;
    3844:	6a e0       	ldi	r22, 0x0A	; 10
    3846:	c8 01       	movw	r24, r16
    3848:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    384c:	8c 01       	movw	r16, r24
    384e:	6f ee       	ldi	r22, 0xEF	; 239
    3850:	75 e0       	ldi	r23, 0x05	; 5
    3852:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    3856:	66 e0       	ldi	r22, 0x06	; 6
    3858:	c8 01       	movw	r24, r16
    385a:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>

	// Now have the tasks each print out their status. Tasks form a linked list, so
	// we only need to get the last task started and it will call the next, etc.
	if (last_created_task_pointer != NULL)
    385e:	80 91 0c 33 	lds	r24, 0x330C	; 0x80330c <last_created_task_pointer>
    3862:	90 91 0d 33 	lds	r25, 0x330D	; 0x80330d <last_created_task_pointer+0x1>
    3866:	00 97       	sbiw	r24, 0x00	; 0
    3868:	19 f0       	breq	.+6      	; 0x3870 <_Z15print_task_listP8emstream+0xc2>
	{
		last_created_task_pointer->print_status_in_list (ser_dev);
    386a:	be 01       	movw	r22, r28
    386c:	0e 94 be 1b 	call	0x377c	; 0x377c <_ZN8frt_task20print_status_in_listEP8emstream>
	}

	// Have the idle task print out its information
	*ser_dev << PMS ("IDLE\t\t0\t-\t")
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< uxTaskGetStackHighWaterMark (xTaskGetIdleTaskHandle ())
    3870:	0e 94 11 16 	call	0x2c22	; 0x2c22 <xTaskGetIdleTaskHandle>
    3874:	0e 94 0f 19 	call	0x321e	; 0x321e <uxTaskGetStackHighWaterMark>
    3878:	18 2f       	mov	r17, r24
	{
		last_created_task_pointer->print_status_in_list (ser_dev);
	}

	// Have the idle task print out its information
	*ser_dev << PMS ("IDLE\t\t0\t-\t")
    387a:	6a e0       	ldi	r22, 0x0A	; 10
    387c:	ce 01       	movw	r24, r28
    387e:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    3882:	ec 01       	movw	r28, r24
    3884:	64 ee       	ldi	r22, 0xE4	; 228
    3886:	75 e0       	ldi	r23, 0x05	; 5
    3888:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< uxTaskGetStackHighWaterMark (xTaskGetIdleTaskHandle ())
    388c:	61 2f       	mov	r22, r17
    388e:	ce 01       	movw	r24, r28
    3890:	0e 94 28 20 	call	0x4050	; 0x4050 <_ZN8emstreamlsEh>
			<< PMS ("/") << configMINIMAL_STACK_SIZE << PMS ("\t\t")
    3894:	6a e0       	ldi	r22, 0x0A	; 10
    3896:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    389a:	ec 01       	movw	r28, r24
    389c:	62 ee       	ldi	r22, 0xE2	; 226
    389e:	75 e0       	ldi	r23, 0x05	; 5
    38a0:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    38a4:	64 e6       	ldi	r22, 0x64	; 100
    38a6:	70 e0       	ldi	r23, 0x00	; 0
    38a8:	ce 01       	movw	r24, r28
    38aa:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <_ZN8emstreamlsEj>
    38ae:	6a e0       	ldi	r22, 0x0A	; 10
    38b0:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    38b4:	ec 01       	movw	r28, r24
    38b6:	6f ed       	ldi	r22, 0xDF	; 223
    38b8:	75 e0       	ldi	r23, 0x05	; 5
    38ba:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
		#endif
		#ifdef TASK_SETUP_AND_LOOP
			<< PMS ("-")
		#endif
			<< endl;
    38be:	66 e0       	ldi	r22, 0x06	; 6
    38c0:	ce 01       	movw	r24, r28
    38c2:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
}
    38c6:	df 91       	pop	r29
    38c8:	cf 91       	pop	r28
    38ca:	1f 91       	pop	r17
    38cc:	0f 91       	pop	r16
    38ce:	08 95       	ret

000038d0 <_ZN14frt_text_queue7getcharEv>:
 *  the queue, it blocks until a character is received.
 *  @return The character which was received from the queue
 */

inline int16_t frt_text_queue::getchar (void)
{
    38d0:	0f 93       	push	r16
    38d2:	cf 93       	push	r28
    38d4:	df 93       	push	r29
    38d6:	1f 92       	push	r1
    38d8:	cd b7       	in	r28, 0x3d	; 61
    38da:	de b7       	in	r29, 0x3e	; 62
	char recv_char;							// Character read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue
	if (xQueueReceive (the_queue, &recv_char, portMAX_DELAY) != pdTRUE)
    38dc:	00 e0       	ldi	r16, 0x00	; 0
    38de:	2f ef       	ldi	r18, 0xFF	; 255
    38e0:	3f ef       	ldi	r19, 0xFF	; 255
    38e2:	a9 01       	movw	r20, r18
    38e4:	be 01       	movw	r22, r28
    38e6:	6f 5f       	subi	r22, 0xFF	; 255
    38e8:	7f 4f       	sbci	r23, 0xFF	; 255
    38ea:	fc 01       	movw	r30, r24
    38ec:	80 85       	ldd	r24, Z+8	; 0x08
    38ee:	91 85       	ldd	r25, Z+9	; 0x09
    38f0:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xQueueGenericReceive>
    38f4:	81 30       	cpi	r24, 0x01	; 1
    38f6:	19 f4       	brne	.+6      	; 0x38fe <_ZN14frt_text_queue7getcharEv+0x2e>
	{
		return (-1);
	}

	// OK, we got good data from the queue, so return it
	return (recv_char);
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	02 c0       	rjmp	.+4      	; 0x3902 <_ZN14frt_text_queue7getcharEv+0x32>
	char recv_char;							// Character read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue
	if (xQueueReceive (the_queue, &recv_char, portMAX_DELAY) != pdTRUE)
	{
		return (-1);
    38fe:	8f ef       	ldi	r24, 0xFF	; 255
    3900:	9f ef       	ldi	r25, 0xFF	; 255
	}

	// OK, we got good data from the queue, so return it
	return (recv_char);
}
    3902:	0f 90       	pop	r0
    3904:	df 91       	pop	r29
    3906:	cf 91       	pop	r28
    3908:	0f 91       	pop	r16
    390a:	08 95       	ret

0000390c <_ZN14frt_text_queue14check_for_charEv>:
 *  @return True for character available, false for no character available
 */

inline bool frt_text_queue::check_for_char (void)
{
	if (uxQueueMessagesWaiting (the_queue) == 0)
    390c:	fc 01       	movw	r30, r24
    390e:	80 85       	ldd	r24, Z+8	; 0x08
    3910:	91 85       	ldd	r25, Z+9	; 0x09
    3912:	0e 94 51 14 	call	0x28a2	; 0x28a2 <uxQueueMessagesWaiting>
    3916:	91 e0       	ldi	r25, 0x01	; 1
    3918:	81 11       	cpse	r24, r1
    391a:	01 c0       	rjmp	.+2      	; 0x391e <_ZN14frt_text_queue14check_for_charEv+0x12>
    391c:	90 e0       	ldi	r25, 0x00	; 0
	{
		return (false);
	}
	return (true);
}
    391e:	89 2f       	mov	r24, r25
    3920:	08 95       	ret

00003922 <_ZN14frt_text_queue7putcharEc>:
 *  @param a_char The character to be sent to the queue
 *  @return True if the character was successfully sent, false if something went wrong
 */

inline bool frt_text_queue::putchar (char a_char)
{
    3922:	0f 93       	push	r16
    3924:	cf 93       	push	r28
    3926:	df 93       	push	r29
    3928:	1f 92       	push	r1
    392a:	cd b7       	in	r28, 0x3d	; 61
    392c:	de b7       	in	r29, 0x3e	; 62
    392e:	69 83       	std	Y+1, r22	; 0x01
	// If the data is successfully put in the queue, return true
	if (xQueueSendToBack (the_queue, &a_char, ticks_to_wait))
    3930:	fc 01       	movw	r30, r24
    3932:	22 85       	ldd	r18, Z+10	; 0x0a
    3934:	33 85       	ldd	r19, Z+11	; 0x0b
    3936:	44 85       	ldd	r20, Z+12	; 0x0c
    3938:	55 85       	ldd	r21, Z+13	; 0x0d
    393a:	00 e0       	ldi	r16, 0x00	; 0
    393c:	be 01       	movw	r22, r28
    393e:	6f 5f       	subi	r22, 0xFF	; 255
    3940:	7f 4f       	sbci	r23, 0xFF	; 255
    3942:	80 85       	ldd	r24, Z+8	; 0x08
    3944:	91 85       	ldd	r25, Z+9	; 0x09
    3946:	0e 94 99 12 	call	0x2532	; 0x2532 <xQueueGenericSend>
    394a:	91 e0       	ldi	r25, 0x01	; 1
    394c:	81 11       	cpse	r24, r1
    394e:	01 c0       	rjmp	.+2      	; 0x3952 <_ZN14frt_text_queue7putcharEc+0x30>
    3950:	90 e0       	ldi	r25, 0x00	; 0
		return (true);
	}

	// If we get here, something went wrong (probably a timeout), so return false
	return (false);
}
    3952:	89 2f       	mov	r24, r25
    3954:	0f 90       	pop	r0
    3956:	df 91       	pop	r29
    3958:	cf 91       	pop	r28
    395a:	0f 91       	pop	r16
    395c:	08 95       	ret

0000395e <_ZN14frt_text_queueC1EjP8emstreamm>:
 *                     portMAX_DELAY causes a send to block indefinitely
 *  @param p_ser_dev A pointer which points to a serial device which can be used for
 *                   diagnostic logging or printing
 */

frt_text_queue::frt_text_queue (uint16_t queue_size, emstream* p_ser_dev,
    395e:	8f 92       	push	r8
    3960:	9f 92       	push	r9
    3962:	bf 92       	push	r11
    3964:	cf 92       	push	r12
    3966:	df 92       	push	r13
    3968:	ef 92       	push	r14
    396a:	ff 92       	push	r15
    396c:	0f 93       	push	r16
    396e:	1f 93       	push	r17
    3970:	cf 93       	push	r28
    3972:	df 93       	push	r29
    3974:	ec 01       	movw	r28, r24
    3976:	b6 2e       	mov	r11, r22
    3978:	4a 01       	movw	r8, r20
    397a:	68 01       	movw	r12, r16
    397c:	79 01       	movw	r14, r18
							   portTickType a_wait_time)
    397e:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <_ZN8emstreamC1Ev>
    3982:	80 e0       	ldi	r24, 0x00	; 0
    3984:	92 e2       	ldi	r25, 0x22	; 34
    3986:	88 83       	st	Y, r24
    3988:	99 83       	std	Y+1, r25	; 0x01
{
	// Save the pointer to the serial device which is used for debugging
	p_serial = p_ser_dev;
    398a:	8e 86       	std	Y+14, r8	; 0x0e
    398c:	9f 86       	std	Y+15, r9	; 0x0f

	// Create a FreeRTOS queue object which holds the given number of characters
	the_queue = xQueueCreate (queue_size, sizeof (char));
    398e:	40 e0       	ldi	r20, 0x00	; 0
    3990:	61 e0       	ldi	r22, 0x01	; 1
    3992:	8b 2d       	mov	r24, r11
    3994:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <xQueueGenericCreate>
    3998:	88 87       	std	Y+8, r24	; 0x08
    399a:	99 87       	std	Y+9, r25	; 0x09

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = a_wait_time;
    399c:	ca 86       	std	Y+10, r12	; 0x0a
    399e:	db 86       	std	Y+11, r13	; 0x0b
    39a0:	ec 86       	std	Y+12, r14	; 0x0c
    39a2:	fd 86       	std	Y+13, r15	; 0x0d
}
    39a4:	df 91       	pop	r29
    39a6:	cf 91       	pop	r28
    39a8:	1f 91       	pop	r17
    39aa:	0f 91       	pop	r16
    39ac:	ff 90       	pop	r15
    39ae:	ef 90       	pop	r14
    39b0:	df 90       	pop	r13
    39b2:	cf 90       	pop	r12
    39b4:	bf 90       	pop	r11
    39b6:	9f 90       	pop	r9
    39b8:	8f 90       	pop	r8
    39ba:	08 95       	ret

000039bc <_ZN10time_stamp12get_microsecEv>:
 *  integer number of ticks per second.
 *  @return The number of microseconds in time stamp
 */

uint32_t time_stamp::get_microsec (void)
{
    39bc:	cf 92       	push	r12
    39be:	df 92       	push	r13
    39c0:	ef 92       	push	r14
    39c2:	ff 92       	push	r15
    39c4:	cf 93       	push	r28
    39c6:	df 93       	push	r29
    39c8:	ec 01       	movw	r28, r24
	return 
	(
		(int32_t)(tick_count % configTICK_RATE_HZ) * 1000000L / configTICK_RATE_HZ
			+ (int32_t)hardware_count * 1000000L 
				/ (configCPU_CLOCK_HZ / portCLOCK_PRESCALER)
	);
    39ca:	68 81       	ld	r22, Y
    39cc:	79 81       	ldd	r23, Y+1	; 0x01
    39ce:	8a 81       	ldd	r24, Y+2	; 0x02
    39d0:	9b 81       	ldd	r25, Y+3	; 0x03
    39d2:	0f 2e       	mov	r0, r31
    39d4:	f8 ee       	ldi	r31, 0xE8	; 232
    39d6:	cf 2e       	mov	r12, r31
    39d8:	f3 e0       	ldi	r31, 0x03	; 3
    39da:	df 2e       	mov	r13, r31
    39dc:	e1 2c       	mov	r14, r1
    39de:	f1 2c       	mov	r15, r1
    39e0:	f0 2d       	mov	r31, r0
    39e2:	a7 01       	movw	r20, r14
    39e4:	96 01       	movw	r18, r12
    39e6:	0e 94 91 26 	call	0x4d22	; 0x4d22 <__udivmodsi4>
    39ea:	9b 01       	movw	r18, r22
    39ec:	ac 01       	movw	r20, r24
    39ee:	60 e4       	ldi	r22, 0x40	; 64
    39f0:	72 e4       	ldi	r23, 0x42	; 66
    39f2:	8f e0       	ldi	r24, 0x0F	; 15
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	0e 94 81 26 	call	0x4d02	; 0x4d02 <__mulsi3>
    39fa:	a7 01       	movw	r20, r14
    39fc:	96 01       	movw	r18, r12
    39fe:	0e 94 91 26 	call	0x4d22	; 0x4d22 <__udivmodsi4>
    3a02:	69 01       	movw	r12, r18
    3a04:	7a 01       	movw	r14, r20
    3a06:	ac 81       	ldd	r26, Y+4	; 0x04
    3a08:	bd 81       	ldd	r27, Y+5	; 0x05
    3a0a:	20 e4       	ldi	r18, 0x40	; 64
    3a0c:	32 e4       	ldi	r19, 0x42	; 66
    3a0e:	4f e0       	ldi	r20, 0x0F	; 15
    3a10:	50 e0       	ldi	r21, 0x00	; 0
    3a12:	0e 94 db 26 	call	0x4db6	; 0x4db6 <__muluhisi3>
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	38 e4       	ldi	r19, 0x48	; 72
    3a1a:	48 ee       	ldi	r20, 0xE8	; 232
    3a1c:	51 e0       	ldi	r21, 0x01	; 1
    3a1e:	0e 94 91 26 	call	0x4d22	; 0x4d22 <__udivmodsi4>
    3a22:	c7 01       	movw	r24, r14
    3a24:	b6 01       	movw	r22, r12
    3a26:	62 0f       	add	r22, r18
    3a28:	73 1f       	adc	r23, r19
    3a2a:	84 1f       	adc	r24, r20
    3a2c:	95 1f       	adc	r25, r21
}
    3a2e:	df 91       	pop	r29
    3a30:	cf 91       	pop	r28
    3a32:	ff 90       	pop	r15
    3a34:	ef 90       	pop	r14
    3a36:	df 90       	pop	r13
    3a38:	cf 90       	pop	r12
    3a3a:	08 95       	ret

00003a3c <_ZlsR8emstreamR10time_stamp>:
 *  @return A reference to the serial device to which the data was printed. This
 *          reference is used to string printable items together with "<<" operators
 */

emstream& operator<< (emstream& serial, time_stamp& stamp)
{
    3a3c:	cf 92       	push	r12
    3a3e:	df 92       	push	r13
    3a40:	ef 92       	push	r14
    3a42:	ff 92       	push	r15
    3a44:	0f 93       	push	r16
    3a46:	1f 93       	push	r17
    3a48:	cf 93       	push	r28
    3a4a:	df 93       	push	r29
    3a4c:	cd b7       	in	r28, 0x3d	; 61
    3a4e:	de b7       	in	r29, 0x3e	; 62
    3a50:	2f 97       	sbiw	r28, 0x0f	; 15
    3a52:	cd bf       	out	0x3d, r28	; 61
    3a54:	de bf       	out	0x3e, r29	; 62
    3a56:	6c 01       	movw	r12, r24
    3a58:	8b 01       	movw	r16, r22
	char dig_buffer[7];						// Holds digits we compute
	ldiv_t div_result;						// Holds results of long integer division

	// First write the seconds in the time stamp, then a decimal
	serial << stamp.get_seconds ();
    3a5a:	db 01       	movw	r26, r22
    3a5c:	6d 91       	ld	r22, X+
    3a5e:	7d 91       	ld	r23, X+
    3a60:	8d 91       	ld	r24, X+
    3a62:	9c 91       	ld	r25, X
    3a64:	28 ee       	ldi	r18, 0xE8	; 232
    3a66:	33 e0       	ldi	r19, 0x03	; 3
    3a68:	40 e0       	ldi	r20, 0x00	; 0
    3a6a:	50 e0       	ldi	r21, 0x00	; 0
    3a6c:	0e 94 91 26 	call	0x4d22	; 0x4d22 <__udivmodsi4>
    3a70:	ba 01       	movw	r22, r20
    3a72:	a9 01       	movw	r20, r18
    3a74:	c6 01       	movw	r24, r12
    3a76:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <_ZN8emstreamlsEm>
	serial.putchar ('.');
    3a7a:	d6 01       	movw	r26, r12
    3a7c:	ed 91       	ld	r30, X+
    3a7e:	fc 91       	ld	r31, X
    3a80:	02 80       	ldd	r0, Z+2	; 0x02
    3a82:	f3 81       	ldd	r31, Z+3	; 0x03
    3a84:	e0 2d       	mov	r30, r0
    3a86:	6e e2       	ldi	r22, 0x2E	; 46
    3a88:	c6 01       	movw	r24, r12
    3a8a:	19 95       	eicall

	// Now get the microseconds; these will be written with leading zeros as needed
	div_result.quot = stamp.get_microsec ();
    3a8c:	c8 01       	movw	r24, r16
    3a8e:	0e 94 de 1c 	call	0x39bc	; 0x39bc <_ZN10time_stamp12get_microsecEv>
    3a92:	8e 01       	movw	r16, r28
    3a94:	09 5f       	subi	r16, 0xF9	; 249
    3a96:	1f 4f       	sbci	r17, 0xFF	; 255
    3a98:	fe 01       	movw	r30, r28
    3a9a:	31 96       	adiw	r30, 0x01	; 1
    3a9c:	7f 01       	movw	r14, r30
	for (int8_t index = 5; index >= 0; index--)
	{
		div_result = ldiv (div_result.quot, 10);
    3a9e:	2a e0       	ldi	r18, 0x0A	; 10
    3aa0:	30 e0       	ldi	r19, 0x00	; 0
    3aa2:	40 e0       	ldi	r20, 0x00	; 0
    3aa4:	50 e0       	ldi	r21, 0x00	; 0
    3aa6:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <__divmodsi4>
    3aaa:	e6 2f       	mov	r30, r22
    3aac:	28 87       	std	Y+8, r18	; 0x08
    3aae:	39 87       	std	Y+9, r19	; 0x09
    3ab0:	4a 87       	std	Y+10, r20	; 0x0a
    3ab2:	5b 87       	std	Y+11, r21	; 0x0b
    3ab4:	68 85       	ldd	r22, Y+8	; 0x08
    3ab6:	79 85       	ldd	r23, Y+9	; 0x09
    3ab8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3aba:	9b 85       	ldd	r25, Y+11	; 0x0b
		dig_buffer[index] = div_result.rem + '0';
    3abc:	20 e3       	ldi	r18, 0x30	; 48
    3abe:	2e 0f       	add	r18, r30
    3ac0:	d8 01       	movw	r26, r16
    3ac2:	2e 93       	st	-X, r18
    3ac4:	8d 01       	movw	r16, r26
	serial << stamp.get_seconds ();
	serial.putchar ('.');

	// Now get the microseconds; these will be written with leading zeros as needed
	div_result.quot = stamp.get_microsec ();
	for (int8_t index = 5; index >= 0; index--)
    3ac6:	ae 15       	cp	r26, r14
    3ac8:	bf 05       	cpc	r27, r15
    3aca:	49 f7       	brne	.-46     	; 0x3a9e <_ZlsR8emstreamR10time_stamp+0x62>
		div_result = ldiv (div_result.quot, 10);
		dig_buffer[index] = div_result.rem + '0';
	}

	// The last item in the string must be a '\0' null character
	dig_buffer[6] = '\0';
    3acc:	1f 82       	std	Y+7, r1	; 0x07
    3ace:	be 01       	movw	r22, r28
    3ad0:	6f 5f       	subi	r22, 0xFF	; 255
    3ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ad4:	c6 01       	movw	r24, r12
    3ad6:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>

	// Write the buffer, which now contains microsecond digits
	serial << dig_buffer;

	return (serial);
}
    3ada:	c6 01       	movw	r24, r12
    3adc:	2f 96       	adiw	r28, 0x0f	; 15
    3ade:	cd bf       	out	0x3d, r28	; 61
    3ae0:	de bf       	out	0x3e, r29	; 62
    3ae2:	df 91       	pop	r29
    3ae4:	cf 91       	pop	r28
    3ae6:	1f 91       	pop	r17
    3ae8:	0f 91       	pop	r16
    3aea:	ff 90       	pop	r15
    3aec:	ef 90       	pop	r14
    3aee:	df 90       	pop	r13
    3af0:	cf 90       	pop	r12
    3af2:	08 95       	ret

00003af4 <_ZN10time_stamp10set_to_nowEv>:
 *  tick count. Still trying to figure out how to detect and fix this problem... 
 *  @return A reference to this time_stamp object, useful for printing the current time
 */

time_stamp& time_stamp::set_to_now (void)
{
    3af4:	cf 93       	push	r28
    3af6:	df 93       	push	r29
    3af8:	ec 01       	movw	r28, r24
	// First disable interrupts so that if the hardware timer hits its maximum value
	// after this point and before we're done, the RTOS tick count won't be incremented
	// and also this function won't be interrupted by a task switch
	portENTER_CRITICAL ();
    3afa:	0f b6       	in	r0, 0x3f	; 63
    3afc:	f8 94       	cli
    3afe:	0f 92       	push	r0
	#elif (defined TIMER3_COMPA_vect)
		hardware_count = TCNT3;
	#elif (defined TIMER1_COMPA_vect)
	hardware_count = TCNT1;
	#else
		hardware_count = TCC0.CNT;
    3b00:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    3b04:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    3b08:	8c 83       	std	Y+4, r24	; 0x04
    3b0a:	9d 83       	std	Y+5, r25	; 0x05
	#endif

	// Now get the tick count (interrupts are still disabled)
	tick_count = xTaskGetTickCount ();
    3b0c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <xTaskGetTickCount>
    3b10:	68 83       	st	Y, r22
    3b12:	79 83       	std	Y+1, r23	; 0x01
    3b14:	8a 83       	std	Y+2, r24	; 0x02
    3b16:	9b 83       	std	Y+3, r25	; 0x03

	// Re-enable interrupts here; if the tick count is incremented now, that's fine
	portEXIT_CRITICAL ();
    3b18:	0f 90       	pop	r0
    3b1a:	0f be       	out	0x3f, r0	; 63

	// Return a reference to this object
	return (*this);
}
    3b1c:	ce 01       	movw	r24, r28
    3b1e:	df 91       	pop	r29
    3b20:	cf 91       	pop	r28
    3b22:	08 95       	ret

00003b24 <_Z15hex_dump_memoryPhS_P8emstreambh>:
 *      of a task's stack memory space. 
 */

void hex_dump_memory (uint8_t* start_address, uint8_t* end_address,
					  emstream* p_ser_dev, bool highlight, uint8_t empty_code)
{
    3b24:	5f 92       	push	r5
    3b26:	6f 92       	push	r6
    3b28:	7f 92       	push	r7
    3b2a:	8f 92       	push	r8
    3b2c:	9f 92       	push	r9
    3b2e:	af 92       	push	r10
    3b30:	bf 92       	push	r11
    3b32:	cf 92       	push	r12
    3b34:	df 92       	push	r13
    3b36:	ef 92       	push	r14
    3b38:	ff 92       	push	r15
    3b3a:	0f 93       	push	r16
    3b3c:	1f 93       	push	r17
    3b3e:	cf 93       	push	r28
    3b40:	df 93       	push	r29
    3b42:	5c 01       	movw	r10, r24
    3b44:	4b 01       	movw	r8, r22
    3b46:	7a 01       	movw	r14, r20
    3b48:	12 2f       	mov	r17, r18
    3b4a:	70 2e       	mov	r7, r16
	// pointers together, we convert the pointers into equivalent integers (this is
	// non-portable and may need to be changed for other processors!), add those
	// together, then convert back into a pointer

	// Print DUMP_BYTES_PER_LINE bytes on each line
	*p_ser_dev << hex;
    3b4c:	63 e0       	ldi	r22, 0x03	; 3
    3b4e:	ca 01       	movw	r24, r20
    3b50:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
	while (start_address < end_address)
    3b54:	a8 14       	cp	r10, r8
    3b56:	b9 04       	cpc	r11, r9
    3b58:	08 f0       	brcs	.+2      	; 0x3b5c <_Z15hex_dump_memoryPhS_P8emstreambh+0x38>
    3b5a:	7d c0       	rjmp	.+250    	; 0x3c56 <_Z15hex_dump_memoryPhS_P8emstreambh+0x132>
    3b5c:	65 01       	movw	r12, r10
    3b5e:	84 e1       	ldi	r24, 0x14	; 20
    3b60:	c8 0e       	add	r12, r24
    3b62:	d1 1c       	adc	r13, r1
    3b64:	00 e0       	ldi	r16, 0x00	; 0
	{
		// Print the line address 
		*p_ser_dev << (size_t)(start_address) << PMS ("  ");
    3b66:	6a 2c       	mov	r6, r10
    3b68:	5b 2c       	mov	r5, r11
    3b6a:	b5 01       	movw	r22, r10
    3b6c:	c7 01       	movw	r24, r14
    3b6e:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <_ZN8emstreamlsEj>
    3b72:	6a e0       	ldi	r22, 0x0A	; 10
    3b74:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    3b78:	61 e6       	ldi	r22, 0x61	; 97
    3b7a:	76 e0       	ldi	r23, 0x06	; 6
    3b7c:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>

		// Show a line full of data in hexadecimal format. If the memory has not been
		// changed from its original value, show it non-highlighted
		if (highlight && found_changes)
    3b80:	11 23       	and	r17, r17
    3b82:	09 f4       	brne	.+2      	; 0x3b86 <_Z15hex_dump_memoryPhS_P8emstreambh+0x62>
    3b84:	6d c0       	rjmp	.+218    	; 0x3c60 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13c>
    3b86:	00 23       	and	r16, r16
    3b88:	09 f4       	brne	.+2      	; 0x3b8c <_Z15hex_dump_memoryPhS_P8emstreambh+0x68>
    3b8a:	6a c0       	rjmp	.+212    	; 0x3c60 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13c>
		{
			*p_ser_dev << ATERM_BOLD;
    3b8c:	6a e0       	ldi	r22, 0x0A	; 10
    3b8e:	c7 01       	movw	r24, r14
    3b90:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    3b94:	6c e5       	ldi	r22, 0x5C	; 92
    3b96:	76 e0       	ldi	r23, 0x06	; 6
    3b98:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    3b9c:	61 c0       	rjmp	.+194    	; 0x3c60 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13c>
		}
		for (byte_count = 0; byte_count < DUMP_BYTES_PER_LINE; byte_count++)
		{
			if (highlight && (!found_changes) && ((*start_address) != empty_code))
    3b9e:	11 23       	and	r17, r17
    3ba0:	71 f0       	breq	.+28     	; 0x3bbe <_Z15hex_dump_memoryPhS_P8emstreambh+0x9a>
    3ba2:	01 11       	cpse	r16, r1
    3ba4:	0c c0       	rjmp	.+24     	; 0x3bbe <_Z15hex_dump_memoryPhS_P8emstreambh+0x9a>
    3ba6:	88 81       	ld	r24, Y
    3ba8:	87 15       	cp	r24, r7
    3baa:	49 f0       	breq	.+18     	; 0x3bbe <_Z15hex_dump_memoryPhS_P8emstreambh+0x9a>
			{
				found_changes = true;
				*p_ser_dev << ATERM_BOLD;
    3bac:	6a e0       	ldi	r22, 0x0A	; 10
    3bae:	c7 01       	movw	r24, r14
    3bb0:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    3bb4:	67 e5       	ldi	r22, 0x57	; 87
    3bb6:	76 e0       	ldi	r23, 0x06	; 6
    3bb8:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
		}
		for (byte_count = 0; byte_count < DUMP_BYTES_PER_LINE; byte_count++)
		{
			if (highlight && (!found_changes) && ((*start_address) != empty_code))
			{
				found_changes = true;
    3bbc:	01 e0       	ldi	r16, 0x01	; 1
				*p_ser_dev << ATERM_BOLD;
			}
			*p_ser_dev << (uint8_t)(*start_address++) << (char)(' ');
    3bbe:	69 91       	ld	r22, Y+
    3bc0:	c7 01       	movw	r24, r14
    3bc2:	0e 94 28 20 	call	0x4050	; 0x4050 <_ZN8emstreamlsEh>
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	ed 91       	ld	r30, X+
    3bca:	fc 91       	ld	r31, X
    3bcc:	02 80       	ldd	r0, Z+2	; 0x02
    3bce:	f3 81       	ldd	r31, Z+3	; 0x03
    3bd0:	e0 2d       	mov	r30, r0
    3bd2:	60 e2       	ldi	r22, 0x20	; 32
    3bd4:	19 95       	eicall
		// changed from its original value, show it non-highlighted
		if (highlight && found_changes)
		{
			*p_ser_dev << ATERM_BOLD;
		}
		for (byte_count = 0; byte_count < DUMP_BYTES_PER_LINE; byte_count++)
    3bd6:	cc 16       	cp	r12, r28
    3bd8:	dd 06       	cpc	r13, r29
    3bda:	09 f7       	brne	.-62     	; 0x3b9e <_Z15hex_dump_memoryPhS_P8emstreambh+0x7a>
			}
			*p_ser_dev << (uint8_t)(*start_address++) << (char)(' ');
		}

		// Show the same line full of data in text format
		if (highlight)
    3bdc:	11 23       	and	r17, r17
    3bde:	89 f0       	breq	.+34     	; 0x3c02 <_Z15hex_dump_memoryPhS_P8emstreambh+0xde>
		{
			*p_ser_dev << ATERM_NORM_INT << (char)(' ');
    3be0:	6a e0       	ldi	r22, 0x0A	; 10
    3be2:	c7 01       	movw	r24, r14
    3be4:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    3be8:	ec 01       	movw	r28, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    3bea:	61 e5       	ldi	r22, 0x51	; 81
    3bec:	76 e0       	ldi	r23, 0x06	; 6
    3bee:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    3bf2:	e8 81       	ld	r30, Y
    3bf4:	f9 81       	ldd	r31, Y+1	; 0x01
    3bf6:	02 80       	ldd	r0, Z+2	; 0x02
    3bf8:	f3 81       	ldd	r31, Z+3	; 0x03
    3bfa:	e0 2d       	mov	r30, r0
    3bfc:	60 e2       	ldi	r22, 0x20	; 32
    3bfe:	ce 01       	movw	r24, r28
    3c00:	19 95       	eicall
		}
		for (byte_count = 0; byte_count < DUMP_BYTES_PER_LINE; byte_count++)
		{
			if (highlight && (!found_changes) && ((*start_address) != empty_code))
			{
				found_changes = true;
    3c02:	c6 2d       	mov	r28, r6
    3c04:	d5 2d       	mov	r29, r5
		{
			*p_ser_dev << ATERM_NORM_INT << (char)(' ');
		}
		for (start_address -= DUMP_BYTES_PER_LINE; byte_count > 0; byte_count--)
		{
			temp_byte = *start_address++;
    3c06:	69 91       	ld	r22, Y+
			if (temp_byte >= ' ' && temp_byte <= '~')
    3c08:	80 ee       	ldi	r24, 0xE0	; 224
    3c0a:	86 0f       	add	r24, r22
    3c0c:	8f 35       	cpi	r24, 0x5F	; 95
    3c0e:	48 f4       	brcc	.+18     	; 0x3c22 <_Z15hex_dump_memoryPhS_P8emstreambh+0xfe>
				p_ser_dev->putchar (temp_byte);
    3c10:	d7 01       	movw	r26, r14
    3c12:	ed 91       	ld	r30, X+
    3c14:	fc 91       	ld	r31, X
    3c16:	02 80       	ldd	r0, Z+2	; 0x02
    3c18:	f3 81       	ldd	r31, Z+3	; 0x03
    3c1a:	e0 2d       	mov	r30, r0
    3c1c:	c7 01       	movw	r24, r14
    3c1e:	19 95       	eicall
    3c20:	09 c0       	rjmp	.+18     	; 0x3c34 <_Z15hex_dump_memoryPhS_P8emstreambh+0x110>
			else
				p_ser_dev->putchar ('.');
    3c22:	d7 01       	movw	r26, r14
    3c24:	ed 91       	ld	r30, X+
    3c26:	fc 91       	ld	r31, X
    3c28:	02 80       	ldd	r0, Z+2	; 0x02
    3c2a:	f3 81       	ldd	r31, Z+3	; 0x03
    3c2c:	e0 2d       	mov	r30, r0
    3c2e:	6e e2       	ldi	r22, 0x2E	; 46
    3c30:	c7 01       	movw	r24, r14
    3c32:	19 95       	eicall
		// Show the same line full of data in text format
		if (highlight)
		{
			*p_ser_dev << ATERM_NORM_INT << (char)(' ');
		}
		for (start_address -= DUMP_BYTES_PER_LINE; byte_count > 0; byte_count--)
    3c34:	cc 16       	cp	r12, r28
    3c36:	dd 06       	cpc	r13, r29
    3c38:	31 f7       	brne	.-52     	; 0x3c06 <_Z15hex_dump_memoryPhS_P8emstreambh+0xe2>
    3c3a:	b4 e1       	ldi	r27, 0x14	; 20
    3c3c:	ab 0e       	add	r10, r27
    3c3e:	b1 1c       	adc	r11, r1
			else
				p_ser_dev->putchar ('.');
		}

		// Put a return at the end of the line
		*p_ser_dev << endl;
    3c40:	66 e0       	ldi	r22, 0x06	; 6
    3c42:	c7 01       	movw	r24, r14
    3c44:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    3c48:	84 e1       	ldi	r24, 0x14	; 20
    3c4a:	c8 0e       	add	r12, r24
    3c4c:	d1 1c       	adc	r13, r1
	// non-portable and may need to be changed for other processors!), add those
	// together, then convert back into a pointer

	// Print DUMP_BYTES_PER_LINE bytes on each line
	*p_ser_dev << hex;
	while (start_address < end_address)
    3c4e:	a8 14       	cp	r10, r8
    3c50:	b9 04       	cpc	r11, r9
    3c52:	08 f4       	brcc	.+2      	; 0x3c56 <_Z15hex_dump_memoryPhS_P8emstreambh+0x132>
    3c54:	88 cf       	rjmp	.-240    	; 0x3b66 <_Z15hex_dump_memoryPhS_P8emstreambh+0x42>
		}

		// Put a return at the end of the line
		*p_ser_dev << endl;
	}
	*p_ser_dev << dec;
    3c56:	62 e0       	ldi	r22, 0x02	; 2
    3c58:	c7 01       	movw	r24, r14
    3c5a:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
}
    3c5e:	03 c0       	rjmp	.+6      	; 0x3c66 <_Z15hex_dump_memoryPhS_P8emstreambh+0x142>
	// non-portable and may need to be changed for other processors!), add those
	// together, then convert back into a pointer

	// Print DUMP_BYTES_PER_LINE bytes on each line
	*p_ser_dev << hex;
	while (start_address < end_address)
    3c60:	c6 2d       	mov	r28, r6
    3c62:	d5 2d       	mov	r29, r5
    3c64:	9c cf       	rjmp	.-200    	; 0x3b9e <_Z15hex_dump_memoryPhS_P8emstreambh+0x7a>

		// Put a return at the end of the line
		*p_ser_dev << endl;
	}
	*p_ser_dev << dec;
}
    3c66:	df 91       	pop	r29
    3c68:	cf 91       	pop	r28
    3c6a:	1f 91       	pop	r17
    3c6c:	0f 91       	pop	r16
    3c6e:	ff 90       	pop	r15
    3c70:	ef 90       	pop	r14
    3c72:	df 90       	pop	r13
    3c74:	cf 90       	pop	r12
    3c76:	bf 90       	pop	r11
    3c78:	af 90       	pop	r10
    3c7a:	9f 90       	pop	r9
    3c7c:	8f 90       	pop	r8
    3c7e:	7f 90       	pop	r7
    3c80:	6f 90       	pop	r6
    3c82:	5f 90       	pop	r5
    3c84:	08 95       	ret

00003c86 <_Znwj>:
 *  @param g A pointer to some random thing
 */
extern "C"
{
void __cxa_guard_abort (__guard *g)
    {
    3c86:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <pvPortMalloc>
    3c8a:	08 95       	ret

00003c8c <_Znaj>:
    3c8c:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <pvPortMalloc>
    3c90:	08 95       	ret

00003c92 <__cxa_pure_virtual>:
 */

extern "C"
{    
void __cxa_pure_virtual (void)
    {
    3c92:	08 95       	ret

00003c94 <_ZN7base232C1EjP12USART_struct>:
 *  @param baud_rate The desired baud rate for serial communications. Default is 9600
 *  @param port_number The number of the serial port, 0 or 1 (the second port numbered
 *                     1 only exists on some processors). The default is port 0 
 */

base232::base232 (unsigned int baud_rate, USART_t* p_usart)
    3c94:	cf 93       	push	r28
    3c96:	df 93       	push	r29
    3c98:	fc 01       	movw	r30, r24
    3c9a:	da 01       	movw	r26, r20
{
	// Store pointers to usart struct and port struct
	p_usart = p_usart;
	p_port = p_port;
	
	if(p_usart == &USARTC0)
    3c9c:	40 3a       	cpi	r20, 0xA0	; 160
    3c9e:	68 e0       	ldi	r22, 0x08	; 8
    3ca0:	56 07       	cpc	r21, r22
    3ca2:	49 f4       	brne	.+18     	; 0x3cb6 <_ZN7base232C1EjP12USART_struct+0x22>
	{
		p_port = &PORTC;
    3ca4:	80 e4       	ldi	r24, 0x40	; 64
    3ca6:	96 e0       	ldi	r25, 0x06	; 6
    3ca8:	82 83       	std	Z+2, r24	; 0x02
    3caa:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 2;
    3cac:	82 e0       	ldi	r24, 0x02	; 2
    3cae:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 3;
    3cb0:	83 e0       	ldi	r24, 0x03	; 3
    3cb2:	85 83       	std	Z+5, r24	; 0x05
    3cb4:	32 c0       	rjmp	.+100    	; 0x3d1a <_ZN7base232C1EjP12USART_struct+0x86>
	}
#ifdef USARTC1 
	else if(p_usart == &USARTC1)
    3cb6:	40 3b       	cpi	r20, 0xB0	; 176
    3cb8:	78 e0       	ldi	r23, 0x08	; 8
    3cba:	57 07       	cpc	r21, r23
    3cbc:	49 f4       	brne	.+18     	; 0x3cd0 <_ZN7base232C1EjP12USART_struct+0x3c>
	{
		p_port = &PORTC;
    3cbe:	80 e4       	ldi	r24, 0x40	; 64
    3cc0:	96 e0       	ldi	r25, 0x06	; 6
    3cc2:	82 83       	std	Z+2, r24	; 0x02
    3cc4:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 6;
    3cc6:	86 e0       	ldi	r24, 0x06	; 6
    3cc8:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 7;
    3cca:	87 e0       	ldi	r24, 0x07	; 7
    3ccc:	85 83       	std	Z+5, r24	; 0x05
    3cce:	25 c0       	rjmp	.+74     	; 0x3d1a <_ZN7base232C1EjP12USART_struct+0x86>
	}
#endif
#ifdef USARTD0
	else if(p_usart == &USARTD0)
    3cd0:	40 3a       	cpi	r20, 0xA0	; 160
    3cd2:	89 e0       	ldi	r24, 0x09	; 9
    3cd4:	58 07       	cpc	r21, r24
    3cd6:	49 f4       	brne	.+18     	; 0x3cea <_ZN7base232C1EjP12USART_struct+0x56>
	{
		p_port = &PORTD;
    3cd8:	80 e6       	ldi	r24, 0x60	; 96
    3cda:	96 e0       	ldi	r25, 0x06	; 6
    3cdc:	82 83       	std	Z+2, r24	; 0x02
    3cde:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 2;
    3ce0:	82 e0       	ldi	r24, 0x02	; 2
    3ce2:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 3;
    3ce4:	83 e0       	ldi	r24, 0x03	; 3
    3ce6:	85 83       	std	Z+5, r24	; 0x05
    3ce8:	18 c0       	rjmp	.+48     	; 0x3d1a <_ZN7base232C1EjP12USART_struct+0x86>
	}
#endif
#ifdef USARTD1 
	else if(p_usart == &USARTD1)
    3cea:	40 3b       	cpi	r20, 0xB0	; 176
    3cec:	69 e0       	ldi	r22, 0x09	; 9
    3cee:	56 07       	cpc	r21, r22
    3cf0:	49 f4       	brne	.+18     	; 0x3d04 <_ZN7base232C1EjP12USART_struct+0x70>
	{
		p_port = &PORTD;
    3cf2:	80 e6       	ldi	r24, 0x60	; 96
    3cf4:	96 e0       	ldi	r25, 0x06	; 6
    3cf6:	82 83       	std	Z+2, r24	; 0x02
    3cf8:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 6;
    3cfa:	86 e0       	ldi	r24, 0x06	; 6
    3cfc:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 7;
    3cfe:	87 e0       	ldi	r24, 0x07	; 7
    3d00:	85 83       	std	Z+5, r24	; 0x05
    3d02:	0b c0       	rjmp	.+22     	; 0x3d1a <_ZN7base232C1EjP12USART_struct+0x86>
	}
#endif
#ifdef USARTE0
	else if(p_usart == &USARTE0)
    3d04:	40 3a       	cpi	r20, 0xA0	; 160
    3d06:	5a 40       	sbci	r21, 0x0A	; 10
    3d08:	41 f4       	brne	.+16     	; 0x3d1a <_ZN7base232C1EjP12USART_struct+0x86>
	{
		p_port = &PORTE;
    3d0a:	80 e8       	ldi	r24, 0x80	; 128
    3d0c:	96 e0       	ldi	r25, 0x06	; 6
    3d0e:	82 83       	std	Z+2, r24	; 0x02
    3d10:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 2;
    3d12:	82 e0       	ldi	r24, 0x02	; 2
    3d14:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 3;
    3d16:	83 e0       	ldi	r24, 0x03	; 3
    3d18:	85 83       	std	Z+5, r24	; 0x05
	else
	{
	}
	
	// Store pointers to data, status, config registers
	p_UDR = &(p_usart->DATA);
    3d1a:	a6 83       	std	Z+6, r26	; 0x06
    3d1c:	b7 83       	std	Z+7, r27	; 0x07
	p_USR = &(p_usart->STATUS);
    3d1e:	cd 01       	movw	r24, r26
    3d20:	01 96       	adiw	r24, 0x01	; 1
    3d22:	80 87       	std	Z+8, r24	; 0x08
    3d24:	91 87       	std	Z+9, r25	; 0x09
	p_UCR = &(p_usart->CTRLB);
    3d26:	03 96       	adiw	r24, 0x03	; 3
    3d28:	82 87       	std	Z+10, r24	; 0x0a
    3d2a:	93 87       	std	Z+11, r25	; 0x0b
	
	// Set up TXD as an output that is high
	p_port->OUT |= (1 << txd_pin);
    3d2c:	25 81       	ldd	r18, Z+5	; 0x05
    3d2e:	c2 81       	ldd	r28, Z+2	; 0x02
    3d30:	d3 81       	ldd	r29, Z+3	; 0x03
    3d32:	4c 81       	ldd	r20, Y+4	; 0x04
    3d34:	81 e0       	ldi	r24, 0x01	; 1
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	bc 01       	movw	r22, r24
    3d3a:	02 c0       	rjmp	.+4      	; 0x3d40 <_ZN7base232C1EjP12USART_struct+0xac>
    3d3c:	66 0f       	add	r22, r22
    3d3e:	77 1f       	adc	r23, r23
    3d40:	2a 95       	dec	r18
    3d42:	e2 f7       	brpl	.-8      	; 0x3d3c <_ZN7base232C1EjP12USART_struct+0xa8>
    3d44:	9b 01       	movw	r18, r22
    3d46:	24 2b       	or	r18, r20
    3d48:	2c 83       	std	Y+4, r18	; 0x04
	p_port->DIR |= (1 << txd_pin);
    3d4a:	25 81       	ldd	r18, Z+5	; 0x05
    3d4c:	c2 81       	ldd	r28, Z+2	; 0x02
    3d4e:	d3 81       	ldd	r29, Z+3	; 0x03
    3d50:	48 81       	ld	r20, Y
    3d52:	bc 01       	movw	r22, r24
    3d54:	02 c0       	rjmp	.+4      	; 0x3d5a <_ZN7base232C1EjP12USART_struct+0xc6>
    3d56:	66 0f       	add	r22, r22
    3d58:	77 1f       	adc	r23, r23
    3d5a:	2a 95       	dec	r18
    3d5c:	e2 f7       	brpl	.-8      	; 0x3d56 <_ZN7base232C1EjP12USART_struct+0xc2>
    3d5e:	9b 01       	movw	r18, r22
    3d60:	24 2b       	or	r18, r20
    3d62:	28 83       	st	Y, r18
	
	// Set up RXD as an input
	p_port->DIR &= ~(1 << rxd_pin);
    3d64:	34 81       	ldd	r19, Z+4	; 0x04
    3d66:	c2 81       	ldd	r28, Z+2	; 0x02
    3d68:	d3 81       	ldd	r29, Z+3	; 0x03
    3d6a:	28 81       	ld	r18, Y
    3d6c:	02 c0       	rjmp	.+4      	; 0x3d72 <_ZN7base232C1EjP12USART_struct+0xde>
    3d6e:	88 0f       	add	r24, r24
    3d70:	99 1f       	adc	r25, r25
    3d72:	3a 95       	dec	r19
    3d74:	e2 f7       	brpl	.-8      	; 0x3d6e <_ZN7base232C1EjP12USART_struct+0xda>
    3d76:	80 95       	com	r24
    3d78:	90 95       	com	r25
    3d7a:	82 23       	and	r24, r18
    3d7c:	88 83       	st	Y, r24
	
	// Enable interrupts for RX at high priority
	p_usart->CTRLA = (0 << USART_RXCINTLVL1_bp | 1 << USART_RXCINTLVL0_bp);
    3d7e:	80 e1       	ldi	r24, 0x10	; 16
    3d80:	13 96       	adiw	r26, 0x03	; 3
    3d82:	8c 93       	st	X, r24
    3d84:	13 97       	sbiw	r26, 0x03	; 3
	
	// Select USART Asynchronous Mode and choose character size
	p_usart->CTRLC = (1 << USART_CHSIZE0_bp | 1 << USART_CHSIZE1_bp );
    3d86:	83 e0       	ldi	r24, 0x03	; 3
    3d88:	15 96       	adiw	r26, 0x05	; 5
    3d8a:	8c 93       	st	X, r24
    3d8c:	15 97       	sbiw	r26, 0x05	; 5

	// Select the baudrate according to Table 23-5 in the datasheet
	p_usart->BAUDCTRLB = (-1 << USART_BSCALE0_bp);
    3d8e:	80 ef       	ldi	r24, 0xF0	; 240
    3d90:	17 96       	adiw	r26, 0x07	; 7
    3d92:	8c 93       	st	X, r24
    3d94:	17 97       	sbiw	r26, 0x07	; 7
	p_usart->BAUDCTRLA = (33 << USART_BSEL0_bp);
    3d96:	81 e2       	ldi	r24, 0x21	; 33
    3d98:	16 96       	adiw	r26, 0x06	; 6
    3d9a:	8c 93       	st	X, r24
    3d9c:	16 97       	sbiw	r26, 0x06	; 6

	// Enable the RX and TX devices
	p_usart->CTRLB = (1 << USART_RXEN_bp | 1<< USART_TXEN_bp);
    3d9e:	88 e1       	ldi	r24, 0x18	; 24
    3da0:	14 96       	adiw	r26, 0x04	; 4
    3da2:	8c 93       	st	X, r24

	// Save some masks
	mask_RXC = USART_RXCIF_bm;
    3da4:	80 e8       	ldi	r24, 0x80	; 128
    3da6:	85 87       	std	Z+13, r24	; 0x0d
	mask_TXC = USART_TXCIF_bm;
    3da8:	80 e4       	ldi	r24, 0x40	; 64
    3daa:	86 87       	std	Z+14, r24	; 0x0e
	mask_UDRE = USART_DREIF_bm;
    3dac:	80 e2       	ldi	r24, 0x20	; 32
    3dae:	84 87       	std	Z+12, r24	; 0x0c
	
	// Read the data register to ensure that it's empty
	p_UDR[0]; p_UDR[0];
    3db0:	06 80       	ldd	r0, Z+6	; 0x06
    3db2:	f7 81       	ldd	r31, Z+7	; 0x07
    3db4:	e0 2d       	mov	r30, r0
    3db6:	80 81       	ld	r24, Z
    3db8:	80 81       	ld	r24, Z
}
    3dba:	df 91       	pop	r29
    3dbc:	cf 91       	pop	r28
    3dbe:	08 95       	ret

00003dc0 <_ZN8emstream13ready_to_sendEv>:
		digits = 7;
	}
	bts_glob_prec = digits;

	return (manip_set_precision);
}
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
    3dc2:	08 95       	ret

00003dc4 <_ZN8emstream7getcharEv>:
    3dc4:	80 e0       	ldi	r24, 0x00	; 0
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	08 95       	ret

00003dca <_ZN8emstream14check_for_charEv>:
    3dca:	80 e0       	ldi	r24, 0x00	; 0
    3dcc:	08 95       	ret

00003dce <_ZN8emstream12transmit_nowEv>:
    3dce:	08 95       	ret

00003dd0 <_ZN8emstream12clear_screenEv>:
    3dd0:	08 95       	ret

00003dd2 <_ZN8emstreamC1Ev>:
    3dd2:	fc 01       	movw	r30, r24
    3dd4:	80 e1       	ldi	r24, 0x10	; 16
    3dd6:	92 e2       	ldi	r25, 0x22	; 34
    3dd8:	80 83       	st	Z, r24
    3dda:	91 83       	std	Z+1, r25	; 0x01
    3ddc:	8a e0       	ldi	r24, 0x0A	; 10
    3dde:	82 83       	std	Z+2, r24	; 0x02
    3de0:	13 82       	std	Z+3, r1	; 0x03
    3de2:	83 e0       	ldi	r24, 0x03	; 3
    3de4:	85 83       	std	Z+5, r24	; 0x05
    3de6:	14 82       	std	Z+4, r1	; 0x04
    3de8:	16 82       	std	Z+6, r1	; 0x06
    3dea:	17 82       	std	Z+7, r1	; 0x07
    3dec:	08 95       	ret

00003dee <_ZN8emstream4putsEPKc>:
    3dee:	0f 93       	push	r16
    3df0:	1f 93       	push	r17
    3df2:	cf 93       	push	r28
    3df4:	df 93       	push	r29
    3df6:	8c 01       	movw	r16, r24
    3df8:	fb 01       	movw	r30, r22
    3dfa:	dc 01       	movw	r26, r24
    3dfc:	14 96       	adiw	r26, 0x04	; 4
    3dfe:	8c 91       	ld	r24, X
    3e00:	81 11       	cpse	r24, r1
    3e02:	04 c0       	rjmp	.+8      	; 0x3e0c <_ZN8emstream4putsEPKc+0x1e>
    3e04:	60 81       	ld	r22, Z
    3e06:	61 11       	cpse	r22, r1
    3e08:	17 c0       	rjmp	.+46     	; 0x3e38 <_ZN8emstream4putsEPKc+0x4a>
    3e0a:	23 c0       	rjmp	.+70     	; 0x3e52 <_ZN8emstream4putsEPKc+0x64>
    3e0c:	d8 01       	movw	r26, r16
    3e0e:	14 96       	adiw	r26, 0x04	; 4
    3e10:	1c 92       	st	X, r1
    3e12:	eb 01       	movw	r28, r22
    3e14:	21 96       	adiw	r28, 0x01	; 1
    3e16:	64 91       	lpm	r22, Z
    3e18:	66 23       	and	r22, r22
    3e1a:	d9 f0       	breq	.+54     	; 0x3e52 <_ZN8emstream4putsEPKc+0x64>
    3e1c:	d8 01       	movw	r26, r16
    3e1e:	ed 91       	ld	r30, X+
    3e20:	fc 91       	ld	r31, X
    3e22:	02 80       	ldd	r0, Z+2	; 0x02
    3e24:	f3 81       	ldd	r31, Z+3	; 0x03
    3e26:	e0 2d       	mov	r30, r0
    3e28:	c8 01       	movw	r24, r16
    3e2a:	19 95       	eicall
    3e2c:	fe 01       	movw	r30, r28
    3e2e:	64 91       	lpm	r22, Z
    3e30:	21 96       	adiw	r28, 0x01	; 1
    3e32:	61 11       	cpse	r22, r1
    3e34:	f3 cf       	rjmp	.-26     	; 0x3e1c <_ZN8emstream4putsEPKc+0x2e>
    3e36:	0d c0       	rjmp	.+26     	; 0x3e52 <_ZN8emstream4putsEPKc+0x64>
    3e38:	ef 01       	movw	r28, r30
    3e3a:	21 96       	adiw	r28, 0x01	; 1
    3e3c:	d8 01       	movw	r26, r16
    3e3e:	ed 91       	ld	r30, X+
    3e40:	fc 91       	ld	r31, X
    3e42:	02 80       	ldd	r0, Z+2	; 0x02
    3e44:	f3 81       	ldd	r31, Z+3	; 0x03
    3e46:	e0 2d       	mov	r30, r0
    3e48:	c8 01       	movw	r24, r16
    3e4a:	19 95       	eicall
    3e4c:	69 91       	ld	r22, Y+
    3e4e:	61 11       	cpse	r22, r1
    3e50:	f5 cf       	rjmp	.-22     	; 0x3e3c <_ZN8emstream4putsEPKc+0x4e>
    3e52:	df 91       	pop	r29
    3e54:	cf 91       	pop	r28
    3e56:	1f 91       	pop	r17
    3e58:	0f 91       	pop	r16
    3e5a:	08 95       	ret

00003e5c <_ZN8emstreamlsE15ser_manipulator>:
 *  @return A reference to the serial device to which the data was printed. This
 *          reference is used to string printable items together with "<<" operators
 */

emstream& emstream::operator<< (ser_manipulator new_manip)
{
    3e5c:	cf 93       	push	r28
    3e5e:	df 93       	push	r29
    3e60:	ec 01       	movw	r28, r24
	switch (new_manip)
    3e62:	86 2f       	mov	r24, r22
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	8b 30       	cpi	r24, 0x0B	; 11
    3e68:	91 05       	cpc	r25, r1
    3e6a:	d8 f5       	brcc	.+118    	; 0x3ee2 <_ZN8emstreamlsE15ser_manipulator+0x86>
    3e6c:	fc 01       	movw	r30, r24
    3e6e:	88 27       	eor	r24, r24
    3e70:	e2 50       	subi	r30, 0x02	; 2
    3e72:	ff 4f       	sbci	r31, 0xFF	; 255
    3e74:	8f 4f       	sbci	r24, 0xFF	; 255
    3e76:	0c 94 d2 26 	jmp	0x4da4	; 0x4da4 <__tablejump2__>
	{
		case (bin):                         // Print integers in binary
			base = 2;
    3e7a:	82 e0       	ldi	r24, 0x02	; 2
    3e7c:	8a 83       	std	Y+2, r24	; 0x02
			break;
    3e7e:	31 c0       	rjmp	.+98     	; 0x3ee2 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (oct):                         // Print integers in octal
			base = 8;
    3e80:	88 e0       	ldi	r24, 0x08	; 8
    3e82:	8a 83       	std	Y+2, r24	; 0x02
			break;
    3e84:	2e c0       	rjmp	.+92     	; 0x3ee2 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (dec):                         // Print integers in decimal
			base = 10;
    3e86:	8a e0       	ldi	r24, 0x0A	; 10
    3e88:	8a 83       	std	Y+2, r24	; 0x02
			break;
    3e8a:	2b c0       	rjmp	.+86     	; 0x3ee2 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (hex):                         // Print integers in hexadecimal
			base = 16;
    3e8c:	80 e1       	ldi	r24, 0x10	; 16
    3e8e:	8a 83       	std	Y+2, r24	; 0x02
			break;
    3e90:	28 c0       	rjmp	.+80     	; 0x3ee2 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (ascii):                       // Print chars as ASCII letters, etc.
			print_ascii = true;
    3e92:	81 e0       	ldi	r24, 0x01	; 1
    3e94:	8b 83       	std	Y+3, r24	; 0x03
			break;
    3e96:	25 c0       	rjmp	.+74     	; 0x3ee2 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (numeric):                     // Print chars as numbers
			print_ascii = false;
    3e98:	1b 82       	std	Y+3, r1	; 0x03
			break;
    3e9a:	23 c0       	rjmp	.+70     	; 0x3ee2 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (endl):                        // Send an end-of-line
			ENDL_STYLE ();
    3e9c:	e8 81       	ld	r30, Y
    3e9e:	f9 81       	ldd	r31, Y+1	; 0x01
    3ea0:	02 80       	ldd	r0, Z+2	; 0x02
    3ea2:	f3 81       	ldd	r31, Z+3	; 0x03
    3ea4:	e0 2d       	mov	r30, r0
    3ea6:	6d e0       	ldi	r22, 0x0D	; 13
    3ea8:	ce 01       	movw	r24, r28
    3eaa:	19 95       	eicall
    3eac:	e8 81       	ld	r30, Y
    3eae:	f9 81       	ldd	r31, Y+1	; 0x01
    3eb0:	02 80       	ldd	r0, Z+2	; 0x02
    3eb2:	f3 81       	ldd	r31, Z+3	; 0x03
    3eb4:	e0 2d       	mov	r30, r0
    3eb6:	6a e0       	ldi	r22, 0x0A	; 10
    3eb8:	ce 01       	movw	r24, r28
    3eba:	19 95       	eicall
			break;
    3ebc:	12 c0       	rjmp	.+36     	; 0x3ee2 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (clrscr):                      // Send a clear-screen code
			clear_screen ();
    3ebe:	e8 81       	ld	r30, Y
    3ec0:	f9 81       	ldd	r31, Y+1	; 0x01
    3ec2:	02 84       	ldd	r0, Z+10	; 0x0a
    3ec4:	f3 85       	ldd	r31, Z+11	; 0x0b
    3ec6:	e0 2d       	mov	r30, r0
    3ec8:	ce 01       	movw	r24, r28
    3eca:	19 95       	eicall
			break;
    3ecc:	0a c0       	rjmp	.+20     	; 0x3ee2 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (send_now):                    // Send whatever's in the send buffer
			transmit_now ();
    3ece:	e8 81       	ld	r30, Y
    3ed0:	f9 81       	ldd	r31, Y+1	; 0x01
    3ed2:	00 84       	ldd	r0, Z+8	; 0x08
    3ed4:	f1 85       	ldd	r31, Z+9	; 0x09
    3ed6:	e0 2d       	mov	r30, r0
    3ed8:	ce 01       	movw	r24, r28
    3eda:	19 95       	eicall
			break;
    3edc:	02 c0       	rjmp	.+4      	; 0x3ee2 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (_p_str):                      // The next string is in program memory
			pgm_string = true;
    3ede:	81 e0       	ldi	r24, 0x01	; 1
    3ee0:	8c 83       	std	Y+4, r24	; 0x04
		case (manip_set_precision):         // Set precision for printing floats
			break;
	};

	return (*this);
}
    3ee2:	ce 01       	movw	r24, r28
    3ee4:	df 91       	pop	r29
    3ee6:	cf 91       	pop	r28
    3ee8:	08 95       	ret

00003eea <_ZN8emstreamlsEb>:
 *          reference is used to string printable items together with "<<" operators
 *  @param value The boolean value to be written
 */

emstream& emstream::operator<< (bool value)
{
    3eea:	cf 93       	push	r28
    3eec:	df 93       	push	r29
    3eee:	ec 01       	movw	r28, r24
	if (value)
    3ef0:	66 23       	and	r22, r22
    3ef2:	41 f0       	breq	.+16     	; 0x3f04 <_ZN8emstreamlsEb+0x1a>
		putchar ('T');
    3ef4:	e8 81       	ld	r30, Y
    3ef6:	f9 81       	ldd	r31, Y+1	; 0x01
    3ef8:	02 80       	ldd	r0, Z+2	; 0x02
    3efa:	f3 81       	ldd	r31, Z+3	; 0x03
    3efc:	e0 2d       	mov	r30, r0
    3efe:	64 e5       	ldi	r22, 0x54	; 84
    3f00:	19 95       	eicall
    3f02:	07 c0       	rjmp	.+14     	; 0x3f12 <_ZN8emstreamlsEb+0x28>
	else
		putchar ('F');
    3f04:	e8 81       	ld	r30, Y
    3f06:	f9 81       	ldd	r31, Y+1	; 0x01
    3f08:	02 80       	ldd	r0, Z+2	; 0x02
    3f0a:	f3 81       	ldd	r31, Z+3	; 0x03
    3f0c:	e0 2d       	mov	r30, r0
    3f0e:	66 e4       	ldi	r22, 0x46	; 70
    3f10:	19 95       	eicall

	return (*this);
}
    3f12:	ce 01       	movw	r24, r28
    3f14:	df 91       	pop	r29
    3f16:	cf 91       	pop	r28
    3f18:	08 95       	ret

00003f1a <_ZN8emstreamlsEPv>:
 *          reference is used to string printable items together with "<<" operators
 *  @param ptr The pointer to be sent out
 */

emstream& emstream::operator<< (void* ptr)
{
    3f1a:	0f 93       	push	r16
    3f1c:	1f 93       	push	r17
    3f1e:	cf 93       	push	r28
    3f20:	df 93       	push	r29
    3f22:	ec 01       	movw	r28, r24
    3f24:	8b 01       	movw	r16, r22
	putchar ('[');
    3f26:	e8 81       	ld	r30, Y
    3f28:	f9 81       	ldd	r31, Y+1	; 0x01
    3f2a:	02 80       	ldd	r0, Z+2	; 0x02
    3f2c:	f3 81       	ldd	r31, Z+3	; 0x03
    3f2e:	e0 2d       	mov	r30, r0
    3f30:	6b e5       	ldi	r22, 0x5B	; 91
    3f32:	19 95       	eicall
	*this << hex << (size_t)ptr << dec;
    3f34:	63 e0       	ldi	r22, 0x03	; 3
    3f36:	ce 01       	movw	r24, r28
    3f38:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    3f3c:	b8 01       	movw	r22, r16
    3f3e:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <_ZN8emstreamlsEj>
    3f42:	62 e0       	ldi	r22, 0x02	; 2
    3f44:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
	putchar (']');
    3f48:	e8 81       	ld	r30, Y
    3f4a:	f9 81       	ldd	r31, Y+1	; 0x01
    3f4c:	02 80       	ldd	r0, Z+2	; 0x02
    3f4e:	f3 81       	ldd	r31, Z+3	; 0x03
    3f50:	e0 2d       	mov	r30, r0
    3f52:	6d e5       	ldi	r22, 0x5D	; 93
    3f54:	ce 01       	movw	r24, r28
    3f56:	19 95       	eicall

	return (*this);
}
    3f58:	ce 01       	movw	r24, r28
    3f5a:	df 91       	pop	r29
    3f5c:	cf 91       	pop	r28
    3f5e:	1f 91       	pop	r17
    3f60:	0f 91       	pop	r16
    3f62:	08 95       	ret

00003f64 <_ZN8emstreamlsEj>:
 *          reference is used to string printable items together with "<<" operators
 *  @param num The 16-bit number to be sent out
 */

emstream& emstream::operator<< (uint16_t num)
{
    3f64:	ff 92       	push	r15
    3f66:	0f 93       	push	r16
    3f68:	1f 93       	push	r17
    3f6a:	cf 93       	push	r28
    3f6c:	df 93       	push	r29
    3f6e:	cd b7       	in	r28, 0x3d	; 61
    3f70:	de b7       	in	r29, 0x3e	; 62
    3f72:	61 97       	sbiw	r28, 0x11	; 17
    3f74:	cd bf       	out	0x3d, r28	; 61
    3f76:	de bf       	out	0x3e, r29	; 62
    3f78:	8c 01       	movw	r16, r24
    3f7a:	f6 2e       	mov	r15, r22
    3f7c:	97 2f       	mov	r25, r23
	if (base == 16 || base == 8 || base == 2)
    3f7e:	f8 01       	movw	r30, r16
    3f80:	42 81       	ldd	r20, Z+2	; 0x02
    3f82:	40 31       	cpi	r20, 0x10	; 16
    3f84:	21 f0       	breq	.+8      	; 0x3f8e <_ZN8emstreamlsEj+0x2a>
    3f86:	48 30       	cpi	r20, 0x08	; 8
    3f88:	11 f0       	breq	.+4      	; 0x3f8e <_ZN8emstreamlsEj+0x2a>
    3f8a:	42 30       	cpi	r20, 0x02	; 2
    3f8c:	41 f4       	brne	.+16     	; 0x3f9e <_ZN8emstreamlsEj+0x3a>
		{
			uint16_t whole;
			uint8_t bits[2];
		} parts;
		parts.whole = num;
		*this << parts.bits[1] << parts.bits[0];
    3f8e:	69 2f       	mov	r22, r25
    3f90:	c8 01       	movw	r24, r16
    3f92:	0e 94 28 20 	call	0x4050	; 0x4050 <_ZN8emstreamlsEh>
    3f96:	6f 2d       	mov	r22, r15
    3f98:	0e 94 28 20 	call	0x4050	; 0x4050 <_ZN8emstreamlsEh>
    3f9c:	0d c0       	rjmp	.+26     	; 0x3fb8 <_ZN8emstreamlsEj+0x54>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    3f9e:	50 e0       	ldi	r21, 0x00	; 0
    3fa0:	be 01       	movw	r22, r28
    3fa2:	6f 5f       	subi	r22, 0xFF	; 255
    3fa4:	7f 4f       	sbci	r23, 0xFF	; 255
    3fa6:	8f 2d       	mov	r24, r15
    3fa8:	0e 94 41 27 	call	0x4e82	; 0x4e82 <utoa>
	}
	else
	{
		char out_str[17];
		utoa (num, out_str, base);
		puts (out_str);
    3fac:	be 01       	movw	r22, r28
    3fae:	6f 5f       	subi	r22, 0xFF	; 255
    3fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    3fb2:	c8 01       	movw	r24, r16
    3fb4:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
	}

	return (*this);
}
    3fb8:	c8 01       	movw	r24, r16
    3fba:	61 96       	adiw	r28, 0x11	; 17
    3fbc:	cd bf       	out	0x3d, r28	; 61
    3fbe:	de bf       	out	0x3e, r29	; 62
    3fc0:	df 91       	pop	r29
    3fc2:	cf 91       	pop	r28
    3fc4:	1f 91       	pop	r17
    3fc6:	0f 91       	pop	r16
    3fc8:	ff 90       	pop	r15
    3fca:	08 95       	ret

00003fcc <_ZN8emstreamlsEm>:
 *          reference is used to string printable items together with "<<" operators
 *  @param num The 32-bit number to be sent out
 */

emstream& emstream::operator<< (uint32_t num)
{
    3fcc:	df 92       	push	r13
    3fce:	ef 92       	push	r14
    3fd0:	ff 92       	push	r15
    3fd2:	0f 93       	push	r16
    3fd4:	1f 93       	push	r17
    3fd6:	cf 93       	push	r28
    3fd8:	df 93       	push	r29
    3fda:	cd b7       	in	r28, 0x3d	; 61
    3fdc:	de b7       	in	r29, 0x3e	; 62
    3fde:	a1 97       	sbiw	r28, 0x21	; 33
    3fe0:	cd bf       	out	0x3d, r28	; 61
    3fe2:	de bf       	out	0x3e, r29	; 62
    3fe4:	8c 01       	movw	r16, r24
    3fe6:	d4 2e       	mov	r13, r20
    3fe8:	e5 2e       	mov	r14, r21
    3fea:	f6 2e       	mov	r15, r22
    3fec:	97 2f       	mov	r25, r23
	if (base == 16 || base == 8 || base == 2)
    3fee:	f8 01       	movw	r30, r16
    3ff0:	22 81       	ldd	r18, Z+2	; 0x02
    3ff2:	20 31       	cpi	r18, 0x10	; 16
    3ff4:	21 f0       	breq	.+8      	; 0x3ffe <_ZN8emstreamlsEm+0x32>
    3ff6:	28 30       	cpi	r18, 0x08	; 8
    3ff8:	11 f0       	breq	.+4      	; 0x3ffe <_ZN8emstreamlsEm+0x32>
    3ffa:	22 30       	cpi	r18, 0x02	; 2
    3ffc:	71 f4       	brne	.+28     	; 0x401a <__stack+0x1b>
		{
			uint32_t whole;
			uint8_t bits[4];
		} parts;
		parts.whole = num;
		*this << parts.bits[3] << parts.bits[2] << parts.bits[1] << parts.bits[0];
    3ffe:	69 2f       	mov	r22, r25
    4000:	c8 01       	movw	r24, r16
    4002:	0e 94 28 20 	call	0x4050	; 0x4050 <_ZN8emstreamlsEh>
    4006:	6f 2d       	mov	r22, r15
    4008:	0e 94 28 20 	call	0x4050	; 0x4050 <_ZN8emstreamlsEh>
    400c:	6e 2d       	mov	r22, r14
    400e:	0e 94 28 20 	call	0x4050	; 0x4050 <_ZN8emstreamlsEh>
    4012:	6d 2d       	mov	r22, r13
    4014:	0e 94 28 20 	call	0x4050	; 0x4050 <_ZN8emstreamlsEh>
    4018:	0f c0       	rjmp	.+30     	; 0x4038 <__stack+0x39>
extern __inline__ __ATTR_GNU_INLINE__
char *ultoa (unsigned long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__ultoa (unsigned long, char *, int);
	return __ultoa (__val, __s, __radix);
    401a:	30 e0       	ldi	r19, 0x00	; 0
    401c:	ae 01       	movw	r20, r28
    401e:	4f 5f       	subi	r20, 0xFF	; 255
    4020:	5f 4f       	sbci	r21, 0xFF	; 255
    4022:	6d 2d       	mov	r22, r13
    4024:	7e 2d       	mov	r23, r14
    4026:	8f 2d       	mov	r24, r15
    4028:	0e 94 14 27 	call	0x4e28	; 0x4e28 <ultoa>
	}
	else
	{
		char out_str[33];
		ultoa ((long)num, out_str, base);
		puts (out_str);
    402c:	be 01       	movw	r22, r28
    402e:	6f 5f       	subi	r22, 0xFF	; 255
    4030:	7f 4f       	sbci	r23, 0xFF	; 255
    4032:	c8 01       	movw	r24, r16
    4034:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
	}

	return (*this);
}
    4038:	c8 01       	movw	r24, r16
    403a:	a1 96       	adiw	r28, 0x21	; 33
    403c:	cd bf       	out	0x3d, r28	; 61
    403e:	de bf       	out	0x3e, r29	; 62
    4040:	df 91       	pop	r29
    4042:	cf 91       	pop	r28
    4044:	1f 91       	pop	r17
    4046:	0f 91       	pop	r16
    4048:	ff 90       	pop	r15
    404a:	ef 90       	pop	r14
    404c:	df 90       	pop	r13
    404e:	08 95       	ret

00004050 <_ZN8emstreamlsEh>:
 *          reference is used to string printable items together with "<<" operators
 *  @param num The 8-bit number or character to be sent out
 */

emstream& emstream::operator<< (uint8_t num)
{
    4050:	cf 92       	push	r12
    4052:	df 92       	push	r13
    4054:	ef 92       	push	r14
    4056:	ff 92       	push	r15
    4058:	0f 93       	push	r16
    405a:	1f 93       	push	r17
    405c:	cf 93       	push	r28
    405e:	df 93       	push	r29
    4060:	cd b7       	in	r28, 0x3d	; 61
    4062:	de b7       	in	r29, 0x3e	; 62
    4064:	29 97       	sbiw	r28, 0x09	; 9
    4066:	cd bf       	out	0x3d, r28	; 61
    4068:	de bf       	out	0x3e, r29	; 62
    406a:	8c 01       	movw	r16, r24
    406c:	e6 2e       	mov	r14, r22
	uint8_t temp_char;                      // Temporary storage for a nibble

	if (print_ascii)
    406e:	dc 01       	movw	r26, r24
    4070:	13 96       	adiw	r26, 0x03	; 3
    4072:	8c 91       	ld	r24, X
    4074:	13 97       	sbiw	r26, 0x03	; 3
    4076:	88 23       	and	r24, r24
    4078:	41 f0       	breq	.+16     	; 0x408a <_ZN8emstreamlsEh+0x3a>
	{
		putchar (num);
    407a:	ed 91       	ld	r30, X+
    407c:	fc 91       	ld	r31, X
    407e:	02 80       	ldd	r0, Z+2	; 0x02
    4080:	f3 81       	ldd	r31, Z+3	; 0x03
    4082:	e0 2d       	mov	r30, r0
    4084:	c8 01       	movw	r24, r16
    4086:	19 95       	eicall
    4088:	56 c0       	rjmp	.+172    	; 0x4136 <_ZN8emstreamlsEh+0xe6>
	}
	else if (base == 2)
    408a:	f8 01       	movw	r30, r16
    408c:	42 81       	ldd	r20, Z+2	; 0x02
    408e:	42 30       	cpi	r20, 0x02	; 2
    4090:	19 f5       	brne	.+70     	; 0x40d8 <_ZN8emstreamlsEh+0x88>
    4092:	68 94       	set
    4094:	cc 24       	eor	r12, r12
    4096:	c3 f8       	bld	r12, 3
    4098:	d1 2c       	mov	r13, r1
    409a:	68 94       	set
    409c:	ff 24       	eor	r15, r15
    409e:	f7 f8       	bld	r15, 7
	{
		for (uint8_t bmask = 0x80; bmask != 0; bmask >>= 1)
		{
			if (num & bmask) putchar ('1');
    40a0:	8e 2d       	mov	r24, r14
    40a2:	8f 21       	and	r24, r15
    40a4:	51 f0       	breq	.+20     	; 0x40ba <_ZN8emstreamlsEh+0x6a>
    40a6:	d8 01       	movw	r26, r16
    40a8:	ed 91       	ld	r30, X+
    40aa:	fc 91       	ld	r31, X
    40ac:	02 80       	ldd	r0, Z+2	; 0x02
    40ae:	f3 81       	ldd	r31, Z+3	; 0x03
    40b0:	e0 2d       	mov	r30, r0
    40b2:	61 e3       	ldi	r22, 0x31	; 49
    40b4:	c8 01       	movw	r24, r16
    40b6:	19 95       	eicall
    40b8:	09 c0       	rjmp	.+18     	; 0x40cc <_ZN8emstreamlsEh+0x7c>
			else             putchar ('0');
    40ba:	d8 01       	movw	r26, r16
    40bc:	ed 91       	ld	r30, X+
    40be:	fc 91       	ld	r31, X
    40c0:	02 80       	ldd	r0, Z+2	; 0x02
    40c2:	f3 81       	ldd	r31, Z+3	; 0x03
    40c4:	e0 2d       	mov	r30, r0
    40c6:	60 e3       	ldi	r22, 0x30	; 48
    40c8:	c8 01       	movw	r24, r16
    40ca:	19 95       	eicall
	{
		putchar (num);
	}
	else if (base == 2)
	{
		for (uint8_t bmask = 0x80; bmask != 0; bmask >>= 1)
    40cc:	f6 94       	lsr	r15
    40ce:	b1 e0       	ldi	r27, 0x01	; 1
    40d0:	cb 1a       	sub	r12, r27
    40d2:	d1 08       	sbc	r13, r1
    40d4:	29 f7       	brne	.-54     	; 0x40a0 <_ZN8emstreamlsEh+0x50>
    40d6:	2f c0       	rjmp	.+94     	; 0x4136 <_ZN8emstreamlsEh+0xe6>
		{
			if (num & bmask) putchar ('1');
			else             putchar ('0');
		}
	}
	else if (base == 16)
    40d8:	40 31       	cpi	r20, 0x10	; 16
    40da:	f9 f4       	brne	.+62     	; 0x411a <_ZN8emstreamlsEh+0xca>
	{
		temp_char = (num >> 4) & 0x0F;
    40dc:	62 95       	swap	r22
    40de:	6f 70       	andi	r22, 0x0F	; 15
		putchar ((temp_char > 9) ? temp_char + ('A' - 10) : temp_char + '0');
    40e0:	01 90       	ld	r0, Z+
    40e2:	f0 81       	ld	r31, Z
    40e4:	e0 2d       	mov	r30, r0
    40e6:	02 80       	ldd	r0, Z+2	; 0x02
    40e8:	f3 81       	ldd	r31, Z+3	; 0x03
    40ea:	e0 2d       	mov	r30, r0
    40ec:	6a 30       	cpi	r22, 0x0A	; 10
    40ee:	10 f0       	brcs	.+4      	; 0x40f4 <_ZN8emstreamlsEh+0xa4>
    40f0:	69 5c       	subi	r22, 0xC9	; 201
    40f2:	01 c0       	rjmp	.+2      	; 0x40f6 <_ZN8emstreamlsEh+0xa6>
    40f4:	60 5d       	subi	r22, 0xD0	; 208
    40f6:	c8 01       	movw	r24, r16
    40f8:	19 95       	eicall
		temp_char = num & 0x0F;
    40fa:	6e 2d       	mov	r22, r14
    40fc:	6f 70       	andi	r22, 0x0F	; 15
		putchar ((temp_char > 9) ? temp_char + ('A' - 10) : temp_char + '0');
    40fe:	d8 01       	movw	r26, r16
    4100:	ed 91       	ld	r30, X+
    4102:	fc 91       	ld	r31, X
    4104:	02 80       	ldd	r0, Z+2	; 0x02
    4106:	f3 81       	ldd	r31, Z+3	; 0x03
    4108:	e0 2d       	mov	r30, r0
    410a:	6a 30       	cpi	r22, 0x0A	; 10
    410c:	10 f0       	brcs	.+4      	; 0x4112 <_ZN8emstreamlsEh+0xc2>
    410e:	69 5c       	subi	r22, 0xC9	; 201
    4110:	01 c0       	rjmp	.+2      	; 0x4114 <_ZN8emstreamlsEh+0xc4>
    4112:	60 5d       	subi	r22, 0xD0	; 208
    4114:	c8 01       	movw	r24, r16
    4116:	19 95       	eicall
    4118:	0e c0       	rjmp	.+28     	; 0x4136 <_ZN8emstreamlsEh+0xe6>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    411a:	50 e0       	ldi	r21, 0x00	; 0
    411c:	be 01       	movw	r22, r28
    411e:	6f 5f       	subi	r22, 0xFF	; 255
    4120:	7f 4f       	sbci	r23, 0xFF	; 255
    4122:	8e 2d       	mov	r24, r14
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	0e 94 41 27 	call	0x4e82	; 0x4e82 <utoa>
	}
	else
	{
		char out_str[9];
		utoa ((uint16_t)num, out_str, base);
		puts (out_str);
    412a:	be 01       	movw	r22, r28
    412c:	6f 5f       	subi	r22, 0xFF	; 255
    412e:	7f 4f       	sbci	r23, 0xFF	; 255
    4130:	c8 01       	movw	r24, r16
    4132:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
	}
	return (*this);
}
    4136:	c8 01       	movw	r24, r16
    4138:	29 96       	adiw	r28, 0x09	; 9
    413a:	cd bf       	out	0x3d, r28	; 61
    413c:	de bf       	out	0x3e, r29	; 62
    413e:	df 91       	pop	r29
    4140:	cf 91       	pop	r28
    4142:	1f 91       	pop	r17
    4144:	0f 91       	pop	r16
    4146:	ff 90       	pop	r15
    4148:	ef 90       	pop	r14
    414a:	df 90       	pop	r13
    414c:	cf 90       	pop	r12
    414e:	08 95       	ret

00004150 <_ZN5rs2327putcharEc>:
 *  @param chout The character to be sent out
 *  @return True if everything was OK and false if there was a timeout
 */

bool rs232::putchar (char chout)
{
    4150:	dc 01       	movw	r26, r24
	// Now wait for the serial port transmitter buffer to be empty	 
	for (uint16_t count = 0; ((*p_USR & mask_UDRE) == 0); count++)
    4152:	50 96       	adiw	r26, 0x10	; 16
    4154:	ed 91       	ld	r30, X+
    4156:	fc 91       	ld	r31, X
    4158:	51 97       	sbiw	r26, 0x11	; 17
    415a:	80 81       	ld	r24, Z
    415c:	54 96       	adiw	r26, 0x14	; 20
    415e:	4c 91       	ld	r20, X
    4160:	54 97       	sbiw	r26, 0x14	; 20
    4162:	84 23       	and	r24, r20
    4164:	29 f0       	breq	.+10     	; 0x4170 <_ZN5rs2327putcharEc+0x20>
    4166:	09 c0       	rjmp	.+18     	; 0x417a <_ZN5rs2327putcharEc+0x2a>
    4168:	21 50       	subi	r18, 0x01	; 1
    416a:	31 09       	sbc	r19, r1
	{
		if (count > UART_TX_TOUT)
    416c:	19 f4       	brne	.+6      	; 0x4174 <_ZN5rs2327putcharEc+0x24>
    416e:	12 c0       	rjmp	.+36     	; 0x4194 <_ZN5rs2327putcharEc+0x44>
 */

bool rs232::putchar (char chout)
{
	// Now wait for the serial port transmitter buffer to be empty	 
	for (uint16_t count = 0; ((*p_USR & mask_UDRE) == 0); count++)
    4170:	21 e2       	ldi	r18, 0x21	; 33
    4172:	3e e4       	ldi	r19, 0x4E	; 78
    4174:	90 81       	ld	r25, Z
    4176:	94 23       	and	r25, r20
    4178:	b9 f3       	breq	.-18     	; 0x4168 <_ZN5rs2327putcharEc+0x18>
	}

	// Clear the TXCn bit so it can be used to check if the serial port is busy.  This
	// check needs to be done prior to putting the processor into sleep mode.  Oddly,
	// the TXCn bit is cleared by writing a one to its bit location
	*p_USR |= mask_TXC;
    417a:	90 81       	ld	r25, Z
    417c:	56 96       	adiw	r26, 0x16	; 22
    417e:	8c 91       	ld	r24, X
    4180:	56 97       	sbiw	r26, 0x16	; 22
    4182:	89 2b       	or	r24, r25
    4184:	80 83       	st	Z, r24

	// The CTS line is 0 and the transmitter buffer is empty, so send the character
	*p_UDR = chout;
    4186:	1e 96       	adiw	r26, 0x0e	; 14
    4188:	ed 91       	ld	r30, X+
    418a:	fc 91       	ld	r31, X
    418c:	1f 97       	sbiw	r26, 0x0f	; 15
    418e:	60 83       	st	Z, r22
	return (true);
    4190:	81 e0       	ldi	r24, 0x01	; 1
    4192:	08 95       	ret
{
	// Now wait for the serial port transmitter buffer to be empty	 
	for (uint16_t count = 0; ((*p_USR & mask_UDRE) == 0); count++)
	{
		if (count > UART_TX_TOUT)
			return (false);
    4194:	80 e0       	ldi	r24, 0x00	; 0
	*p_USR |= mask_TXC;

	// The CTS line is 0 and the transmitter buffer is empty, so send the character
	*p_UDR = chout;
	return (true);
}
    4196:	08 95       	ret

00004198 <_ZN5rs2327getcharEv>:
 *  check_for_char() to ensure that there's data available first. 
 *  @return The character which was found in the serial port receive buffer
 */

int16_t rs232::getchar (void)
{
    4198:	cf 93       	push	r28
    419a:	df 93       	push	r29
    419c:	fc 01       	movw	r30, r24
	uint8_t recv_char;						// Character read from the queue

	// Wait until there's a character in the receiver queue
	while (*p_rcv_read_index == *p_rcv_write_index);
    419e:	c1 8d       	ldd	r28, Z+25	; 0x19
    41a0:	d2 8d       	ldd	r29, Z+26	; 0x1a
    41a2:	28 81       	ld	r18, Y
    41a4:	39 81       	ldd	r19, Y+1	; 0x01
    41a6:	a3 8d       	ldd	r26, Z+27	; 0x1b
    41a8:	b4 8d       	ldd	r27, Z+28	; 0x1c
    41aa:	4d 91       	ld	r20, X+
    41ac:	5c 91       	ld	r21, X
    41ae:	24 17       	cp	r18, r20
    41b0:	35 07       	cpc	r19, r21
    41b2:	e9 f3       	breq	.-6      	; 0x41ae <_ZN5rs2327getcharEv+0x16>
	recv_char = (*p_rcv_buffer)[*p_rcv_read_index];
    41b4:	a7 89       	ldd	r26, Z+23	; 0x17
    41b6:	b0 8d       	ldd	r27, Z+24	; 0x18
    41b8:	0d 90       	ld	r0, X+
    41ba:	bc 91       	ld	r27, X
    41bc:	a0 2d       	mov	r26, r0
    41be:	a2 0f       	add	r26, r18
    41c0:	b3 1f       	adc	r27, r19
    41c2:	8c 91       	ld	r24, X
	if (++(*p_rcv_read_index) >= RSINT_BUF_SIZE)
    41c4:	2f 5f       	subi	r18, 0xFF	; 255
    41c6:	3f 4f       	sbci	r19, 0xFF	; 255
    41c8:	28 83       	st	Y, r18
    41ca:	39 83       	std	Y+1, r19	; 0x01
    41cc:	24 36       	cpi	r18, 0x64	; 100
    41ce:	31 05       	cpc	r19, r1
    41d0:	28 f0       	brcs	.+10     	; 0x41dc <_ZN5rs2327getcharEv+0x44>
		*p_rcv_read_index = 0;
    41d2:	01 8c       	ldd	r0, Z+25	; 0x19
    41d4:	f2 8d       	ldd	r31, Z+26	; 0x1a
    41d6:	e0 2d       	mov	r30, r0
    41d8:	10 82       	st	Z, r1
    41da:	11 82       	std	Z+1, r1	; 0x01

	return (recv_char);
}
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	df 91       	pop	r29
    41e0:	cf 91       	pop	r28
    41e2:	08 95       	ret

000041e4 <_ZN5rs23214check_for_charEv>:
 *  caused an interrupt. 
 *  @return True for character available, false for no character available
 */

bool rs232::check_for_char (void)
{
    41e4:	cf 93       	push	r28
    41e6:	df 93       	push	r29
	return (*p_rcv_read_index != *p_rcv_write_index);
    41e8:	ec 01       	movw	r28, r24
    41ea:	a9 8d       	ldd	r26, Y+25	; 0x19
    41ec:	ba 8d       	ldd	r27, Y+26	; 0x1a
    41ee:	eb 8d       	ldd	r30, Y+27	; 0x1b
    41f0:	fc 8d       	ldd	r31, Y+28	; 0x1c
    41f2:	81 e0       	ldi	r24, 0x01	; 1
    41f4:	4d 91       	ld	r20, X+
    41f6:	5c 91       	ld	r21, X
    41f8:	20 81       	ld	r18, Z
    41fa:	31 81       	ldd	r19, Z+1	; 0x01
    41fc:	42 17       	cp	r20, r18
    41fe:	53 07       	cpc	r21, r19
    4200:	09 f4       	brne	.+2      	; 0x4204 <_ZN5rs23214check_for_charEv+0x20>
    4202:	80 e0       	ldi	r24, 0x00	; 0
}
    4204:	df 91       	pop	r29
    4206:	cf 91       	pop	r28
    4208:	08 95       	ret

0000420a <_ZN5rs23212clear_screenEv>:
 *  format modifier 'clrscr' is inserted in a line of "<<" stuff.
 */

void rs232::clear_screen (void)
{
	putchar (CLRSCR_STYLE);
    420a:	dc 01       	movw	r26, r24
    420c:	ed 91       	ld	r30, X+
    420e:	fc 91       	ld	r31, X
    4210:	02 80       	ldd	r0, Z+2	; 0x02
    4212:	f3 81       	ldd	r31, Z+3	; 0x03
    4214:	e0 2d       	mov	r30, r0
    4216:	6c e0       	ldi	r22, 0x0C	; 12
    4218:	19 95       	eicall
    421a:	08 95       	ret

0000421c <_ZN5rs232C1EjP12USART_struct>:
 *  @param baud_rate The desired baud rate for serial communications. Default is 9600
 *  @param p_usart A pointer to the desired USART c-struct. The default is USARTC0. On an
 *                 XMGEGA choices are C0, C1, D0, D1, E0, E1, F0  
 */

rs232::rs232 (uint16_t baud_rate, USART_t* p_usart)
    421c:	ef 92       	push	r14
    421e:	ff 92       	push	r15
    4220:	0f 93       	push	r16
    4222:	1f 93       	push	r17
    4224:	cf 93       	push	r28
    4226:	df 93       	push	r29
    4228:	ec 01       	movw	r28, r24
    422a:	7b 01       	movw	r14, r22
    422c:	8a 01       	movw	r16, r20
	: emstream (), base232 (baud_rate, p_usart)
    422e:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <_ZN8emstreamC1Ev>
    4232:	a8 01       	movw	r20, r16
    4234:	b7 01       	movw	r22, r14
    4236:	ce 01       	movw	r24, r28
    4238:	08 96       	adiw	r24, 0x08	; 8
    423a:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <_ZN7base232C1EjP12USART_struct>
    423e:	80 e2       	ldi	r24, 0x20	; 32
    4240:	92 e2       	ldi	r25, 0x22	; 34
    4242:	88 83       	st	Y, r24
    4244:	99 83       	std	Y+1, r25	; 0x01
{
	if(p_usart == &USARTC0)
    4246:	00 3a       	cpi	r16, 0xA0	; 160
    4248:	88 e0       	ldi	r24, 0x08	; 8
    424a:	18 07       	cpc	r17, r24
    424c:	69 f4       	brne	.+26     	; 0x4268 <_ZN5rs232C1EjP12USART_struct+0x4c>
	{
		p_rcv_buffer		= &rcvC0_buffer;
    424e:	8a e2       	ldi	r24, 0x2A	; 42
    4250:	93 e3       	ldi	r25, 0x33	; 51
    4252:	8f 8b       	std	Y+23, r24	; 0x17
    4254:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvC0_read_index;
    4256:	80 e2       	ldi	r24, 0x20	; 32
    4258:	93 e3       	ldi	r25, 0x33	; 51
    425a:	89 8f       	std	Y+25, r24	; 0x19
    425c:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvC0_write_index;
    425e:	86 e1       	ldi	r24, 0x16	; 22
    4260:	93 e3       	ldi	r25, 0x33	; 51
    4262:	8b 8f       	std	Y+27, r24	; 0x1b
    4264:	9c 8f       	std	Y+28, r25	; 0x1c
    4266:	42 c0       	rjmp	.+132    	; 0x42ec <_ZN5rs232C1EjP12USART_struct+0xd0>
	}
#ifdef USARTC1
	else if(p_usart == &USARTC1)
    4268:	00 3b       	cpi	r16, 0xB0	; 176
    426a:	e8 e0       	ldi	r30, 0x08	; 8
    426c:	1e 07       	cpc	r17, r30
    426e:	69 f4       	brne	.+26     	; 0x428a <_ZN5rs232C1EjP12USART_struct+0x6e>
	{
		p_rcv_buffer		= &rcvC1_buffer;
    4270:	88 e2       	ldi	r24, 0x28	; 40
    4272:	93 e3       	ldi	r25, 0x33	; 51
    4274:	8f 8b       	std	Y+23, r24	; 0x17
    4276:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvC1_read_index;
    4278:	8e e1       	ldi	r24, 0x1E	; 30
    427a:	93 e3       	ldi	r25, 0x33	; 51
    427c:	89 8f       	std	Y+25, r24	; 0x19
    427e:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvC1_write_index;
    4280:	84 e1       	ldi	r24, 0x14	; 20
    4282:	93 e3       	ldi	r25, 0x33	; 51
    4284:	8b 8f       	std	Y+27, r24	; 0x1b
    4286:	9c 8f       	std	Y+28, r25	; 0x1c
    4288:	31 c0       	rjmp	.+98     	; 0x42ec <_ZN5rs232C1EjP12USART_struct+0xd0>
	}
#endif
#ifdef USARTD0
	else if(p_usart == &USARTD0)
    428a:	00 3a       	cpi	r16, 0xA0	; 160
    428c:	f9 e0       	ldi	r31, 0x09	; 9
    428e:	1f 07       	cpc	r17, r31
    4290:	69 f4       	brne	.+26     	; 0x42ac <_ZN5rs232C1EjP12USART_struct+0x90>
	{
		p_rcv_buffer		= &rcvD0_buffer;
    4292:	86 e2       	ldi	r24, 0x26	; 38
    4294:	93 e3       	ldi	r25, 0x33	; 51
    4296:	8f 8b       	std	Y+23, r24	; 0x17
    4298:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvD0_read_index;
    429a:	8c e1       	ldi	r24, 0x1C	; 28
    429c:	93 e3       	ldi	r25, 0x33	; 51
    429e:	89 8f       	std	Y+25, r24	; 0x19
    42a0:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvD0_write_index;
    42a2:	82 e1       	ldi	r24, 0x12	; 18
    42a4:	93 e3       	ldi	r25, 0x33	; 51
    42a6:	8b 8f       	std	Y+27, r24	; 0x1b
    42a8:	9c 8f       	std	Y+28, r25	; 0x1c
    42aa:	20 c0       	rjmp	.+64     	; 0x42ec <_ZN5rs232C1EjP12USART_struct+0xd0>
	}
#endif
#ifdef USARTD1
	else if(p_usart == &USARTD1)
    42ac:	00 3b       	cpi	r16, 0xB0	; 176
    42ae:	89 e0       	ldi	r24, 0x09	; 9
    42b0:	18 07       	cpc	r17, r24
    42b2:	69 f4       	brne	.+26     	; 0x42ce <_ZN5rs232C1EjP12USART_struct+0xb2>
	{
		p_rcv_buffer		= &rcvD1_buffer;
    42b4:	84 e2       	ldi	r24, 0x24	; 36
    42b6:	93 e3       	ldi	r25, 0x33	; 51
    42b8:	8f 8b       	std	Y+23, r24	; 0x17
    42ba:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvD1_read_index;
    42bc:	8a e1       	ldi	r24, 0x1A	; 26
    42be:	93 e3       	ldi	r25, 0x33	; 51
    42c0:	89 8f       	std	Y+25, r24	; 0x19
    42c2:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvD1_write_index;
    42c4:	80 e1       	ldi	r24, 0x10	; 16
    42c6:	93 e3       	ldi	r25, 0x33	; 51
    42c8:	8b 8f       	std	Y+27, r24	; 0x1b
    42ca:	9c 8f       	std	Y+28, r25	; 0x1c
    42cc:	0f c0       	rjmp	.+30     	; 0x42ec <_ZN5rs232C1EjP12USART_struct+0xd0>
	}
#endif
#ifdef USARTE0
	else if(p_usart == &USARTE0)
    42ce:	00 3a       	cpi	r16, 0xA0	; 160
    42d0:	1a 40       	sbci	r17, 0x0A	; 10
    42d2:	61 f4       	brne	.+24     	; 0x42ec <_ZN5rs232C1EjP12USART_struct+0xd0>
	{
		p_rcv_buffer		= &rcvE0_buffer;
    42d4:	82 e2       	ldi	r24, 0x22	; 34
    42d6:	93 e3       	ldi	r25, 0x33	; 51
    42d8:	8f 8b       	std	Y+23, r24	; 0x17
    42da:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvE0_read_index;
    42dc:	88 e1       	ldi	r24, 0x18	; 24
    42de:	93 e3       	ldi	r25, 0x33	; 51
    42e0:	89 8f       	std	Y+25, r24	; 0x19
    42e2:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvE0_write_index;
    42e4:	8e e0       	ldi	r24, 0x0E	; 14
    42e6:	93 e3       	ldi	r25, 0x33	; 51
    42e8:	8b 8f       	std	Y+27, r24	; 0x1b
    42ea:	9c 8f       	std	Y+28, r25	; 0x1c
#endif
	else
	{
	}
	
	*p_rcv_buffer = new uint8_t[RSINT_BUF_SIZE];
    42ec:	0f 89       	ldd	r16, Y+23	; 0x17
    42ee:	18 8d       	ldd	r17, Y+24	; 0x18
    42f0:	84 e6       	ldi	r24, 0x64	; 100
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <_Znaj>
    42f8:	f8 01       	movw	r30, r16
    42fa:	80 83       	st	Z, r24
    42fc:	91 83       	std	Z+1, r25	; 0x01
	*p_rcv_read_index = 0;
    42fe:	e9 8d       	ldd	r30, Y+25	; 0x19
    4300:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4302:	10 82       	st	Z, r1
    4304:	11 82       	std	Z+1, r1	; 0x01
	*p_rcv_write_index = 0;
    4306:	eb 8d       	ldd	r30, Y+27	; 0x1b
    4308:	fc 8d       	ldd	r31, Y+28	; 0x1c
    430a:	10 82       	st	Z, r1
    430c:	11 82       	std	Z+1, r1	; 0x01
}
    430e:	df 91       	pop	r29
    4310:	cf 91       	pop	r28
    4312:	1f 91       	pop	r17
    4314:	0f 91       	pop	r16
    4316:	ff 90       	pop	r15
    4318:	ef 90       	pop	r14
    431a:	08 95       	ret

0000431c <__vector_25>:
 *  first serial port (number 0).  It saves that character into the receiver buffer.
 */

#ifdef USARTC0_RXC_vect
ISR (USARTC0_RXC_vect)
{
    431c:	1f 92       	push	r1
    431e:	0f 92       	push	r0
    4320:	0f b6       	in	r0, 0x3f	; 63
    4322:	0f 92       	push	r0
    4324:	11 24       	eor	r1, r1
    4326:	08 b6       	in	r0, 0x38	; 56
    4328:	0f 92       	push	r0
    432a:	18 be       	out	0x38, r1	; 56
    432c:	0b b6       	in	r0, 0x3b	; 59
    432e:	0f 92       	push	r0
    4330:	1b be       	out	0x3b, r1	; 59
    4332:	2f 93       	push	r18
    4334:	3f 93       	push	r19
    4336:	8f 93       	push	r24
    4338:	9f 93       	push	r25
    433a:	ef 93       	push	r30
    433c:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvC0_buffer[rcvC0_write_index] = USARTC0.DATA;
    433e:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    4342:	e0 91 2a 33 	lds	r30, 0x332A	; 0x80332a <rcvC0_buffer>
    4346:	f0 91 2b 33 	lds	r31, 0x332B	; 0x80332b <rcvC0_buffer+0x1>
    434a:	80 91 16 33 	lds	r24, 0x3316	; 0x803316 <rcvC0_write_index>
    434e:	90 91 17 33 	lds	r25, 0x3317	; 0x803317 <rcvC0_write_index+0x1>
    4352:	e8 0f       	add	r30, r24
    4354:	f9 1f       	adc	r31, r25
    4356:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvC0_write_index >= RSINT_BUF_SIZE)
    4358:	80 91 16 33 	lds	r24, 0x3316	; 0x803316 <rcvC0_write_index>
    435c:	90 91 17 33 	lds	r25, 0x3317	; 0x803317 <rcvC0_write_index+0x1>
    4360:	01 96       	adiw	r24, 0x01	; 1
    4362:	84 36       	cpi	r24, 0x64	; 100
    4364:	91 05       	cpc	r25, r1
    4366:	60 f4       	brcc	.+24     	; 0x4380 <__vector_25+0x64>
    4368:	80 93 16 33 	sts	0x3316, r24	; 0x803316 <rcvC0_write_index>
    436c:	90 93 17 33 	sts	0x3317, r25	; 0x803317 <rcvC0_write_index+0x1>
		rcvC0_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC0_write_index == rcvC0_read_index)
    4370:	20 91 20 33 	lds	r18, 0x3320	; 0x803320 <rcvC0_read_index>
    4374:	30 91 21 33 	lds	r19, 0x3321	; 0x803321 <rcvC0_read_index+0x1>
    4378:	82 17       	cp	r24, r18
    437a:	93 07       	cpc	r25, r19
    437c:	f1 f4       	brne	.+60     	; 0x43ba <__vector_25+0x9e>
    437e:	0c c0       	rjmp	.+24     	; 0x4398 <__vector_25+0x7c>

	rcvC0_buffer[rcvC0_write_index] = USARTC0.DATA;

	// Increment the write pointer
	if (++rcvC0_write_index >= RSINT_BUF_SIZE)
		rcvC0_write_index = 0;
    4380:	10 92 16 33 	sts	0x3316, r1	; 0x803316 <rcvC0_write_index>
    4384:	10 92 17 33 	sts	0x3317, r1	; 0x803317 <rcvC0_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC0_write_index == rcvC0_read_index)
    4388:	80 91 20 33 	lds	r24, 0x3320	; 0x803320 <rcvC0_read_index>
    438c:	90 91 21 33 	lds	r25, 0x3321	; 0x803321 <rcvC0_read_index+0x1>
    4390:	18 16       	cp	r1, r24
    4392:	19 06       	cpc	r1, r25
    4394:	91 f4       	brne	.+36     	; 0x43ba <__vector_25+0x9e>
    4396:	0e c0       	rjmp	.+28     	; 0x43b4 <__vector_25+0x98>
		if (++rcvC0_read_index >= RSINT_BUF_SIZE)
    4398:	01 96       	adiw	r24, 0x01	; 1
    439a:	84 36       	cpi	r24, 0x64	; 100
    439c:	91 05       	cpc	r25, r1
    439e:	28 f4       	brcc	.+10     	; 0x43aa <__vector_25+0x8e>
    43a0:	80 93 20 33 	sts	0x3320, r24	; 0x803320 <rcvC0_read_index>
    43a4:	90 93 21 33 	sts	0x3321, r25	; 0x803321 <rcvC0_read_index+0x1>
    43a8:	08 c0       	rjmp	.+16     	; 0x43ba <__vector_25+0x9e>
			rcvC0_read_index = 0;
    43aa:	10 92 20 33 	sts	0x3320, r1	; 0x803320 <rcvC0_read_index>
    43ae:	10 92 21 33 	sts	0x3321, r1	; 0x803321 <rcvC0_read_index+0x1>
}
    43b2:	03 c0       	rjmp	.+6      	; 0x43ba <__vector_25+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC0_write_index == rcvC0_read_index)
		if (++rcvC0_read_index >= RSINT_BUF_SIZE)
    43b4:	81 e0       	ldi	r24, 0x01	; 1
    43b6:	90 e0       	ldi	r25, 0x00	; 0
    43b8:	f3 cf       	rjmp	.-26     	; 0x43a0 <__vector_25+0x84>
			rcvC0_read_index = 0;
}
    43ba:	ff 91       	pop	r31
    43bc:	ef 91       	pop	r30
    43be:	9f 91       	pop	r25
    43c0:	8f 91       	pop	r24
    43c2:	3f 91       	pop	r19
    43c4:	2f 91       	pop	r18
    43c6:	0f 90       	pop	r0
    43c8:	0b be       	out	0x3b, r0	; 59
    43ca:	0f 90       	pop	r0
    43cc:	08 be       	out	0x38, r0	; 56
    43ce:	0f 90       	pop	r0
    43d0:	0f be       	out	0x3f, r0	; 63
    43d2:	0f 90       	pop	r0
    43d4:	1f 90       	pop	r1
    43d6:	18 95       	reti

000043d8 <__vector_28>:
#endif

#ifdef USARTC1_RXC_vect
ISR (USARTC1_RXC_vect)
{
    43d8:	1f 92       	push	r1
    43da:	0f 92       	push	r0
    43dc:	0f b6       	in	r0, 0x3f	; 63
    43de:	0f 92       	push	r0
    43e0:	11 24       	eor	r1, r1
    43e2:	08 b6       	in	r0, 0x38	; 56
    43e4:	0f 92       	push	r0
    43e6:	18 be       	out	0x38, r1	; 56
    43e8:	0b b6       	in	r0, 0x3b	; 59
    43ea:	0f 92       	push	r0
    43ec:	1b be       	out	0x3b, r1	; 59
    43ee:	2f 93       	push	r18
    43f0:	3f 93       	push	r19
    43f2:	8f 93       	push	r24
    43f4:	9f 93       	push	r25
    43f6:	ef 93       	push	r30
    43f8:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvC1_buffer[rcvC1_write_index] = USARTC1.DATA;
    43fa:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    43fe:	e0 91 28 33 	lds	r30, 0x3328	; 0x803328 <rcvC1_buffer>
    4402:	f0 91 29 33 	lds	r31, 0x3329	; 0x803329 <rcvC1_buffer+0x1>
    4406:	80 91 14 33 	lds	r24, 0x3314	; 0x803314 <rcvC1_write_index>
    440a:	90 91 15 33 	lds	r25, 0x3315	; 0x803315 <rcvC1_write_index+0x1>
    440e:	e8 0f       	add	r30, r24
    4410:	f9 1f       	adc	r31, r25
    4412:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvC1_write_index >= RSINT_BUF_SIZE)
    4414:	80 91 14 33 	lds	r24, 0x3314	; 0x803314 <rcvC1_write_index>
    4418:	90 91 15 33 	lds	r25, 0x3315	; 0x803315 <rcvC1_write_index+0x1>
    441c:	01 96       	adiw	r24, 0x01	; 1
    441e:	84 36       	cpi	r24, 0x64	; 100
    4420:	91 05       	cpc	r25, r1
    4422:	60 f4       	brcc	.+24     	; 0x443c <__vector_28+0x64>
    4424:	80 93 14 33 	sts	0x3314, r24	; 0x803314 <rcvC1_write_index>
    4428:	90 93 15 33 	sts	0x3315, r25	; 0x803315 <rcvC1_write_index+0x1>
	rcvC1_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC1_write_index == rcvC1_read_index)
    442c:	20 91 1e 33 	lds	r18, 0x331E	; 0x80331e <rcvC1_read_index>
    4430:	30 91 1f 33 	lds	r19, 0x331F	; 0x80331f <rcvC1_read_index+0x1>
    4434:	82 17       	cp	r24, r18
    4436:	93 07       	cpc	r25, r19
    4438:	f1 f4       	brne	.+60     	; 0x4476 <__vector_28+0x9e>
    443a:	0c c0       	rjmp	.+24     	; 0x4454 <__vector_28+0x7c>

	rcvC1_buffer[rcvC1_write_index] = USARTC1.DATA;

	// Increment the write pointer
	if (++rcvC1_write_index >= RSINT_BUF_SIZE)
	rcvC1_write_index = 0;
    443c:	10 92 14 33 	sts	0x3314, r1	; 0x803314 <rcvC1_write_index>
    4440:	10 92 15 33 	sts	0x3315, r1	; 0x803315 <rcvC1_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC1_write_index == rcvC1_read_index)
    4444:	80 91 1e 33 	lds	r24, 0x331E	; 0x80331e <rcvC1_read_index>
    4448:	90 91 1f 33 	lds	r25, 0x331F	; 0x80331f <rcvC1_read_index+0x1>
    444c:	18 16       	cp	r1, r24
    444e:	19 06       	cpc	r1, r25
    4450:	91 f4       	brne	.+36     	; 0x4476 <__vector_28+0x9e>
    4452:	0e c0       	rjmp	.+28     	; 0x4470 <__vector_28+0x98>
	if (++rcvC1_read_index >= RSINT_BUF_SIZE)
    4454:	01 96       	adiw	r24, 0x01	; 1
    4456:	84 36       	cpi	r24, 0x64	; 100
    4458:	91 05       	cpc	r25, r1
    445a:	28 f4       	brcc	.+10     	; 0x4466 <__vector_28+0x8e>
    445c:	80 93 1e 33 	sts	0x331E, r24	; 0x80331e <rcvC1_read_index>
    4460:	90 93 1f 33 	sts	0x331F, r25	; 0x80331f <rcvC1_read_index+0x1>
    4464:	08 c0       	rjmp	.+16     	; 0x4476 <__vector_28+0x9e>
	rcvC1_read_index = 0;
    4466:	10 92 1e 33 	sts	0x331E, r1	; 0x80331e <rcvC1_read_index>
    446a:	10 92 1f 33 	sts	0x331F, r1	; 0x80331f <rcvC1_read_index+0x1>
}
    446e:	03 c0       	rjmp	.+6      	; 0x4476 <__vector_28+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC1_write_index == rcvC1_read_index)
	if (++rcvC1_read_index >= RSINT_BUF_SIZE)
    4470:	81 e0       	ldi	r24, 0x01	; 1
    4472:	90 e0       	ldi	r25, 0x00	; 0
    4474:	f3 cf       	rjmp	.-26     	; 0x445c <__vector_28+0x84>
	rcvC1_read_index = 0;
}
    4476:	ff 91       	pop	r31
    4478:	ef 91       	pop	r30
    447a:	9f 91       	pop	r25
    447c:	8f 91       	pop	r24
    447e:	3f 91       	pop	r19
    4480:	2f 91       	pop	r18
    4482:	0f 90       	pop	r0
    4484:	0b be       	out	0x3b, r0	; 59
    4486:	0f 90       	pop	r0
    4488:	08 be       	out	0x38, r0	; 56
    448a:	0f 90       	pop	r0
    448c:	0f be       	out	0x3f, r0	; 63
    448e:	0f 90       	pop	r0
    4490:	1f 90       	pop	r1
    4492:	18 95       	reti

00004494 <__vector_88>:
#endif

#ifdef USARTD0_RXC_vect
ISR (USARTD0_RXC_vect)
{
    4494:	1f 92       	push	r1
    4496:	0f 92       	push	r0
    4498:	0f b6       	in	r0, 0x3f	; 63
    449a:	0f 92       	push	r0
    449c:	11 24       	eor	r1, r1
    449e:	08 b6       	in	r0, 0x38	; 56
    44a0:	0f 92       	push	r0
    44a2:	18 be       	out	0x38, r1	; 56
    44a4:	0b b6       	in	r0, 0x3b	; 59
    44a6:	0f 92       	push	r0
    44a8:	1b be       	out	0x3b, r1	; 59
    44aa:	2f 93       	push	r18
    44ac:	3f 93       	push	r19
    44ae:	8f 93       	push	r24
    44b0:	9f 93       	push	r25
    44b2:	ef 93       	push	r30
    44b4:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvD0_buffer[rcvC0_write_index] = USARTD0.DATA;
    44b6:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    44ba:	e0 91 26 33 	lds	r30, 0x3326	; 0x803326 <rcvD0_buffer>
    44be:	f0 91 27 33 	lds	r31, 0x3327	; 0x803327 <rcvD0_buffer+0x1>
    44c2:	80 91 16 33 	lds	r24, 0x3316	; 0x803316 <rcvC0_write_index>
    44c6:	90 91 17 33 	lds	r25, 0x3317	; 0x803317 <rcvC0_write_index+0x1>
    44ca:	e8 0f       	add	r30, r24
    44cc:	f9 1f       	adc	r31, r25
    44ce:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvD0_write_index >= RSINT_BUF_SIZE)
    44d0:	80 91 12 33 	lds	r24, 0x3312	; 0x803312 <rcvD0_write_index>
    44d4:	90 91 13 33 	lds	r25, 0x3313	; 0x803313 <rcvD0_write_index+0x1>
    44d8:	01 96       	adiw	r24, 0x01	; 1
    44da:	84 36       	cpi	r24, 0x64	; 100
    44dc:	91 05       	cpc	r25, r1
    44de:	60 f4       	brcc	.+24     	; 0x44f8 <__vector_88+0x64>
    44e0:	80 93 12 33 	sts	0x3312, r24	; 0x803312 <rcvD0_write_index>
    44e4:	90 93 13 33 	sts	0x3313, r25	; 0x803313 <rcvD0_write_index+0x1>
	rcvD0_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD0_write_index == rcvD0_read_index)
    44e8:	20 91 1c 33 	lds	r18, 0x331C	; 0x80331c <rcvD0_read_index>
    44ec:	30 91 1d 33 	lds	r19, 0x331D	; 0x80331d <rcvD0_read_index+0x1>
    44f0:	82 17       	cp	r24, r18
    44f2:	93 07       	cpc	r25, r19
    44f4:	f1 f4       	brne	.+60     	; 0x4532 <__vector_88+0x9e>
    44f6:	0c c0       	rjmp	.+24     	; 0x4510 <__vector_88+0x7c>

	rcvD0_buffer[rcvC0_write_index] = USARTD0.DATA;

	// Increment the write pointer
	if (++rcvD0_write_index >= RSINT_BUF_SIZE)
	rcvD0_write_index = 0;
    44f8:	10 92 12 33 	sts	0x3312, r1	; 0x803312 <rcvD0_write_index>
    44fc:	10 92 13 33 	sts	0x3313, r1	; 0x803313 <rcvD0_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD0_write_index == rcvD0_read_index)
    4500:	80 91 1c 33 	lds	r24, 0x331C	; 0x80331c <rcvD0_read_index>
    4504:	90 91 1d 33 	lds	r25, 0x331D	; 0x80331d <rcvD0_read_index+0x1>
    4508:	18 16       	cp	r1, r24
    450a:	19 06       	cpc	r1, r25
    450c:	91 f4       	brne	.+36     	; 0x4532 <__vector_88+0x9e>
    450e:	0e c0       	rjmp	.+28     	; 0x452c <__vector_88+0x98>
	if (++rcvD0_read_index >= RSINT_BUF_SIZE)
    4510:	01 96       	adiw	r24, 0x01	; 1
    4512:	84 36       	cpi	r24, 0x64	; 100
    4514:	91 05       	cpc	r25, r1
    4516:	28 f4       	brcc	.+10     	; 0x4522 <__vector_88+0x8e>
    4518:	80 93 1c 33 	sts	0x331C, r24	; 0x80331c <rcvD0_read_index>
    451c:	90 93 1d 33 	sts	0x331D, r25	; 0x80331d <rcvD0_read_index+0x1>
    4520:	08 c0       	rjmp	.+16     	; 0x4532 <__vector_88+0x9e>
	rcvD0_read_index = 0;
    4522:	10 92 1c 33 	sts	0x331C, r1	; 0x80331c <rcvD0_read_index>
    4526:	10 92 1d 33 	sts	0x331D, r1	; 0x80331d <rcvD0_read_index+0x1>
}
    452a:	03 c0       	rjmp	.+6      	; 0x4532 <__vector_88+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD0_write_index == rcvD0_read_index)
	if (++rcvD0_read_index >= RSINT_BUF_SIZE)
    452c:	81 e0       	ldi	r24, 0x01	; 1
    452e:	90 e0       	ldi	r25, 0x00	; 0
    4530:	f3 cf       	rjmp	.-26     	; 0x4518 <__vector_88+0x84>
	rcvD0_read_index = 0;
}
    4532:	ff 91       	pop	r31
    4534:	ef 91       	pop	r30
    4536:	9f 91       	pop	r25
    4538:	8f 91       	pop	r24
    453a:	3f 91       	pop	r19
    453c:	2f 91       	pop	r18
    453e:	0f 90       	pop	r0
    4540:	0b be       	out	0x3b, r0	; 59
    4542:	0f 90       	pop	r0
    4544:	08 be       	out	0x38, r0	; 56
    4546:	0f 90       	pop	r0
    4548:	0f be       	out	0x3f, r0	; 63
    454a:	0f 90       	pop	r0
    454c:	1f 90       	pop	r1
    454e:	18 95       	reti

00004550 <__vector_91>:
#endif

#ifdef USARTD1_RXC_vect
ISR (USARTD1_RXC_vect)
{
    4550:	1f 92       	push	r1
    4552:	0f 92       	push	r0
    4554:	0f b6       	in	r0, 0x3f	; 63
    4556:	0f 92       	push	r0
    4558:	11 24       	eor	r1, r1
    455a:	08 b6       	in	r0, 0x38	; 56
    455c:	0f 92       	push	r0
    455e:	18 be       	out	0x38, r1	; 56
    4560:	0b b6       	in	r0, 0x3b	; 59
    4562:	0f 92       	push	r0
    4564:	1b be       	out	0x3b, r1	; 59
    4566:	2f 93       	push	r18
    4568:	3f 93       	push	r19
    456a:	8f 93       	push	r24
    456c:	9f 93       	push	r25
    456e:	ef 93       	push	r30
    4570:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvD1_buffer[rcvD1_write_index] = USARTD1.DATA;
    4572:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    4576:	e0 91 24 33 	lds	r30, 0x3324	; 0x803324 <rcvD1_buffer>
    457a:	f0 91 25 33 	lds	r31, 0x3325	; 0x803325 <rcvD1_buffer+0x1>
    457e:	80 91 10 33 	lds	r24, 0x3310	; 0x803310 <rcvD1_write_index>
    4582:	90 91 11 33 	lds	r25, 0x3311	; 0x803311 <rcvD1_write_index+0x1>
    4586:	e8 0f       	add	r30, r24
    4588:	f9 1f       	adc	r31, r25
    458a:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvD1_write_index >= RSINT_BUF_SIZE)
    458c:	80 91 10 33 	lds	r24, 0x3310	; 0x803310 <rcvD1_write_index>
    4590:	90 91 11 33 	lds	r25, 0x3311	; 0x803311 <rcvD1_write_index+0x1>
    4594:	01 96       	adiw	r24, 0x01	; 1
    4596:	84 36       	cpi	r24, 0x64	; 100
    4598:	91 05       	cpc	r25, r1
    459a:	60 f4       	brcc	.+24     	; 0x45b4 <__vector_91+0x64>
    459c:	80 93 10 33 	sts	0x3310, r24	; 0x803310 <rcvD1_write_index>
    45a0:	90 93 11 33 	sts	0x3311, r25	; 0x803311 <rcvD1_write_index+0x1>
	rcvD1_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD1_write_index == rcvD1_read_index)
    45a4:	20 91 1a 33 	lds	r18, 0x331A	; 0x80331a <rcvD1_read_index>
    45a8:	30 91 1b 33 	lds	r19, 0x331B	; 0x80331b <rcvD1_read_index+0x1>
    45ac:	82 17       	cp	r24, r18
    45ae:	93 07       	cpc	r25, r19
    45b0:	f1 f4       	brne	.+60     	; 0x45ee <__vector_91+0x9e>
    45b2:	0c c0       	rjmp	.+24     	; 0x45cc <__vector_91+0x7c>

	rcvD1_buffer[rcvD1_write_index] = USARTD1.DATA;

	// Increment the write pointer
	if (++rcvD1_write_index >= RSINT_BUF_SIZE)
	rcvD1_write_index = 0;
    45b4:	10 92 10 33 	sts	0x3310, r1	; 0x803310 <rcvD1_write_index>
    45b8:	10 92 11 33 	sts	0x3311, r1	; 0x803311 <rcvD1_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD1_write_index == rcvD1_read_index)
    45bc:	80 91 1a 33 	lds	r24, 0x331A	; 0x80331a <rcvD1_read_index>
    45c0:	90 91 1b 33 	lds	r25, 0x331B	; 0x80331b <rcvD1_read_index+0x1>
    45c4:	18 16       	cp	r1, r24
    45c6:	19 06       	cpc	r1, r25
    45c8:	91 f4       	brne	.+36     	; 0x45ee <__vector_91+0x9e>
    45ca:	0e c0       	rjmp	.+28     	; 0x45e8 <__vector_91+0x98>
	if (++rcvD1_read_index >= RSINT_BUF_SIZE)
    45cc:	01 96       	adiw	r24, 0x01	; 1
    45ce:	84 36       	cpi	r24, 0x64	; 100
    45d0:	91 05       	cpc	r25, r1
    45d2:	28 f4       	brcc	.+10     	; 0x45de <__vector_91+0x8e>
    45d4:	80 93 1a 33 	sts	0x331A, r24	; 0x80331a <rcvD1_read_index>
    45d8:	90 93 1b 33 	sts	0x331B, r25	; 0x80331b <rcvD1_read_index+0x1>
    45dc:	08 c0       	rjmp	.+16     	; 0x45ee <__vector_91+0x9e>
	rcvD1_read_index = 0;
    45de:	10 92 1a 33 	sts	0x331A, r1	; 0x80331a <rcvD1_read_index>
    45e2:	10 92 1b 33 	sts	0x331B, r1	; 0x80331b <rcvD1_read_index+0x1>
}
    45e6:	03 c0       	rjmp	.+6      	; 0x45ee <__vector_91+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD1_write_index == rcvD1_read_index)
	if (++rcvD1_read_index >= RSINT_BUF_SIZE)
    45e8:	81 e0       	ldi	r24, 0x01	; 1
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	f3 cf       	rjmp	.-26     	; 0x45d4 <__vector_91+0x84>
	rcvD1_read_index = 0;
}
    45ee:	ff 91       	pop	r31
    45f0:	ef 91       	pop	r30
    45f2:	9f 91       	pop	r25
    45f4:	8f 91       	pop	r24
    45f6:	3f 91       	pop	r19
    45f8:	2f 91       	pop	r18
    45fa:	0f 90       	pop	r0
    45fc:	0b be       	out	0x3b, r0	; 59
    45fe:	0f 90       	pop	r0
    4600:	08 be       	out	0x38, r0	; 56
    4602:	0f 90       	pop	r0
    4604:	0f be       	out	0x3f, r0	; 63
    4606:	0f 90       	pop	r0
    4608:	1f 90       	pop	r1
    460a:	18 95       	reti

0000460c <__vector_58>:
#endif

#ifdef USARTE0_RXC_vect
ISR (USARTE0_RXC_vect)
{
    460c:	1f 92       	push	r1
    460e:	0f 92       	push	r0
    4610:	0f b6       	in	r0, 0x3f	; 63
    4612:	0f 92       	push	r0
    4614:	11 24       	eor	r1, r1
    4616:	08 b6       	in	r0, 0x38	; 56
    4618:	0f 92       	push	r0
    461a:	18 be       	out	0x38, r1	; 56
    461c:	0b b6       	in	r0, 0x3b	; 59
    461e:	0f 92       	push	r0
    4620:	1b be       	out	0x3b, r1	; 59
    4622:	2f 93       	push	r18
    4624:	3f 93       	push	r19
    4626:	8f 93       	push	r24
    4628:	9f 93       	push	r25
    462a:	ef 93       	push	r30
    462c:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvE0_buffer[rcvE0_write_index] = USARTE0.DATA;
    462e:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    4632:	e0 91 22 33 	lds	r30, 0x3322	; 0x803322 <rcvE0_buffer>
    4636:	f0 91 23 33 	lds	r31, 0x3323	; 0x803323 <rcvE0_buffer+0x1>
    463a:	80 91 0e 33 	lds	r24, 0x330E	; 0x80330e <rcvE0_write_index>
    463e:	90 91 0f 33 	lds	r25, 0x330F	; 0x80330f <rcvE0_write_index+0x1>
    4642:	e8 0f       	add	r30, r24
    4644:	f9 1f       	adc	r31, r25
    4646:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvE0_write_index >= RSINT_BUF_SIZE)
    4648:	80 91 0e 33 	lds	r24, 0x330E	; 0x80330e <rcvE0_write_index>
    464c:	90 91 0f 33 	lds	r25, 0x330F	; 0x80330f <rcvE0_write_index+0x1>
    4650:	01 96       	adiw	r24, 0x01	; 1
    4652:	84 36       	cpi	r24, 0x64	; 100
    4654:	91 05       	cpc	r25, r1
    4656:	60 f4       	brcc	.+24     	; 0x4670 <__vector_58+0x64>
    4658:	80 93 0e 33 	sts	0x330E, r24	; 0x80330e <rcvE0_write_index>
    465c:	90 93 0f 33 	sts	0x330F, r25	; 0x80330f <rcvE0_write_index+0x1>
	rcvE0_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvE0_write_index == rcvE0_read_index)
    4660:	20 91 18 33 	lds	r18, 0x3318	; 0x803318 <rcvE0_read_index>
    4664:	30 91 19 33 	lds	r19, 0x3319	; 0x803319 <rcvE0_read_index+0x1>
    4668:	82 17       	cp	r24, r18
    466a:	93 07       	cpc	r25, r19
    466c:	f1 f4       	brne	.+60     	; 0x46aa <__vector_58+0x9e>
    466e:	0c c0       	rjmp	.+24     	; 0x4688 <__vector_58+0x7c>

	rcvE0_buffer[rcvE0_write_index] = USARTE0.DATA;

	// Increment the write pointer
	if (++rcvE0_write_index >= RSINT_BUF_SIZE)
	rcvE0_write_index = 0;
    4670:	10 92 0e 33 	sts	0x330E, r1	; 0x80330e <rcvE0_write_index>
    4674:	10 92 0f 33 	sts	0x330F, r1	; 0x80330f <rcvE0_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvE0_write_index == rcvE0_read_index)
    4678:	80 91 18 33 	lds	r24, 0x3318	; 0x803318 <rcvE0_read_index>
    467c:	90 91 19 33 	lds	r25, 0x3319	; 0x803319 <rcvE0_read_index+0x1>
    4680:	18 16       	cp	r1, r24
    4682:	19 06       	cpc	r1, r25
    4684:	91 f4       	brne	.+36     	; 0x46aa <__vector_58+0x9e>
    4686:	0e c0       	rjmp	.+28     	; 0x46a4 <__vector_58+0x98>
	if (++rcvE0_read_index >= RSINT_BUF_SIZE)
    4688:	01 96       	adiw	r24, 0x01	; 1
    468a:	84 36       	cpi	r24, 0x64	; 100
    468c:	91 05       	cpc	r25, r1
    468e:	28 f4       	brcc	.+10     	; 0x469a <__vector_58+0x8e>
    4690:	80 93 18 33 	sts	0x3318, r24	; 0x803318 <rcvE0_read_index>
    4694:	90 93 19 33 	sts	0x3319, r25	; 0x803319 <rcvE0_read_index+0x1>
    4698:	08 c0       	rjmp	.+16     	; 0x46aa <__vector_58+0x9e>
	rcvE0_read_index = 0;
    469a:	10 92 18 33 	sts	0x3318, r1	; 0x803318 <rcvE0_read_index>
    469e:	10 92 19 33 	sts	0x3319, r1	; 0x803319 <rcvE0_read_index+0x1>
}
    46a2:	03 c0       	rjmp	.+6      	; 0x46aa <__vector_58+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvE0_write_index == rcvE0_read_index)
	if (++rcvE0_read_index >= RSINT_BUF_SIZE)
    46a4:	81 e0       	ldi	r24, 0x01	; 1
    46a6:	90 e0       	ldi	r25, 0x00	; 0
    46a8:	f3 cf       	rjmp	.-26     	; 0x4690 <__vector_58+0x84>
	rcvE0_read_index = 0;
}
    46aa:	ff 91       	pop	r31
    46ac:	ef 91       	pop	r30
    46ae:	9f 91       	pop	r25
    46b0:	8f 91       	pop	r24
    46b2:	3f 91       	pop	r19
    46b4:	2f 91       	pop	r18
    46b6:	0f 90       	pop	r0
    46b8:	0b be       	out	0x3b, r0	; 59
    46ba:	0f 90       	pop	r0
    46bc:	08 be       	out	0x38, r0	; 56
    46be:	0f 90       	pop	r0
    46c0:	0f be       	out	0x3f, r0	; 63
    46c2:	0f 90       	pop	r0
    46c4:	1f 90       	pop	r1
    46c6:	18 95       	reti

000046c8 <_ZN9frt_queueIjE16ISR_num_items_inEv>:
		 *  called only from within an interrupt service routine.
		 *  @return The number of items in the queue
		 */
		size_t ISR_num_items_in (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle));
    46c8:	fc 01       	movw	r30, r24
    46ca:	84 81       	ldd	r24, Z+4	; 0x04
    46cc:	95 81       	ldd	r25, Z+5	; 0x05
    46ce:	0e 94 59 14 	call	0x28b2	; 0x28b2 <uxQueueMessagesWaitingFromISR>
		}
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	08 95       	ret

000046d6 <_ZN9frt_queueIjE13ISR_not_emptyEv>:
		 *  an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool ISR_not_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) != 0);
    46d6:	fc 01       	movw	r30, r24
    46d8:	84 81       	ldd	r24, Z+4	; 0x04
    46da:	95 81       	ldd	r25, Z+5	; 0x05
    46dc:	0e 94 59 14 	call	0x28b2	; 0x28b2 <uxQueueMessagesWaitingFromISR>
    46e0:	91 e0       	ldi	r25, 0x01	; 1
    46e2:	81 11       	cpse	r24, r1
    46e4:	01 c0       	rjmp	.+2      	; 0x46e8 <_ZN9frt_queueIjE13ISR_not_emptyEv+0x12>
    46e6:	90 e0       	ldi	r25, 0x00	; 0
		}
    46e8:	89 2f       	mov	r24, r25
    46ea:	08 95       	ret

000046ec <_ZN9frt_queueIjE12ISR_is_emptyEv>:
		 *  routine. It must not be used in normal non-ISR code. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool ISR_is_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) == 0);
    46ec:	fc 01       	movw	r30, r24
    46ee:	84 81       	ldd	r24, Z+4	; 0x04
    46f0:	95 81       	ldd	r25, Z+5	; 0x05
    46f2:	0e 94 59 14 	call	0x28b2	; 0x28b2 <uxQueueMessagesWaitingFromISR>
    46f6:	91 e0       	ldi	r25, 0x01	; 1
    46f8:	81 11       	cpse	r24, r1
    46fa:	90 e0       	ldi	r25, 0x00	; 0
		}
    46fc:	89 2f       	mov	r24, r25
    46fe:	08 95       	ret

00004700 <_ZN9frt_queueIiE16ISR_num_items_inEv>:
		 *  called only from within an interrupt service routine.
		 *  @return The number of items in the queue
		 */
		size_t ISR_num_items_in (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle));
    4700:	fc 01       	movw	r30, r24
    4702:	84 81       	ldd	r24, Z+4	; 0x04
    4704:	95 81       	ldd	r25, Z+5	; 0x05
    4706:	0e 94 59 14 	call	0x28b2	; 0x28b2 <uxQueueMessagesWaitingFromISR>
		}
    470a:	90 e0       	ldi	r25, 0x00	; 0
    470c:	08 95       	ret

0000470e <_ZN9frt_queueIiE13ISR_not_emptyEv>:
		 *  an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool ISR_not_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) != 0);
    470e:	fc 01       	movw	r30, r24
    4710:	84 81       	ldd	r24, Z+4	; 0x04
    4712:	95 81       	ldd	r25, Z+5	; 0x05
    4714:	0e 94 59 14 	call	0x28b2	; 0x28b2 <uxQueueMessagesWaitingFromISR>
    4718:	91 e0       	ldi	r25, 0x01	; 1
    471a:	81 11       	cpse	r24, r1
    471c:	01 c0       	rjmp	.+2      	; 0x4720 <_ZN9frt_queueIiE13ISR_not_emptyEv+0x12>
    471e:	90 e0       	ldi	r25, 0x00	; 0
		}
    4720:	89 2f       	mov	r24, r25
    4722:	08 95       	ret

00004724 <_ZN9frt_queueIiE12ISR_is_emptyEv>:
		 *  routine. It must not be used in normal non-ISR code. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool ISR_is_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) == 0);
    4724:	fc 01       	movw	r30, r24
    4726:	84 81       	ldd	r24, Z+4	; 0x04
    4728:	95 81       	ldd	r25, Z+5	; 0x05
    472a:	0e 94 59 14 	call	0x28b2	; 0x28b2 <uxQueueMessagesWaitingFromISR>
    472e:	91 e0       	ldi	r25, 0x01	; 1
    4730:	81 11       	cpse	r24, r1
    4732:	90 e0       	ldi	r25, 0x00	; 0
		}
    4734:	89 2f       	mov	r24, r25
    4736:	08 95       	ret

00004738 <_ZN9frt_queueIjE12num_items_inEv>:
		 *  ISR_num_items_in() can be called from within an ISR. 
		 *  @return The number of items in the queue
		 */
		size_t num_items_in (void)
		{
			return (uxQueueMessagesWaiting (handle));
    4738:	fc 01       	movw	r30, r24
    473a:	84 81       	ldd	r24, Z+4	; 0x04
    473c:	95 81       	ldd	r25, Z+5	; 0x05
    473e:	0e 94 51 14 	call	0x28a2	; 0x28a2 <uxQueueMessagesWaiting>
		}
    4742:	90 e0       	ldi	r25, 0x00	; 0
    4744:	08 95       	ret

00004746 <_ZN9frt_queueIjE9not_emptyEv>:
		 *  \b not be called from within an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool not_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) != 0);
    4746:	fc 01       	movw	r30, r24
    4748:	84 81       	ldd	r24, Z+4	; 0x04
    474a:	95 81       	ldd	r25, Z+5	; 0x05
    474c:	0e 94 51 14 	call	0x28a2	; 0x28a2 <uxQueueMessagesWaiting>
    4750:	91 e0       	ldi	r25, 0x01	; 1
    4752:	81 11       	cpse	r24, r1
    4754:	01 c0       	rjmp	.+2      	; 0x4758 <_ZN9frt_queueIjE9not_emptyEv+0x12>
    4756:	90 e0       	ldi	r25, 0x00	; 0
		}
    4758:	89 2f       	mov	r24, r25
    475a:	08 95       	ret

0000475c <_ZN9frt_queueIjE8is_emptyEv>:
		/** This method checks if the queue is empty. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool is_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) == 0);
    475c:	fc 01       	movw	r30, r24
    475e:	84 81       	ldd	r24, Z+4	; 0x04
    4760:	95 81       	ldd	r25, Z+5	; 0x05
    4762:	0e 94 51 14 	call	0x28a2	; 0x28a2 <uxQueueMessagesWaiting>
    4766:	91 e0       	ldi	r25, 0x01	; 1
    4768:	81 11       	cpse	r24, r1
    476a:	90 e0       	ldi	r25, 0x00	; 0
		}
    476c:	89 2f       	mov	r24, r25
    476e:	08 95       	ret

00004770 <_ZN9frt_queueIiE12num_items_inEv>:
		 *  ISR_num_items_in() can be called from within an ISR. 
		 *  @return The number of items in the queue
		 */
		size_t num_items_in (void)
		{
			return (uxQueueMessagesWaiting (handle));
    4770:	fc 01       	movw	r30, r24
    4772:	84 81       	ldd	r24, Z+4	; 0x04
    4774:	95 81       	ldd	r25, Z+5	; 0x05
    4776:	0e 94 51 14 	call	0x28a2	; 0x28a2 <uxQueueMessagesWaiting>
		}
    477a:	90 e0       	ldi	r25, 0x00	; 0
    477c:	08 95       	ret

0000477e <_ZN9frt_queueIiE9not_emptyEv>:
		 *  \b not be called from within an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool not_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) != 0);
    477e:	fc 01       	movw	r30, r24
    4780:	84 81       	ldd	r24, Z+4	; 0x04
    4782:	95 81       	ldd	r25, Z+5	; 0x05
    4784:	0e 94 51 14 	call	0x28a2	; 0x28a2 <uxQueueMessagesWaiting>
    4788:	91 e0       	ldi	r25, 0x01	; 1
    478a:	81 11       	cpse	r24, r1
    478c:	01 c0       	rjmp	.+2      	; 0x4790 <_ZN9frt_queueIiE9not_emptyEv+0x12>
    478e:	90 e0       	ldi	r25, 0x00	; 0
		}
    4790:	89 2f       	mov	r24, r25
    4792:	08 95       	ret

00004794 <_ZN9frt_queueIiE8is_emptyEv>:
		/** This method checks if the queue is empty. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool is_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) == 0);
    4794:	fc 01       	movw	r30, r24
    4796:	84 81       	ldd	r24, Z+4	; 0x04
    4798:	95 81       	ldd	r25, Z+5	; 0x05
    479a:	0e 94 51 14 	call	0x28a2	; 0x28a2 <uxQueueMessagesWaiting>
    479e:	91 e0       	ldi	r25, 0x01	; 1
    47a0:	81 11       	cpse	r24, r1
    47a2:	90 e0       	ldi	r25, 0x00	; 0
		}
    47a4:	89 2f       	mov	r24, r25
    47a6:	08 95       	ret

000047a8 <_ZN9frt_queueIjE10get_a_copyERj>:
 *  \c xQueuePeekFromISR() which would allow copying items from a queue in an ISR. 
 *  @param item A reference to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get_a_copy (data_type& item)
    47a8:	0f 93       	push	r16
{
	xQueuePeek (handle, &item, portMAX_DELAY);
    47aa:	01 e0       	ldi	r16, 0x01	; 1
    47ac:	2f ef       	ldi	r18, 0xFF	; 255
    47ae:	3f ef       	ldi	r19, 0xFF	; 255
    47b0:	a9 01       	movw	r20, r18
    47b2:	fc 01       	movw	r30, r24
    47b4:	84 81       	ldd	r24, Z+4	; 0x04
    47b6:	95 81       	ldd	r25, Z+5	; 0x05
    47b8:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xQueueGenericReceive>
}
    47bc:	0f 91       	pop	r16
    47be:	08 95       	ret

000047c0 <_ZN9frt_queueIjE10get_a_copyEv>:
 *          data type if we couldn't get any data from the queue and the attempt
 *          timed out
 */

template <class data_type>
inline data_type frt_queue<data_type>::get_a_copy (void)
    47c0:	0f 93       	push	r16
    47c2:	cf 93       	push	r28
    47c4:	df 93       	push	r29
    47c6:	1f 92       	push	r1
    47c8:	1f 92       	push	r1
    47ca:	cd b7       	in	r28, 0x3d	; 61
    47cc:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueuePeek (handle, &recv_item, portMAX_DELAY);
    47ce:	01 e0       	ldi	r16, 0x01	; 1
    47d0:	2f ef       	ldi	r18, 0xFF	; 255
    47d2:	3f ef       	ldi	r19, 0xFF	; 255
    47d4:	a9 01       	movw	r20, r18
    47d6:	be 01       	movw	r22, r28
    47d8:	6f 5f       	subi	r22, 0xFF	; 255
    47da:	7f 4f       	sbci	r23, 0xFF	; 255
    47dc:	fc 01       	movw	r30, r24
    47de:	84 81       	ldd	r24, Z+4	; 0x04
    47e0:	95 81       	ldd	r25, Z+5	; 0x05
    47e2:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xQueueGenericReceive>
	return (recv_item);
}
    47e6:	89 81       	ldd	r24, Y+1	; 0x01
    47e8:	9a 81       	ldd	r25, Y+2	; 0x02
    47ea:	0f 90       	pop	r0
    47ec:	0f 90       	pop	r0
    47ee:	df 91       	pop	r29
    47f0:	cf 91       	pop	r28
    47f2:	0f 91       	pop	r16
    47f4:	08 95       	ret

000047f6 <_ZN9frt_queueIjE3getEPj>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get (data_type* p_item)
    47f6:	0f 93       	push	r16
{
	xQueueReceive (handle, p_item, portMAX_DELAY);
    47f8:	00 e0       	ldi	r16, 0x00	; 0
    47fa:	2f ef       	ldi	r18, 0xFF	; 255
    47fc:	3f ef       	ldi	r19, 0xFF	; 255
    47fe:	a9 01       	movw	r20, r18
    4800:	fc 01       	movw	r30, r24
    4802:	84 81       	ldd	r24, Z+4	; 0x04
    4804:	95 81       	ldd	r25, Z+5	; 0x05
    4806:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xQueueGenericReceive>
}
    480a:	0f 91       	pop	r16
    480c:	08 95       	ret

0000480e <_ZN9frt_queueIjE3getEv>:
 *  up. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::get (void)
    480e:	0f 93       	push	r16
    4810:	cf 93       	push	r28
    4812:	df 93       	push	r29
    4814:	1f 92       	push	r1
    4816:	1f 92       	push	r1
    4818:	cd b7       	in	r28, 0x3d	; 61
    481a:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceive (handle, &recv_item, portMAX_DELAY);
    481c:	00 e0       	ldi	r16, 0x00	; 0
    481e:	2f ef       	ldi	r18, 0xFF	; 255
    4820:	3f ef       	ldi	r19, 0xFF	; 255
    4822:	a9 01       	movw	r20, r18
    4824:	be 01       	movw	r22, r28
    4826:	6f 5f       	subi	r22, 0xFF	; 255
    4828:	7f 4f       	sbci	r23, 0xFF	; 255
    482a:	fc 01       	movw	r30, r24
    482c:	84 81       	ldd	r24, Z+4	; 0x04
    482e:	95 81       	ldd	r25, Z+5	; 0x05
    4830:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xQueueGenericReceive>
	return (recv_item);
}
    4834:	89 81       	ldd	r24, Y+1	; 0x01
    4836:	9a 81       	ldd	r25, Y+2	; 0x02
    4838:	0f 90       	pop	r0
    483a:	0f 90       	pop	r0
    483c:	df 91       	pop	r29
    483e:	cf 91       	pop	r28
    4840:	0f 91       	pop	r16
    4842:	08 95       	ret

00004844 <_ZN9frt_queueIiE10get_a_copyERi>:
 *  \c xQueuePeekFromISR() which would allow copying items from a queue in an ISR. 
 *  @param item A reference to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get_a_copy (data_type& item)
    4844:	0f 93       	push	r16
{
	xQueuePeek (handle, &item, portMAX_DELAY);
    4846:	01 e0       	ldi	r16, 0x01	; 1
    4848:	2f ef       	ldi	r18, 0xFF	; 255
    484a:	3f ef       	ldi	r19, 0xFF	; 255
    484c:	a9 01       	movw	r20, r18
    484e:	fc 01       	movw	r30, r24
    4850:	84 81       	ldd	r24, Z+4	; 0x04
    4852:	95 81       	ldd	r25, Z+5	; 0x05
    4854:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xQueueGenericReceive>
}
    4858:	0f 91       	pop	r16
    485a:	08 95       	ret

0000485c <_ZN9frt_queueIiE10get_a_copyEv>:
 *          data type if we couldn't get any data from the queue and the attempt
 *          timed out
 */

template <class data_type>
inline data_type frt_queue<data_type>::get_a_copy (void)
    485c:	0f 93       	push	r16
    485e:	cf 93       	push	r28
    4860:	df 93       	push	r29
    4862:	1f 92       	push	r1
    4864:	1f 92       	push	r1
    4866:	cd b7       	in	r28, 0x3d	; 61
    4868:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueuePeek (handle, &recv_item, portMAX_DELAY);
    486a:	01 e0       	ldi	r16, 0x01	; 1
    486c:	2f ef       	ldi	r18, 0xFF	; 255
    486e:	3f ef       	ldi	r19, 0xFF	; 255
    4870:	a9 01       	movw	r20, r18
    4872:	be 01       	movw	r22, r28
    4874:	6f 5f       	subi	r22, 0xFF	; 255
    4876:	7f 4f       	sbci	r23, 0xFF	; 255
    4878:	fc 01       	movw	r30, r24
    487a:	84 81       	ldd	r24, Z+4	; 0x04
    487c:	95 81       	ldd	r25, Z+5	; 0x05
    487e:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xQueueGenericReceive>
	return (recv_item);
}
    4882:	89 81       	ldd	r24, Y+1	; 0x01
    4884:	9a 81       	ldd	r25, Y+2	; 0x02
    4886:	0f 90       	pop	r0
    4888:	0f 90       	pop	r0
    488a:	df 91       	pop	r29
    488c:	cf 91       	pop	r28
    488e:	0f 91       	pop	r16
    4890:	08 95       	ret

00004892 <_ZN9frt_queueIiE3getEPi>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get (data_type* p_item)
    4892:	0f 93       	push	r16
{
	xQueueReceive (handle, p_item, portMAX_DELAY);
    4894:	00 e0       	ldi	r16, 0x00	; 0
    4896:	2f ef       	ldi	r18, 0xFF	; 255
    4898:	3f ef       	ldi	r19, 0xFF	; 255
    489a:	a9 01       	movw	r20, r18
    489c:	fc 01       	movw	r30, r24
    489e:	84 81       	ldd	r24, Z+4	; 0x04
    48a0:	95 81       	ldd	r25, Z+5	; 0x05
    48a2:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xQueueGenericReceive>
}
    48a6:	0f 91       	pop	r16
    48a8:	08 95       	ret

000048aa <_ZN9frt_queueIiE3getEv>:
 *  up. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::get (void)
    48aa:	0f 93       	push	r16
    48ac:	cf 93       	push	r28
    48ae:	df 93       	push	r29
    48b0:	1f 92       	push	r1
    48b2:	1f 92       	push	r1
    48b4:	cd b7       	in	r28, 0x3d	; 61
    48b6:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceive (handle, &recv_item, portMAX_DELAY);
    48b8:	00 e0       	ldi	r16, 0x00	; 0
    48ba:	2f ef       	ldi	r18, 0xFF	; 255
    48bc:	3f ef       	ldi	r19, 0xFF	; 255
    48be:	a9 01       	movw	r20, r18
    48c0:	be 01       	movw	r22, r28
    48c2:	6f 5f       	subi	r22, 0xFF	; 255
    48c4:	7f 4f       	sbci	r23, 0xFF	; 255
    48c6:	fc 01       	movw	r30, r24
    48c8:	84 81       	ldd	r24, Z+4	; 0x04
    48ca:	95 81       	ldd	r25, Z+5	; 0x05
    48cc:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xQueueGenericReceive>
	return (recv_item);
}
    48d0:	89 81       	ldd	r24, Y+1	; 0x01
    48d2:	9a 81       	ldd	r25, Y+2	; 0x02
    48d4:	0f 90       	pop	r0
    48d6:	0f 90       	pop	r0
    48d8:	df 91       	pop	r29
    48da:	cf 91       	pop	r28
    48dc:	0f 91       	pop	r16
    48de:	08 95       	ret

000048e0 <_ZN9frt_queueIjE7ISR_getEPj>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::ISR_get (data_type* p_item)
    48e0:	cf 93       	push	r28
    48e2:	df 93       	push	r29
    48e4:	1f 92       	push	r1
    48e6:	cd b7       	in	r28, 0x3d	; 61
    48e8:	de b7       	in	r29, 0x3e	; 62
{
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, and
	// nothing will actually be copied
	xQueueReceiveFromISR (handle, p_item, &task_awakened);
    48ea:	ae 01       	movw	r20, r28
    48ec:	4f 5f       	subi	r20, 0xFF	; 255
    48ee:	5f 4f       	sbci	r21, 0xFF	; 255
    48f0:	fc 01       	movw	r30, r24
    48f2:	84 81       	ldd	r24, Z+4	; 0x04
    48f4:	95 81       	ldd	r25, Z+5	; 0x05
    48f6:	0e 94 24 14 	call	0x2848	; 0x2848 <xQueueReceiveFromISR>
}
    48fa:	0f 90       	pop	r0
    48fc:	df 91       	pop	r29
    48fe:	cf 91       	pop	r28
    4900:	08 95       	ret

00004902 <_ZN9frt_queueIjE7ISR_getEv>:
 *  service routine. This method must not be called from within normal non-ISR code. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::ISR_get (void)
    4902:	cf 93       	push	r28
    4904:	df 93       	push	r29
    4906:	00 d0       	rcall	.+0      	; 0x4908 <_ZN9frt_queueIjE7ISR_getEv+0x6>
    4908:	cd b7       	in	r28, 0x3d	; 61
    490a:	de b7       	in	r29, 0x3e	; 62
	data_type recv_item;                    // Data item read from the queue
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceiveFromISR (handle, &recv_item, &task_awakened);
    490c:	ae 01       	movw	r20, r28
    490e:	4d 5f       	subi	r20, 0xFD	; 253
    4910:	5f 4f       	sbci	r21, 0xFF	; 255
    4912:	be 01       	movw	r22, r28
    4914:	6f 5f       	subi	r22, 0xFF	; 255
    4916:	7f 4f       	sbci	r23, 0xFF	; 255
    4918:	fc 01       	movw	r30, r24
    491a:	84 81       	ldd	r24, Z+4	; 0x04
    491c:	95 81       	ldd	r25, Z+5	; 0x05
    491e:	0e 94 24 14 	call	0x2848	; 0x2848 <xQueueReceiveFromISR>
	return (recv_item);
}
    4922:	89 81       	ldd	r24, Y+1	; 0x01
    4924:	9a 81       	ldd	r25, Y+2	; 0x02
    4926:	23 96       	adiw	r28, 0x03	; 3
    4928:	cd bf       	out	0x3d, r28	; 61
    492a:	de bf       	out	0x3e, r29	; 62
    492c:	df 91       	pop	r29
    492e:	cf 91       	pop	r28
    4930:	08 95       	ret

00004932 <_ZN9frt_queueIiE7ISR_getEPi>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::ISR_get (data_type* p_item)
    4932:	cf 93       	push	r28
    4934:	df 93       	push	r29
    4936:	1f 92       	push	r1
    4938:	cd b7       	in	r28, 0x3d	; 61
    493a:	de b7       	in	r29, 0x3e	; 62
{
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, and
	// nothing will actually be copied
	xQueueReceiveFromISR (handle, p_item, &task_awakened);
    493c:	ae 01       	movw	r20, r28
    493e:	4f 5f       	subi	r20, 0xFF	; 255
    4940:	5f 4f       	sbci	r21, 0xFF	; 255
    4942:	fc 01       	movw	r30, r24
    4944:	84 81       	ldd	r24, Z+4	; 0x04
    4946:	95 81       	ldd	r25, Z+5	; 0x05
    4948:	0e 94 24 14 	call	0x2848	; 0x2848 <xQueueReceiveFromISR>
}
    494c:	0f 90       	pop	r0
    494e:	df 91       	pop	r29
    4950:	cf 91       	pop	r28
    4952:	08 95       	ret

00004954 <_ZN9frt_queueIiE7ISR_getEv>:
 *  service routine. This method must not be called from within normal non-ISR code. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::ISR_get (void)
    4954:	cf 93       	push	r28
    4956:	df 93       	push	r29
    4958:	00 d0       	rcall	.+0      	; 0x495a <_ZN9frt_queueIiE7ISR_getEv+0x6>
    495a:	cd b7       	in	r28, 0x3d	; 61
    495c:	de b7       	in	r29, 0x3e	; 62
	data_type recv_item;                    // Data item read from the queue
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceiveFromISR (handle, &recv_item, &task_awakened);
    495e:	ae 01       	movw	r20, r28
    4960:	4d 5f       	subi	r20, 0xFD	; 253
    4962:	5f 4f       	sbci	r21, 0xFF	; 255
    4964:	be 01       	movw	r22, r28
    4966:	6f 5f       	subi	r22, 0xFF	; 255
    4968:	7f 4f       	sbci	r23, 0xFF	; 255
    496a:	fc 01       	movw	r30, r24
    496c:	84 81       	ldd	r24, Z+4	; 0x04
    496e:	95 81       	ldd	r25, Z+5	; 0x05
    4970:	0e 94 24 14 	call	0x2848	; 0x2848 <xQueueReceiveFromISR>
	return (recv_item);
}
    4974:	89 81       	ldd	r24, Y+1	; 0x01
    4976:	9a 81       	ldd	r25, Y+2	; 0x02
    4978:	23 96       	adiw	r28, 0x03	; 3
    497a:	cd bf       	out	0x3d, r28	; 61
    497c:	de bf       	out	0x3e, r29	; 62
    497e:	df 91       	pop	r29
    4980:	cf 91       	pop	r28
    4982:	08 95       	ret

00004984 <_ZN9frt_queueIjE11ISR_butt_inERKj>:
 *              the front of the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
bool frt_queue<data_type>::ISR_butt_in (const data_type& item)
    4984:	cf 93       	push	r28
    4986:	df 93       	push	r29
    4988:	1f 92       	push	r1
    498a:	cd b7       	in	r28, 0x3d	; 61
    498c:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    498e:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;                      // Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToFrontFromISR (handle, &item, &shouldSwitch));
    4990:	21 e0       	ldi	r18, 0x01	; 1
    4992:	ae 01       	movw	r20, r28
    4994:	4f 5f       	subi	r20, 0xFF	; 255
    4996:	5f 4f       	sbci	r21, 0xFF	; 255
    4998:	fc 01       	movw	r30, r24
    499a:	84 81       	ldd	r24, Z+4	; 0x04
    499c:	95 81       	ldd	r25, Z+5	; 0x05
    499e:	0e 94 34 13 	call	0x2668	; 0x2668 <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    49a2:	91 e0       	ldi	r25, 0x01	; 1
    49a4:	81 11       	cpse	r24, r1
    49a6:	01 c0       	rjmp	.+2      	; 0x49aa <_ZN9frt_queueIjE11ISR_butt_inERKj+0x26>
    49a8:	90 e0       	ldi	r25, 0x00	; 0
}
    49aa:	89 2f       	mov	r24, r25
    49ac:	0f 90       	pop	r0
    49ae:	df 91       	pop	r29
    49b0:	cf 91       	pop	r28
    49b2:	08 95       	ret

000049b4 <_ZN9frt_queueIjE7ISR_putERKj>:
 *  @param item Reference to the item which is going to be put into the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
inline bool frt_queue<data_type>::ISR_put (const data_type& item)
    49b4:	cf 93       	push	r28
    49b6:	df 93       	push	r29
    49b8:	1f 92       	push	r1
    49ba:	cd b7       	in	r28, 0x3d	; 61
    49bc:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    49be:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;						// Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToBackFromISR (handle, &item, &shouldSwitch));
    49c0:	20 e0       	ldi	r18, 0x00	; 0
    49c2:	ae 01       	movw	r20, r28
    49c4:	4f 5f       	subi	r20, 0xFF	; 255
    49c6:	5f 4f       	sbci	r21, 0xFF	; 255
    49c8:	fc 01       	movw	r30, r24
    49ca:	84 81       	ldd	r24, Z+4	; 0x04
    49cc:	95 81       	ldd	r25, Z+5	; 0x05
    49ce:	0e 94 34 13 	call	0x2668	; 0x2668 <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    49d2:	91 e0       	ldi	r25, 0x01	; 1
    49d4:	81 11       	cpse	r24, r1
    49d6:	01 c0       	rjmp	.+2      	; 0x49da <_ZN9frt_queueIjE7ISR_putERKj+0x26>
    49d8:	90 e0       	ldi	r25, 0x00	; 0
}
    49da:	89 2f       	mov	r24, r25
    49dc:	0f 90       	pop	r0
    49de:	df 91       	pop	r29
    49e0:	cf 91       	pop	r28
    49e2:	08 95       	ret

000049e4 <_ZN9frt_queueIiE11ISR_butt_inERKi>:
 *              the front of the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
bool frt_queue<data_type>::ISR_butt_in (const data_type& item)
    49e4:	cf 93       	push	r28
    49e6:	df 93       	push	r29
    49e8:	1f 92       	push	r1
    49ea:	cd b7       	in	r28, 0x3d	; 61
    49ec:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    49ee:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;                      // Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToFrontFromISR (handle, &item, &shouldSwitch));
    49f0:	21 e0       	ldi	r18, 0x01	; 1
    49f2:	ae 01       	movw	r20, r28
    49f4:	4f 5f       	subi	r20, 0xFF	; 255
    49f6:	5f 4f       	sbci	r21, 0xFF	; 255
    49f8:	fc 01       	movw	r30, r24
    49fa:	84 81       	ldd	r24, Z+4	; 0x04
    49fc:	95 81       	ldd	r25, Z+5	; 0x05
    49fe:	0e 94 34 13 	call	0x2668	; 0x2668 <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    4a02:	91 e0       	ldi	r25, 0x01	; 1
    4a04:	81 11       	cpse	r24, r1
    4a06:	01 c0       	rjmp	.+2      	; 0x4a0a <_ZN9frt_queueIiE11ISR_butt_inERKi+0x26>
    4a08:	90 e0       	ldi	r25, 0x00	; 0
}
    4a0a:	89 2f       	mov	r24, r25
    4a0c:	0f 90       	pop	r0
    4a0e:	df 91       	pop	r29
    4a10:	cf 91       	pop	r28
    4a12:	08 95       	ret

00004a14 <_ZN9frt_queueIiE7ISR_putERKi>:
 *  @param item Reference to the item which is going to be put into the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
inline bool frt_queue<data_type>::ISR_put (const data_type& item)
    4a14:	cf 93       	push	r28
    4a16:	df 93       	push	r29
    4a18:	1f 92       	push	r1
    4a1a:	cd b7       	in	r28, 0x3d	; 61
    4a1c:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    4a1e:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;						// Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToBackFromISR (handle, &item, &shouldSwitch));
    4a20:	20 e0       	ldi	r18, 0x00	; 0
    4a22:	ae 01       	movw	r20, r28
    4a24:	4f 5f       	subi	r20, 0xFF	; 255
    4a26:	5f 4f       	sbci	r21, 0xFF	; 255
    4a28:	fc 01       	movw	r30, r24
    4a2a:	84 81       	ldd	r24, Z+4	; 0x04
    4a2c:	95 81       	ldd	r25, Z+5	; 0x05
    4a2e:	0e 94 34 13 	call	0x2668	; 0x2668 <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    4a32:	91 e0       	ldi	r25, 0x01	; 1
    4a34:	81 11       	cpse	r24, r1
    4a36:	01 c0       	rjmp	.+2      	; 0x4a3a <_ZN9frt_queueIiE7ISR_putERKi+0x26>
    4a38:	90 e0       	ldi	r25, 0x00	; 0
}
    4a3a:	89 2f       	mov	r24, r25
    4a3c:	0f 90       	pop	r0
    4a3e:	df 91       	pop	r29
    4a40:	cf 91       	pop	r28
    4a42:	08 95       	ret

00004a44 <_ZN9frt_queueIjE7butt_inERKj>:
		 *  \b not be used within an interrupt service routine. 
		 *  @param item Reference to the item which is going to be (rudely) put into 
		 *              the front of the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool butt_in (const data_type& item)
    4a44:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToFront (handle, &item, ticks_to_wait)));
    4a46:	fc 01       	movw	r30, r24
    4a48:	26 81       	ldd	r18, Z+6	; 0x06
    4a4a:	37 81       	ldd	r19, Z+7	; 0x07
    4a4c:	40 85       	ldd	r20, Z+8	; 0x08
    4a4e:	51 85       	ldd	r21, Z+9	; 0x09
    4a50:	01 e0       	ldi	r16, 0x01	; 1
    4a52:	84 81       	ldd	r24, Z+4	; 0x04
    4a54:	95 81       	ldd	r25, Z+5	; 0x05
    4a56:	0e 94 99 12 	call	0x2532	; 0x2532 <xQueueGenericSend>
    4a5a:	91 e0       	ldi	r25, 0x01	; 1
    4a5c:	81 11       	cpse	r24, r1
    4a5e:	01 c0       	rjmp	.+2      	; 0x4a62 <_ZN9frt_queueIjE7butt_inERKj+0x1e>
    4a60:	90 e0       	ldi	r25, 0x00	; 0
		}
    4a62:	89 2f       	mov	r24, r25
    4a64:	0f 91       	pop	r16
    4a66:	08 95       	ret

00004a68 <_ZN9frt_queueIjE3putERKj>:
		 *  an item into the front of the queue so it will be retreived first, use 
		 *  \c butt_in() instead. This method must \b not be used within an ISR.
		 *  @param item Reference to the item which is going to be put into the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool put (const data_type& item)
    4a68:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToBack (handle, &item, ticks_to_wait)));
    4a6a:	fc 01       	movw	r30, r24
    4a6c:	26 81       	ldd	r18, Z+6	; 0x06
    4a6e:	37 81       	ldd	r19, Z+7	; 0x07
    4a70:	40 85       	ldd	r20, Z+8	; 0x08
    4a72:	51 85       	ldd	r21, Z+9	; 0x09
    4a74:	00 e0       	ldi	r16, 0x00	; 0
    4a76:	84 81       	ldd	r24, Z+4	; 0x04
    4a78:	95 81       	ldd	r25, Z+5	; 0x05
    4a7a:	0e 94 99 12 	call	0x2532	; 0x2532 <xQueueGenericSend>
    4a7e:	91 e0       	ldi	r25, 0x01	; 1
    4a80:	81 11       	cpse	r24, r1
    4a82:	01 c0       	rjmp	.+2      	; 0x4a86 <_ZN9frt_queueIjE3putERKj+0x1e>
    4a84:	90 e0       	ldi	r25, 0x00	; 0
		}
    4a86:	89 2f       	mov	r24, r25
    4a88:	0f 91       	pop	r16
    4a8a:	08 95       	ret

00004a8c <_ZN9frt_queueIiE7butt_inERKi>:
		 *  \b not be used within an interrupt service routine. 
		 *  @param item Reference to the item which is going to be (rudely) put into 
		 *              the front of the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool butt_in (const data_type& item)
    4a8c:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToFront (handle, &item, ticks_to_wait)));
    4a8e:	fc 01       	movw	r30, r24
    4a90:	26 81       	ldd	r18, Z+6	; 0x06
    4a92:	37 81       	ldd	r19, Z+7	; 0x07
    4a94:	40 85       	ldd	r20, Z+8	; 0x08
    4a96:	51 85       	ldd	r21, Z+9	; 0x09
    4a98:	01 e0       	ldi	r16, 0x01	; 1
    4a9a:	84 81       	ldd	r24, Z+4	; 0x04
    4a9c:	95 81       	ldd	r25, Z+5	; 0x05
    4a9e:	0e 94 99 12 	call	0x2532	; 0x2532 <xQueueGenericSend>
    4aa2:	91 e0       	ldi	r25, 0x01	; 1
    4aa4:	81 11       	cpse	r24, r1
    4aa6:	01 c0       	rjmp	.+2      	; 0x4aaa <_ZN9frt_queueIiE7butt_inERKi+0x1e>
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
		}
    4aaa:	89 2f       	mov	r24, r25
    4aac:	0f 91       	pop	r16
    4aae:	08 95       	ret

00004ab0 <_ZN9frt_queueIiE3putERKi>:
		 *  an item into the front of the queue so it will be retreived first, use 
		 *  \c butt_in() instead. This method must \b not be used within an ISR.
		 *  @param item Reference to the item which is going to be put into the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool put (const data_type& item)
    4ab0:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToBack (handle, &item, ticks_to_wait)));
    4ab2:	fc 01       	movw	r30, r24
    4ab4:	26 81       	ldd	r18, Z+6	; 0x06
    4ab6:	37 81       	ldd	r19, Z+7	; 0x07
    4ab8:	40 85       	ldd	r20, Z+8	; 0x08
    4aba:	51 85       	ldd	r21, Z+9	; 0x09
    4abc:	00 e0       	ldi	r16, 0x00	; 0
    4abe:	84 81       	ldd	r24, Z+4	; 0x04
    4ac0:	95 81       	ldd	r25, Z+5	; 0x05
    4ac2:	0e 94 99 12 	call	0x2532	; 0x2532 <xQueueGenericSend>
    4ac6:	91 e0       	ldi	r25, 0x01	; 1
    4ac8:	81 11       	cpse	r24, r1
    4aca:	01 c0       	rjmp	.+2      	; 0x4ace <_ZN9frt_queueIiE3putERKi+0x1e>
    4acc:	90 e0       	ldi	r25, 0x00	; 0
		}
    4ace:	89 2f       	mov	r24, r25
    4ad0:	0f 91       	pop	r16
    4ad2:	08 95       	ret

00004ad4 <_Z8CCPWritePVhh>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    4ad4:	0f 93       	push	r16
    4ad6:	cf 93       	push	r28
    4ad8:	df 93       	push	r29
    4ada:	1f 92       	push	r1
    4adc:	cd b7       	in	r28, 0x3d	; 61
    4ade:	de b7       	in	r29, 0x3e	; 62
	#if defined __GNUC__
	uint8_t volatile saved_sreg = SREG;
    4ae0:	2f b7       	in	r18, 0x3f	; 63
    4ae2:	29 83       	std	Y+1, r18	; 0x01
	cli();
    4ae4:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
	#ifdef RAMPZ
	RAMPZ = 0;
    4ae6:	1b be       	out	0x3b, r1	; 59
	"out   %3, r16"	      "\n\t"
	"st     Z,  %1"       "\n\t"
	:
	: "r" (tmpAddr), "r" (value), "M" (0xD8), "i" (&CCP)
	: "r16", "r30", "r31"
	);
    4ae8:	fc 01       	movw	r30, r24
    4aea:	08 ed       	ldi	r16, 0xD8	; 216
    4aec:	04 bf       	out	0x34, r16	; 52
    4aee:	60 83       	st	Z, r22

	SREG = saved_sreg;
    4af0:	89 81       	ldd	r24, Y+1	; 0x01
    4af2:	8f bf       	out	0x3f, r24	; 63
	#endif
}
    4af4:	0f 90       	pop	r0
    4af6:	df 91       	pop	r29
    4af8:	cf 91       	pop	r28
    4afa:	0f 91       	pop	r16
    4afc:	08 95       	ret

00004afe <main>:
 *  reset.
 *  @return This is a real-time microcontroller program which doesn't return. Ever.
 */

int main (void)
{
    4afe:	ef 92       	push	r14
    4b00:	ff 92       	push	r15
    4b02:	0f 93       	push	r16
    4b04:	1f 93       	push	r17
    4b06:	cf 93       	push	r28
    4b08:	df 93       	push	r29
    4b0a:	cd b7       	in	r28, 0x3d	; 61
    4b0c:	de b7       	in	r29, 0x3e	; 62
    4b0e:	c1 54       	subi	r28, 0x41	; 65
    4b10:	d1 09       	sbc	r29, r1
    4b12:	cd bf       	out	0x3d, r28	; 61
    4b14:	de bf       	out	0x3e, r29	; 62
	cli();
    4b16:	f8 94       	cli
	// Configure the system clock
	{	
		// Enable the 32MHz internal RC oscillator and the external 32KHz oscillator
		OSC.CTRL |= (1 << OSC_RC32MEN_bp);
    4b18:	e0 e5       	ldi	r30, 0x50	; 80
    4b1a:	f0 e0       	ldi	r31, 0x00	; 0
    4b1c:	80 81       	ld	r24, Z
    4b1e:	82 60       	ori	r24, 0x02	; 2
    4b20:	80 83       	st	Z, r24
		do {} while((OSC.STATUS & (1 << OSC_RC32MRDY_bp)) != (1 << OSC_RC32MRDY_bp));
    4b22:	81 81       	ldd	r24, Z+1	; 0x01
    4b24:	81 ff       	sbrs	r24, 1
    4b26:	fd cf       	rjmp	.-6      	; 0x4b22 <main+0x24>
		// Enable the DFLL auto-calibration
//		DFLLRC32M.CTRL = (1 << DFLL_ENABLE_bp);
//		DFLLRC2M.CTRL = (1 << DFLL_ENABLE_bp);

		// Select the clock
		CCPWrite(&(CLK.CTRL),((CLK.CTRL & ~CLK_SCLKSEL_gm) | (1 << CLK_SCLKSEL0_bp)));
    4b28:	60 91 40 00 	lds	r22, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    4b2c:	68 7f       	andi	r22, 0xF8	; 248
    4b2e:	61 60       	ori	r22, 0x01	; 1
    4b30:	80 e4       	ldi	r24, 0x40	; 64
    4b32:	90 e0       	ldi	r25, 0x00	; 0
    4b34:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <_Z8CCPWritePVhh>
		// Enable the RTC as an external oscillator
		//CLK.RTCCTRL = (CLK_RTCSRC_TOSC_gc | CLK_RTCEN_bm);
		// CCPWrite(&(CLK.RTCCTRL),(CLK_RTCSRC_TOSC_gc | CLK_RTCEN_bm));
		
		// Disable the 2MHz internal RC oscillator
		OSC.CTRL &= ~(1 << OSC_RC2MEN_bp);
    4b38:	e0 e5       	ldi	r30, 0x50	; 80
    4b3a:	f0 e0       	ldi	r31, 0x00	; 0
    4b3c:	80 81       	ld	r24, Z
    4b3e:	8e 7f       	andi	r24, 0xFE	; 254
    4b40:	80 83       	st	Z, r24
	}
	
	// Disable the watchdog timer unless it's needed later. This is important because
	// sometimes the watchdog timer may have been left on...and it tends to stay on	 
	wdt_disable ();
    4b42:	9d ef       	ldi	r25, 0xFD	; 253
    4b44:	88 ed       	ldi	r24, 0xD8	; 216
    4b46:	08 b6       	in	r0, 0x38	; 56
    4b48:	18 be       	out	0x38, r1	; 56
    4b4a:	84 bf       	out	0x34, r24	; 52
    4b4c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    4b50:	08 be       	out	0x38, r0	; 56

	// Configure a serial port which can be used by a task to print debugging infor-
	// mation, or to allow user interaction, or for whatever use is appropriate.  The
	// serial port will be used by the user interface task after setup is complete and
	// the task scheduler has been started by the function vTaskStartScheduler()
	rs232 ser_dev(0,&USARTE0); // Create a serial device on USART E0
    4b52:	40 ea       	ldi	r20, 0xA0	; 160
    4b54:	5a e0       	ldi	r21, 0x0A	; 10
    4b56:	60 e0       	ldi	r22, 0x00	; 0
    4b58:	70 e0       	ldi	r23, 0x00	; 0
    4b5a:	ce 01       	movw	r24, r28
    4b5c:	01 96       	adiw	r24, 0x01	; 1
    4b5e:	0e 94 0e 21 	call	0x421c	; 0x421c <_ZN5rs232C1EjP12USART_struct>
	ser_dev << clrscr << "FreeRTOS Xmega Testing Program" << endl << endl;
    4b62:	67 e0       	ldi	r22, 0x07	; 7
    4b64:	ce 01       	movw	r24, r28
    4b66:	01 96       	adiw	r24, 0x01	; 1
    4b68:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    4b6c:	8c 01       	movw	r16, r24
    4b6e:	6c e2       	ldi	r22, 0x2C	; 44
    4b70:	72 e2       	ldi	r23, 0x22	; 34
    4b72:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN8emstream4putsEPKc>
    4b76:	66 e0       	ldi	r22, 0x06	; 6
    4b78:	c8 01       	movw	r24, r16
    4b7a:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
    4b7e:	66 e0       	ldi	r22, 0x06	; 6
    4b80:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN8emstreamlsE15ser_manipulator>
	
	I2CMaster i2c(&TWIE, 62000, &ser_dev);
    4b84:	8e 01       	movw	r16, r28
    4b86:	0f 5f       	subi	r16, 0xFF	; 255
    4b88:	1f 4f       	sbci	r17, 0xFF	; 255
    4b8a:	20 e3       	ldi	r18, 0x30	; 48
    4b8c:	32 ef       	ldi	r19, 0xF2	; 242
    4b8e:	40 e0       	ldi	r20, 0x00	; 0
    4b90:	50 e0       	ldi	r21, 0x00	; 0
    4b92:	60 ea       	ldi	r22, 0xA0	; 160
    4b94:	74 e0       	ldi	r23, 0x04	; 4
    4b96:	ce 01       	movw	r24, r28
    4b98:	4e 96       	adiw	r24, 0x1e	; 30
    4b9a:	0e 94 3e 09 	call	0x127c	; 0x127c <_ZN9I2CMasterC1EP10TWI_structmP8emstream>

	// I2CAgent i2cAgent();
	
	MMA8451 mma8451(&i2c, &ser_dev);
    4b9e:	a8 01       	movw	r20, r16
    4ba0:	be 01       	movw	r22, r28
    4ba2:	62 5e       	subi	r22, 0xE2	; 226
    4ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ba6:	ce 01       	movw	r24, r28
    4ba8:	c7 96       	adiw	r24, 0x37	; 55
    4baa:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_ZN7MMA8451C1EP9I2CMasterP8emstream>
	
	//hi = i2c.is_ready(85);
	
	// The user interface is at low priority; it could have been run in the idle task
	// but it is desired to exercise the RTOS more thoroughly in this test program
	new task_user ("UserInt", task_priority (0), 128, &ser_dev);
    4bae:	82 e1       	ldi	r24, 0x12	; 18
    4bb0:	90 e0       	ldi	r25, 0x00	; 0
    4bb2:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <_Znwj>
    4bb6:	20 e8       	ldi	r18, 0x80	; 128
    4bb8:	30 e0       	ldi	r19, 0x00	; 0
    4bba:	40 e0       	ldi	r20, 0x00	; 0
    4bbc:	6b e4       	ldi	r22, 0x4B	; 75
    4bbe:	72 e2       	ldi	r23, 0x22	; 34
    4bc0:	0e 94 15 0c 	call	0x182a	; 0x182a <_ZN9task_userC1EPKchjP8emstream>
	
	new task_sonar ("Sonar", task_priority (2), 128, &ser_dev, &mma8451);
    4bc4:	88 e1       	ldi	r24, 0x18	; 24
    4bc6:	90 e0       	ldi	r25, 0x00	; 0
    4bc8:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <_Znwj>
    4bcc:	9e 01       	movw	r18, r28
    4bce:	29 5c       	subi	r18, 0xC9	; 201
    4bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    4bd2:	79 01       	movw	r14, r18
    4bd4:	20 e8       	ldi	r18, 0x80	; 128
    4bd6:	30 e0       	ldi	r19, 0x00	; 0
    4bd8:	42 e0       	ldi	r20, 0x02	; 2
    4bda:	63 e5       	ldi	r22, 0x53	; 83
    4bdc:	72 e2       	ldi	r23, 0x22	; 34
    4bde:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <_ZN10task_sonarC1EPKchjP8emstreamP7MMA8451>
	
	// Enable high level interrupts and global interrupts
	PMIC_CTRL = (1 << PMIC_HILVLEN_bp | 1 << PMIC_MEDLVLEN_bp | 1 << PMIC_LOLVLEN_bp);
    4be2:	87 e0       	ldi	r24, 0x07	; 7
    4be4:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    4be8:	78 94       	sei
	
	// Here's where the RTOS scheduler is started up. It should never exit as long as
	// power is on and the microcontroller isn't rebooted
	vTaskStartScheduler ();
    4bea:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <vTaskStartScheduler>
}
    4bee:	80 e0       	ldi	r24, 0x00	; 0
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	cf 5b       	subi	r28, 0xBF	; 191
    4bf4:	df 4f       	sbci	r29, 0xFF	; 255
    4bf6:	cd bf       	out	0x3d, r28	; 61
    4bf8:	de bf       	out	0x3e, r29	; 62
    4bfa:	df 91       	pop	r29
    4bfc:	cf 91       	pop	r28
    4bfe:	1f 91       	pop	r17
    4c00:	0f 91       	pop	r16
    4c02:	ff 90       	pop	r15
    4c04:	ef 90       	pop	r14
    4c06:	08 95       	ret

00004c08 <_GLOBAL__sub_I_counter>:
    4c08:	cf 92       	push	r12
    4c0a:	df 92       	push	r13
    4c0c:	ef 92       	push	r14
    4c0e:	ff 92       	push	r15
    4c10:	0f 93       	push	r16
    4c12:	1f 93       	push	r17
    4c14:	cf 93       	push	r28
    4c16:	df 93       	push	r29

#include "task_user.h"                      // Header for user interface task
#include "task_sonar.h"

volatile int counter;
frt_text_queue print_ser_queue (32, NULL, 10);
    4c18:	0a e0       	ldi	r16, 0x0A	; 10
    4c1a:	10 e0       	ldi	r17, 0x00	; 0
    4c1c:	20 e0       	ldi	r18, 0x00	; 0
    4c1e:	30 e0       	ldi	r19, 0x00	; 0
    4c20:	40 e0       	ldi	r20, 0x00	; 0
    4c22:	50 e0       	ldi	r21, 0x00	; 0
    4c24:	60 e2       	ldi	r22, 0x20	; 32
    4c26:	70 e0       	ldi	r23, 0x00	; 0
    4c28:	8e e5       	ldi	r24, 0x5E	; 94
    4c2a:	93 e3       	ldi	r25, 0x33	; 51
    4c2c:	0e 94 af 1c 	call	0x395e	; 0x395e <_ZN14frt_text_queueC1EjP8emstreamm>

template <class data_type>
frt_base_queue<data_type>::frt_base_queue (emstream* p_ser_dev)
{
	// Save the pointer to a serial devide so it may be used for debugging
	p_serial = p_ser_dev;
    4c30:	c4 e5       	ldi	r28, 0x54	; 84
    4c32:	d3 e3       	ldi	r29, 0x33	; 51
    4c34:	1a 82       	std	Y+2, r1	; 0x02
    4c36:	1b 82       	std	Y+3, r1	; 0x03
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    4c38:	8d e5       	ldi	r24, 0x5D	; 93
    4c3a:	92 e2       	ldi	r25, 0x22	; 34
    4c3c:	88 83       	st	Y, r24
    4c3e:	99 83       	std	Y+1, r25	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    4c40:	40 e0       	ldi	r20, 0x00	; 0
    4c42:	62 e0       	ldi	r22, 0x02	; 2
    4c44:	8f ef       	ldi	r24, 0xFF	; 255
    4c46:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <xQueueGenericCreate>
    4c4a:	8c 83       	std	Y+4, r24	; 0x04
    4c4c:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    4c4e:	0f 2e       	mov	r0, r31
    4c50:	fa e0       	ldi	r31, 0x0A	; 10
    4c52:	cf 2e       	mov	r12, r31
    4c54:	d1 2c       	mov	r13, r1
    4c56:	e1 2c       	mov	r14, r1
    4c58:	f1 2c       	mov	r15, r1
    4c5a:	f0 2d       	mov	r31, r0
    4c5c:	ce 82       	std	Y+6, r12	; 0x06
    4c5e:	df 82       	std	Y+7, r13	; 0x07
    4c60:	e8 86       	std	Y+8, r14	; 0x08
    4c62:	f9 86       	std	Y+9, r15	; 0x09
    4c64:	ca e4       	ldi	r28, 0x4A	; 74
    4c66:	d3 e3       	ldi	r29, 0x33	; 51
    4c68:	1a 82       	std	Y+2, r1	; 0x02
    4c6a:	1b 82       	std	Y+3, r1	; 0x03
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    4c6c:	01 e8       	ldi	r16, 0x81	; 129
    4c6e:	12 e2       	ldi	r17, 0x22	; 34
    4c70:	08 83       	st	Y, r16
    4c72:	19 83       	std	Y+1, r17	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    4c74:	40 e0       	ldi	r20, 0x00	; 0
    4c76:	62 e0       	ldi	r22, 0x02	; 2
    4c78:	8f ef       	ldi	r24, 0xFF	; 255
    4c7a:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <xQueueGenericCreate>
    4c7e:	8c 83       	std	Y+4, r24	; 0x04
    4c80:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    4c82:	ce 82       	std	Y+6, r12	; 0x06
    4c84:	df 82       	std	Y+7, r13	; 0x07
    4c86:	e8 86       	std	Y+8, r14	; 0x08
    4c88:	f9 86       	std	Y+9, r15	; 0x09
    4c8a:	c0 e4       	ldi	r28, 0x40	; 64
    4c8c:	d3 e3       	ldi	r29, 0x33	; 51
    4c8e:	1a 82       	std	Y+2, r1	; 0x02
    4c90:	1b 82       	std	Y+3, r1	; 0x03
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    4c92:	08 83       	st	Y, r16
    4c94:	19 83       	std	Y+1, r17	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    4c96:	40 e0       	ldi	r20, 0x00	; 0
    4c98:	62 e0       	ldi	r22, 0x02	; 2
    4c9a:	8f ef       	ldi	r24, 0xFF	; 255
    4c9c:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <xQueueGenericCreate>
    4ca0:	8c 83       	std	Y+4, r24	; 0x04
    4ca2:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    4ca4:	ce 82       	std	Y+6, r12	; 0x06
    4ca6:	df 82       	std	Y+7, r13	; 0x07
    4ca8:	e8 86       	std	Y+8, r14	; 0x08
    4caa:	f9 86       	std	Y+9, r15	; 0x09
    4cac:	c6 e3       	ldi	r28, 0x36	; 54
    4cae:	d3 e3       	ldi	r29, 0x33	; 51
    4cb0:	1a 82       	std	Y+2, r1	; 0x02
    4cb2:	1b 82       	std	Y+3, r1	; 0x03
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    4cb4:	08 83       	st	Y, r16
    4cb6:	19 83       	std	Y+1, r17	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    4cb8:	40 e0       	ldi	r20, 0x00	; 0
    4cba:	62 e0       	ldi	r22, 0x02	; 2
    4cbc:	8f ef       	ldi	r24, 0xFF	; 255
    4cbe:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <xQueueGenericCreate>
    4cc2:	8c 83       	std	Y+4, r24	; 0x04
    4cc4:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    4cc6:	ce 82       	std	Y+6, r12	; 0x06
    4cc8:	df 82       	std	Y+7, r13	; 0x07
    4cca:	e8 86       	std	Y+8, r14	; 0x08
    4ccc:	f9 86       	std	Y+9, r15	; 0x09
    4cce:	cc e2       	ldi	r28, 0x2C	; 44
    4cd0:	d3 e3       	ldi	r29, 0x33	; 51
    4cd2:	1a 82       	std	Y+2, r1	; 0x02
    4cd4:	1b 82       	std	Y+3, r1	; 0x03
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    4cd6:	08 83       	st	Y, r16
    4cd8:	19 83       	std	Y+1, r17	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    4cda:	40 e0       	ldi	r20, 0x00	; 0
    4cdc:	62 e0       	ldi	r22, 0x02	; 2
    4cde:	8f ef       	ldi	r24, 0xFF	; 255
    4ce0:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <xQueueGenericCreate>
    4ce4:	8c 83       	std	Y+4, r24	; 0x04
    4ce6:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    4ce8:	ce 82       	std	Y+6, r12	; 0x06
    4cea:	df 82       	std	Y+7, r13	; 0x07
    4cec:	e8 86       	std	Y+8, r14	; 0x08
    4cee:	f9 86       	std	Y+9, r15	; 0x09
	sei();
	
	// Here's where the RTOS scheduler is started up. It should never exit as long as
	// power is on and the microcontroller isn't rebooted
	vTaskStartScheduler ();
}
    4cf0:	df 91       	pop	r29
    4cf2:	cf 91       	pop	r28
    4cf4:	1f 91       	pop	r17
    4cf6:	0f 91       	pop	r16
    4cf8:	ff 90       	pop	r15
    4cfa:	ef 90       	pop	r14
    4cfc:	df 90       	pop	r13
    4cfe:	cf 90       	pop	r12
    4d00:	08 95       	ret

00004d02 <__mulsi3>:
    4d02:	db 01       	movw	r26, r22
    4d04:	8f 93       	push	r24
    4d06:	9f 93       	push	r25
    4d08:	0e 94 db 26 	call	0x4db6	; 0x4db6 <__muluhisi3>
    4d0c:	bf 91       	pop	r27
    4d0e:	af 91       	pop	r26
    4d10:	a2 9f       	mul	r26, r18
    4d12:	80 0d       	add	r24, r0
    4d14:	91 1d       	adc	r25, r1
    4d16:	a3 9f       	mul	r26, r19
    4d18:	90 0d       	add	r25, r0
    4d1a:	b2 9f       	mul	r27, r18
    4d1c:	90 0d       	add	r25, r0
    4d1e:	11 24       	eor	r1, r1
    4d20:	08 95       	ret

00004d22 <__udivmodsi4>:
    4d22:	a1 e2       	ldi	r26, 0x21	; 33
    4d24:	1a 2e       	mov	r1, r26
    4d26:	aa 1b       	sub	r26, r26
    4d28:	bb 1b       	sub	r27, r27
    4d2a:	fd 01       	movw	r30, r26
    4d2c:	0d c0       	rjmp	.+26     	; 0x4d48 <__udivmodsi4_ep>

00004d2e <__udivmodsi4_loop>:
    4d2e:	aa 1f       	adc	r26, r26
    4d30:	bb 1f       	adc	r27, r27
    4d32:	ee 1f       	adc	r30, r30
    4d34:	ff 1f       	adc	r31, r31
    4d36:	a2 17       	cp	r26, r18
    4d38:	b3 07       	cpc	r27, r19
    4d3a:	e4 07       	cpc	r30, r20
    4d3c:	f5 07       	cpc	r31, r21
    4d3e:	20 f0       	brcs	.+8      	; 0x4d48 <__udivmodsi4_ep>
    4d40:	a2 1b       	sub	r26, r18
    4d42:	b3 0b       	sbc	r27, r19
    4d44:	e4 0b       	sbc	r30, r20
    4d46:	f5 0b       	sbc	r31, r21

00004d48 <__udivmodsi4_ep>:
    4d48:	66 1f       	adc	r22, r22
    4d4a:	77 1f       	adc	r23, r23
    4d4c:	88 1f       	adc	r24, r24
    4d4e:	99 1f       	adc	r25, r25
    4d50:	1a 94       	dec	r1
    4d52:	69 f7       	brne	.-38     	; 0x4d2e <__udivmodsi4_loop>
    4d54:	60 95       	com	r22
    4d56:	70 95       	com	r23
    4d58:	80 95       	com	r24
    4d5a:	90 95       	com	r25
    4d5c:	9b 01       	movw	r18, r22
    4d5e:	ac 01       	movw	r20, r24
    4d60:	bd 01       	movw	r22, r26
    4d62:	cf 01       	movw	r24, r30
    4d64:	08 95       	ret

00004d66 <__divmodsi4>:
    4d66:	05 2e       	mov	r0, r21
    4d68:	97 fb       	bst	r25, 7
    4d6a:	1e f4       	brtc	.+6      	; 0x4d72 <__divmodsi4+0xc>
    4d6c:	00 94       	com	r0
    4d6e:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <__negsi2>
    4d72:	57 fd       	sbrc	r21, 7
    4d74:	07 d0       	rcall	.+14     	; 0x4d84 <__divmodsi4_neg2>
    4d76:	0e 94 91 26 	call	0x4d22	; 0x4d22 <__udivmodsi4>
    4d7a:	07 fc       	sbrc	r0, 7
    4d7c:	03 d0       	rcall	.+6      	; 0x4d84 <__divmodsi4_neg2>
    4d7e:	4e f4       	brtc	.+18     	; 0x4d92 <__divmodsi4_exit>
    4d80:	0c 94 ca 26 	jmp	0x4d94	; 0x4d94 <__negsi2>

00004d84 <__divmodsi4_neg2>:
    4d84:	50 95       	com	r21
    4d86:	40 95       	com	r20
    4d88:	30 95       	com	r19
    4d8a:	21 95       	neg	r18
    4d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d8e:	4f 4f       	sbci	r20, 0xFF	; 255
    4d90:	5f 4f       	sbci	r21, 0xFF	; 255

00004d92 <__divmodsi4_exit>:
    4d92:	08 95       	ret

00004d94 <__negsi2>:
    4d94:	90 95       	com	r25
    4d96:	80 95       	com	r24
    4d98:	70 95       	com	r23
    4d9a:	61 95       	neg	r22
    4d9c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d9e:	8f 4f       	sbci	r24, 0xFF	; 255
    4da0:	9f 4f       	sbci	r25, 0xFF	; 255
    4da2:	08 95       	ret

00004da4 <__tablejump2__>:
    4da4:	ee 0f       	add	r30, r30
    4da6:	ff 1f       	adc	r31, r31
    4da8:	88 1f       	adc	r24, r24
    4daa:	8b bf       	out	0x3b, r24	; 59
    4dac:	07 90       	elpm	r0, Z+
    4dae:	f6 91       	elpm	r31, Z
    4db0:	e0 2d       	mov	r30, r0
    4db2:	1b be       	out	0x3b, r1	; 59
    4db4:	19 94       	eijmp

00004db6 <__muluhisi3>:
    4db6:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <__umulhisi3>
    4dba:	a5 9f       	mul	r26, r21
    4dbc:	90 0d       	add	r25, r0
    4dbe:	b4 9f       	mul	r27, r20
    4dc0:	90 0d       	add	r25, r0
    4dc2:	a4 9f       	mul	r26, r20
    4dc4:	80 0d       	add	r24, r0
    4dc6:	91 1d       	adc	r25, r1
    4dc8:	11 24       	eor	r1, r1
    4dca:	08 95       	ret

00004dcc <__umulhisi3>:
    4dcc:	a2 9f       	mul	r26, r18
    4dce:	b0 01       	movw	r22, r0
    4dd0:	b3 9f       	mul	r27, r19
    4dd2:	c0 01       	movw	r24, r0
    4dd4:	a3 9f       	mul	r26, r19
    4dd6:	70 0d       	add	r23, r0
    4dd8:	81 1d       	adc	r24, r1
    4dda:	11 24       	eor	r1, r1
    4ddc:	91 1d       	adc	r25, r1
    4dde:	b2 9f       	mul	r27, r18
    4de0:	70 0d       	add	r23, r0
    4de2:	81 1d       	adc	r24, r1
    4de4:	11 24       	eor	r1, r1
    4de6:	91 1d       	adc	r25, r1
    4de8:	08 95       	ret

00004dea <memcpy>:
    4dea:	fb 01       	movw	r30, r22
    4dec:	dc 01       	movw	r26, r24
    4dee:	02 c0       	rjmp	.+4      	; 0x4df4 <memcpy+0xa>
    4df0:	01 90       	ld	r0, Z+
    4df2:	0d 92       	st	X+, r0
    4df4:	41 50       	subi	r20, 0x01	; 1
    4df6:	50 40       	sbci	r21, 0x00	; 0
    4df8:	d8 f7       	brcc	.-10     	; 0x4df0 <memcpy+0x6>
    4dfa:	08 95       	ret

00004dfc <memset>:
    4dfc:	dc 01       	movw	r26, r24
    4dfe:	01 c0       	rjmp	.+2      	; 0x4e02 <memset+0x6>
    4e00:	6d 93       	st	X+, r22
    4e02:	41 50       	subi	r20, 0x01	; 1
    4e04:	50 40       	sbci	r21, 0x00	; 0
    4e06:	e0 f7       	brcc	.-8      	; 0x4e00 <memset+0x4>
    4e08:	08 95       	ret

00004e0a <strncpy>:
    4e0a:	fb 01       	movw	r30, r22
    4e0c:	dc 01       	movw	r26, r24
    4e0e:	41 50       	subi	r20, 0x01	; 1
    4e10:	50 40       	sbci	r21, 0x00	; 0
    4e12:	48 f0       	brcs	.+18     	; 0x4e26 <strncpy+0x1c>
    4e14:	01 90       	ld	r0, Z+
    4e16:	0d 92       	st	X+, r0
    4e18:	00 20       	and	r0, r0
    4e1a:	c9 f7       	brne	.-14     	; 0x4e0e <strncpy+0x4>
    4e1c:	01 c0       	rjmp	.+2      	; 0x4e20 <strncpy+0x16>
    4e1e:	1d 92       	st	X+, r1
    4e20:	41 50       	subi	r20, 0x01	; 1
    4e22:	50 40       	sbci	r21, 0x00	; 0
    4e24:	e0 f7       	brcc	.-8      	; 0x4e1e <strncpy+0x14>
    4e26:	08 95       	ret

00004e28 <ultoa>:
    4e28:	25 32       	cpi	r18, 0x25	; 37
    4e2a:	31 05       	cpc	r19, r1
    4e2c:	20 f4       	brcc	.+8      	; 0x4e36 <ultoa+0xe>
    4e2e:	22 30       	cpi	r18, 0x02	; 2
    4e30:	10 f0       	brcs	.+4      	; 0x4e36 <ultoa+0xe>
    4e32:	0c 94 1f 27 	jmp	0x4e3e	; 0x4e3e <__ultoa_ncheck>
    4e36:	fa 01       	movw	r30, r20
    4e38:	10 82       	st	Z, r1
    4e3a:	ca 01       	movw	r24, r20
    4e3c:	08 95       	ret

00004e3e <__ultoa_ncheck>:
    4e3e:	bb 27       	eor	r27, r27

00004e40 <__ultoa_common>:
    4e40:	fa 01       	movw	r30, r20
    4e42:	a6 2f       	mov	r26, r22
    4e44:	62 17       	cp	r22, r18
    4e46:	71 05       	cpc	r23, r1
    4e48:	81 05       	cpc	r24, r1
    4e4a:	91 05       	cpc	r25, r1
    4e4c:	33 0b       	sbc	r19, r19
    4e4e:	30 fb       	bst	r19, 0
    4e50:	66 f0       	brts	.+24     	; 0x4e6a <__ultoa_common+0x2a>
    4e52:	aa 27       	eor	r26, r26
    4e54:	66 0f       	add	r22, r22
    4e56:	77 1f       	adc	r23, r23
    4e58:	88 1f       	adc	r24, r24
    4e5a:	99 1f       	adc	r25, r25
    4e5c:	aa 1f       	adc	r26, r26
    4e5e:	a2 17       	cp	r26, r18
    4e60:	10 f0       	brcs	.+4      	; 0x4e66 <__ultoa_common+0x26>
    4e62:	a2 1b       	sub	r26, r18
    4e64:	63 95       	inc	r22
    4e66:	38 50       	subi	r19, 0x08	; 8
    4e68:	a9 f7       	brne	.-22     	; 0x4e54 <__ultoa_common+0x14>
    4e6a:	a0 5d       	subi	r26, 0xD0	; 208
    4e6c:	aa 33       	cpi	r26, 0x3A	; 58
    4e6e:	08 f0       	brcs	.+2      	; 0x4e72 <__ultoa_common+0x32>
    4e70:	a9 5d       	subi	r26, 0xD9	; 217
    4e72:	a1 93       	st	Z+, r26
    4e74:	36 f7       	brtc	.-52     	; 0x4e42 <__ultoa_common+0x2>
    4e76:	b1 11       	cpse	r27, r1
    4e78:	b1 93       	st	Z+, r27
    4e7a:	10 82       	st	Z, r1
    4e7c:	ca 01       	movw	r24, r20
    4e7e:	0c 94 66 27 	jmp	0x4ecc	; 0x4ecc <strrev>

00004e82 <utoa>:
    4e82:	45 32       	cpi	r20, 0x25	; 37
    4e84:	51 05       	cpc	r21, r1
    4e86:	20 f4       	brcc	.+8      	; 0x4e90 <utoa+0xe>
    4e88:	42 30       	cpi	r20, 0x02	; 2
    4e8a:	10 f0       	brcs	.+4      	; 0x4e90 <utoa+0xe>
    4e8c:	0c 94 4c 27 	jmp	0x4e98	; 0x4e98 <__utoa_ncheck>
    4e90:	fb 01       	movw	r30, r22
    4e92:	10 82       	st	Z, r1
    4e94:	cb 01       	movw	r24, r22
    4e96:	08 95       	ret

00004e98 <__utoa_ncheck>:
    4e98:	bb 27       	eor	r27, r27

00004e9a <__utoa_common>:
    4e9a:	fb 01       	movw	r30, r22
    4e9c:	55 27       	eor	r21, r21
    4e9e:	aa 27       	eor	r26, r26
    4ea0:	88 0f       	add	r24, r24
    4ea2:	99 1f       	adc	r25, r25
    4ea4:	aa 1f       	adc	r26, r26
    4ea6:	a4 17       	cp	r26, r20
    4ea8:	10 f0       	brcs	.+4      	; 0x4eae <__utoa_common+0x14>
    4eaa:	a4 1b       	sub	r26, r20
    4eac:	83 95       	inc	r24
    4eae:	50 51       	subi	r21, 0x10	; 16
    4eb0:	b9 f7       	brne	.-18     	; 0x4ea0 <__utoa_common+0x6>
    4eb2:	a0 5d       	subi	r26, 0xD0	; 208
    4eb4:	aa 33       	cpi	r26, 0x3A	; 58
    4eb6:	08 f0       	brcs	.+2      	; 0x4eba <__utoa_common+0x20>
    4eb8:	a9 5d       	subi	r26, 0xD9	; 217
    4eba:	a1 93       	st	Z+, r26
    4ebc:	00 97       	sbiw	r24, 0x00	; 0
    4ebe:	79 f7       	brne	.-34     	; 0x4e9e <__utoa_common+0x4>
    4ec0:	b1 11       	cpse	r27, r1
    4ec2:	b1 93       	st	Z+, r27
    4ec4:	11 92       	st	Z+, r1
    4ec6:	cb 01       	movw	r24, r22
    4ec8:	0c 94 66 27 	jmp	0x4ecc	; 0x4ecc <strrev>

00004ecc <strrev>:
    4ecc:	dc 01       	movw	r26, r24
    4ece:	fc 01       	movw	r30, r24
    4ed0:	67 2f       	mov	r22, r23
    4ed2:	71 91       	ld	r23, Z+
    4ed4:	77 23       	and	r23, r23
    4ed6:	e1 f7       	brne	.-8      	; 0x4ed0 <strrev+0x4>
    4ed8:	32 97       	sbiw	r30, 0x02	; 2
    4eda:	04 c0       	rjmp	.+8      	; 0x4ee4 <strrev+0x18>
    4edc:	7c 91       	ld	r23, X
    4ede:	6d 93       	st	X+, r22
    4ee0:	70 83       	st	Z, r23
    4ee2:	62 91       	ld	r22, -Z
    4ee4:	ae 17       	cp	r26, r30
    4ee6:	bf 07       	cpc	r27, r31
    4ee8:	c8 f3       	brcs	.-14     	; 0x4edc <strrev+0x10>
    4eea:	08 95       	ret

00004eec <_exit>:
    4eec:	f8 94       	cli

00004eee <__stop_program>:
    4eee:	ff cf       	rjmp	.-2      	; 0x4eee <__stop_program>
