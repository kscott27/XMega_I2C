
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004196  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e0  00802000  00004196  0000422a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000010ce  008020e0  008020e0  0000430a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000430a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000433c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000808  00000000  00000000  0000437c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012cc2  00000000  00000000  00004b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000060be  00000000  00000000  00017846  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000052c7  00000000  00000000  0001d904  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000175c  00000000  00000000  00022bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005ee1  00000000  00000000  00024328  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000715c  00000000  00000000  0002a209  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000748  00000000  00000000  00031365  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__ctors_end>
       4:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
       8:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
       c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      10:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      14:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      18:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      1c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      20:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      24:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      28:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      2c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      30:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      34:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      38:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      3c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      40:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      44:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      48:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      4c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      50:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      54:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      58:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_22>
      5c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      60:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      64:	0c 94 e4 1a 	jmp	0x35c8	; 0x35c8 <__vector_25>
      68:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      6c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      70:	0c 94 42 1b 	jmp	0x3684	; 0x3684 <__vector_28>
      74:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      78:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      7c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      80:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      84:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      88:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      8c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      90:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      94:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      98:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      9c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      a0:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      a4:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      a8:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      ac:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      b0:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      b4:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      b8:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      bc:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      c0:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      c4:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      c8:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      cc:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      d0:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      d4:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      d8:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      dc:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      e0:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      e4:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      e8:	0c 94 5c 1c 	jmp	0x38b8	; 0x38b8 <__vector_58>
      ec:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      f0:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      f4:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      f8:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
      fc:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     100:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     104:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     108:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     10c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     110:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     114:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     118:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     11c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     120:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     124:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     128:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     12c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     130:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     134:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     138:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     13c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     140:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     144:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     148:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     14c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     150:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     154:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     158:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     15c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     160:	0c 94 a0 1b 	jmp	0x3740	; 0x3740 <__vector_88>
     164:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     168:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     16c:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__vector_91>
     170:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     174:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     178:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     17c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     180:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     184:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     188:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     18c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     190:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     194:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     198:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     19c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1a0:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1a4:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1a8:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1ac:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1b0:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1b4:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1b8:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1bc:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1c0:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1c4:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1c8:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1cc:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1d0:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1d4:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1d8:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1dc:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1e0:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1e4:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1e8:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1ec:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1f0:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1f4:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1f8:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
     1fc:	d0 18       	sub	r13, r0
     1fe:	d3 18       	sub	r13, r3
     200:	d6 18       	sub	r13, r6
     202:	d9 18       	sub	r13, r9
     204:	dc 18       	sub	r13, r12
     206:	df 18       	sub	r13, r15
     208:	e1 18       	sub	r14, r1
     20a:	f2 18       	sub	r15, r2
     20c:	fa 18       	sub	r15, r10
     20e:	04 19       	sub	r16, r4
     210:	02 19       	sub	r16, r2

00000212 <__trampolines_start>:
     212:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <_ZN9frt_queueIjE9not_emptyEv>
     216:	0c 94 04 19 	jmp	0x3208	; 0x3208 <_ZN8emstreamlsE15ser_manipulator+0x86>
     21a:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <_ZN9task_user3runEv>
     21e:	0c 94 84 1d 	jmp	0x3b08	; 0x3b08 <_ZN9frt_queueIiE10get_a_copyEv>
     222:	0c 94 57 1f 	jmp	0x3eae	; 0x3eae <_GLOBAL__sub_I_counter>
     226:	0c 94 7b 18 	jmp	0x30f6	; 0x30f6 <_ZN8emstream12clear_screenEv>
     22a:	0c 94 f2 1c 	jmp	0x39e4	; 0x39e4 <_ZN9frt_queueIjE12num_items_inEv>
     22e:	0c 94 78 18 	jmp	0x30f0	; 0x30f0 <_ZN8emstream14check_for_charEv>
     232:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <_ZN6MB120212RangeCommand11writePacketER9frt_queueIhE>
     236:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <_ZN9frt_queueIiE8is_emptyEv>
     23a:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <_ZN9frt_queueIjE11ISR_butt_inERKj>
     23e:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <_ZN9frt_queueIjE3putERKj>
     242:	0c 94 f2 18 	jmp	0x31e4	; 0x31e4 <_ZN8emstreamlsE15ser_manipulator+0x62>
     246:	0c 94 e1 18 	jmp	0x31c2	; 0x31c2 <_ZN8emstreamlsE15ser_manipulator+0x40>
     24a:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <_ZN10task_sonar3runEv>
     24e:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <_ZN8emstream13ready_to_sendEv>
     252:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <_call_static_run_method>
     256:	0c 94 15 1d 	jmp	0x3a2a	; 0x3a2a <_ZN9frt_queueIiE9not_emptyEv>
     25a:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <_ZN9frt_queueIjE7ISR_putERKj>
     25e:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <_ZN8emstreamlsE15ser_manipulator+0x24>
     262:	0c 94 9c 1e 	jmp	0x3d38	; 0x3d38 <_ZN9frt_queueIiE7butt_inERKi>
     266:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <_ZN9frt_queueIjE13ISR_not_emptyEv>
     26a:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <_ZN8emstreamlsE15ser_manipulator+0x36>
     26e:	0c 94 60 1e 	jmp	0x3cc0	; 0x3cc0 <_ZN9frt_queueIiE7ISR_putERKi>
     272:	0c 94 e8 1c 	jmp	0x39d0	; 0x39d0 <_ZN9frt_queueIiE12ISR_is_emptyEv>
     276:	0c 94 d7 1d 	jmp	0x3bae	; 0x3bae <_ZN9frt_queueIjE7ISR_getEv>
     27a:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <_ZN9frt_queueIiE11ISR_butt_inERKi>
     27e:	0c 94 51 1d 	jmp	0x3aa2	; 0x3aa2 <_ZN9frt_queueIjE3getEPj>
     282:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <__cxa_pure_virtual>
     286:	0c 94 df 18 	jmp	0x31be	; 0x31be <_ZN8emstreamlsE15ser_manipulator+0x3c>
     28a:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <_ZN14frt_text_queue14check_for_charEv>
     28e:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <_ZN8emstreamlsE15ser_manipulator+0x1e>
     292:	0c 94 b1 14 	jmp	0x2962	; 0x2962 <_ZN8frt_task12print_statusER8emstream>
     296:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <_ZN5rs23212clear_screenEv>
     29a:	0c 94 5d 1d 	jmp	0x3aba	; 0x3aba <_ZN9frt_queueIjE3getEv>
     29e:	0c 94 02 19 	jmp	0x3204	; 0x3204 <_ZN8emstreamlsE15ser_manipulator+0x82>
     2a2:	0c 94 ab 1d 	jmp	0x3b56	; 0x3b56 <_ZN9frt_queueIiE3getEv>
     2a6:	0c 94 34 03 	jmp	0x668	; 0x668 <_ZN9I2CMaster11Transmitter11StatusState7executeERh>
     2aa:	0c 94 0e 1d 	jmp	0x3a1c	; 0x3a1c <_ZN9frt_queueIiE12num_items_inEv>
     2ae:	0c 94 d6 1c 	jmp	0x39ac	; 0x39ac <_ZN9frt_queueIiE16ISR_num_items_inEv>
     2b2:	0c 94 2a 1d 	jmp	0x3a54	; 0x3a54 <_ZN9frt_queueIjE10get_a_copyERj>
     2b6:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <_ZN8emstreamlsE15ser_manipulator+0x72>
     2ba:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <_ZN5rs2327putcharEc>
     2be:	0c 94 00 1e 	jmp	0x3c00	; 0x3c00 <_ZN9frt_queueIiE7ISR_getEv>
     2c2:	0c 94 cc 1c 	jmp	0x3998	; 0x3998 <_ZN9frt_queueIjE12ISR_is_emptyEv>
     2c6:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <_ZN9frt_queueIiE3getEPi>
     2ca:	0c 94 25 03 	jmp	0x64a	; 0x64a <_ZN9I2CMaster11Transmitter10StartState7executeERh>
     2ce:	0c 94 24 16 	jmp	0x2c48	; 0x2c48 <_ZN14frt_text_queue7putcharEc>
     2d2:	0c 94 ef 0d 	jmp	0x1bde	; 0x1bde <prvIdleTask>
     2d6:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <_ZN9frt_queueIjE10get_a_copyEv>
     2da:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <_ZN9frt_queueIjE16ISR_num_items_inEv>
     2de:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <_ZN14frt_text_queue7getcharEv>
     2e2:	0c 94 78 1e 	jmp	0x3cf0	; 0x3cf0 <_ZN9frt_queueIjE7butt_inERKj>
     2e6:	0c 94 ae 1e 	jmp	0x3d5c	; 0x3d5c <_ZN9frt_queueIiE3putERKi>
     2ea:	0c 94 78 1d 	jmp	0x3af0	; 0x3af0 <_ZN9frt_queueIiE10get_a_copyERi>
     2ee:	0c 94 7a 18 	jmp	0x30f4	; 0x30f4 <_ZN8emstream12transmit_nowEv>
     2f2:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <_ZN5rs2327getcharEv>
     2f6:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <_ZN8emstream7getcharEv>
     2fa:	0c 94 ef 1d 	jmp	0x3bde	; 0x3bde <_ZN9frt_queueIiE7ISR_getEPi>
     2fe:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <_ZN9frt_queueIjE8is_emptyEv>
     302:	0c 94 d6 18 	jmp	0x31ac	; 0x31ac <_ZN8emstreamlsE15ser_manipulator+0x2a>
     306:	0c 94 c6 1d 	jmp	0x3b8c	; 0x3b8c <_ZN9frt_queueIjE7ISR_getEPj>
     30a:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <_ZN9I2CMaster11Transmitter9DoneState7executeERh>
     30e:	0c 94 dd 1c 	jmp	0x39ba	; 0x39ba <_ZN9frt_queueIiE13ISR_not_emptyEv>
     312:	0c 94 d9 18 	jmp	0x31b2	; 0x31b2 <_ZN8emstreamlsE15ser_manipulator+0x30>
     316:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <_ZN5rs23214check_for_charEv>

0000031a <__trampolines_end>:
     31a:	53 6f       	ori	r21, 0xF3	; 243
     31c:	6e 61       	ori	r22, 0x1E	; 30
     31e:	72 3a       	cpi	r23, 0xA2	; 162
     320:	20 00       	.word	0x0020	; ????

00000322 <_ZZN9task_user11show_statusEvE3__c_4>:
     322:	2c 20 54 43 43 30 43 43 41 3d 00                    , TCC0CCA=.

0000032d <_ZZN9task_user11show_statusEvE3__c_3>:
     32d:	2f 00                                               /.

0000032f <_ZZN9task_user11show_statusEvE3__c_2>:
     32f:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

0000033d <_ZZN9task_user11show_statusEvE3__c_1>:
     33d:	54 69 6d 65 3a 20 00                                Time: .

00000344 <_ZZN9task_user11show_statusEvE3__c_0>:
     344:	4d 61 72 20 31 35 20 32 30 31 38 00                 Mar 15 2018.

00000350 <_ZZN9task_user11show_statusEvE3__c>:
     350:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     360:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

0000036f <_ZZN9task_user18print_help_messageEvE3__c_10>:
     36f:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

0000037e <_ZZN9task_user18print_help_messageEvE3__c_9>:
     37e:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     38e:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

00000399 <_ZZN9task_user18print_help_messageEvE3__c_8>:
     399:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     3a9:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

000003b7 <_ZZN9task_user18print_help_messageEvE3__c_7>:
     3b7:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     3c7:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     3d7:	6d 61 74 69 6f 6e 00                                mation.

000003de <_ZZN9task_user18print_help_messageEvE3__c_6>:
     3de:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     3ee:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

000003ff <_ZZN9task_user18print_help_messageEvE3__c_5>:
     3ff:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     40f:	65 20 6f 6e 6c 79 3a 00                             e only:.

00000417 <_ZZN9task_user18print_help_messageEvE3__c_4>:
     417:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     427:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

00000433 <_ZZN9task_user18print_help_messageEvE3__c_3>:
     433:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     443:	68 65 20 41 56 52 00                                he AVR.

0000044a <_ZZN9task_user18print_help_messageEvE3__c_2>:
     44a:	20 68 65 6c 70 00                                    help.

00000450 <_ZZN9task_user18print_help_messageEvE3__c_1>:
     450:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     460:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

0000046f <_ZZN9task_user18print_help_messageEvE3__c_0>:
     46f:	1b 5b 33 30 6d 00                                   .[30m.

00000475 <_ZZN9task_user18print_help_messageEvE3__c>:
     475:	1b 5b 34 36 6d 00                                   .[46m.

0000047b <_ZZN9task_user3runEvE3__c_3>:
     47b:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     48b:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

00000498 <_ZZN9task_user3runEvE3__c_2>:
     498:	3a 57 54 46 3f 00                                   :WTF?.

0000049e <_ZZN9task_user3runEvE3__c_1>:
     49e:	45 78 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     Exit command mod
     4ae:	65 00                                               e.

000004b0 <_ZZN9task_user3runEvE3__c_0>:
     4b0:	52 65 73 65 74 74 69 6e 67 20 41 56 52 00           Resetting AVR.

000004be <_ZZN9task_user3runEvE3__c>:
     4be:	50 72 65 73 73 20 43 74 72 6c 2d 41 20 66 6f 72     Press Ctrl-A for
     4ce:	20 63 6f 6d 6d 61 6e 64 20 6d 6f 64 65 00            command mode.

000004dc <_ZZN8frt_task15emergency_resetEvE3__c_0>:
     4dc:	52 65 73 65 74 74 69 6e 67 00                       Resetting.

000004e6 <_ZZN8frt_task15emergency_resetEvE3__c>:
     4e6:	45 52 52 4f 52 20 69 6e 20 74 61 73 6b 20 00        ERROR in task .

000004f5 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     4f5:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     505:	61 73 6b 20 00                                      ask .

0000050a <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     50a:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

00000518 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     518:	20 63 72 65 61 74 65 64 00                           created.

00000521 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     521:	54 61 73 6b 20 00                                   Task .

00000527 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_1>:
     527:	1b 5b 32 32 6d 00                                   .[22m.

0000052d <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_0>:
     52d:	54 61 73 6b 3a 20 00                                Task: .

00000534 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c>:
     534:	1b 5b 31 6d 00                                      .[1m.

00000539 <_ZZ17print_task_stacksP8emstreamE3__c_1>:
     539:	1b 5b 32 32 6d 00                                   .[22m.

0000053f <_ZZ17print_task_stacksP8emstreamE3__c_0>:
     53f:	54 61 73 6b 3a 20 49 44 4c 45 00                    Task: IDLE.

0000054a <_ZZ17print_task_stacksP8emstreamE3__c>:
     54a:	1b 5b 31 6d 00                                      .[1m.

0000054f <_ZZ15print_task_listP8emstreamE3__c_9>:
     54f:	09 09 00                                            ...

00000552 <_ZZ15print_task_listP8emstreamE3__c_8>:
     552:	2f 00                                               /.

00000554 <_ZZ15print_task_listP8emstreamE3__c_7>:
     554:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

0000055f <_ZZ15print_task_listP8emstreamE3__c_6>:
     55f:	09 2d 2d 2d 2d 00                                   .----.

00000565 <_ZZ15print_task_listP8emstreamE3__c_5>:
     565:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

00000571 <_ZZ15print_task_listP8emstreamE3__c_4>:
     571:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

00000582 <_ZZ15print_task_listP8emstreamE3__c_3>:
     582:	09 52 75 6e 73 00                                   .Runs.

00000588 <_ZZ15print_task_listP8emstreamE3__c_2>:
     588:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

00000594 <_ZZ15print_task_listP8emstreamE3__c_1>:
     594:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

000005a5 <_ZZ15print_task_listP8emstreamE3__c_0>:
     5a5:	09 53 74 61 63 6b 00                                .Stack.

000005ac <_ZZ15print_task_listP8emstreamE3__c>:
     5ac:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

000005b7 <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     5b7:	09 00                                               ..

000005b9 <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     5b9:	09 00                                               ..

000005bb <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     5bb:	2f 00                                               /.

000005bd <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     5bd:	09 00                                               ..

000005bf <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     5bf:	09 00                                               ..

000005c1 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_2>:
     5c1:	1b 5b 32 32 6d 00                                   .[22m.

000005c7 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_1>:
     5c7:	1b 5b 31 6d 00                                      .[1m.

000005cc <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_0>:
     5cc:	1b 5b 31 6d 00                                      .[1m.

000005d1 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c>:
     5d1:	20 20 00                                              .

000005d4 <_call_static_run_method>:
 *                the pointer is used to find the task's static run method
 */

extern "C" inline void _call_static_run_method (frt_task* p_task)
{
	frt_task::_call_users_run_method (p_task);
     5d4:	0e 94 49 13 	call	0x2692	; 0x2692 <_ZN8frt_task22_call_users_run_methodEPS_>

000005d8 <__ctors_start>:
     5d8:	57 1f       	adc	r21, r23

000005da <__ctors_end>:
     5da:	11 24       	eor	r1, r1
     5dc:	1f be       	out	0x3f, r1	; 63
     5de:	cf ef       	ldi	r28, 0xFF	; 255
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	df e3       	ldi	r29, 0x3F	; 63
     5e4:	de bf       	out	0x3e, r29	; 62
     5e6:	00 e0       	ldi	r16, 0x00	; 0
     5e8:	0c bf       	out	0x3c, r16	; 60
     5ea:	18 be       	out	0x38, r1	; 56
     5ec:	19 be       	out	0x39, r1	; 57
     5ee:	1a be       	out	0x3a, r1	; 58
     5f0:	1b be       	out	0x3b, r1	; 59

000005f2 <__do_copy_data>:
     5f2:	10 e2       	ldi	r17, 0x20	; 32
     5f4:	a0 e0       	ldi	r26, 0x00	; 0
     5f6:	b0 e2       	ldi	r27, 0x20	; 32
     5f8:	e6 e9       	ldi	r30, 0x96	; 150
     5fa:	f1 e4       	ldi	r31, 0x41	; 65
     5fc:	00 e0       	ldi	r16, 0x00	; 0
     5fe:	0b bf       	out	0x3b, r16	; 59
     600:	02 c0       	rjmp	.+4      	; 0x606 <__do_copy_data+0x14>
     602:	07 90       	elpm	r0, Z+
     604:	0d 92       	st	X+, r0
     606:	a0 3e       	cpi	r26, 0xE0	; 224
     608:	b1 07       	cpc	r27, r17
     60a:	d9 f7       	brne	.-10     	; 0x602 <__do_copy_data+0x10>
     60c:	1b be       	out	0x3b, r1	; 59

0000060e <__do_clear_bss>:
     60e:	21 e3       	ldi	r18, 0x31	; 49
     610:	a0 ee       	ldi	r26, 0xE0	; 224
     612:	b0 e2       	ldi	r27, 0x20	; 32
     614:	01 c0       	rjmp	.+2      	; 0x618 <.do_clear_bss_start>

00000616 <.do_clear_bss_loop>:
     616:	1d 92       	st	X+, r1

00000618 <.do_clear_bss_start>:
     618:	ae 3a       	cpi	r26, 0xAE	; 174
     61a:	b2 07       	cpc	r27, r18
     61c:	e1 f7       	brne	.-8      	; 0x616 <.do_clear_bss_loop>

0000061e <__do_global_ctors>:
     61e:	12 e0       	ldi	r17, 0x02	; 2
     620:	cd ee       	ldi	r28, 0xED	; 237
     622:	d2 e0       	ldi	r29, 0x02	; 2
     624:	00 e0       	ldi	r16, 0x00	; 0
     626:	06 c0       	rjmp	.+12     	; 0x634 <__do_global_ctors+0x16>
     628:	21 97       	sbiw	r28, 0x01	; 1
     62a:	01 09       	sbc	r16, r1
     62c:	80 2f       	mov	r24, r16
     62e:	fe 01       	movw	r30, r28
     630:	0e 94 25 20 	call	0x404a	; 0x404a <__tablejump2__>
     634:	cc 3e       	cpi	r28, 0xEC	; 236
     636:	d1 07       	cpc	r29, r17
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	08 07       	cpc	r16, r24
     63c:	a9 f7       	brne	.-22     	; 0x628 <__do_global_ctors+0xa>
     63e:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <main>
     642:	0c 94 c9 20 	jmp	0x4192	; 0x4192 <_exit>

00000646 <__bad_interrupt>:
     646:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000064a <_ZN9I2CMaster11Transmitter10StartState7executeERh>:
	}
	else
	{
		return false;
	}
}
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	fc 01       	movw	r30, r24
     650:	a6 81       	ldd	r26, Z+6	; 0x06
     652:	b7 81       	ldd	r27, Z+7	; 0x07
     654:	eb 01       	movw	r28, r22
     656:	98 81       	ld	r25, Y
     658:	99 0f       	add	r25, r25
     65a:	16 96       	adiw	r26, 0x06	; 6
     65c:	9c 93       	st	X, r25
     65e:	82 81       	ldd	r24, Z+2	; 0x02
     660:	93 81       	ldd	r25, Z+3	; 0x03
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	08 95       	ret

00000668 <_ZN9I2CMaster11Transmitter11StatusState7executeERh>:
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	1f 92       	push	r1
     66e:	1f 92       	push	r1
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
     674:	dc 01       	movw	r26, r24
     676:	18 96       	adiw	r26, 0x08	; 8
     678:	8d 91       	ld	r24, X+
     67a:	9c 91       	ld	r25, X
     67c:	19 97       	sbiw	r26, 0x09	; 9
     67e:	89 83       	std	Y+1, r24	; 0x01
     680:	9a 83       	std	Y+2, r25	; 0x02
     682:	29 81       	ldd	r18, Y+1	; 0x01
     684:	3a 81       	ldd	r19, Y+2	; 0x02
     686:	21 50       	subi	r18, 0x01	; 1
     688:	31 09       	sbc	r19, r1
     68a:	29 83       	std	Y+1, r18	; 0x01
     68c:	3a 83       	std	Y+2, r19	; 0x02
     68e:	23 2b       	or	r18, r19
     690:	91 f0       	breq	.+36     	; 0x6b6 <_ZN9I2CMaster11Transmitter11StatusState7executeERh+0x4e>
     692:	16 96       	adiw	r26, 0x06	; 6
     694:	ed 91       	ld	r30, X+
     696:	fc 91       	ld	r31, X
     698:	17 97       	sbiw	r26, 0x07	; 7
     69a:	94 81       	ldd	r25, Z+4	; 0x04
     69c:	94 fd       	sbrc	r25, 4
     69e:	f1 cf       	rjmp	.-30     	; 0x682 <_ZN9I2CMaster11Transmitter11StatusState7executeERh+0x1a>
     6a0:	0a c0       	rjmp	.+20     	; 0x6b6 <_ZN9I2CMaster11Transmitter11StatusState7executeERh+0x4e>
     6a2:	14 96       	adiw	r26, 0x04	; 4
     6a4:	8d 91       	ld	r24, X+
     6a6:	9c 91       	ld	r25, X
     6a8:	15 97       	sbiw	r26, 0x05	; 5
     6aa:	0a c0       	rjmp	.+20     	; 0x6c0 <_ZN9I2CMaster11Transmitter11StatusState7executeERh+0x58>
     6ac:	12 96       	adiw	r26, 0x02	; 2
     6ae:	8d 91       	ld	r24, X+
     6b0:	9c 91       	ld	r25, X
     6b2:	13 97       	sbiw	r26, 0x03	; 3
     6b4:	05 c0       	rjmp	.+10     	; 0x6c0 <_ZN9I2CMaster11Transmitter11StatusState7executeERh+0x58>
     6b6:	29 81       	ldd	r18, Y+1	; 0x01
     6b8:	3a 81       	ldd	r19, Y+2	; 0x02
     6ba:	23 2b       	or	r18, r19
     6bc:	b9 f7       	brne	.-18     	; 0x6ac <_ZN9I2CMaster11Transmitter11StatusState7executeERh+0x44>
     6be:	f1 cf       	rjmp	.-30     	; 0x6a2 <_ZN9I2CMaster11Transmitter11StatusState7executeERh+0x3a>
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <_ZN9I2CMaster11Transmitter9DoneState7executeERh>:
     6ca:	fc 01       	movw	r30, r24
     6cc:	82 81       	ldd	r24, Z+2	; 0x02
     6ce:	93 81       	ldd	r25, Z+3	; 0x03
     6d0:	08 95       	ret

000006d2 <_ZN9I2CMaster11TransmitterC1EP10TWI_struct>:
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	ec 01       	movw	r28, r24
     6dc:	8b 01       	movw	r16, r22
     6de:	80 e1       	ldi	r24, 0x10	; 16
     6e0:	97 e2       	ldi	r25, 0x27	; 39
     6e2:	8d 87       	std	Y+13, r24	; 0x0d
     6e4:	9e 87       	std	Y+14, r25	; 0x0e
     6e6:	88 e0       	ldi	r24, 0x08	; 8
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 d6 17 	call	0x2fac	; 0x2fac <_Znwj>
     6ee:	2a e0       	ldi	r18, 0x0A	; 10
     6f0:	30 e2       	ldi	r19, 0x20	; 32
     6f2:	fc 01       	movw	r30, r24
     6f4:	20 83       	st	Z, r18
     6f6:	31 83       	std	Z+1, r19	; 0x01
     6f8:	06 83       	std	Z+6, r16	; 0x06
     6fa:	17 83       	std	Z+7, r17	; 0x07
     6fc:	8a 83       	std	Y+2, r24	; 0x02
     6fe:	9b 83       	std	Y+3, r25	; 0x03
     700:	8a e0       	ldi	r24, 0x0A	; 10
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 d6 17 	call	0x2fac	; 0x2fac <_Znwj>
     708:	fc 01       	movw	r30, r24
     70a:	8d 85       	ldd	r24, Y+13	; 0x0d
     70c:	9e 85       	ldd	r25, Y+14	; 0x0e
     70e:	20 e1       	ldi	r18, 0x10	; 16
     710:	30 e2       	ldi	r19, 0x20	; 32
     712:	20 83       	st	Z, r18
     714:	31 83       	std	Z+1, r19	; 0x01
     716:	06 83       	std	Z+6, r16	; 0x06
     718:	17 83       	std	Z+7, r17	; 0x07
     71a:	80 87       	std	Z+8, r24	; 0x08
     71c:	91 87       	std	Z+9, r25	; 0x09
     71e:	ec 83       	std	Y+4, r30	; 0x04
     720:	fd 83       	std	Y+5, r31	; 0x05
     722:	88 e0       	ldi	r24, 0x08	; 8
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 d6 17 	call	0x2fac	; 0x2fac <_Znwj>
     72a:	26 e1       	ldi	r18, 0x16	; 22
     72c:	30 e2       	ldi	r19, 0x20	; 32
     72e:	fc 01       	movw	r30, r24
     730:	20 83       	st	Z, r18
     732:	31 83       	std	Z+1, r19	; 0x01
     734:	06 83       	std	Z+6, r16	; 0x06
     736:	17 83       	std	Z+7, r17	; 0x07
     738:	88 87       	std	Y+8, r24	; 0x08
     73a:	99 87       	std	Y+9, r25	; 0x09
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	08 95       	ret

00000746 <_ZN9I2CMaster12set_baudrateEm>:
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	ec 01       	movw	r28, r24
     74c:	9a 01       	movw	r18, r20
     74e:	ab 01       	movw	r20, r22
     750:	22 0f       	add	r18, r18
     752:	33 1f       	adc	r19, r19
     754:	44 1f       	adc	r20, r20
     756:	55 1f       	adc	r21, r21
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	78 e4       	ldi	r23, 0x48	; 72
     75c:	88 ee       	ldi	r24, 0xE8	; 232
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <__udivmodsi4>
     764:	25 50       	subi	r18, 0x05	; 5
     766:	2c 83       	std	Y+4, r18	; 0x04
     768:	e8 81       	ld	r30, Y
     76a:	f9 81       	ldd	r31, Y+1	; 0x01
     76c:	25 83       	std	Z+5, r18	; 0x05
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	08 95       	ret

00000774 <_ZN9I2CMasterC1EP10TWI_structm>:
     774:	af 92       	push	r10
     776:	bf 92       	push	r11
     778:	cf 92       	push	r12
     77a:	df 92       	push	r13
     77c:	ef 92       	push	r14
     77e:	ff 92       	push	r15
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	8c 01       	movw	r16, r24
     78a:	eb 01       	movw	r28, r22
     78c:	69 01       	movw	r12, r18
     78e:	7a 01       	movw	r14, r20
     790:	dc 01       	movw	r26, r24
     792:	6d 93       	st	X+, r22
     794:	7c 93       	st	X, r23
     796:	fc 01       	movw	r30, r24
     798:	25 83       	std	Z+5, r18	; 0x05
     79a:	36 83       	std	Z+6, r19	; 0x06
     79c:	47 83       	std	Z+7, r20	; 0x07
     79e:	50 87       	std	Z+8, r21	; 0x08
     7a0:	8f e0       	ldi	r24, 0x0F	; 15
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 d6 17 	call	0x2fac	; 0x2fac <_Znwj>
     7a8:	5c 01       	movw	r10, r24
     7aa:	be 01       	movw	r22, r28
     7ac:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_ZN9I2CMaster11TransmitterC1EP10TWI_struct>
     7b0:	d8 01       	movw	r26, r16
     7b2:	53 96       	adiw	r26, 0x13	; 19
     7b4:	ad 92       	st	X+, r10
     7b6:	bc 92       	st	X, r11
     7b8:	54 97       	sbiw	r26, 0x14	; 20
     7ba:	c0 38       	cpi	r28, 0x80	; 128
     7bc:	b4 e0       	ldi	r27, 0x04	; 4
     7be:	db 07       	cpc	r29, r27
     7c0:	31 f4       	brne	.+12     	; 0x7ce <_ZN9I2CMasterC1EP10TWI_structm+0x5a>
     7c2:	80 e4       	ldi	r24, 0x40	; 64
     7c4:	96 e0       	ldi	r25, 0x06	; 6
     7c6:	f8 01       	movw	r30, r16
     7c8:	82 83       	std	Z+2, r24	; 0x02
     7ca:	93 83       	std	Z+3, r25	; 0x03
     7cc:	0b c0       	rjmp	.+22     	; 0x7e4 <_ZN9I2CMasterC1EP10TWI_structm+0x70>
     7ce:	c0 3a       	cpi	r28, 0xA0	; 160
     7d0:	f4 e0       	ldi	r31, 0x04	; 4
     7d2:	df 07       	cpc	r29, r31
     7d4:	39 f4       	brne	.+14     	; 0x7e4 <_ZN9I2CMasterC1EP10TWI_structm+0x70>
     7d6:	80 e8       	ldi	r24, 0x80	; 128
     7d8:	96 e0       	ldi	r25, 0x06	; 6
     7da:	d8 01       	movw	r26, r16
     7dc:	12 96       	adiw	r26, 0x02	; 2
     7de:	8d 93       	st	X+, r24
     7e0:	9c 93       	st	X, r25
     7e2:	13 97       	sbiw	r26, 0x03	; 3
     7e4:	d8 01       	movw	r26, r16
     7e6:	12 96       	adiw	r26, 0x02	; 2
     7e8:	ed 91       	ld	r30, X+
     7ea:	fc 91       	ld	r31, X
     7ec:	13 97       	sbiw	r26, 0x03	; 3
     7ee:	83 e0       	ldi	r24, 0x03	; 3
     7f0:	81 83       	std	Z+1, r24	; 0x01
     7f2:	12 96       	adiw	r26, 0x02	; 2
     7f4:	ed 91       	ld	r30, X+
     7f6:	fc 91       	ld	r31, X
     7f8:	13 97       	sbiw	r26, 0x03	; 3
     7fa:	88 e3       	ldi	r24, 0x38	; 56
     7fc:	80 8b       	std	Z+16, r24	; 0x10
     7fe:	12 96       	adiw	r26, 0x02	; 2
     800:	ed 91       	ld	r30, X+
     802:	fc 91       	ld	r31, X
     804:	13 97       	sbiw	r26, 0x03	; 3
     806:	81 8b       	std	Z+17, r24	; 0x11
     808:	82 e0       	ldi	r24, 0x02	; 2
     80a:	8a 83       	std	Y+2, r24	; 0x02
     80c:	b7 01       	movw	r22, r14
     80e:	a6 01       	movw	r20, r12
     810:	c8 01       	movw	r24, r16
     812:	0e 94 a3 03 	call	0x746	; 0x746 <_ZN9I2CMaster12set_baudrateEm>
     816:	8c 81       	ldd	r24, Y+4	; 0x04
     818:	8d 6c       	ori	r24, 0xCD	; 205
     81a:	8c 83       	std	Y+4, r24	; 0x04
     81c:	88 e0       	ldi	r24, 0x08	; 8
     81e:	89 83       	std	Y+1, r24	; 0x01
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	df 90       	pop	r13
     82e:	cf 90       	pop	r12
     830:	bf 90       	pop	r11
     832:	af 90       	pop	r10
     834:	08 95       	ret

00000836 <_ZN9I2CMaster5writeEhPhhj>:
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	1f 92       	push	r1
     840:	1f 92       	push	r1
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
     846:	dc 01       	movw	r26, r24
     848:	09 83       	std	Y+1, r16	; 0x01
     84a:	1a 83       	std	Y+2, r17	; 0x02
     84c:	ed 91       	ld	r30, X+
     84e:	fc 91       	ld	r31, X
     850:	11 97       	sbiw	r26, 0x01	; 1
     852:	66 0f       	add	r22, r22
     854:	66 83       	std	Z+6, r22	; 0x06
     856:	89 81       	ldd	r24, Y+1	; 0x01
     858:	9a 81       	ldd	r25, Y+2	; 0x02
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	89 83       	std	Y+1, r24	; 0x01
     85e:	9a 83       	std	Y+2, r25	; 0x02
     860:	89 2b       	or	r24, r25
     862:	d1 f1       	breq	.+116    	; 0x8d8 <_ZN9I2CMaster5writeEhPhhj+0xa2>
     864:	ed 91       	ld	r30, X+
     866:	fc 91       	ld	r31, X
     868:	11 97       	sbiw	r26, 0x01	; 1
     86a:	84 81       	ldd	r24, Z+4	; 0x04
     86c:	86 ff       	sbrs	r24, 6
     86e:	f3 cf       	rjmp	.-26     	; 0x856 <_ZN9I2CMaster5writeEhPhhj+0x20>
     870:	33 c0       	rjmp	.+102    	; 0x8d8 <_ZN9I2CMaster5writeEhPhhj+0xa2>
     872:	22 23       	and	r18, r18
     874:	49 f1       	breq	.+82     	; 0x8c8 <_ZN9I2CMaster5writeEhPhhj+0x92>
     876:	ba 01       	movw	r22, r20
     878:	21 50       	subi	r18, 0x01	; 1
     87a:	82 2f       	mov	r24, r18
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	01 96       	adiw	r24, 0x01	; 1
     880:	48 0f       	add	r20, r24
     882:	59 1f       	adc	r21, r25
     884:	09 83       	std	Y+1, r16	; 0x01
     886:	1a 83       	std	Y+2, r17	; 0x02
     888:	2d 91       	ld	r18, X+
     88a:	3c 91       	ld	r19, X
     88c:	11 97       	sbiw	r26, 0x01	; 1
     88e:	fb 01       	movw	r30, r22
     890:	81 91       	ld	r24, Z+
     892:	bf 01       	movw	r22, r30
     894:	f9 01       	movw	r30, r18
     896:	87 83       	std	Z+7, r24	; 0x07
     898:	29 81       	ldd	r18, Y+1	; 0x01
     89a:	3a 81       	ldd	r19, Y+2	; 0x02
     89c:	21 50       	subi	r18, 0x01	; 1
     89e:	31 09       	sbc	r19, r1
     8a0:	29 83       	std	Y+1, r18	; 0x01
     8a2:	3a 83       	std	Y+2, r19	; 0x02
     8a4:	23 2b       	or	r18, r19
     8a6:	f1 f0       	breq	.+60     	; 0x8e4 <_ZN9I2CMaster5writeEhPhhj+0xae>
     8a8:	ed 91       	ld	r30, X+
     8aa:	fc 91       	ld	r31, X
     8ac:	11 97       	sbiw	r26, 0x01	; 1
     8ae:	94 81       	ldd	r25, Z+4	; 0x04
     8b0:	94 fd       	sbrc	r25, 4
     8b2:	f2 cf       	rjmp	.-28     	; 0x898 <_ZN9I2CMaster5writeEhPhhj+0x62>
     8b4:	17 c0       	rjmp	.+46     	; 0x8e4 <_ZN9I2CMaster5writeEhPhhj+0xae>
     8b6:	ed 91       	ld	r30, X+
     8b8:	fc 91       	ld	r31, X
     8ba:	11 97       	sbiw	r26, 0x01	; 1
     8bc:	84 81       	ldd	r24, Z+4	; 0x04
     8be:	80 64       	ori	r24, 0x40	; 64
     8c0:	84 83       	std	Z+4, r24	; 0x04
     8c2:	46 17       	cp	r20, r22
     8c4:	57 07       	cpc	r21, r23
     8c6:	f1 f6       	brne	.-68     	; 0x884 <_ZN9I2CMaster5writeEhPhhj+0x4e>
     8c8:	ed 91       	ld	r30, X+
     8ca:	fc 91       	ld	r31, X
     8cc:	83 e0       	ldi	r24, 0x03	; 3
     8ce:	83 83       	std	Z+3, r24	; 0x03
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	0d c0       	rjmp	.+26     	; 0x8ee <_ZN9I2CMaster5writeEhPhhj+0xb8>
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	0b c0       	rjmp	.+22     	; 0x8ee <_ZN9I2CMaster5writeEhPhhj+0xb8>
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	9a 81       	ldd	r25, Y+2	; 0x02
     8dc:	89 2b       	or	r24, r25
     8de:	49 f6       	brne	.-110    	; 0x872 <_ZN9I2CMaster5writeEhPhhj+0x3c>
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	05 c0       	rjmp	.+10     	; 0x8ee <_ZN9I2CMaster5writeEhPhhj+0xb8>
     8e4:	29 81       	ldd	r18, Y+1	; 0x01
     8e6:	3a 81       	ldd	r19, Y+2	; 0x02
     8e8:	23 2b       	or	r18, r19
     8ea:	29 f7       	brne	.-54     	; 0x8b6 <_ZN9I2CMaster5writeEhPhhj+0x80>
     8ec:	f3 cf       	rjmp	.-26     	; 0x8d4 <_ZN9I2CMaster5writeEhPhhj+0x9e>
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	08 95       	ret

000008fc <_ZN9I2CMaster4readEhPhhj>:

bool I2CMaster::read (uint8_t slave_addr, uint8_t* data, uint8_t packet_len, uint16_t timeout)
{
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	00 d0       	rcall	.+0      	; 0x906 <_ZN9I2CMaster4readEhPhhj+0xa>
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62
     90a:	dc 01       	movw	r26, r24
	volatile uint16_t counter;
	volatile uint8_t i;
	counter = timeout;
     90c:	09 83       	std	Y+1, r16	; 0x01
     90e:	1a 83       	std	Y+2, r17	; 0x02
	
	interface->MASTER.ADDR = slave_addr << 1 | 1 << 0;
     910:	ed 91       	ld	r30, X+
     912:	fc 91       	ld	r31, X
     914:	11 97       	sbiw	r26, 0x01	; 1
     916:	66 0f       	add	r22, r22
     918:	61 60       	ori	r22, 0x01	; 1
     91a:	66 83       	std	Z+6, r22	; 0x06
	
	while ((--counter != 0) && !(interface->MASTER.STATUS & TWI_MASTER_RIF_bm)){ }
     91c:	89 81       	ldd	r24, Y+1	; 0x01
     91e:	9a 81       	ldd	r25, Y+2	; 0x02
     920:	01 97       	sbiw	r24, 0x01	; 1
     922:	89 83       	std	Y+1, r24	; 0x01
     924:	9a 83       	std	Y+2, r25	; 0x02
     926:	89 2b       	or	r24, r25
     928:	09 f4       	brne	.+2      	; 0x92c <_ZN9I2CMaster4readEhPhhj+0x30>
     92a:	47 c0       	rjmp	.+142    	; 0x9ba <_ZN9I2CMaster4readEhPhhj+0xbe>
     92c:	ed 91       	ld	r30, X+
     92e:	fc 91       	ld	r31, X
     930:	11 97       	sbiw	r26, 0x01	; 1
     932:	84 81       	ldd	r24, Z+4	; 0x04
     934:	88 23       	and	r24, r24
     936:	94 f7       	brge	.-28     	; 0x91c <_ZN9I2CMaster4readEhPhhj+0x20>
     938:	40 c0       	rjmp	.+128    	; 0x9ba <_ZN9I2CMaster4readEhPhhj+0xbe>
	if (counter != 0)
	{
		for (i = 0; i < packet_len; ++i)
     93a:	1b 82       	std	Y+3, r1	; 0x03
     93c:	8b 81       	ldd	r24, Y+3	; 0x03
     93e:	82 17       	cp	r24, r18
     940:	d8 f5       	brcc	.+118    	; 0x9b8 <_ZN9I2CMaster4readEhPhhj+0xbc>
	interface->MASTER.CTRLC |= (1<<TWI_MASTER_CMD0_bp);
}

void I2CMaster::byte_recv(void)
{
	interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     942:	32 e0       	ldi	r19, 0x02	; 2
	while ((--counter != 0) && !(interface->MASTER.STATUS & TWI_MASTER_RIF_bm)){ }
	if (counter != 0)
	{
		for (i = 0; i < packet_len; ++i)
		{
			counter = timeout;
     944:	09 83       	std	Y+1, r16	; 0x01
     946:	1a 83       	std	Y+2, r17	; 0x02
			while ((--counter != 0) && !(interface->MASTER.STATUS & TWI_MASTER_RIF_bm)){ }			
     948:	69 81       	ldd	r22, Y+1	; 0x01
     94a:	7a 81       	ldd	r23, Y+2	; 0x02
     94c:	61 50       	subi	r22, 0x01	; 1
     94e:	71 09       	sbc	r23, r1
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	67 2b       	or	r22, r23
     956:	c1 f1       	breq	.+112    	; 0x9c8 <_ZN9I2CMaster4readEhPhhj+0xcc>
     958:	ed 91       	ld	r30, X+
     95a:	fc 91       	ld	r31, X
     95c:	11 97       	sbiw	r26, 0x01	; 1
     95e:	94 81       	ldd	r25, Z+4	; 0x04
     960:	99 23       	and	r25, r25
     962:	94 f7       	brge	.-28     	; 0x948 <_ZN9I2CMaster4readEhPhhj+0x4c>
     964:	31 c0       	rjmp	.+98     	; 0x9c8 <_ZN9I2CMaster4readEhPhhj+0xcc>
			if (counter != 0)
			{
				data[i] = interface->MASTER.DATA;
     966:	9b 81       	ldd	r25, Y+3	; 0x03
     968:	ed 91       	ld	r30, X+
     96a:	fc 91       	ld	r31, X
     96c:	11 97       	sbiw	r26, 0x01	; 1
     96e:	87 81       	ldd	r24, Z+7	; 0x07
     970:	fa 01       	movw	r30, r20
     972:	e9 0f       	add	r30, r25
     974:	f1 1d       	adc	r31, r1
     976:	80 83       	st	Z, r24
				if (i < packet_len)
     978:	8b 81       	ldd	r24, Y+3	; 0x03
     97a:	82 17       	cp	r24, r18
     97c:	88 f4       	brcc	.+34     	; 0x9a0 <_ZN9I2CMaster4readEhPhhj+0xa4>
	interface->MASTER.CTRLC |= (1<<TWI_MASTER_CMD0_bp);
}

void I2CMaster::byte_recv(void)
{
	interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     97e:	ed 91       	ld	r30, X+
     980:	fc 91       	ld	r31, X
     982:	11 97       	sbiw	r26, 0x01	; 1
     984:	33 83       	std	Z+3, r19	; 0x03
			{
				data[i] = interface->MASTER.DATA;
				if (i < packet_len)
				{
					byte_recv();
					interface->MASTER.STATUS |= TWI_MASTER_RIF_bm;
     986:	ed 91       	ld	r30, X+
     988:	fc 91       	ld	r31, X
     98a:	11 97       	sbiw	r26, 0x01	; 1
     98c:	84 81       	ldd	r24, Z+4	; 0x04
     98e:	80 68       	ori	r24, 0x80	; 128
     990:	84 83       	std	Z+4, r24	; 0x04
	interface->MASTER.ADDR = slave_addr << 1 | 1 << 0;
	
	while ((--counter != 0) && !(interface->MASTER.STATUS & TWI_MASTER_RIF_bm)){ }
	if (counter != 0)
	{
		for (i = 0; i < packet_len; ++i)
     992:	8b 81       	ldd	r24, Y+3	; 0x03
     994:	8f 5f       	subi	r24, 0xFF	; 255
     996:	8b 83       	std	Y+3, r24	; 0x03
     998:	8b 81       	ldd	r24, Y+3	; 0x03
     99a:	82 17       	cp	r24, r18
     99c:	98 f2       	brcs	.-90     	; 0x944 <_ZN9I2CMaster4readEhPhhj+0x48>
     99e:	0c c0       	rjmp	.+24     	; 0x9b8 <_ZN9I2CMaster4readEhPhhj+0xbc>
	interface->MASTER.CTRLC |= TWI_MASTER_CMD_REPSTART_gc;
}

void I2CMaster::send_nack_stop(void)
{
	interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     9a0:	ed 91       	ld	r30, X+
     9a2:	fc 91       	ld	r31, X
     9a4:	11 97       	sbiw	r26, 0x01	; 1
     9a6:	87 e0       	ldi	r24, 0x07	; 7
     9a8:	83 83       	std	Z+3, r24	; 0x03
					interface->MASTER.STATUS |= TWI_MASTER_RIF_bm;
				}
				else
				{
					send_nack_stop();
					interface->MASTER.STATUS |= TWI_MASTER_RIF_bm;
     9aa:	ed 91       	ld	r30, X+
     9ac:	fc 91       	ld	r31, X
     9ae:	84 81       	ldd	r24, Z+4	; 0x04
     9b0:	80 68       	ori	r24, 0x80	; 128
     9b2:	84 83       	std	Z+4, r24	; 0x04
					return true;
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	0d c0       	rjmp	.+26     	; 0x9d2 <_ZN9I2CMaster4readEhPhhj+0xd6>
	}
	else
	{
		return false;
	}
}
     9b8:	0c c0       	rjmp	.+24     	; 0x9d2 <_ZN9I2CMaster4readEhPhhj+0xd6>
	counter = timeout;
	
	interface->MASTER.ADDR = slave_addr << 1 | 1 << 0;
	
	while ((--counter != 0) && !(interface->MASTER.STATUS & TWI_MASTER_RIF_bm)){ }
	if (counter != 0)
     9ba:	89 81       	ldd	r24, Y+1	; 0x01
     9bc:	9a 81       	ldd	r25, Y+2	; 0x02
     9be:	89 2b       	or	r24, r25
     9c0:	09 f0       	breq	.+2      	; 0x9c4 <_ZN9I2CMaster4readEhPhhj+0xc8>
     9c2:	bb cf       	rjmp	.-138    	; 0x93a <_ZN9I2CMaster4readEhPhhj+0x3e>
			}		
		}
	}
	else
	{
		return false;
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	05 c0       	rjmp	.+10     	; 0x9d2 <_ZN9I2CMaster4readEhPhhj+0xd6>
	{
		for (i = 0; i < packet_len; ++i)
		{
			counter = timeout;
			while ((--counter != 0) && !(interface->MASTER.STATUS & TWI_MASTER_RIF_bm)){ }			
			if (counter != 0)
     9c8:	69 81       	ldd	r22, Y+1	; 0x01
     9ca:	7a 81       	ldd	r23, Y+2	; 0x02
     9cc:	67 2b       	or	r22, r23
     9ce:	59 f6       	brne	.-106    	; 0x966 <_ZN9I2CMaster4readEhPhhj+0x6a>
					return true;
				}
			}
			else
			{
				return false;
     9d0:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return false;
	}
}
     9d2:	23 96       	adiw	r28, 0x03	; 3
     9d4:	cd bf       	out	0x3d, r28	; 61
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	08 95       	ret

000009e2 <_ZN6MB120212RangeCommand11writePacketER9frt_queueIhE>:
}

bool MB1202::is_ready (void)
{
	return i2c->is_ready(slave_addr);
};
     9e2:	db 01       	movw	r26, r22
     9e4:	bc 01       	movw	r22, r24
     9e6:	6e 5f       	subi	r22, 0xFE	; 254
     9e8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ea:	ed 91       	ld	r30, X+
     9ec:	fc 91       	ld	r31, X
     9ee:	11 97       	sbiw	r26, 0x01	; 1
     9f0:	01 90       	ld	r0, Z+
     9f2:	f0 81       	ld	r31, Z
     9f4:	e0 2d       	mov	r30, r0
     9f6:	cd 01       	movw	r24, r26
     9f8:	19 95       	eicall
     9fa:	08 95       	ret

000009fc <_ZN6MB1202C1EP9I2CMaster>:
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	ec 01       	movw	r28, r24
     a02:	68 83       	st	Y, r22
     a04:	79 83       	std	Y+1, r23	; 0x01
     a06:	1c 82       	std	Y+4, r1	; 0x04
     a08:	1d 82       	std	Y+5, r1	; 0x05
     a0a:	1e 82       	std	Y+6, r1	; 0x06
     a0c:	1f 82       	std	Y+7, r1	; 0x07
     a0e:	18 86       	std	Y+8, r1	; 0x08
     a10:	83 e0       	ldi	r24, 0x03	; 3
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 d6 17 	call	0x2fac	; 0x2fac <_Znwj>
     a18:	2c e1       	ldi	r18, 0x1C	; 28
     a1a:	30 e2       	ldi	r19, 0x20	; 32
     a1c:	fc 01       	movw	r30, r24
     a1e:	20 83       	st	Z, r18
     a20:	31 83       	std	Z+1, r19	; 0x01
     a22:	21 e5       	ldi	r18, 0x51	; 81
     a24:	22 83       	std	Z+2, r18	; 0x02
     a26:	8b 87       	std	Y+11, r24	; 0x0b
     a28:	9c 87       	std	Y+12, r25	; 0x0c
     a2a:	80 e7       	ldi	r24, 0x70	; 112
     a2c:	8a 83       	std	Y+2, r24	; 0x02
     a2e:	2b 83       	std	Y+3, r18	; 0x03
     a30:	8a ea       	ldi	r24, 0xAA	; 170
     a32:	8c 83       	std	Y+4, r24	; 0x04
     a34:	85 ea       	ldi	r24, 0xA5	; 165
     a36:	8d 83       	std	Y+5, r24	; 0x05
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <_ZN6MB120212take_readingEv>:

bool MB1202::take_reading (void)
{
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
	return i2c->write (slave_addr, range_cmd, 1);
     a42:	ac 01       	movw	r20, r24
     a44:	4d 5f       	subi	r20, 0xFD	; 253
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	08 ee       	ldi	r16, 0xE8	; 232
     a4a:	13 e0       	ldi	r17, 0x03	; 3
     a4c:	21 e0       	ldi	r18, 0x01	; 1
     a4e:	fc 01       	movw	r30, r24
     a50:	62 81       	ldd	r22, Z+2	; 0x02
     a52:	80 81       	ld	r24, Z
     a54:	91 81       	ldd	r25, Z+1	; 0x01
     a56:	0e 94 1b 04 	call	0x836	; 0x836 <_ZN9I2CMaster5writeEhPhhj>
};
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	08 95       	ret

00000a60 <_ZN6MB120211get_readingEv>:

uint16_t MB1202::get_reading (void)
{
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	ec 01       	movw	r28, r24
	i2c->read (slave_addr, bytes_received, 2);
     a6a:	ac 01       	movw	r20, r24
     a6c:	49 5f       	subi	r20, 0xF9	; 249
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	08 ee       	ldi	r16, 0xE8	; 232
     a72:	13 e0       	ldi	r17, 0x03	; 3
     a74:	22 e0       	ldi	r18, 0x02	; 2
     a76:	6a 81       	ldd	r22, Y+2	; 0x02
     a78:	88 81       	ld	r24, Y
     a7a:	99 81       	ldd	r25, Y+1	; 0x01
     a7c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_ZN9I2CMaster4readEhPhhj>
	range_reading = ((uint16_t) bytes_received[0] << 8) | ((uint16_t) bytes_received[1]);
     a80:	8f 81       	ldd	r24, Y+7	; 0x07
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	98 2f       	mov	r25, r24
     a86:	88 27       	eor	r24, r24
     a88:	28 85       	ldd	r18, Y+8	; 0x08
     a8a:	82 2b       	or	r24, r18
     a8c:	89 87       	std	Y+9, r24	; 0x09
     a8e:	9a 87       	std	Y+10, r25	; 0x0a
	return range_reading;
}
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	08 95       	ret

00000a9a <_ZN10task_sonar3runEv>:
 *  is just following the modern government model of "This is the land of the free...
 *  free to do exactly what you're told." 
 */

void task_sonar::run (void)
{
     a9a:	ec 01       	movw	r28, r24
	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
	{
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
     a9c:	8c 85       	ldd	r24, Y+12	; 0x0c
     a9e:	88 23       	and	r24, r24
     aa0:	19 f0       	breq	.+6      	; 0xaa8 <_ZN10task_sonar3runEv+0xe>
     aa2:	81 30       	cpi	r24, 0x01	; 1
     aa4:	51 f0       	breq	.+20     	; 0xaba <_ZN10task_sonar3runEv+0x20>
     aa6:	25 c0       	rjmp	.+74     	; 0xaf2 <_ZN10task_sonar3runEv+0x58>
			// In state 0, the motor task is waiting for the user to enter data before 
			// proceeding to its routine.
			case (0):
			    
				//*p_serial << PMS ("Sonar ready: ") << mb1202->take_reading() << endl;
				mb1202->take_reading();	
     aa8:	8c 89       	ldd	r24, Y+20	; 0x14
     aaa:	9d 89       	ldd	r25, Y+21	; 0x15
     aac:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN6MB120212take_readingEv>
				
				transition_to(1);			
     ab0:	61 e0       	ldi	r22, 0x01	; 1
     ab2:	ce 01       	movw	r24, r28
     ab4:	0e 94 58 13 	call	0x26b0	; 0x26b0 <_ZN8frt_task13transition_toEh>
			
			    break;
     ab8:	1c c0       	rjmp	.+56     	; 0xaf2 <_ZN10task_sonar3runEv+0x58>
				
			case (1):
			
				range_reading = mb1202->get_reading();
     aba:	8c 89       	ldd	r24, Y+20	; 0x14
     abc:	9d 89       	ldd	r25, Y+21	; 0x15
     abe:	0e 94 30 05 	call	0xa60	; 0xa60 <_ZN6MB120211get_readingEv>
     ac2:	7c 01       	movw	r14, r24
     ac4:	8a 8b       	std	Y+18, r24	; 0x12
     ac6:	9b 8b       	std	Y+19, r25	; 0x13
				*p_serial << PMS ("Sonar: ") << range_reading << endl;
     ac8:	6a e0       	ldi	r22, 0x0A	; 10
     aca:	8e 81       	ldd	r24, Y+6	; 0x06
     acc:	9f 81       	ldd	r25, Y+7	; 0x07
     ace:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     ad2:	8c 01       	movw	r16, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
     ad4:	6a e1       	ldi	r22, 0x1A	; 26
     ad6:	73 e0       	ldi	r23, 0x03	; 3
     ad8:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     adc:	b7 01       	movw	r22, r14
     ade:	c8 01       	movw	r24, r16
     ae0:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN8emstreamlsEj>
     ae4:	66 e0       	ldi	r22, 0x06	; 6
     ae6:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
				
				transition_to(0);
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	ce 01       	movw	r24, r28
     aee:	0e 94 58 13 	call	0x26b0	; 0x26b0 <_ZN8frt_task13transition_toEh>
				break;
			

		} // End switch state

		runs++;                             // Increment counter for debugging
     af2:	8e 85       	ldd	r24, Y+14	; 0x0e
     af4:	9f 85       	ldd	r25, Y+15	; 0x0f
     af6:	a8 89       	ldd	r26, Y+16	; 0x10
     af8:	b9 89       	ldd	r27, Y+17	; 0x11
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	a1 1d       	adc	r26, r1
     afe:	b1 1d       	adc	r27, r1
     b00:	8e 87       	std	Y+14, r24	; 0x0e
     b02:	9f 87       	std	Y+15, r25	; 0x0f
     b04:	a8 8b       	std	Y+16, r26	; 0x10
     b06:	b9 8b       	std	Y+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (500));
     b08:	64 ef       	ldi	r22, 0xF4	; 244
     b0a:	71 e0       	ldi	r23, 0x01	; 1
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	0e 94 2c 11 	call	0x2258	; 0x2258 <vTaskDelay>
	uint8_t addrs[10];
	

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
     b14:	c3 cf       	rjmp	.-122    	; 0xa9c <_ZN10task_sonar3runEv+0x2>

00000b16 <_ZN10task_sonarC1EPKchjP8emstreamP6MB1202>:
 *                      (default: configMINIMAL_STACK_SIZE)
 *  @param p_ser_dev Pointer to a serial device (port, radio, SD card, etc.) which can
 *                   be used by this task to communicate (default: NULL)
 */

task_sonar::task_sonar (const char* a_name, 
     b16:	cf 92       	push	r12
     b18:	df 92       	push	r13
     b1a:	ef 92       	push	r14
     b1c:	ff 92       	push	r15
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	ec 01       	movw	r28, r24
     b28:	6b 01       	movw	r12, r22
					  unsigned portBASE_TYPE a_priority, 
					  size_t a_stack_size,
					  emstream* p_ser_dev,
					  MB1202* mb1202
					 )
	: frt_task (a_name, a_priority, a_stack_size, p_ser_dev), mb1202(mb1202)
     b2a:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_ZN8frt_taskC1EPKchjP8emstream>
     b2e:	82 e2       	ldi	r24, 0x22	; 34
     b30:	90 e2       	ldi	r25, 0x20	; 32
     b32:	88 83       	st	Y, r24
     b34:	99 83       	std	Y+1, r25	; 0x01
     b36:	ec 8a       	std	Y+20, r14	; 0x14
     b38:	fd 8a       	std	Y+21, r15	; 0x15
{
	task_name = a_name;
     b3a:	ce 8a       	std	Y+22, r12	; 0x16
     b3c:	df 8a       	std	Y+23, r13	; 0x17
}
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	1f 91       	pop	r17
     b44:	0f 91       	pop	r16
     b46:	ff 90       	pop	r15
     b48:	ef 90       	pop	r14
     b4a:	df 90       	pop	r13
     b4c:	cf 90       	pop	r12
     b4e:	08 95       	ret

00000b50 <_ZN9task_userC1EPKchjP8emstream>:
 *                      (default: configMINIMAL_STACK_SIZE)
 *  @param p_ser_dev Pointer to a serial device (port, radio, SD card, etc.) which can
 *                   be used by this task to communicate (default: NULL)
 */

task_user::task_user (const char* a_name, 
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	ec 01       	movw	r28, r24
					  unsigned portBASE_TYPE a_priority, 
					  size_t a_stack_size,
					  emstream* p_ser_dev
					 )
	: frt_task (a_name, a_priority, a_stack_size, p_ser_dev)
     b5a:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_ZN8frt_taskC1EPKchjP8emstream>
     b5e:	8a e2       	ldi	r24, 0x2A	; 42
     b60:	90 e2       	ldi	r25, 0x20	; 32
     b62:	88 83       	st	Y, r24
     b64:	99 83       	std	Y+1, r25	; 0x01
{
	// Nothing is done in the body of this constructor. All the work is done in the
	// call to the frt_task constructor on the line just above this one
}
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	08 95       	ret

00000b70 <_ZN9task_user18print_help_messageEv>:
//-------------------------------------------------------------------------------------
/** This method prints a simple help message.
 */

void task_user::print_help_message (void)
{
     b70:	0f 93       	push	r16
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	ec 01       	movw	r28, r24
	*p_serial << ATERM_BKG_CYAN << ATERM_TXT_BLACK << clrscr;
     b7a:	6a e0       	ldi	r22, 0x0A	; 10
     b7c:	8e 81       	ldd	r24, Y+6	; 0x06
     b7e:	9f 81       	ldd	r25, Y+7	; 0x07
     b80:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     b84:	8c 01       	movw	r16, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
     b86:	65 e7       	ldi	r22, 0x75	; 117
     b88:	74 e0       	ldi	r23, 0x04	; 4
     b8a:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     b8e:	6a e0       	ldi	r22, 0x0A	; 10
     b90:	c8 01       	movw	r24, r16
     b92:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     b96:	8c 01       	movw	r16, r24
     b98:	6f e6       	ldi	r22, 0x6F	; 111
     b9a:	74 e0       	ldi	r23, 0x04	; 4
     b9c:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     ba0:	67 e0       	ldi	r22, 0x07	; 7
     ba2:	c8 01       	movw	r24, r16
     ba4:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PROGRAM_VERSION << PMS (" help") << endl;
     ba8:	6a e0       	ldi	r22, 0x0A	; 10
     baa:	8e 81       	ldd	r24, Y+6	; 0x06
     bac:	9f 81       	ldd	r25, Y+7	; 0x07
     bae:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     bb2:	8c 01       	movw	r16, r24
     bb4:	60 e5       	ldi	r22, 0x50	; 80
     bb6:	74 e0       	ldi	r23, 0x04	; 4
     bb8:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     bbc:	6a e0       	ldi	r22, 0x0A	; 10
     bbe:	c8 01       	movw	r24, r16
     bc0:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     bc4:	8c 01       	movw	r16, r24
     bc6:	6a e4       	ldi	r22, 0x4A	; 74
     bc8:	74 e0       	ldi	r23, 0x04	; 4
     bca:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     bce:	66 e0       	ldi	r22, 0x06	; 6
     bd0:	c8 01       	movw	r24, r16
     bd2:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("  Ctl-C: Reset the AVR") << endl;
     bd6:	6a e0       	ldi	r22, 0x0A	; 10
     bd8:	8e 81       	ldd	r24, Y+6	; 0x06
     bda:	9f 81       	ldd	r25, Y+7	; 0x07
     bdc:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     be0:	8c 01       	movw	r16, r24
     be2:	63 e3       	ldi	r22, 0x33	; 51
     be4:	74 e0       	ldi	r23, 0x04	; 4
     be6:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     bea:	66 e0       	ldi	r22, 0x06	; 6
     bec:	c8 01       	movw	r24, r16
     bee:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("  Ctl-A: Enter command mode") << endl;
     bf2:	6a e0       	ldi	r22, 0x0A	; 10
     bf4:	8e 81       	ldd	r24, Y+6	; 0x06
     bf6:	9f 81       	ldd	r25, Y+7	; 0x07
     bf8:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     bfc:	8c 01       	movw	r16, r24
     bfe:	67 e1       	ldi	r22, 0x17	; 23
     c00:	74 e0       	ldi	r23, 0x04	; 4
     c02:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     c06:	66 e0       	ldi	r22, 0x06	; 6
     c08:	c8 01       	movw	r24, r16
     c0a:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("  In command mode only:") << endl;
     c0e:	6a e0       	ldi	r22, 0x0A	; 10
     c10:	8e 81       	ldd	r24, Y+6	; 0x06
     c12:	9f 81       	ldd	r25, Y+7	; 0x07
     c14:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     c18:	8c 01       	movw	r16, r24
     c1a:	6f ef       	ldi	r22, 0xFF	; 255
     c1c:	73 e0       	ldi	r23, 0x03	; 3
     c1e:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     c22:	66 e0       	ldi	r22, 0x06	; 6
     c24:	c8 01       	movw	r24, r16
     c26:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    n:   Show the time right now") << endl;
     c2a:	6a e0       	ldi	r22, 0x0A	; 10
     c2c:	8e 81       	ldd	r24, Y+6	; 0x06
     c2e:	9f 81       	ldd	r25, Y+7	; 0x07
     c30:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     c34:	8c 01       	movw	r16, r24
     c36:	6e ed       	ldi	r22, 0xDE	; 222
     c38:	73 e0       	ldi	r23, 0x03	; 3
     c3a:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     c3e:	66 e0       	ldi	r22, 0x06	; 6
     c40:	c8 01       	movw	r24, r16
     c42:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    v:   Version and setup information") << endl;
     c46:	6a e0       	ldi	r22, 0x0A	; 10
     c48:	8e 81       	ldd	r24, Y+6	; 0x06
     c4a:	9f 81       	ldd	r25, Y+7	; 0x07
     c4c:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     c50:	8c 01       	movw	r16, r24
     c52:	67 eb       	ldi	r22, 0xB7	; 183
     c54:	73 e0       	ldi	r23, 0x03	; 3
     c56:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     c5a:	66 e0       	ldi	r22, 0x06	; 6
     c5c:	c8 01       	movw	r24, r16
     c5e:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    s:   Stack dump for tasks") << endl;
     c62:	6a e0       	ldi	r22, 0x0A	; 10
     c64:	8e 81       	ldd	r24, Y+6	; 0x06
     c66:	9f 81       	ldd	r25, Y+7	; 0x07
     c68:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     c6c:	8c 01       	movw	r16, r24
     c6e:	69 e9       	ldi	r22, 0x99	; 153
     c70:	73 e0       	ldi	r23, 0x03	; 3
     c72:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     c76:	66 e0       	ldi	r22, 0x06	; 6
     c78:	c8 01       	movw	r24, r16
     c7a:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    e:   Exit command mode") << endl;
     c7e:	6a e0       	ldi	r22, 0x0A	; 10
     c80:	8e 81       	ldd	r24, Y+6	; 0x06
     c82:	9f 81       	ldd	r25, Y+7	; 0x07
     c84:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     c88:	8c 01       	movw	r16, r24
     c8a:	6e e7       	ldi	r22, 0x7E	; 126
     c8c:	73 e0       	ldi	r23, 0x03	; 3
     c8e:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     c92:	66 e0       	ldi	r22, 0x06	; 6
     c94:	c8 01       	movw	r24, r16
     c96:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    h:   HALP!") << endl;
     c9a:	6a e0       	ldi	r22, 0x0A	; 10
     c9c:	8e 81       	ldd	r24, Y+6	; 0x06
     c9e:	9f 81       	ldd	r25, Y+7	; 0x07
     ca0:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     ca4:	ec 01       	movw	r28, r24
     ca6:	6f e6       	ldi	r22, 0x6F	; 111
     ca8:	73 e0       	ldi	r23, 0x03	; 3
     caa:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     cae:	66 e0       	ldi	r22, 0x06	; 6
     cb0:	ce 01       	movw	r24, r28
     cb2:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	08 95       	ret

00000cc0 <_ZN9task_user11show_statusEv>:
 *    \li Processor cycles used by each task
 *    \li Amount of heap space free and setting of RTOS tick timer
 */

void task_user::show_status (void)
{
     cc0:	af 92       	push	r10
     cc2:	bf 92       	push	r11
     cc4:	cf 92       	push	r12
     cc6:	df 92       	push	r13
     cc8:	ef 92       	push	r14
     cca:	ff 92       	push	r15
     ccc:	0f 93       	push	r16
     cce:	1f 93       	push	r17
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <_ZN9task_user11show_statusEv+0x16>
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <_ZN9task_user11show_statusEv+0x18>
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	8c 01       	movw	r16, r24
	public:
		/** This constructor creates a time stamp with its time set to zero.
		 */
		time_stamp (void)
		{
			tick_count = 0;
     cde:	19 82       	std	Y+1, r1	; 0x01
     ce0:	1a 82       	std	Y+2, r1	; 0x02
     ce2:	1b 82       	std	Y+3, r1	; 0x03
     ce4:	1c 82       	std	Y+4, r1	; 0x04
			hardware_count = 0;
     ce6:	1d 82       	std	Y+5, r1	; 0x05
     ce8:	1e 82       	std	Y+6, r1	; 0x06
		 *  means that the number returned is how many bytes are currently unused. 
		 *  @return The approximate number of bytes left for use in the heap
		 */
		size_t heap_left (void)
		{
			return (xPortGetFreeHeapSize ());
     cea:	0e 94 e5 08 	call	0x11ca	; 0x11ca <xPortGetFreeHeapSize>
     cee:	6c 01       	movw	r12, r24
	time_stamp the_time;					// Holds current time for printing

	// Show program vesion, time, and free heap space
	*p_serial << endl << PROGRAM_VERSION << PMS (__DATE__) << endl 
			  << PMS ("Time: ") << the_time.set_to_now ()
     cf0:	ce 01       	movw	r24, r28
     cf2:	01 96       	adiw	r24, 0x01	; 1
     cf4:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <_ZN10time_stamp10set_to_nowEv>
     cf8:	5c 01       	movw	r10, r24
void task_user::show_status (void)
{
	time_stamp the_time;					// Holds current time for printing

	// Show program vesion, time, and free heap space
	*p_serial << endl << PROGRAM_VERSION << PMS (__DATE__) << endl 
     cfa:	66 e0       	ldi	r22, 0x06	; 6
     cfc:	f8 01       	movw	r30, r16
     cfe:	86 81       	ldd	r24, Z+6	; 0x06
     d00:	97 81       	ldd	r25, Z+7	; 0x07
     d02:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     d06:	6a e0       	ldi	r22, 0x0A	; 10
     d08:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     d0c:	7c 01       	movw	r14, r24
     d0e:	60 e5       	ldi	r22, 0x50	; 80
     d10:	73 e0       	ldi	r23, 0x03	; 3
     d12:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     d16:	6a e0       	ldi	r22, 0x0A	; 10
     d18:	c7 01       	movw	r24, r14
     d1a:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     d1e:	7c 01       	movw	r14, r24
     d20:	64 e4       	ldi	r22, 0x44	; 68
     d22:	73 e0       	ldi	r23, 0x03	; 3
     d24:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     d28:	66 e0       	ldi	r22, 0x06	; 6
     d2a:	c7 01       	movw	r24, r14
     d2c:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
			  << PMS ("Time: ") << the_time.set_to_now ()
     d30:	6a e0       	ldi	r22, 0x0A	; 10
     d32:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     d36:	7c 01       	movw	r14, r24
     d38:	6d e3       	ldi	r22, 0x3D	; 61
     d3a:	73 e0       	ldi	r23, 0x03	; 3
     d3c:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     d40:	b5 01       	movw	r22, r10
     d42:	c7 01       	movw	r24, r14
     d44:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <_ZlsR8emstreamR10time_stamp>
			  << PMS (", Heap free: ") << heap_left() << PMS ("/") 
     d48:	6a e0       	ldi	r22, 0x0A	; 10
     d4a:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     d4e:	7c 01       	movw	r14, r24
     d50:	6f e2       	ldi	r22, 0x2F	; 47
     d52:	73 e0       	ldi	r23, 0x03	; 3
     d54:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     d58:	b6 01       	movw	r22, r12
     d5a:	c7 01       	movw	r24, r14
     d5c:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN8emstreamlsEj>
     d60:	6a e0       	ldi	r22, 0x0A	; 10
     d62:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     d66:	7c 01       	movw	r14, r24
     d68:	6d e2       	ldi	r22, 0x2D	; 45
     d6a:	73 e0       	ldi	r23, 0x03	; 3
     d6c:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
			  << configTOTAL_HEAP_SIZE;
     d70:	4f ef       	ldi	r20, 0xFF	; 255
     d72:	5f e0       	ldi	r21, 0x0F	; 15
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	c7 01       	movw	r24, r14
     d7a:	0e 94 3c 19 	call	0x3278	; 0x3278 <_ZN8emstreamlsEm>

	// Show how the timer/counter is set up to cause RTOS timer ticks
	*p_serial << PMS (", TCC0CCA=") << TCC0.CCA << endl << endl;
     d7e:	c0 90 28 08 	lds	r12, 0x0828	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
     d82:	d0 90 29 08 	lds	r13, 0x0829	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
     d86:	6a e0       	ldi	r22, 0x0A	; 10
     d88:	f8 01       	movw	r30, r16
     d8a:	86 81       	ldd	r24, Z+6	; 0x06
     d8c:	97 81       	ldd	r25, Z+7	; 0x07
     d8e:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     d92:	7c 01       	movw	r14, r24
     d94:	62 e2       	ldi	r22, 0x22	; 34
     d96:	73 e0       	ldi	r23, 0x03	; 3
     d98:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     d9c:	b6 01       	movw	r22, r12
     d9e:	c7 01       	movw	r24, r14
     da0:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN8emstreamlsEj>
     da4:	66 e0       	ldi	r22, 0x06	; 6
     da6:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     daa:	66 e0       	ldi	r22, 0x06	; 6
     dac:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>

	// Have the tasks print their status
	print_task_list (p_serial);
     db0:	f8 01       	movw	r30, r16
     db2:	86 81       	ldd	r24, Z+6	; 0x06
     db4:	97 81       	ldd	r25, Z+7	; 0x07
     db6:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <_Z15print_task_listP8emstream>
}
     dba:	26 96       	adiw	r28, 0x06	; 6
     dbc:	cd bf       	out	0x3d, r28	; 61
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	df 90       	pop	r13
     dce:	cf 90       	pop	r12
     dd0:	bf 90       	pop	r11
     dd2:	af 90       	pop	r10
     dd4:	08 95       	ret

00000dd6 <_ZN9task_user3runEv>:
 *  is just following the modern government model of "This is the land of the free...
 *  free to do exactly what you're told." 
 */

void task_user::run (void)
{
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	00 d0       	rcall	.+0      	; 0xddc <_ZN9task_user3runEv+0x6>
     ddc:	00 d0       	rcall	.+0      	; 0xdde <_ZN9task_user3runEv+0x8>
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
     de2:	8c 01       	movw	r16, r24
	public:
		/** This constructor creates a time stamp with its time set to zero.
		 */
		time_stamp (void)
		{
			tick_count = 0;
     de4:	19 82       	std	Y+1, r1	; 0x01
     de6:	1a 82       	std	Y+2, r1	; 0x02
     de8:	1b 82       	std	Y+3, r1	; 0x03
     dea:	1c 82       	std	Y+4, r1	; 0x04
			hardware_count = 0;
     dec:	1d 82       	std	Y+5, r1	; 0x05
     dee:	1e 82       	std	Y+6, r1	; 0x06
	char char_in;                           // Character read from serial device
	time_stamp a_time;                      // Holds the time so it can be displayed

	// Tell the user how to get into command mode (state 1), where the user interface
	// task does interesting things such as diagnostic printouts
	*p_serial << PMS ("Press Ctrl-A for command mode") << endl;
     df0:	6a e0       	ldi	r22, 0x0A	; 10
     df2:	dc 01       	movw	r26, r24
     df4:	16 96       	adiw	r26, 0x06	; 6
     df6:	8d 91       	ld	r24, X+
     df8:	9c 91       	ld	r25, X
     dfa:	17 97       	sbiw	r26, 0x07	; 7
     dfc:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     e00:	7c 01       	movw	r14, r24
     e02:	6e eb       	ldi	r22, 0xBE	; 190
     e04:	74 e0       	ldi	r23, 0x04	; 4
     e06:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     e0a:	66 e0       	ldi	r22, 0x06	; 6
     e0c:	c7 01       	movw	r24, r14
     e0e:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
	{
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
     e12:	f8 01       	movw	r30, r16
     e14:	84 85       	ldd	r24, Z+12	; 0x0c
     e16:	88 23       	and	r24, r24
     e18:	21 f0       	breq	.+8      	; 0xe22 <_ZN9task_user3runEv+0x4c>
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	09 f4       	brne	.+2      	; 0xe20 <_ZN9task_user3runEv+0x4a>
     e1e:	5d c0       	rjmp	.+186    	; 0xeda <_ZN9task_user3runEv+0x104>
     e20:	d8 c0       	rjmp	.+432    	; 0xfd2 <_ZN9task_user3runEv+0x1fc>
		{
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 0, we transparently relay characters from the radio to the USB 
			// serial port and vice versa but watch for certain control characters
			case (0):
				if (p_serial->check_for_char ())        // If the user typed a
     e22:	86 81       	ldd	r24, Z+6	; 0x06
     e24:	97 81       	ldd	r25, Z+7	; 0x07
     e26:	dc 01       	movw	r26, r24
     e28:	ed 91       	ld	r30, X+
     e2a:	fc 91       	ld	r31, X
     e2c:	04 80       	ldd	r0, Z+4	; 0x04
     e2e:	f5 81       	ldd	r31, Z+5	; 0x05
     e30:	e0 2d       	mov	r30, r0
     e32:	19 95       	eicall
     e34:	88 23       	and	r24, r24
     e36:	a9 f1       	breq	.+106    	; 0xea2 <_ZN9task_user3runEv+0xcc>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
     e38:	f8 01       	movw	r30, r16
     e3a:	86 81       	ldd	r24, Z+6	; 0x06
     e3c:	97 81       	ldd	r25, Z+7	; 0x07
     e3e:	dc 01       	movw	r26, r24
     e40:	ed 91       	ld	r30, X+
     e42:	fc 91       	ld	r31, X
     e44:	06 80       	ldd	r0, Z+6	; 0x06
     e46:	f7 81       	ldd	r31, Z+7	; 0x07
     e48:	e0 2d       	mov	r30, r0
     e4a:	19 95       	eicall

					// In this switch statement, we respond to different characters
					switch (char_in)
     e4c:	99 27       	eor	r25, r25
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	91 05       	cpc	r25, r1
     e52:	f9 f0       	breq	.+62     	; 0xe92 <_ZN9task_user3runEv+0xbc>
     e54:	03 97       	sbiw	r24, 0x03	; 3
     e56:	09 f0       	breq	.+2      	; 0xe5a <_ZN9task_user3runEv+0x84>
     e58:	d8 c0       	rjmp	.+432    	; 0x100a <_ZN9task_user3runEv+0x234>
					{
						// Control-C means reset the AVR computer
						case (3):
							*p_serial << PMS ("Resetting AVR") << endl;
     e5a:	6a e0       	ldi	r22, 0x0A	; 10
     e5c:	f8 01       	movw	r30, r16
     e5e:	86 81       	ldd	r24, Z+6	; 0x06
     e60:	97 81       	ldd	r25, Z+7	; 0x07
     e62:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     e66:	8c 01       	movw	r16, r24
     e68:	60 eb       	ldi	r22, 0xB0	; 176
     e6a:	74 e0       	ldi	r23, 0x04	; 4
     e6c:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     e70:	66 e0       	ldi	r22, 0x06	; 6
     e72:	c8 01       	movw	r24, r16
     e74:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
							wdt_enable (WDTO_120MS);
     e78:	93 e0       	ldi	r25, 0x03	; 3
     e7a:	88 ed       	ldi	r24, 0xD8	; 216
     e7c:	08 b6       	in	r0, 0x38	; 56
     e7e:	18 be       	out	0x38, r1	; 56
     e80:	84 bf       	out	0x34, r24	; 52
     e82:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     e86:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
     e8a:	81 fd       	sbrc	r24, 1
     e8c:	fc cf       	rjmp	.-8      	; 0xe86 <_ZN9task_user3runEv+0xb0>
     e8e:	08 be       	out	0x38, r0	; 56
     e90:	ff cf       	rjmp	.-2      	; 0xe90 <_ZN9task_user3runEv+0xba>
							for (;;);
							break;

						// Control-A puts this task in command mode
						case (1):
							print_help_message ();
     e92:	c8 01       	movw	r24, r16
     e94:	0e 94 b8 05 	call	0xb70	; 0xb70 <_ZN9task_user18print_help_messageEv>
							transition_to (1);
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	c8 01       	movw	r24, r16
     e9c:	0e 94 58 13 	call	0x26b0	; 0x26b0 <_ZN8frt_task13transition_toEh>
							break;
     ea0:	b4 c0       	rjmp	.+360    	; 0x100a <_ZN9task_user3runEv+0x234>
					};
				}

				// Check the print queue to see if another task has sent this task 
				// something to be printed
				else if (print_ser_queue.check_for_char ())
     ea2:	8c e9       	ldi	r24, 0x9C	; 156
     ea4:	91 e3       	ldi	r25, 0x31	; 49
     ea6:	0e 94 19 16 	call	0x2c32	; 0x2c32 <_ZN14frt_text_queue14check_for_charEv>
     eaa:	88 23       	and	r24, r24
     eac:	09 f4       	brne	.+2      	; 0xeb0 <_ZN9task_user3runEv+0xda>
     eae:	ad c0       	rjmp	.+346    	; 0x100a <_ZN9task_user3runEv+0x234>
				{
					p_serial->putchar (print_ser_queue.getchar ());
     eb0:	d8 01       	movw	r26, r16
     eb2:	16 96       	adiw	r26, 0x06	; 6
     eb4:	ed 91       	ld	r30, X+
     eb6:	fc 91       	ld	r31, X
     eb8:	17 97       	sbiw	r26, 0x07	; 7
     eba:	01 90       	ld	r0, Z+
     ebc:	f0 81       	ld	r31, Z
     ebe:	e0 2d       	mov	r30, r0
     ec0:	e2 80       	ldd	r14, Z+2	; 0x02
     ec2:	f3 80       	ldd	r15, Z+3	; 0x03
     ec4:	8c e9       	ldi	r24, 0x9C	; 156
     ec6:	91 e3       	ldi	r25, 0x31	; 49
     ec8:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <_ZN14frt_text_queue7getcharEv>
     ecc:	68 2f       	mov	r22, r24
     ece:	f8 01       	movw	r30, r16
     ed0:	86 81       	ldd	r24, Z+6	; 0x06
     ed2:	97 81       	ldd	r25, Z+7	; 0x07
     ed4:	f7 01       	movw	r30, r14
     ed6:	19 95       	eicall
     ed8:	98 c0       	rjmp	.+304    	; 0x100a <_ZN9task_user3runEv+0x234>

			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 1, we're in command mode, so when the user types characters, the
			// characters are interpreted as commands to do something
			case (1):
				if (p_serial->check_for_char ())				// If the user typed a
     eda:	86 81       	ldd	r24, Z+6	; 0x06
     edc:	97 81       	ldd	r25, Z+7	; 0x07
     ede:	dc 01       	movw	r26, r24
     ee0:	ed 91       	ld	r30, X+
     ee2:	fc 91       	ld	r31, X
     ee4:	04 80       	ldd	r0, Z+4	; 0x04
     ee6:	f5 81       	ldd	r31, Z+5	; 0x05
     ee8:	e0 2d       	mov	r30, r0
     eea:	19 95       	eicall
     eec:	88 23       	and	r24, r24
     eee:	09 f4       	brne	.+2      	; 0xef2 <_ZN9task_user3runEv+0x11c>
     ef0:	8c c0       	rjmp	.+280    	; 0x100a <_ZN9task_user3runEv+0x234>
				{											// character, read
					char_in = p_serial->getchar ();			// the character
     ef2:	f8 01       	movw	r30, r16
     ef4:	86 81       	ldd	r24, Z+6	; 0x06
     ef6:	97 81       	ldd	r25, Z+7	; 0x07
     ef8:	dc 01       	movw	r26, r24
     efa:	ed 91       	ld	r30, X+
     efc:	fc 91       	ld	r31, X
     efe:	06 80       	ldd	r0, Z+6	; 0x06
     f00:	f7 81       	ldd	r31, Z+7	; 0x07
     f02:	e0 2d       	mov	r30, r0
     f04:	19 95       	eicall

					// In this switch statement, we respond to different characters as
					// commands typed in by the user
					switch (char_in)
     f06:	9c 01       	movw	r18, r24
     f08:	33 27       	eor	r19, r19
     f0a:	28 36       	cpi	r18, 0x68	; 104
     f0c:	31 05       	cpc	r19, r1
     f0e:	59 f1       	breq	.+86     	; 0xf66 <_ZN9task_user3runEv+0x190>
     f10:	3c f4       	brge	.+14     	; 0xf20 <_ZN9task_user3runEv+0x14a>
     f12:	2b 31       	cpi	r18, 0x1B	; 27
     f14:	31 05       	cpc	r19, r1
     f16:	59 f1       	breq	.+86     	; 0xf6e <_ZN9task_user3runEv+0x198>
     f18:	25 36       	cpi	r18, 0x65	; 101
     f1a:	31 05       	cpc	r19, r1
     f1c:	41 f1       	breq	.+80     	; 0xf6e <_ZN9task_user3runEv+0x198>
     f1e:	3b c0       	rjmp	.+118    	; 0xf96 <_ZN9task_user3runEv+0x1c0>
     f20:	23 37       	cpi	r18, 0x73	; 115
     f22:	31 05       	cpc	r19, r1
     f24:	c1 f0       	breq	.+48     	; 0xf56 <_ZN9task_user3runEv+0x180>
     f26:	26 37       	cpi	r18, 0x76	; 118
     f28:	31 05       	cpc	r19, r1
     f2a:	89 f0       	breq	.+34     	; 0xf4e <_ZN9task_user3runEv+0x178>
     f2c:	2e 36       	cpi	r18, 0x6E	; 110
     f2e:	31 05       	cpc	r19, r1
     f30:	91 f5       	brne	.+100    	; 0xf96 <_ZN9task_user3runEv+0x1c0>
					{
						// The 'n' command asks what time it is right now
						case ('n'):
							*p_serial << (a_time.set_to_now ()) << endl;
     f32:	ce 01       	movw	r24, r28
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <_ZN10time_stamp10set_to_nowEv>
     f3a:	bc 01       	movw	r22, r24
     f3c:	f8 01       	movw	r30, r16
     f3e:	86 81       	ldd	r24, Z+6	; 0x06
     f40:	97 81       	ldd	r25, Z+7	; 0x07
     f42:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <_ZlsR8emstreamR10time_stamp>
     f46:	66 e0       	ldi	r22, 0x06	; 6
     f48:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
							break;
     f4c:	5e c0       	rjmp	.+188    	; 0x100a <_ZN9task_user3runEv+0x234>

						// The 'v' command asks for version and status information
						case ('v'):
							show_status ();
     f4e:	c8 01       	movw	r24, r16
     f50:	0e 94 60 06 	call	0xcc0	; 0xcc0 <_ZN9task_user11show_statusEv>
							break;
     f54:	5a c0       	rjmp	.+180    	; 0x100a <_ZN9task_user3runEv+0x234>

						// The 's' command has all the tasks dump their stacks
						case ('s'):
							print_task_stacks (p_serial);
     f56:	d8 01       	movw	r26, r16
     f58:	16 96       	adiw	r26, 0x06	; 6
     f5a:	8d 91       	ld	r24, X+
     f5c:	9c 91       	ld	r25, X
     f5e:	17 97       	sbiw	r26, 0x07	; 7
     f60:	0e 94 71 14 	call	0x28e2	; 0x28e2 <_Z17print_task_stacksP8emstream>
							break;
     f64:	52 c0       	rjmp	.+164    	; 0x100a <_ZN9task_user3runEv+0x234>

						// The 'h' command is a plea for help
						case ('h'):
							print_help_message ();
     f66:	c8 01       	movw	r24, r16
     f68:	0e 94 b8 05 	call	0xb70	; 0xb70 <_ZN9task_user18print_help_messageEv>
							break;
     f6c:	4e c0       	rjmp	.+156    	; 0x100a <_ZN9task_user3runEv+0x234>

						// The escape key or 'e' key go back to non-command mode
						case (27):
						case ('e'):
							*p_serial << PMS ("Exit command mode") << endl;
     f6e:	6a e0       	ldi	r22, 0x0A	; 10
     f70:	f8 01       	movw	r30, r16
     f72:	86 81       	ldd	r24, Z+6	; 0x06
     f74:	97 81       	ldd	r25, Z+7	; 0x07
     f76:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     f7a:	7c 01       	movw	r14, r24
     f7c:	6e e9       	ldi	r22, 0x9E	; 158
     f7e:	74 e0       	ldi	r23, 0x04	; 4
     f80:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     f84:	66 e0       	ldi	r22, 0x06	; 6
     f86:	c7 01       	movw	r24, r14
     f88:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
							transition_to (0);
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	c8 01       	movw	r24, r16
     f90:	0e 94 58 13 	call	0x26b0	; 0x26b0 <_ZN8frt_task13transition_toEh>
							break;
     f94:	3a c0       	rjmp	.+116    	; 0x100a <_ZN9task_user3runEv+0x234>

						// If the character isn't recognized, ask: What's That Function?
						default:
							p_serial->putchar (char_in);
     f96:	f8 01       	movw	r30, r16
     f98:	a6 81       	ldd	r26, Z+6	; 0x06
     f9a:	b7 81       	ldd	r27, Z+7	; 0x07
     f9c:	ed 91       	ld	r30, X+
     f9e:	fc 91       	ld	r31, X
     fa0:	11 97       	sbiw	r26, 0x01	; 1
     fa2:	02 80       	ldd	r0, Z+2	; 0x02
     fa4:	f3 81       	ldd	r31, Z+3	; 0x03
     fa6:	e0 2d       	mov	r30, r0
     fa8:	68 2f       	mov	r22, r24
     faa:	cd 01       	movw	r24, r26
     fac:	19 95       	eicall
							*p_serial << PMS (":WTF?") << endl;
     fae:	6a e0       	ldi	r22, 0x0A	; 10
     fb0:	d8 01       	movw	r26, r16
     fb2:	16 96       	adiw	r26, 0x06	; 6
     fb4:	8d 91       	ld	r24, X+
     fb6:	9c 91       	ld	r25, X
     fb8:	17 97       	sbiw	r26, 0x07	; 7
     fba:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     fbe:	7c 01       	movw	r14, r24
     fc0:	68 e9       	ldi	r22, 0x98	; 152
     fc2:	74 e0       	ldi	r23, 0x04	; 4
     fc4:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     fc8:	66 e0       	ldi	r22, 0x06	; 6
     fca:	c7 01       	movw	r24, r14
     fcc:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
							break;
     fd0:	1c c0       	rjmp	.+56     	; 0x100a <_ZN9task_user3runEv+0x234>
				break; // End of state 1

			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// We should never get to the default state. If we do, complain and restart
			default:
				*p_serial << PMS ("Illegal state! Resetting AVR") << endl;
     fd2:	6a e0       	ldi	r22, 0x0A	; 10
     fd4:	f8 01       	movw	r30, r16
     fd6:	86 81       	ldd	r24, Z+6	; 0x06
     fd8:	97 81       	ldd	r25, Z+7	; 0x07
     fda:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
     fde:	8c 01       	movw	r16, r24
     fe0:	6b e7       	ldi	r22, 0x7B	; 123
     fe2:	74 e0       	ldi	r23, 0x04	; 4
     fe4:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
     fe8:	66 e0       	ldi	r22, 0x06	; 6
     fea:	c8 01       	movw	r24, r16
     fec:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
				wdt_enable (WDTO_120MS);
     ff0:	93 e0       	ldi	r25, 0x03	; 3
     ff2:	88 ed       	ldi	r24, 0xD8	; 216
     ff4:	08 b6       	in	r0, 0x38	; 56
     ff6:	18 be       	out	0x38, r1	; 56
     ff8:	84 bf       	out	0x34, r24	; 52
     ffa:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     ffe:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    1002:	81 fd       	sbrc	r24, 1
    1004:	fc cf       	rjmp	.-8      	; 0xffe <_ZN9task_user3runEv+0x228>
    1006:	08 be       	out	0x38, r0	; 56
    1008:	ff cf       	rjmp	.-2      	; 0x1008 <_ZN9task_user3runEv+0x232>
				for (;;);
				break;

		} // End switch state

		runs++;                             // Increment counter for debugging
    100a:	f8 01       	movw	r30, r16
    100c:	86 85       	ldd	r24, Z+14	; 0x0e
    100e:	97 85       	ldd	r25, Z+15	; 0x0f
    1010:	a0 89       	ldd	r26, Z+16	; 0x10
    1012:	b1 89       	ldd	r27, Z+17	; 0x11
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	a1 1d       	adc	r26, r1
    1018:	b1 1d       	adc	r27, r1
    101a:	86 87       	std	Z+14, r24	; 0x0e
    101c:	97 87       	std	Z+15, r25	; 0x0f
    101e:	a0 8b       	std	Z+16, r26	; 0x10
    1020:	b1 8b       	std	Z+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (1));
    1022:	61 e0       	ldi	r22, 0x01	; 1
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 2c 11 	call	0x2258	; 0x2258 <vTaskDelay>
	// task does interesting things such as diagnostic printouts
	*p_serial << PMS ("Press Ctrl-A for command mode") << endl;

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
    102e:	f1 ce       	rjmp	.-542    	; 0xe12 <_ZN9task_user3runEv+0x3c>

00001030 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	ec 01       	movw	r28, r24
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    103a:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    103e:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <__data_end>
    1042:	81 11       	cpse	r24, r1
    1044:	1d c0       	rjmp	.+58     	; 0x1080 <pvPortMalloc+0x50>
		{
			prvHeapInit();
    1046:	a5 ee       	ldi	r26, 0xE5	; 229
    1048:	b0 e2       	ldi	r27, 0x20	; 32
    104a:	e9 ee       	ldi	r30, 0xE9	; 233
    104c:	f0 e2       	ldi	r31, 0x20	; 32
    104e:	ed 93       	st	X+, r30
    1050:	fc 93       	st	X, r31
    1052:	11 97       	sbiw	r26, 0x01	; 1
    1054:	12 96       	adiw	r26, 0x02	; 2
    1056:	1d 92       	st	X+, r1
    1058:	1c 92       	st	X, r1
    105a:	13 97       	sbiw	r26, 0x03	; 3
    105c:	a1 ee       	ldi	r26, 0xE1	; 225
    105e:	b0 e2       	ldi	r27, 0x20	; 32
    1060:	8f ef       	ldi	r24, 0xFF	; 255
    1062:	9f e0       	ldi	r25, 0x0F	; 15
    1064:	12 96       	adiw	r26, 0x02	; 2
    1066:	8d 93       	st	X+, r24
    1068:	9c 93       	st	X, r25
    106a:	13 97       	sbiw	r26, 0x03	; 3
    106c:	1d 92       	st	X+, r1
    106e:	1c 92       	st	X, r1
    1070:	11 97       	sbiw	r26, 0x01	; 1
    1072:	82 83       	std	Z+2, r24	; 0x02
    1074:	93 83       	std	Z+3, r25	; 0x03
    1076:	a0 83       	st	Z, r26
    1078:	b1 83       	std	Z+1, r27	; 0x01
			xHeapHasBeenInitialised = pdTRUE;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	80 93 e0 20 	sts	0x20E0, r24	; 0x8020e0 <__data_end>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    1080:	20 97       	sbiw	r28, 0x00	; 0
    1082:	09 f4       	brne	.+2      	; 0x1086 <pvPortMalloc+0x56>
    1084:	5f c0       	rjmp	.+190    	; 0x1144 <pvPortMalloc+0x114>
		{
			xWantedSize += heapSTRUCT_SIZE;
    1086:	9e 01       	movw	r18, r28
    1088:	2b 5f       	subi	r18, 0xFB	; 251
    108a:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    108c:	24 96       	adiw	r28, 0x04	; 4
    108e:	ce 3f       	cpi	r28, 0xFE	; 254
    1090:	df 40       	sbci	r29, 0x0F	; 15
    1092:	08 f0       	brcs	.+2      	; 0x1096 <pvPortMalloc+0x66>
    1094:	5a c0       	rjmp	.+180    	; 0x114a <pvPortMalloc+0x11a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    1096:	e0 91 e5 20 	lds	r30, 0x20E5	; 0x8020e5 <xStart>
    109a:	f0 91 e6 20 	lds	r31, 0x20E6	; 0x8020e6 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    109e:	a5 ee       	ldi	r26, 0xE5	; 229
    10a0:	b0 e2       	ldi	r27, 0x20	; 32
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <pvPortMalloc+0x78>
    10a4:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
    10a6:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    10a8:	82 81       	ldd	r24, Z+2	; 0x02
    10aa:	93 81       	ldd	r25, Z+3	; 0x03
    10ac:	82 17       	cp	r24, r18
    10ae:	93 07       	cpc	r25, r19
    10b0:	20 f4       	brcc	.+8      	; 0x10ba <pvPortMalloc+0x8a>
    10b2:	80 81       	ld	r24, Z
    10b4:	91 81       	ldd	r25, Z+1	; 0x01
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	a9 f7       	brne	.-22     	; 0x10a4 <pvPortMalloc+0x74>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    10ba:	c0 e2       	ldi	r28, 0x20	; 32
    10bc:	e1 3e       	cpi	r30, 0xE1	; 225
    10be:	fc 07       	cpc	r31, r28
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <pvPortMalloc+0x94>
    10c2:	46 c0       	rjmp	.+140    	; 0x1150 <pvPortMalloc+0x120>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    10c4:	cd 91       	ld	r28, X+
    10c6:	dc 91       	ld	r29, X
    10c8:	11 97       	sbiw	r26, 0x01	; 1
    10ca:	8e 01       	movw	r16, r28
    10cc:	0b 5f       	subi	r16, 0xFB	; 251
    10ce:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    10d0:	80 81       	ld	r24, Z
    10d2:	91 81       	ldd	r25, Z+1	; 0x01
    10d4:	8d 93       	st	X+, r24
    10d6:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    10d8:	82 81       	ldd	r24, Z+2	; 0x02
    10da:	93 81       	ldd	r25, Z+3	; 0x03
    10dc:	82 1b       	sub	r24, r18
    10de:	93 0b       	sbc	r25, r19
    10e0:	8b 30       	cpi	r24, 0x0B	; 11
    10e2:	91 05       	cpc	r25, r1
    10e4:	10 f1       	brcs	.+68     	; 0x112a <pvPortMalloc+0xfa>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    10e6:	bf 01       	movw	r22, r30
    10e8:	62 0f       	add	r22, r18
    10ea:	73 1f       	adc	r23, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    10ec:	db 01       	movw	r26, r22
    10ee:	12 96       	adiw	r26, 0x02	; 2
    10f0:	8d 93       	st	X+, r24
    10f2:	9c 93       	st	X, r25
    10f4:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
    10f6:	22 83       	std	Z+2, r18	; 0x02
    10f8:	33 83       	std	Z+3, r19	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    10fa:	12 96       	adiw	r26, 0x02	; 2
    10fc:	4d 91       	ld	r20, X+
    10fe:	5c 91       	ld	r21, X
    1100:	13 97       	sbiw	r26, 0x03	; 3
    1102:	85 ee       	ldi	r24, 0xE5	; 229
    1104:	90 e2       	ldi	r25, 0x20	; 32
    1106:	01 c0       	rjmp	.+2      	; 0x110a <pvPortMalloc+0xda>
    1108:	cd 01       	movw	r24, r26
    110a:	ec 01       	movw	r28, r24
    110c:	a8 81       	ld	r26, Y
    110e:	b9 81       	ldd	r27, Y+1	; 0x01
    1110:	12 96       	adiw	r26, 0x02	; 2
    1112:	2d 91       	ld	r18, X+
    1114:	3c 91       	ld	r19, X
    1116:	13 97       	sbiw	r26, 0x03	; 3
    1118:	24 17       	cp	r18, r20
    111a:	35 07       	cpc	r19, r21
    111c:	a8 f3       	brcs	.-22     	; 0x1108 <pvPortMalloc+0xd8>
    111e:	eb 01       	movw	r28, r22
    1120:	a8 83       	st	Y, r26
    1122:	b9 83       	std	Y+1, r27	; 0x01
    1124:	dc 01       	movw	r26, r24
    1126:	6d 93       	st	X+, r22
    1128:	7c 93       	st	X, r23
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    112a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    112e:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    1132:	22 81       	ldd	r18, Z+2	; 0x02
    1134:	33 81       	ldd	r19, Z+3	; 0x03
    1136:	82 1b       	sub	r24, r18
    1138:	93 0b       	sbc	r25, r19
    113a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    113e:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    1142:	08 c0       	rjmp	.+16     	; 0x1154 <pvPortMalloc+0x124>

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    1144:	00 e0       	ldi	r16, 0x00	; 0
    1146:	10 e0       	ldi	r17, 0x00	; 0
    1148:	05 c0       	rjmp	.+10     	; 0x1154 <pvPortMalloc+0x124>
    114a:	00 e0       	ldi	r16, 0x00	; 0
    114c:	10 e0       	ldi	r17, 0x00	; 0
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <pvPortMalloc+0x124>
    1150:	00 e0       	ldi	r16, 0x00	; 0
    1152:	10 e0       	ldi	r17, 0x00	; 0
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
    1154:	0e 94 aa 10 	call	0x2154	; 0x2154 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    1158:	c8 01       	movw	r24, r16
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	08 95       	ret

00001164 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1164:	0f 93       	push	r16
    1166:	1f 93       	push	r17
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv )
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	41 f1       	breq	.+80     	; 0x11c0 <vPortFree+0x5c>
    1170:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    1172:	8c 01       	movw	r16, r24
    1174:	05 50       	subi	r16, 0x05	; 5
    1176:	11 09       	sbc	r17, r1

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
    1178:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    117c:	f8 01       	movw	r30, r16
    117e:	42 81       	ldd	r20, Z+2	; 0x02
    1180:	53 81       	ldd	r21, Z+3	; 0x03
    1182:	a5 ee       	ldi	r26, 0xE5	; 229
    1184:	b0 e2       	ldi	r27, 0x20	; 32
    1186:	01 c0       	rjmp	.+2      	; 0x118a <vPortFree+0x26>
    1188:	df 01       	movw	r26, r30
    118a:	ed 91       	ld	r30, X+
    118c:	fc 91       	ld	r31, X
    118e:	11 97       	sbiw	r26, 0x01	; 1
    1190:	22 81       	ldd	r18, Z+2	; 0x02
    1192:	33 81       	ldd	r19, Z+3	; 0x03
    1194:	24 17       	cp	r18, r20
    1196:	35 07       	cpc	r19, r21
    1198:	b8 f3       	brcs	.-18     	; 0x1188 <vPortFree+0x24>
    119a:	25 97       	sbiw	r28, 0x05	; 5
    119c:	e8 83       	st	Y, r30
    119e:	f9 83       	std	Y+1, r31	; 0x01
    11a0:	0d 93       	st	X+, r16
    11a2:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
    11a4:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    11a8:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	9b 81       	ldd	r25, Y+3	; 0x03
    11b0:	82 0f       	add	r24, r18
    11b2:	93 1f       	adc	r25, r19
    11b4:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    11b8:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
		}
		xTaskResumeAll();
    11bc:	0e 94 aa 10 	call	0x2154	; 0x2154 <xTaskResumeAll>
	}
}
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	08 95       	ret

000011ca <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
    11ca:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    11ce:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    11d2:	08 95       	ret

000011d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    11d4:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    11d6:	03 96       	adiw	r24, 0x03	; 3
    11d8:	81 83       	std	Z+1, r24	; 0x01
    11da:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    11dc:	4f ef       	ldi	r20, 0xFF	; 255
    11de:	5f ef       	ldi	r21, 0xFF	; 255
    11e0:	ba 01       	movw	r22, r20
    11e2:	43 83       	std	Z+3, r20	; 0x03
    11e4:	54 83       	std	Z+4, r21	; 0x04
    11e6:	65 83       	std	Z+5, r22	; 0x05
    11e8:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    11ea:	87 83       	std	Z+7, r24	; 0x07
    11ec:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    11ee:	81 87       	std	Z+9, r24	; 0x09
    11f0:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    11f2:	10 82       	st	Z, r1
    11f4:	08 95       	ret

000011f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    11f6:	fc 01       	movw	r30, r24
    11f8:	12 86       	std	Z+10, r1	; 0x0a
    11fa:	13 86       	std	Z+11, r1	; 0x0b
    11fc:	08 95       	ret

000011fe <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	fc 01       	movw	r30, r24
    1204:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    1206:	21 81       	ldd	r18, Z+1	; 0x01
    1208:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    120a:	e9 01       	movw	r28, r18
    120c:	8c 81       	ldd	r24, Y+4	; 0x04
    120e:	9d 81       	ldd	r25, Y+5	; 0x05
    1210:	14 96       	adiw	r26, 0x04	; 4
    1212:	8d 93       	st	X+, r24
    1214:	9c 93       	st	X, r25
    1216:	15 97       	sbiw	r26, 0x05	; 5
	pxNewListItem->pxPrevious = pxList->pxIndex;
    1218:	81 81       	ldd	r24, Z+1	; 0x01
    121a:	92 81       	ldd	r25, Z+2	; 0x02
    121c:	16 96       	adiw	r26, 0x06	; 6
    121e:	8d 93       	st	X+, r24
    1220:	9c 93       	st	X, r25
    1222:	17 97       	sbiw	r26, 0x07	; 7
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	ec 01       	movw	r28, r24
    122a:	6e 83       	std	Y+6, r22	; 0x06
    122c:	7f 83       	std	Y+7, r23	; 0x07
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    122e:	e9 01       	movw	r28, r18
    1230:	6c 83       	std	Y+4, r22	; 0x04
    1232:	7d 83       	std	Y+5, r23	; 0x05
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    1234:	61 83       	std	Z+1, r22	; 0x01
    1236:	72 83       	std	Z+2, r23	; 0x02

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1238:	1a 96       	adiw	r26, 0x0a	; 10
    123a:	ed 93       	st	X+, r30
    123c:	fc 93       	st	X, r31
    123e:	1b 97       	sbiw	r26, 0x0b	; 11

	( pxList->uxNumberOfItems )++;
    1240:	80 81       	ld	r24, Z
    1242:	8f 5f       	subi	r24, 0xFF	; 255
    1244:	80 83       	st	Z, r24
}
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	08 95       	ret

0000124c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    124c:	0f 93       	push	r16
    124e:	1f 93       	push	r17
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    1256:	08 81       	ld	r16, Y
    1258:	19 81       	ldd	r17, Y+1	; 0x01
    125a:	2a 81       	ldd	r18, Y+2	; 0x02
    125c:	3b 81       	ldd	r19, Y+3	; 0x03
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    125e:	0f 3f       	cpi	r16, 0xFF	; 255
    1260:	4f ef       	ldi	r20, 0xFF	; 255
    1262:	14 07       	cpc	r17, r20
    1264:	24 07       	cpc	r18, r20
    1266:	34 07       	cpc	r19, r20
    1268:	31 f4       	brne	.+12     	; 0x1276 <vListInsert+0x2a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    126a:	dc 01       	movw	r26, r24
    126c:	19 96       	adiw	r26, 0x09	; 9
    126e:	ed 91       	ld	r30, X+
    1270:	fc 91       	ld	r31, X
    1272:	1a 97       	sbiw	r26, 0x0a	; 10
    1274:	1f c0       	rjmp	.+62     	; 0x12b4 <vListInsert+0x68>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    1276:	fc 01       	movw	r30, r24
    1278:	33 96       	adiw	r30, 0x03	; 3
    127a:	dc 01       	movw	r26, r24
    127c:	17 96       	adiw	r26, 0x07	; 7
    127e:	4d 91       	ld	r20, X+
    1280:	5c 91       	ld	r21, X
    1282:	18 97       	sbiw	r26, 0x08	; 8
    1284:	da 01       	movw	r26, r20
    1286:	4d 91       	ld	r20, X+
    1288:	5d 91       	ld	r21, X+
    128a:	6d 91       	ld	r22, X+
    128c:	7c 91       	ld	r23, X
    128e:	04 17       	cp	r16, r20
    1290:	15 07       	cpc	r17, r21
    1292:	26 07       	cpc	r18, r22
    1294:	37 07       	cpc	r19, r23
    1296:	70 f0       	brcs	.+28     	; 0x12b4 <vListInsert+0x68>
    1298:	04 80       	ldd	r0, Z+4	; 0x04
    129a:	f5 81       	ldd	r31, Z+5	; 0x05
    129c:	e0 2d       	mov	r30, r0
    129e:	a4 81       	ldd	r26, Z+4	; 0x04
    12a0:	b5 81       	ldd	r27, Z+5	; 0x05
    12a2:	4d 91       	ld	r20, X+
    12a4:	5d 91       	ld	r21, X+
    12a6:	6d 91       	ld	r22, X+
    12a8:	7c 91       	ld	r23, X
    12aa:	04 17       	cp	r16, r20
    12ac:	15 07       	cpc	r17, r21
    12ae:	26 07       	cpc	r18, r22
    12b0:	37 07       	cpc	r19, r23
    12b2:	90 f7       	brcc	.-28     	; 0x1298 <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    12b4:	a4 81       	ldd	r26, Z+4	; 0x04
    12b6:	b5 81       	ldd	r27, Z+5	; 0x05
    12b8:	ac 83       	std	Y+4, r26	; 0x04
    12ba:	bd 83       	std	Y+5, r27	; 0x05
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    12bc:	16 96       	adiw	r26, 0x06	; 6
    12be:	cd 93       	st	X+, r28
    12c0:	dc 93       	st	X, r29
    12c2:	17 97       	sbiw	r26, 0x07	; 7
	pxNewListItem->pxPrevious = pxIterator;
    12c4:	ee 83       	std	Y+6, r30	; 0x06
    12c6:	ff 83       	std	Y+7, r31	; 0x07
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    12c8:	c4 83       	std	Z+4, r28	; 0x04
    12ca:	d5 83       	std	Z+5, r29	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    12cc:	8a 87       	std	Y+10, r24	; 0x0a
    12ce:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
    12d0:	fc 01       	movw	r30, r24
    12d2:	20 81       	ld	r18, Z
    12d4:	2f 5f       	subi	r18, 0xFF	; 255
    12d6:	20 83       	st	Z, r18
}
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	08 95       	ret

000012e2 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    12e2:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    12e4:	a4 81       	ldd	r26, Z+4	; 0x04
    12e6:	b5 81       	ldd	r27, Z+5	; 0x05
    12e8:	86 81       	ldd	r24, Z+6	; 0x06
    12ea:	97 81       	ldd	r25, Z+7	; 0x07
    12ec:	16 96       	adiw	r26, 0x06	; 6
    12ee:	8d 93       	st	X+, r24
    12f0:	9c 93       	st	X, r25
    12f2:	17 97       	sbiw	r26, 0x07	; 7
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    12f4:	a6 81       	ldd	r26, Z+6	; 0x06
    12f6:	b7 81       	ldd	r27, Z+7	; 0x07
    12f8:	84 81       	ldd	r24, Z+4	; 0x04
    12fa:	95 81       	ldd	r25, Z+5	; 0x05
    12fc:	14 96       	adiw	r26, 0x04	; 4
    12fe:	8d 93       	st	X+, r24
    1300:	9c 93       	st	X, r25
    1302:	15 97       	sbiw	r26, 0x05	; 5
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    1304:	a2 85       	ldd	r26, Z+10	; 0x0a
    1306:	b3 85       	ldd	r27, Z+11	; 0x0b

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1308:	11 96       	adiw	r26, 0x01	; 1
    130a:	8d 91       	ld	r24, X+
    130c:	9c 91       	ld	r25, X
    130e:	12 97       	sbiw	r26, 0x02	; 2
    1310:	e8 17       	cp	r30, r24
    1312:	f9 07       	cpc	r31, r25
    1314:	31 f4       	brne	.+12     	; 0x1322 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1316:	86 81       	ldd	r24, Z+6	; 0x06
    1318:	97 81       	ldd	r25, Z+7	; 0x07
    131a:	11 96       	adiw	r26, 0x01	; 1
    131c:	8d 93       	st	X+, r24
    131e:	9c 93       	st	X, r25
    1320:	12 97       	sbiw	r26, 0x02	; 2
	}

	pxItemToRemove->pvContainer = NULL;
    1322:	12 86       	std	Z+10, r1	; 0x0a
    1324:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    1326:	8c 91       	ld	r24, X
    1328:	81 50       	subi	r24, 0x01	; 1
    132a:	8c 93       	st	X, r24
    132c:	08 95       	ret

0000132e <pxPortInitialiseStack>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    132e:	80 93 ac 31 	sts	0x31AC, r24	; 0x8031ac <portStackTopForTask>
    1332:	90 93 ad 31 	sts	0x31AD, r25	; 0x8031ad <portStackTopForTask+0x1>
    1336:	31 e1       	ldi	r19, 0x11	; 17
    1338:	fc 01       	movw	r30, r24
    133a:	30 83       	st	Z, r19
    133c:	31 97       	sbiw	r30, 0x01	; 1
    133e:	22 e2       	ldi	r18, 0x22	; 34
    1340:	20 83       	st	Z, r18
    1342:	31 97       	sbiw	r30, 0x01	; 1
    1344:	a3 e3       	ldi	r26, 0x33	; 51
    1346:	a0 83       	st	Z, r26
    1348:	31 97       	sbiw	r30, 0x01	; 1
    134a:	60 83       	st	Z, r22
    134c:	31 97       	sbiw	r30, 0x01	; 1
    134e:	70 83       	st	Z, r23
    1350:	31 97       	sbiw	r30, 0x01	; 1
    1352:	10 82       	st	Z, r1
    1354:	31 97       	sbiw	r30, 0x01	; 1
    1356:	10 82       	st	Z, r1
    1358:	31 97       	sbiw	r30, 0x01	; 1
    135a:	60 e8       	ldi	r22, 0x80	; 128
    135c:	60 83       	st	Z, r22
    135e:	31 97       	sbiw	r30, 0x01	; 1
    1360:	10 82       	st	Z, r1
    1362:	31 97       	sbiw	r30, 0x01	; 1
    1364:	10 82       	st	Z, r1
    1366:	31 97       	sbiw	r30, 0x01	; 1
    1368:	10 82       	st	Z, r1
    136a:	31 97       	sbiw	r30, 0x01	; 1
    136c:	62 e0       	ldi	r22, 0x02	; 2
    136e:	60 83       	st	Z, r22
    1370:	31 97       	sbiw	r30, 0x01	; 1
    1372:	63 e0       	ldi	r22, 0x03	; 3
    1374:	60 83       	st	Z, r22
    1376:	31 97       	sbiw	r30, 0x01	; 1
    1378:	64 e0       	ldi	r22, 0x04	; 4
    137a:	60 83       	st	Z, r22
    137c:	31 97       	sbiw	r30, 0x01	; 1
    137e:	65 e0       	ldi	r22, 0x05	; 5
    1380:	60 83       	st	Z, r22
    1382:	31 97       	sbiw	r30, 0x01	; 1
    1384:	66 e0       	ldi	r22, 0x06	; 6
    1386:	60 83       	st	Z, r22
    1388:	31 97       	sbiw	r30, 0x01	; 1
    138a:	67 e0       	ldi	r22, 0x07	; 7
    138c:	60 83       	st	Z, r22
    138e:	31 97       	sbiw	r30, 0x01	; 1
    1390:	68 e0       	ldi	r22, 0x08	; 8
    1392:	60 83       	st	Z, r22
    1394:	31 97       	sbiw	r30, 0x01	; 1
    1396:	69 e0       	ldi	r22, 0x09	; 9
    1398:	60 83       	st	Z, r22
    139a:	31 97       	sbiw	r30, 0x01	; 1
    139c:	60 e1       	ldi	r22, 0x10	; 16
    139e:	60 83       	st	Z, r22
    13a0:	31 97       	sbiw	r30, 0x01	; 1
    13a2:	30 83       	st	Z, r19
    13a4:	31 97       	sbiw	r30, 0x01	; 1
    13a6:	32 e1       	ldi	r19, 0x12	; 18
    13a8:	30 83       	st	Z, r19
    13aa:	31 97       	sbiw	r30, 0x01	; 1
    13ac:	33 e1       	ldi	r19, 0x13	; 19
    13ae:	30 83       	st	Z, r19
    13b0:	31 97       	sbiw	r30, 0x01	; 1
    13b2:	34 e1       	ldi	r19, 0x14	; 20
    13b4:	30 83       	st	Z, r19
    13b6:	31 97       	sbiw	r30, 0x01	; 1
    13b8:	35 e1       	ldi	r19, 0x15	; 21
    13ba:	30 83       	st	Z, r19
    13bc:	31 97       	sbiw	r30, 0x01	; 1
    13be:	36 e1       	ldi	r19, 0x16	; 22
    13c0:	30 83       	st	Z, r19
    13c2:	31 97       	sbiw	r30, 0x01	; 1
    13c4:	37 e1       	ldi	r19, 0x17	; 23
    13c6:	30 83       	st	Z, r19
    13c8:	31 97       	sbiw	r30, 0x01	; 1
    13ca:	38 e1       	ldi	r19, 0x18	; 24
    13cc:	30 83       	st	Z, r19
    13ce:	31 97       	sbiw	r30, 0x01	; 1
    13d0:	39 e1       	ldi	r19, 0x19	; 25
    13d2:	30 83       	st	Z, r19
    13d4:	31 97       	sbiw	r30, 0x01	; 1
    13d6:	30 e2       	ldi	r19, 0x20	; 32
    13d8:	30 83       	st	Z, r19
    13da:	31 97       	sbiw	r30, 0x01	; 1
    13dc:	31 e2       	ldi	r19, 0x21	; 33
    13de:	30 83       	st	Z, r19
    13e0:	31 97       	sbiw	r30, 0x01	; 1
    13e2:	20 83       	st	Z, r18
    13e4:	31 97       	sbiw	r30, 0x01	; 1
    13e6:	23 e2       	ldi	r18, 0x23	; 35
    13e8:	20 83       	st	Z, r18
    13ea:	31 97       	sbiw	r30, 0x01	; 1
    13ec:	40 83       	st	Z, r20
    13ee:	31 97       	sbiw	r30, 0x01	; 1
    13f0:	50 83       	st	Z, r21
    13f2:	31 97       	sbiw	r30, 0x01	; 1
    13f4:	26 e2       	ldi	r18, 0x26	; 38
    13f6:	20 83       	st	Z, r18
    13f8:	31 97       	sbiw	r30, 0x01	; 1
    13fa:	27 e2       	ldi	r18, 0x27	; 39
    13fc:	20 83       	st	Z, r18
    13fe:	31 97       	sbiw	r30, 0x01	; 1
    1400:	28 e2       	ldi	r18, 0x28	; 40
    1402:	20 83       	st	Z, r18
    1404:	31 97       	sbiw	r30, 0x01	; 1
    1406:	29 e2       	ldi	r18, 0x29	; 41
    1408:	20 83       	st	Z, r18
    140a:	31 97       	sbiw	r30, 0x01	; 1
    140c:	20 e3       	ldi	r18, 0x30	; 48
    140e:	20 83       	st	Z, r18
    1410:	31 97       	sbiw	r30, 0x01	; 1
    1412:	21 e3       	ldi	r18, 0x31	; 49
    1414:	20 83       	st	Z, r18
    1416:	89 97       	sbiw	r24, 0x29	; 41
    1418:	08 95       	ret

0000141a <xPortStartScheduler>:
    141a:	8c e7       	ldi	r24, 0x7C	; 124
    141c:	80 93 69 08 	sts	0x0869, r24	; 0x800869 <__TEXT_REGION_LENGTH__+0x700869>
    1420:	8f ef       	ldi	r24, 0xFF	; 255
    1422:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x700868>
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
    142c:	91 e1       	ldi	r25, 0x11	; 17
    142e:	90 93 41 08 	sts	0x0841, r25	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    1432:	80 93 47 08 	sts	0x0847, r24	; 0x800847 <__TEXT_REGION_LENGTH__+0x700847>
    1436:	a0 91 48 31 	lds	r26, 0x3148	; 0x803148 <pxCurrentTCB>
    143a:	b0 91 49 31 	lds	r27, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
    143e:	cd 91       	ld	r28, X+
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	dd 91       	ld	r29, X+
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	ff 91       	pop	r31
    1448:	ef 91       	pop	r30
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	bf 91       	pop	r27
    1450:	af 91       	pop	r26
    1452:	9f 91       	pop	r25
    1454:	8f 91       	pop	r24
    1456:	7f 91       	pop	r23
    1458:	6f 91       	pop	r22
    145a:	5f 91       	pop	r21
    145c:	4f 91       	pop	r20
    145e:	3f 91       	pop	r19
    1460:	2f 91       	pop	r18
    1462:	1f 91       	pop	r17
    1464:	0f 91       	pop	r16
    1466:	ff 90       	pop	r15
    1468:	ef 90       	pop	r14
    146a:	df 90       	pop	r13
    146c:	cf 90       	pop	r12
    146e:	bf 90       	pop	r11
    1470:	af 90       	pop	r10
    1472:	9f 90       	pop	r9
    1474:	8f 90       	pop	r8
    1476:	7f 90       	pop	r7
    1478:	6f 90       	pop	r6
    147a:	5f 90       	pop	r5
    147c:	4f 90       	pop	r4
    147e:	3f 90       	pop	r3
    1480:	2f 90       	pop	r2
    1482:	1f 90       	pop	r1
    1484:	0f 90       	pop	r0
    1486:	0c be       	out	0x3c, r0	; 60
    1488:	0f 90       	pop	r0
    148a:	0b be       	out	0x3b, r0	; 59
    148c:	0f 90       	pop	r0
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	0f 90       	pop	r0
    1492:	08 95       	ret
    1494:	08 95       	ret

00001496 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1496:	0f 92       	push	r0
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	0f 92       	push	r0
    149e:	0b b6       	in	r0, 0x3b	; 59
    14a0:	0f 92       	push	r0
    14a2:	0c b6       	in	r0, 0x3c	; 60
    14a4:	0f 92       	push	r0
    14a6:	1f 92       	push	r1
    14a8:	11 24       	eor	r1, r1
    14aa:	2f 92       	push	r2
    14ac:	3f 92       	push	r3
    14ae:	4f 92       	push	r4
    14b0:	5f 92       	push	r5
    14b2:	6f 92       	push	r6
    14b4:	7f 92       	push	r7
    14b6:	8f 92       	push	r8
    14b8:	9f 92       	push	r9
    14ba:	af 92       	push	r10
    14bc:	bf 92       	push	r11
    14be:	cf 92       	push	r12
    14c0:	df 92       	push	r13
    14c2:	ef 92       	push	r14
    14c4:	ff 92       	push	r15
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	2f 93       	push	r18
    14cc:	3f 93       	push	r19
    14ce:	4f 93       	push	r20
    14d0:	5f 93       	push	r21
    14d2:	6f 93       	push	r22
    14d4:	7f 93       	push	r23
    14d6:	8f 93       	push	r24
    14d8:	9f 93       	push	r25
    14da:	af 93       	push	r26
    14dc:	bf 93       	push	r27
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	ef 93       	push	r30
    14e4:	ff 93       	push	r31
    14e6:	a0 91 48 31 	lds	r26, 0x3148	; 0x803148 <pxCurrentTCB>
    14ea:	b0 91 49 31 	lds	r27, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
    14ee:	0d b6       	in	r0, 0x3d	; 61
    14f0:	0d 92       	st	X+, r0
    14f2:	0e b6       	in	r0, 0x3e	; 62
    14f4:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    14f6:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    14fa:	a0 91 48 31 	lds	r26, 0x3148	; 0x803148 <pxCurrentTCB>
    14fe:	b0 91 49 31 	lds	r27, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
    1502:	cd 91       	ld	r28, X+
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	dd 91       	ld	r29, X+
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	ff 91       	pop	r31
    150c:	ef 91       	pop	r30
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	bf 91       	pop	r27
    1514:	af 91       	pop	r26
    1516:	9f 91       	pop	r25
    1518:	8f 91       	pop	r24
    151a:	7f 91       	pop	r23
    151c:	6f 91       	pop	r22
    151e:	5f 91       	pop	r21
    1520:	4f 91       	pop	r20
    1522:	3f 91       	pop	r19
    1524:	2f 91       	pop	r18
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	df 90       	pop	r13
    1530:	cf 90       	pop	r12
    1532:	bf 90       	pop	r11
    1534:	af 90       	pop	r10
    1536:	9f 90       	pop	r9
    1538:	8f 90       	pop	r8
    153a:	7f 90       	pop	r7
    153c:	6f 90       	pop	r6
    153e:	5f 90       	pop	r5
    1540:	4f 90       	pop	r4
    1542:	3f 90       	pop	r3
    1544:	2f 90       	pop	r2
    1546:	1f 90       	pop	r1
    1548:	0f 90       	pop	r0
    154a:	0c be       	out	0x3c, r0	; 60
    154c:	0f 90       	pop	r0
    154e:	0b be       	out	0x3b, r0	; 59
    1550:	0f 90       	pop	r0
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1556:	08 95       	ret

00001558 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1558:	0f 92       	push	r0
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	0f 92       	push	r0
    1560:	0b b6       	in	r0, 0x3b	; 59
    1562:	0f 92       	push	r0
    1564:	0c b6       	in	r0, 0x3c	; 60
    1566:	0f 92       	push	r0
    1568:	1f 92       	push	r1
    156a:	11 24       	eor	r1, r1
    156c:	2f 92       	push	r2
    156e:	3f 92       	push	r3
    1570:	4f 92       	push	r4
    1572:	5f 92       	push	r5
    1574:	6f 92       	push	r6
    1576:	7f 92       	push	r7
    1578:	8f 92       	push	r8
    157a:	9f 92       	push	r9
    157c:	af 92       	push	r10
    157e:	bf 92       	push	r11
    1580:	cf 92       	push	r12
    1582:	df 92       	push	r13
    1584:	ef 92       	push	r14
    1586:	ff 92       	push	r15
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	2f 93       	push	r18
    158e:	3f 93       	push	r19
    1590:	4f 93       	push	r20
    1592:	5f 93       	push	r21
    1594:	6f 93       	push	r22
    1596:	7f 93       	push	r23
    1598:	8f 93       	push	r24
    159a:	9f 93       	push	r25
    159c:	af 93       	push	r26
    159e:	bf 93       	push	r27
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	ef 93       	push	r30
    15a6:	ff 93       	push	r31
    15a8:	a0 91 48 31 	lds	r26, 0x3148	; 0x803148 <pxCurrentTCB>
    15ac:	b0 91 49 31 	lds	r27, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
    15b0:	0d b6       	in	r0, 0x3d	; 61
    15b2:	0d 92       	st	X+, r0
    15b4:	0e b6       	in	r0, 0x3e	; 62
    15b6:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    15b8:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <vTaskIncrementTick>
	vTaskSwitchContext();
    15bc:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    15c0:	a0 91 48 31 	lds	r26, 0x3148	; 0x803148 <pxCurrentTCB>
    15c4:	b0 91 49 31 	lds	r27, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
    15c8:	cd 91       	ld	r28, X+
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	dd 91       	ld	r29, X+
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	ff 91       	pop	r31
    15d2:	ef 91       	pop	r30
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	bf 91       	pop	r27
    15da:	af 91       	pop	r26
    15dc:	9f 91       	pop	r25
    15de:	8f 91       	pop	r24
    15e0:	7f 91       	pop	r23
    15e2:	6f 91       	pop	r22
    15e4:	5f 91       	pop	r21
    15e6:	4f 91       	pop	r20
    15e8:	3f 91       	pop	r19
    15ea:	2f 91       	pop	r18
    15ec:	1f 91       	pop	r17
    15ee:	0f 91       	pop	r16
    15f0:	ff 90       	pop	r15
    15f2:	ef 90       	pop	r14
    15f4:	df 90       	pop	r13
    15f6:	cf 90       	pop	r12
    15f8:	bf 90       	pop	r11
    15fa:	af 90       	pop	r10
    15fc:	9f 90       	pop	r9
    15fe:	8f 90       	pop	r8
    1600:	7f 90       	pop	r7
    1602:	6f 90       	pop	r6
    1604:	5f 90       	pop	r5
    1606:	4f 90       	pop	r4
    1608:	3f 90       	pop	r3
    160a:	2f 90       	pop	r2
    160c:	1f 90       	pop	r1
    160e:	0f 90       	pop	r0
    1610:	0c be       	out	0x3c, r0	; 60
    1612:	0f 90       	pop	r0
    1614:	0b be       	out	0x3b, r0	; 59
    1616:	0f 90       	pop	r0
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	0f 90       	pop	r0

	asm volatile ( "ret" );
    161c:	08 95       	ret

0000161e <__vector_22>:
void RT_VECT (void) __attribute__ ((signal, naked));
void RT_VECT (void)
{
	// For the preemptive scheduler, enable a context switch
	#if configUSE_PREEMPTION == 1
		vPortYieldFromTick ();
    161e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1622:	18 95       	reti

00001624 <prvCopyDataToQueue>:
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	ec 01       	movw	r28, r24
    162a:	88 a1       	ldd	r24, Y+32	; 0x20
    162c:	81 11       	cpse	r24, r1
    162e:	0b c0       	rjmp	.+22     	; 0x1646 <prvCopyDataToQueue+0x22>
    1630:	88 81       	ld	r24, Y
    1632:	99 81       	ldd	r25, Y+1	; 0x01
    1634:	89 2b       	or	r24, r25
    1636:	e1 f5       	brne	.+120    	; 0x16b0 <prvCopyDataToQueue+0x8c>
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	9b 81       	ldd	r25, Y+3	; 0x03
    163c:	0e 94 15 13 	call	0x262a	; 0x262a <vTaskPriorityDisinherit>
    1640:	1a 82       	std	Y+2, r1	; 0x02
    1642:	1b 82       	std	Y+3, r1	; 0x03
    1644:	35 c0       	rjmp	.+106    	; 0x16b0 <prvCopyDataToQueue+0x8c>
    1646:	41 11       	cpse	r20, r1
    1648:	17 c0       	rjmp	.+46     	; 0x1678 <prvCopyDataToQueue+0x54>
    164a:	48 2f       	mov	r20, r24
    164c:	50 e0       	ldi	r21, 0x00	; 0
    164e:	8c 81       	ldd	r24, Y+4	; 0x04
    1650:	9d 81       	ldd	r25, Y+5	; 0x05
    1652:	0e 94 48 20 	call	0x4090	; 0x4090 <memcpy>
    1656:	28 a1       	ldd	r18, Y+32	; 0x20
    1658:	8c 81       	ldd	r24, Y+4	; 0x04
    165a:	9d 81       	ldd	r25, Y+5	; 0x05
    165c:	82 0f       	add	r24, r18
    165e:	91 1d       	adc	r25, r1
    1660:	8c 83       	std	Y+4, r24	; 0x04
    1662:	9d 83       	std	Y+5, r25	; 0x05
    1664:	2a 81       	ldd	r18, Y+2	; 0x02
    1666:	3b 81       	ldd	r19, Y+3	; 0x03
    1668:	82 17       	cp	r24, r18
    166a:	93 07       	cpc	r25, r19
    166c:	08 f1       	brcs	.+66     	; 0x16b0 <prvCopyDataToQueue+0x8c>
    166e:	88 81       	ld	r24, Y
    1670:	99 81       	ldd	r25, Y+1	; 0x01
    1672:	8c 83       	std	Y+4, r24	; 0x04
    1674:	9d 83       	std	Y+5, r25	; 0x05
    1676:	1c c0       	rjmp	.+56     	; 0x16b0 <prvCopyDataToQueue+0x8c>
    1678:	48 2f       	mov	r20, r24
    167a:	50 e0       	ldi	r21, 0x00	; 0
    167c:	8e 81       	ldd	r24, Y+6	; 0x06
    167e:	9f 81       	ldd	r25, Y+7	; 0x07
    1680:	0e 94 48 20 	call	0x4090	; 0x4090 <memcpy>
    1684:	88 a1       	ldd	r24, Y+32	; 0x20
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	91 95       	neg	r25
    168a:	81 95       	neg	r24
    168c:	91 09       	sbc	r25, r1
    168e:	2e 81       	ldd	r18, Y+6	; 0x06
    1690:	3f 81       	ldd	r19, Y+7	; 0x07
    1692:	28 0f       	add	r18, r24
    1694:	39 1f       	adc	r19, r25
    1696:	2e 83       	std	Y+6, r18	; 0x06
    1698:	3f 83       	std	Y+7, r19	; 0x07
    169a:	48 81       	ld	r20, Y
    169c:	59 81       	ldd	r21, Y+1	; 0x01
    169e:	24 17       	cp	r18, r20
    16a0:	35 07       	cpc	r19, r21
    16a2:	30 f4       	brcc	.+12     	; 0x16b0 <prvCopyDataToQueue+0x8c>
    16a4:	2a 81       	ldd	r18, Y+2	; 0x02
    16a6:	3b 81       	ldd	r19, Y+3	; 0x03
    16a8:	82 0f       	add	r24, r18
    16aa:	93 1f       	adc	r25, r19
    16ac:	8e 83       	std	Y+6, r24	; 0x06
    16ae:	9f 83       	std	Y+7, r25	; 0x07
    16b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16b2:	8f 5f       	subi	r24, 0xFF	; 255
    16b4:	8e 8f       	std	Y+30, r24	; 0x1e
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	08 95       	ret

000016bc <prvCopyDataFromQueue>:
    16bc:	fc 01       	movw	r30, r24
    16be:	80 81       	ld	r24, Z
    16c0:	91 81       	ldd	r25, Z+1	; 0x01
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	a1 f0       	breq	.+40     	; 0x16ee <prvCopyDataFromQueue+0x32>
    16c6:	40 a1       	ldd	r20, Z+32	; 0x20
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	26 81       	ldd	r18, Z+6	; 0x06
    16cc:	37 81       	ldd	r19, Z+7	; 0x07
    16ce:	24 0f       	add	r18, r20
    16d0:	35 1f       	adc	r19, r21
    16d2:	26 83       	std	Z+6, r18	; 0x06
    16d4:	37 83       	std	Z+7, r19	; 0x07
    16d6:	a2 81       	ldd	r26, Z+2	; 0x02
    16d8:	b3 81       	ldd	r27, Z+3	; 0x03
    16da:	2a 17       	cp	r18, r26
    16dc:	3b 07       	cpc	r19, r27
    16de:	10 f0       	brcs	.+4      	; 0x16e4 <prvCopyDataFromQueue+0x28>
    16e0:	86 83       	std	Z+6, r24	; 0x06
    16e2:	97 83       	std	Z+7, r25	; 0x07
    16e4:	cb 01       	movw	r24, r22
    16e6:	66 81       	ldd	r22, Z+6	; 0x06
    16e8:	77 81       	ldd	r23, Z+7	; 0x07
    16ea:	0e 94 48 20 	call	0x4090	; 0x4090 <memcpy>
    16ee:	08 95       	ret

000016f0 <prvUnlockQueue>:
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	ec 01       	movw	r28, r24
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	0f 92       	push	r0
    1700:	8a a1       	ldd	r24, Y+34	; 0x22
    1702:	18 16       	cp	r1, r24
    1704:	b4 f4       	brge	.+44     	; 0x1732 <prvUnlockQueue+0x42>
    1706:	8b 89       	ldd	r24, Y+19	; 0x13
    1708:	81 11       	cpse	r24, r1
    170a:	05 c0       	rjmp	.+10     	; 0x1716 <prvUnlockQueue+0x26>
    170c:	12 c0       	rjmp	.+36     	; 0x1732 <prvUnlockQueue+0x42>
    170e:	8b 89       	ldd	r24, Y+19	; 0x13
    1710:	81 11       	cpse	r24, r1
    1712:	04 c0       	rjmp	.+8      	; 0x171c <prvUnlockQueue+0x2c>
    1714:	0e c0       	rjmp	.+28     	; 0x1732 <prvUnlockQueue+0x42>
    1716:	8e 01       	movw	r16, r28
    1718:	0d 5e       	subi	r16, 0xED	; 237
    171a:	1f 4f       	sbci	r17, 0xFF	; 255
    171c:	c8 01       	movw	r24, r16
    171e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <xTaskRemoveFromEventList>
    1722:	81 11       	cpse	r24, r1
    1724:	0e 94 9e 12 	call	0x253c	; 0x253c <vTaskMissedYield>
    1728:	8a a1       	ldd	r24, Y+34	; 0x22
    172a:	81 50       	subi	r24, 0x01	; 1
    172c:	8a a3       	std	Y+34, r24	; 0x22
    172e:	18 16       	cp	r1, r24
    1730:	74 f3       	brlt	.-36     	; 0x170e <prvUnlockQueue+0x1e>
    1732:	8f ef       	ldi	r24, 0xFF	; 255
    1734:	8a a3       	std	Y+34, r24	; 0x22
    1736:	0f 90       	pop	r0
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	0f 92       	push	r0
    1740:	89 a1       	ldd	r24, Y+33	; 0x21
    1742:	18 16       	cp	r1, r24
    1744:	b4 f4       	brge	.+44     	; 0x1772 <prvUnlockQueue+0x82>
    1746:	88 85       	ldd	r24, Y+8	; 0x08
    1748:	81 11       	cpse	r24, r1
    174a:	05 c0       	rjmp	.+10     	; 0x1756 <prvUnlockQueue+0x66>
    174c:	12 c0       	rjmp	.+36     	; 0x1772 <prvUnlockQueue+0x82>
    174e:	88 85       	ldd	r24, Y+8	; 0x08
    1750:	81 11       	cpse	r24, r1
    1752:	04 c0       	rjmp	.+8      	; 0x175c <prvUnlockQueue+0x6c>
    1754:	0e c0       	rjmp	.+28     	; 0x1772 <prvUnlockQueue+0x82>
    1756:	8e 01       	movw	r16, r28
    1758:	08 5f       	subi	r16, 0xF8	; 248
    175a:	1f 4f       	sbci	r17, 0xFF	; 255
    175c:	c8 01       	movw	r24, r16
    175e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <xTaskRemoveFromEventList>
    1762:	81 11       	cpse	r24, r1
    1764:	0e 94 9e 12 	call	0x253c	; 0x253c <vTaskMissedYield>
    1768:	89 a1       	ldd	r24, Y+33	; 0x21
    176a:	81 50       	subi	r24, 0x01	; 1
    176c:	89 a3       	std	Y+33, r24	; 0x21
    176e:	18 16       	cp	r1, r24
    1770:	74 f3       	brlt	.-36     	; 0x174e <prvUnlockQueue+0x5e>
    1772:	8f ef       	ldi	r24, 0xFF	; 255
    1774:	89 a3       	std	Y+33, r24	; 0x21
    1776:	0f 90       	pop	r0
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	1f 91       	pop	r17
    1780:	0f 91       	pop	r16
    1782:	08 95       	ret

00001784 <xQueueGenericReset>:
    1784:	1f 93       	push	r17
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	61 30       	cpi	r22, 0x01	; 1
    178c:	59 f0       	breq	.+22     	; 0x17a4 <xQueueGenericReset+0x20>
    178e:	fc 01       	movw	r30, r24
    1790:	23 89       	ldd	r18, Z+19	; 0x13
    1792:	30 85       	ldd	r19, Z+8	; 0x08
    1794:	31 11       	cpse	r19, r1
    1796:	2c c0       	rjmp	.+88     	; 0x17f0 <xQueueGenericReset+0x6c>
    1798:	11 e0       	ldi	r17, 0x01	; 1
    179a:	21 11       	cpse	r18, r1
    179c:	10 e0       	ldi	r17, 0x00	; 0
    179e:	21 11       	cpse	r18, r1
    17a0:	28 c0       	rjmp	.+80     	; 0x17f2 <xQueueGenericReset+0x6e>
    17a2:	01 c0       	rjmp	.+2      	; 0x17a6 <xQueueGenericReset+0x22>
    17a4:	11 e0       	ldi	r17, 0x01	; 1
    17a6:	ec 01       	movw	r28, r24
    17a8:	48 81       	ld	r20, Y
    17aa:	59 81       	ldd	r21, Y+1	; 0x01
    17ac:	28 a1       	ldd	r18, Y+32	; 0x20
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    17b2:	62 9f       	mul	r22, r18
    17b4:	c0 01       	movw	r24, r0
    17b6:	63 9f       	mul	r22, r19
    17b8:	90 0d       	add	r25, r0
    17ba:	11 24       	eor	r1, r1
    17bc:	ba 01       	movw	r22, r20
    17be:	68 0f       	add	r22, r24
    17c0:	79 1f       	adc	r23, r25
    17c2:	6a 83       	std	Y+2, r22	; 0x02
    17c4:	7b 83       	std	Y+3, r23	; 0x03
    17c6:	1e 8e       	std	Y+30, r1	; 0x1e
    17c8:	4c 83       	std	Y+4, r20	; 0x04
    17ca:	5d 83       	std	Y+5, r21	; 0x05
    17cc:	82 1b       	sub	r24, r18
    17ce:	93 0b       	sbc	r25, r19
    17d0:	84 0f       	add	r24, r20
    17d2:	95 1f       	adc	r25, r21
    17d4:	8e 83       	std	Y+6, r24	; 0x06
    17d6:	9f 83       	std	Y+7, r25	; 0x07
    17d8:	8f ef       	ldi	r24, 0xFF	; 255
    17da:	89 a3       	std	Y+33, r24	; 0x21
    17dc:	8a a3       	std	Y+34, r24	; 0x22
    17de:	ce 01       	movw	r24, r28
    17e0:	08 96       	adiw	r24, 0x08	; 8
    17e2:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <vListInitialise>
    17e6:	ce 01       	movw	r24, r28
    17e8:	43 96       	adiw	r24, 0x13	; 19
    17ea:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <vListInitialise>
    17ee:	01 c0       	rjmp	.+2      	; 0x17f2 <xQueueGenericReset+0x6e>
    17f0:	10 e0       	ldi	r17, 0x00	; 0
    17f2:	81 2f       	mov	r24, r17
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	1f 91       	pop	r17
    17fa:	08 95       	ret

000017fc <xQueueGenericCreate>:
    17fc:	0f 93       	push	r16
    17fe:	1f 93       	push	r17
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	88 23       	and	r24, r24
    1806:	01 f1       	breq	.+64     	; 0x1848 <xQueueGenericCreate+0x4c>
    1808:	06 2f       	mov	r16, r22
    180a:	18 2f       	mov	r17, r24
    180c:	83 e2       	ldi	r24, 0x23	; 35
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 18 08 	call	0x1030	; 0x1030 <pvPortMalloc>
    1814:	ec 01       	movw	r28, r24
    1816:	89 2b       	or	r24, r25
    1818:	c9 f0       	breq	.+50     	; 0x184c <xQueueGenericCreate+0x50>
    181a:	10 9f       	mul	r17, r16
    181c:	c0 01       	movw	r24, r0
    181e:	11 24       	eor	r1, r1
    1820:	01 96       	adiw	r24, 0x01	; 1
    1822:	0e 94 18 08 	call	0x1030	; 0x1030 <pvPortMalloc>
    1826:	88 83       	st	Y, r24
    1828:	99 83       	std	Y+1, r25	; 0x01
    182a:	89 2b       	or	r24, r25
    182c:	39 f0       	breq	.+14     	; 0x183c <xQueueGenericCreate+0x40>
    182e:	1f 8f       	std	Y+31, r17	; 0x1f
    1830:	08 a3       	std	Y+32, r16	; 0x20
    1832:	61 e0       	ldi	r22, 0x01	; 1
    1834:	ce 01       	movw	r24, r28
    1836:	0e 94 c2 0b 	call	0x1784	; 0x1784 <xQueueGenericReset>
    183a:	08 c0       	rjmp	.+16     	; 0x184c <xQueueGenericCreate+0x50>
    183c:	ce 01       	movw	r24, r28
    183e:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPortFree>
    1842:	c0 e0       	ldi	r28, 0x00	; 0
    1844:	d0 e0       	ldi	r29, 0x00	; 0
    1846:	02 c0       	rjmp	.+4      	; 0x184c <xQueueGenericCreate+0x50>
    1848:	c0 e0       	ldi	r28, 0x00	; 0
    184a:	d0 e0       	ldi	r29, 0x00	; 0
    184c:	ce 01       	movw	r24, r28
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	1f 91       	pop	r17
    1854:	0f 91       	pop	r16
    1856:	08 95       	ret

00001858 <xQueueGenericSend>:
    1858:	af 92       	push	r10
    185a:	bf 92       	push	r11
    185c:	cf 92       	push	r12
    185e:	df 92       	push	r13
    1860:	ef 92       	push	r14
    1862:	ff 92       	push	r15
    1864:	0f 93       	push	r16
    1866:	1f 93       	push	r17
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	29 97       	sbiw	r28, 0x09	; 9
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	7c 01       	movw	r14, r24
    1878:	5b 01       	movw	r10, r22
    187a:	2e 83       	std	Y+6, r18	; 0x06
    187c:	3f 83       	std	Y+7, r19	; 0x07
    187e:	48 87       	std	Y+8, r20	; 0x08
    1880:	59 87       	std	Y+9, r21	; 0x09
    1882:	10 e0       	ldi	r17, 0x00	; 0
    1884:	6c 01       	movw	r12, r24
    1886:	88 e0       	ldi	r24, 0x08	; 8
    1888:	c8 0e       	add	r12, r24
    188a:	d1 1c       	adc	r13, r1
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	0f 92       	push	r0
    1892:	f7 01       	movw	r30, r14
    1894:	96 8d       	ldd	r25, Z+30	; 0x1e
    1896:	87 8d       	ldd	r24, Z+31	; 0x1f
    1898:	98 17       	cp	r25, r24
    189a:	a8 f4       	brcc	.+42     	; 0x18c6 <xQueueGenericSend+0x6e>
    189c:	40 2f       	mov	r20, r16
    189e:	b5 01       	movw	r22, r10
    18a0:	c7 01       	movw	r24, r14
    18a2:	0e 94 12 0b 	call	0x1624	; 0x1624 <prvCopyDataToQueue>
    18a6:	f7 01       	movw	r30, r14
    18a8:	83 89       	ldd	r24, Z+19	; 0x13
    18aa:	88 23       	and	r24, r24
    18ac:	41 f0       	breq	.+16     	; 0x18be <xQueueGenericSend+0x66>
    18ae:	c7 01       	movw	r24, r14
    18b0:	43 96       	adiw	r24, 0x13	; 19
    18b2:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <xTaskRemoveFromEventList>
    18b6:	81 30       	cpi	r24, 0x01	; 1
    18b8:	11 f4       	brne	.+4      	; 0x18be <xQueueGenericSend+0x66>
    18ba:	0e 94 4b 0a 	call	0x1496	; 0x1496 <vPortYield>
    18be:	0f 90       	pop	r0
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	56 c0       	rjmp	.+172    	; 0x1972 <xQueueGenericSend+0x11a>
    18c6:	8e 81       	ldd	r24, Y+6	; 0x06
    18c8:	9f 81       	ldd	r25, Y+7	; 0x07
    18ca:	a8 85       	ldd	r26, Y+8	; 0x08
    18cc:	b9 85       	ldd	r27, Y+9	; 0x09
    18ce:	89 2b       	or	r24, r25
    18d0:	8a 2b       	or	r24, r26
    18d2:	8b 2b       	or	r24, r27
    18d4:	21 f4       	brne	.+8      	; 0x18de <xQueueGenericSend+0x86>
    18d6:	0f 90       	pop	r0
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	4a c0       	rjmp	.+148    	; 0x1972 <xQueueGenericSend+0x11a>
    18de:	11 11       	cpse	r17, r1
    18e0:	05 c0       	rjmp	.+10     	; 0x18ec <xQueueGenericSend+0x94>
    18e2:	ce 01       	movw	r24, r28
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	0e 94 20 12 	call	0x2440	; 0x2440 <vTaskSetTimeOutState>
    18ea:	11 e0       	ldi	r17, 0x01	; 1
    18ec:	0f 90       	pop	r0
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <vTaskSuspendAll>
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	0f 92       	push	r0
    18fa:	f7 01       	movw	r30, r14
    18fc:	81 a1       	ldd	r24, Z+33	; 0x21
    18fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1900:	09 f4       	brne	.+2      	; 0x1904 <xQueueGenericSend+0xac>
    1902:	11 a2       	std	Z+33, r1	; 0x21
    1904:	f7 01       	movw	r30, r14
    1906:	82 a1       	ldd	r24, Z+34	; 0x22
    1908:	8f 3f       	cpi	r24, 0xFF	; 255
    190a:	09 f4       	brne	.+2      	; 0x190e <xQueueGenericSend+0xb6>
    190c:	12 a2       	std	Z+34, r1	; 0x22
    190e:	0f 90       	pop	r0
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	be 01       	movw	r22, r28
    1914:	6a 5f       	subi	r22, 0xFA	; 250
    1916:	7f 4f       	sbci	r23, 0xFF	; 255
    1918:	ce 01       	movw	r24, r28
    191a:	01 96       	adiw	r24, 0x01	; 1
    191c:	0e 94 31 12 	call	0x2462	; 0x2462 <xTaskCheckForTimeOut>
    1920:	81 11       	cpse	r24, r1
    1922:	21 c0       	rjmp	.+66     	; 0x1966 <xQueueGenericSend+0x10e>
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	0f 92       	push	r0
    192a:	f7 01       	movw	r30, r14
    192c:	96 8d       	ldd	r25, Z+30	; 0x1e
    192e:	0f 90       	pop	r0
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	87 8d       	ldd	r24, Z+31	; 0x1f
    1934:	98 13       	cpse	r25, r24
    1936:	11 c0       	rjmp	.+34     	; 0x195a <xQueueGenericSend+0x102>
    1938:	4e 81       	ldd	r20, Y+6	; 0x06
    193a:	5f 81       	ldd	r21, Y+7	; 0x07
    193c:	68 85       	ldd	r22, Y+8	; 0x08
    193e:	79 85       	ldd	r23, Y+9	; 0x09
    1940:	c6 01       	movw	r24, r12
    1942:	0e 94 b7 11 	call	0x236e	; 0x236e <vTaskPlaceOnEventList>
    1946:	c7 01       	movw	r24, r14
    1948:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <prvUnlockQueue>
    194c:	0e 94 aa 10 	call	0x2154	; 0x2154 <xTaskResumeAll>
    1950:	81 11       	cpse	r24, r1
    1952:	9c cf       	rjmp	.-200    	; 0x188c <xQueueGenericSend+0x34>
    1954:	0e 94 4b 0a 	call	0x1496	; 0x1496 <vPortYield>
    1958:	99 cf       	rjmp	.-206    	; 0x188c <xQueueGenericSend+0x34>
    195a:	c7 01       	movw	r24, r14
    195c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <prvUnlockQueue>
    1960:	0e 94 aa 10 	call	0x2154	; 0x2154 <xTaskResumeAll>
    1964:	93 cf       	rjmp	.-218    	; 0x188c <xQueueGenericSend+0x34>
    1966:	c7 01       	movw	r24, r14
    1968:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <prvUnlockQueue>
    196c:	0e 94 aa 10 	call	0x2154	; 0x2154 <xTaskResumeAll>
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	29 96       	adiw	r28, 0x09	; 9
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	1f 91       	pop	r17
    197e:	0f 91       	pop	r16
    1980:	ff 90       	pop	r15
    1982:	ef 90       	pop	r14
    1984:	df 90       	pop	r13
    1986:	cf 90       	pop	r12
    1988:	bf 90       	pop	r11
    198a:	af 90       	pop	r10
    198c:	08 95       	ret

0000198e <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	8a 01       	movw	r16, r20
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1998:	fc 01       	movw	r30, r24
    199a:	56 8d       	ldd	r21, Z+30	; 0x1e
    199c:	37 8d       	ldd	r19, Z+31	; 0x1f
    199e:	53 17       	cp	r21, r19
    19a0:	c0 f4       	brcc	.+48     	; 0x19d2 <xQueueGenericSendFromISR+0x44>
    19a2:	42 2f       	mov	r20, r18
    19a4:	ec 01       	movw	r28, r24
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    19a6:	0e 94 12 0b 	call	0x1624	; 0x1624 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    19aa:	8a a1       	ldd	r24, Y+34	; 0x22
    19ac:	8f 3f       	cpi	r24, 0xFF	; 255
    19ae:	69 f4       	brne	.+26     	; 0x19ca <xQueueGenericSendFromISR+0x3c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    19b0:	8b 89       	ldd	r24, Y+19	; 0x13
    19b2:	88 23       	and	r24, r24
    19b4:	81 f0       	breq	.+32     	; 0x19d6 <xQueueGenericSendFromISR+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    19b6:	ce 01       	movw	r24, r28
    19b8:	43 96       	adiw	r24, 0x13	; 19
    19ba:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <xTaskRemoveFromEventList>
    19be:	88 23       	and	r24, r24
    19c0:	61 f0       	breq	.+24     	; 0x19da <xQueueGenericSendFromISR+0x4c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	f8 01       	movw	r30, r16
    19c6:	80 83       	st	Z, r24
    19c8:	09 c0       	rjmp	.+18     	; 0x19dc <xQueueGenericSendFromISR+0x4e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    19ca:	8f 5f       	subi	r24, 0xFF	; 255
    19cc:	8a a3       	std	Y+34, r24	; 0x22
			}

			xReturn = pdPASS;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	05 c0       	rjmp	.+10     	; 0x19dc <xQueueGenericSendFromISR+0x4e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	03 c0       	rjmp	.+6      	; 0x19dc <xQueueGenericSendFromISR+0x4e>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	01 c0       	rjmp	.+2      	; 0x19dc <xQueueGenericSendFromISR+0x4e>
    19da:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	1f 91       	pop	r17
    19e2:	0f 91       	pop	r16
    19e4:	08 95       	ret

000019e6 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    19e6:	af 92       	push	r10
    19e8:	bf 92       	push	r11
    19ea:	cf 92       	push	r12
    19ec:	df 92       	push	r13
    19ee:	ef 92       	push	r14
    19f0:	ff 92       	push	r15
    19f2:	0f 93       	push	r16
    19f4:	1f 93       	push	r17
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	29 97       	sbiw	r28, 0x09	; 9
    1a00:	cd bf       	out	0x3d, r28	; 61
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	7c 01       	movw	r14, r24
    1a06:	5b 01       	movw	r10, r22
    1a08:	2e 83       	std	Y+6, r18	; 0x06
    1a0a:	3f 83       	std	Y+7, r19	; 0x07
    1a0c:	48 87       	std	Y+8, r20	; 0x08
    1a0e:	59 87       	std	Y+9, r21	; 0x09
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1a10:	10 e0       	ldi	r17, 0x00	; 0
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1a12:	6c 01       	movw	r12, r24
    1a14:	83 e1       	ldi	r24, 0x13	; 19
    1a16:	c8 0e       	add	r12, r24
    1a18:	d1 1c       	adc	r13, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	f8 94       	cli
    1a1e:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1a20:	f7 01       	movw	r30, r14
    1a22:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a24:	88 23       	and	r24, r24
    1a26:	99 f1       	breq	.+102    	; 0x1a8e <xQueueGenericReceive+0xa8>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    1a28:	c6 80       	ldd	r12, Z+6	; 0x06
    1a2a:	d7 80       	ldd	r13, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1a2c:	b5 01       	movw	r22, r10
    1a2e:	c7 01       	movw	r24, r14
    1a30:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1a34:	01 11       	cpse	r16, r1
    1a36:	1a c0       	rjmp	.+52     	; 0x1a6c <xQueueGenericReceive+0x86>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    1a38:	f7 01       	movw	r30, r14
    1a3a:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a3c:	81 50       	subi	r24, 0x01	; 1
    1a3e:	86 8f       	std	Z+30, r24	; 0x1e

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1a40:	80 81       	ld	r24, Z
    1a42:	91 81       	ldd	r25, Z+1	; 0x01
    1a44:	89 2b       	or	r24, r25
    1a46:	29 f4       	brne	.+10     	; 0x1a52 <xQueueGenericReceive+0x6c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    1a48:	0e 94 bb 12 	call	0x2576	; 0x2576 <xTaskGetCurrentTaskHandle>
    1a4c:	f7 01       	movw	r30, r14
    1a4e:	82 83       	std	Z+2, r24	; 0x02
    1a50:	93 83       	std	Z+3, r25	; 0x03
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1a52:	f7 01       	movw	r30, r14
    1a54:	80 85       	ldd	r24, Z+8	; 0x08
    1a56:	88 23       	and	r24, r24
    1a58:	b1 f0       	breq	.+44     	; 0x1a86 <xQueueGenericReceive+0xa0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1a5a:	c7 01       	movw	r24, r14
    1a5c:	08 96       	adiw	r24, 0x08	; 8
    1a5e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <xTaskRemoveFromEventList>
    1a62:	81 30       	cpi	r24, 0x01	; 1
    1a64:	81 f4       	brne	.+32     	; 0x1a86 <xQueueGenericReceive+0xa0>
						{
							portYIELD_WITHIN_API();
    1a66:	0e 94 4b 0a 	call	0x1496	; 0x1496 <vPortYield>
    1a6a:	0d c0       	rjmp	.+26     	; 0x1a86 <xQueueGenericReceive+0xa0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    1a6c:	f7 01       	movw	r30, r14
    1a6e:	c6 82       	std	Z+6, r12	; 0x06
    1a70:	d7 82       	std	Z+7, r13	; 0x07

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1a72:	83 89       	ldd	r24, Z+19	; 0x13
    1a74:	88 23       	and	r24, r24
    1a76:	39 f0       	breq	.+14     	; 0x1a86 <xQueueGenericReceive+0xa0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1a78:	c7 01       	movw	r24, r14
    1a7a:	43 96       	adiw	r24, 0x13	; 19
    1a7c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <xTaskRemoveFromEventList>
    1a80:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    1a82:	0e 94 4b 0a 	call	0x1496	; 0x1496 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    1a86:	0f 90       	pop	r0
    1a88:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	62 c0       	rjmp	.+196    	; 0x1b52 <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1a8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a90:	9f 81       	ldd	r25, Y+7	; 0x07
    1a92:	a8 85       	ldd	r26, Y+8	; 0x08
    1a94:	b9 85       	ldd	r27, Y+9	; 0x09
    1a96:	89 2b       	or	r24, r25
    1a98:	8a 2b       	or	r24, r26
    1a9a:	8b 2b       	or	r24, r27
    1a9c:	21 f4       	brne	.+8      	; 0x1aa6 <xQueueGenericReceive+0xc0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1a9e:	0f 90       	pop	r0
    1aa0:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	56 c0       	rjmp	.+172    	; 0x1b52 <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    1aa6:	11 11       	cpse	r17, r1
    1aa8:	05 c0       	rjmp	.+10     	; 0x1ab4 <xQueueGenericReceive+0xce>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1aaa:	ce 01       	movw	r24, r28
    1aac:	01 96       	adiw	r24, 0x01	; 1
    1aae:	0e 94 20 12 	call	0x2440	; 0x2440 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1ab2:	11 e0       	ldi	r17, 0x01	; 1
				}
			}
		}
		taskEXIT_CRITICAL();
    1ab4:	0f 90       	pop	r0
    1ab6:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1ab8:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	0f 92       	push	r0
    1ac2:	f7 01       	movw	r30, r14
    1ac4:	81 a1       	ldd	r24, Z+33	; 0x21
    1ac6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <xQueueGenericReceive+0xe6>
    1aca:	11 a2       	std	Z+33, r1	; 0x21
    1acc:	f7 01       	movw	r30, r14
    1ace:	82 a1       	ldd	r24, Z+34	; 0x22
    1ad0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <xQueueGenericReceive+0xf0>
    1ad4:	12 a2       	std	Z+34, r1	; 0x22
    1ad6:	0f 90       	pop	r0
    1ad8:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1ada:	be 01       	movw	r22, r28
    1adc:	6a 5f       	subi	r22, 0xFA	; 250
    1ade:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	01 96       	adiw	r24, 0x01	; 1
    1ae4:	0e 94 31 12 	call	0x2462	; 0x2462 <xTaskCheckForTimeOut>
    1ae8:	81 11       	cpse	r24, r1
    1aea:	2d c0       	rjmp	.+90     	; 0x1b46 <xQueueGenericReceive+0x160>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1af2:	f7 01       	movw	r30, r14
    1af4:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    1af6:	0f 90       	pop	r0
    1af8:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1afa:	81 11       	cpse	r24, r1
    1afc:	1e c0       	rjmp	.+60     	; 0x1b3a <xQueueGenericReceive+0x154>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1afe:	80 81       	ld	r24, Z
    1b00:	91 81       	ldd	r25, Z+1	; 0x01
    1b02:	89 2b       	or	r24, r25
    1b04:	49 f4       	brne	.+18     	; 0x1b18 <xQueueGenericReceive+0x132>
					{
						portENTER_CRITICAL();
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1b0c:	82 81       	ldd	r24, Z+2	; 0x02
    1b0e:	93 81       	ldd	r25, Z+3	; 0x03
    1b10:	0e 94 c0 12 	call	0x2580	; 0x2580 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    1b14:	0f 90       	pop	r0
    1b16:	0f be       	out	0x3f, r0	; 63
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1b18:	4e 81       	ldd	r20, Y+6	; 0x06
    1b1a:	5f 81       	ldd	r21, Y+7	; 0x07
    1b1c:	68 85       	ldd	r22, Y+8	; 0x08
    1b1e:	79 85       	ldd	r23, Y+9	; 0x09
    1b20:	c6 01       	movw	r24, r12
    1b22:	0e 94 b7 11 	call	0x236e	; 0x236e <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1b26:	c7 01       	movw	r24, r14
    1b28:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1b2c:	0e 94 aa 10 	call	0x2154	; 0x2154 <xTaskResumeAll>
    1b30:	81 11       	cpse	r24, r1
    1b32:	73 cf       	rjmp	.-282    	; 0x1a1a <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
    1b34:	0e 94 4b 0a 	call	0x1496	; 0x1496 <vPortYield>
    1b38:	70 cf       	rjmp	.-288    	; 0x1a1a <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1b3a:	c7 01       	movw	r24, r14
    1b3c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1b40:	0e 94 aa 10 	call	0x2154	; 0x2154 <xTaskResumeAll>
    1b44:	6a cf       	rjmp	.-300    	; 0x1a1a <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1b46:	c7 01       	movw	r24, r14
    1b48:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1b4c:	0e 94 aa 10 	call	0x2154	; 0x2154 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1b50:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    1b52:	29 96       	adiw	r28, 0x09	; 9
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	1f 91       	pop	r17
    1b5e:	0f 91       	pop	r16
    1b60:	ff 90       	pop	r15
    1b62:	ef 90       	pop	r14
    1b64:	df 90       	pop	r13
    1b66:	cf 90       	pop	r12
    1b68:	bf 90       	pop	r11
    1b6a:	af 90       	pop	r10
    1b6c:	08 95       	ret

00001b6e <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    1b6e:	0f 93       	push	r16
    1b70:	1f 93       	push	r17
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1b76:	fc 01       	movw	r30, r24
    1b78:	26 8d       	ldd	r18, Z+30	; 0x1e
    1b7a:	22 23       	and	r18, r18
    1b7c:	d9 f0       	breq	.+54     	; 0x1bb4 <xQueueReceiveFromISR+0x46>
    1b7e:	8a 01       	movw	r16, r20
    1b80:	ec 01       	movw	r28, r24
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1b82:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    1b86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b88:	81 50       	subi	r24, 0x01	; 1
    1b8a:	8e 8f       	std	Y+30, r24	; 0x1e

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    1b8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b8e:	8f 3f       	cpi	r24, 0xFF	; 255
    1b90:	69 f4       	brne	.+26     	; 0x1bac <xQueueReceiveFromISR+0x3e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1b92:	88 85       	ldd	r24, Y+8	; 0x08
    1b94:	88 23       	and	r24, r24
    1b96:	81 f0       	breq	.+32     	; 0x1bb8 <xQueueReceiveFromISR+0x4a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1b98:	ce 01       	movw	r24, r28
    1b9a:	08 96       	adiw	r24, 0x08	; 8
    1b9c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <xTaskRemoveFromEventList>
    1ba0:	88 23       	and	r24, r24
    1ba2:	61 f0       	breq	.+24     	; 0x1bbc <xQueueReceiveFromISR+0x4e>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	f8 01       	movw	r30, r16
    1ba8:	80 83       	st	Z, r24
    1baa:	09 c0       	rjmp	.+18     	; 0x1bbe <xQueueReceiveFromISR+0x50>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    1bac:	8f 5f       	subi	r24, 0xFF	; 255
    1bae:	89 a3       	std	Y+33, r24	; 0x21
			}

			xReturn = pdPASS;
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	05 c0       	rjmp	.+10     	; 0x1bbe <xQueueReceiveFromISR+0x50>
		}
		else
		{
			xReturn = pdFAIL;
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	03 c0       	rjmp	.+6      	; 0x1bbe <xQueueReceiveFromISR+0x50>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
			}

			xReturn = pdPASS;
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	01 c0       	rjmp	.+2      	; 0x1bbe <xQueueReceiveFromISR+0x50>
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	1f 91       	pop	r17
    1bc4:	0f 91       	pop	r16
    1bc6:	08 95       	ret

00001bc8 <uxQueueMessagesWaiting>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    1bce:	fc 01       	movw	r30, r24
    1bd0:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    1bd2:	0f 90       	pop	r0
    1bd4:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    1bd6:	08 95       	ret

00001bd8 <uxQueueMessagesWaitingFromISR>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    1bd8:	fc 01       	movw	r30, r24
    1bda:	86 8d       	ldd	r24, Z+30	; 0x1e

	return uxReturn;
}
    1bdc:	08 95       	ret

00001bde <prvIdleTask>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    1bde:	cc e1       	ldi	r28, 0x1C	; 28
    1be0:	d1 e3       	ldi	r29, 0x31	; 49
    1be2:	88 81       	ld	r24, Y
    1be4:	82 30       	cpi	r24, 0x02	; 2
    1be6:	e8 f3       	brcs	.-6      	; 0x1be2 <prvIdleTask+0x4>
    1be8:	0e 94 4b 0a 	call	0x1496	; 0x1496 <vPortYield>
    1bec:	fa cf       	rjmp	.-12     	; 0x1be2 <prvIdleTask+0x4>

00001bee <prvAddCurrentTaskToDelayedList>:
    1bee:	cf 92       	push	r12
    1bf0:	df 92       	push	r13
    1bf2:	ef 92       	push	r14
    1bf4:	ff 92       	push	r15
    1bf6:	6b 01       	movw	r12, r22
    1bf8:	7c 01       	movw	r14, r24
    1bfa:	e0 91 48 31 	lds	r30, 0x3148	; 0x803148 <pxCurrentTCB>
    1bfe:	f0 91 49 31 	lds	r31, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
    1c02:	62 83       	std	Z+2, r22	; 0x02
    1c04:	73 83       	std	Z+3, r23	; 0x03
    1c06:	84 83       	std	Z+4, r24	; 0x04
    1c08:	95 83       	std	Z+5, r25	; 0x05
    1c0a:	80 91 f0 30 	lds	r24, 0x30F0	; 0x8030f0 <xTickCount>
    1c0e:	90 91 f1 30 	lds	r25, 0x30F1	; 0x8030f1 <xTickCount+0x1>
    1c12:	a0 91 f2 30 	lds	r26, 0x30F2	; 0x8030f2 <xTickCount+0x2>
    1c16:	b0 91 f3 30 	lds	r27, 0x30F3	; 0x8030f3 <xTickCount+0x3>
    1c1a:	c8 16       	cp	r12, r24
    1c1c:	d9 06       	cpc	r13, r25
    1c1e:	ea 06       	cpc	r14, r26
    1c20:	fb 06       	cpc	r15, r27
    1c22:	68 f4       	brcc	.+26     	; 0x1c3e <prvAddCurrentTaskToDelayedList+0x50>
    1c24:	60 91 48 31 	lds	r22, 0x3148	; 0x803148 <pxCurrentTCB>
    1c28:	70 91 49 31 	lds	r23, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
    1c2c:	80 91 02 31 	lds	r24, 0x3102	; 0x803102 <pxOverflowDelayedTaskList>
    1c30:	90 91 03 31 	lds	r25, 0x3103	; 0x803103 <pxOverflowDelayedTaskList+0x1>
    1c34:	6e 5f       	subi	r22, 0xFE	; 254
    1c36:	7f 4f       	sbci	r23, 0xFF	; 255
    1c38:	0e 94 26 09 	call	0x124c	; 0x124c <vListInsert>
    1c3c:	21 c0       	rjmp	.+66     	; 0x1c80 <prvAddCurrentTaskToDelayedList+0x92>
    1c3e:	60 91 48 31 	lds	r22, 0x3148	; 0x803148 <pxCurrentTCB>
    1c42:	70 91 49 31 	lds	r23, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
    1c46:	80 91 04 31 	lds	r24, 0x3104	; 0x803104 <pxDelayedTaskList>
    1c4a:	90 91 05 31 	lds	r25, 0x3105	; 0x803105 <pxDelayedTaskList+0x1>
    1c4e:	6e 5f       	subi	r22, 0xFE	; 254
    1c50:	7f 4f       	sbci	r23, 0xFF	; 255
    1c52:	0e 94 26 09 	call	0x124c	; 0x124c <vListInsert>
    1c56:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    1c5a:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    1c5e:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    1c62:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    1c66:	c8 16       	cp	r12, r24
    1c68:	d9 06       	cpc	r13, r25
    1c6a:	ea 06       	cpc	r14, r26
    1c6c:	fb 06       	cpc	r15, r27
    1c6e:	40 f4       	brcc	.+16     	; 0x1c80 <prvAddCurrentTaskToDelayedList+0x92>
    1c70:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    1c74:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    1c78:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    1c7c:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    1c80:	ff 90       	pop	r15
    1c82:	ef 90       	pop	r14
    1c84:	df 90       	pop	r13
    1c86:	cf 90       	pop	r12
    1c88:	08 95       	ret

00001c8a <xTaskGenericCreate>:
    1c8a:	4f 92       	push	r4
    1c8c:	5f 92       	push	r5
    1c8e:	6f 92       	push	r6
    1c90:	7f 92       	push	r7
    1c92:	8f 92       	push	r8
    1c94:	9f 92       	push	r9
    1c96:	af 92       	push	r10
    1c98:	bf 92       	push	r11
    1c9a:	cf 92       	push	r12
    1c9c:	df 92       	push	r13
    1c9e:	ef 92       	push	r14
    1ca0:	ff 92       	push	r15
    1ca2:	0f 93       	push	r16
    1ca4:	1f 93       	push	r17
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	5c 01       	movw	r10, r24
    1cac:	4b 01       	movw	r8, r22
    1cae:	3a 01       	movw	r6, r20
    1cb0:	29 01       	movw	r4, r18
    1cb2:	88 e2       	ldi	r24, 0x28	; 40
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	0e 94 18 08 	call	0x1030	; 0x1030 <pvPortMalloc>
    1cba:	ec 01       	movw	r28, r24
    1cbc:	89 2b       	or	r24, r25
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <xTaskGenericCreate+0x38>
    1cc0:	d4 c0       	rjmp	.+424    	; 0x1e6a <xTaskGenericCreate+0x1e0>
    1cc2:	c1 14       	cp	r12, r1
    1cc4:	d1 04       	cpc	r13, r1
    1cc6:	09 f0       	breq	.+2      	; 0x1cca <xTaskGenericCreate+0x40>
    1cc8:	cc c0       	rjmp	.+408    	; 0x1e62 <xTaskGenericCreate+0x1d8>
    1cca:	c3 01       	movw	r24, r6
    1ccc:	0e 94 18 08 	call	0x1030	; 0x1030 <pvPortMalloc>
    1cd0:	8b 8f       	std	Y+27, r24	; 0x1b
    1cd2:	9c 8f       	std	Y+28, r25	; 0x1c
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	21 f4       	brne	.+8      	; 0x1ce0 <xTaskGenericCreate+0x56>
    1cd8:	ce 01       	movw	r24, r28
    1cda:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPortFree>
    1cde:	c5 c0       	rjmp	.+394    	; 0x1e6a <xTaskGenericCreate+0x1e0>
    1ce0:	a3 01       	movw	r20, r6
    1ce2:	61 e1       	ldi	r22, 0x11	; 17
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
    1ce6:	0e 94 51 20 	call	0x40a2	; 0x40a2 <memset>
    1cea:	93 01       	movw	r18, r6
    1cec:	21 50       	subi	r18, 0x01	; 1
    1cee:	31 09       	sbc	r19, r1
    1cf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf4:	3c 01       	movw	r6, r24
    1cf6:	62 0e       	add	r6, r18
    1cf8:	73 1e       	adc	r7, r19
    1cfa:	4a e0       	ldi	r20, 0x0A	; 10
    1cfc:	50 e0       	ldi	r21, 0x00	; 0
    1cfe:	b4 01       	movw	r22, r8
    1d00:	ce 01       	movw	r24, r28
    1d02:	4d 96       	adiw	r24, 0x1d	; 29
    1d04:	0e 94 58 20 	call	0x40b0	; 0x40b0 <strncpy>
    1d08:	1e a2       	std	Y+38, r1	; 0x26
    1d0a:	10 2f       	mov	r17, r16
    1d0c:	04 30       	cpi	r16, 0x04	; 4
    1d0e:	08 f0       	brcs	.+2      	; 0x1d12 <xTaskGenericCreate+0x88>
    1d10:	13 e0       	ldi	r17, 0x03	; 3
    1d12:	1a 8f       	std	Y+26, r17	; 0x1a
    1d14:	1f a3       	std	Y+39, r17	; 0x27
    1d16:	6e 01       	movw	r12, r28
    1d18:	22 e0       	ldi	r18, 0x02	; 2
    1d1a:	c2 0e       	add	r12, r18
    1d1c:	d1 1c       	adc	r13, r1
    1d1e:	c6 01       	movw	r24, r12
    1d20:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <vListInitialiseItem>
    1d24:	ce 01       	movw	r24, r28
    1d26:	0e 96       	adiw	r24, 0x0e	; 14
    1d28:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <vListInitialiseItem>
    1d2c:	ca 87       	std	Y+10, r28	; 0x0a
    1d2e:	db 87       	std	Y+11, r29	; 0x0b
    1d30:	84 e0       	ldi	r24, 0x04	; 4
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	a0 e0       	ldi	r26, 0x00	; 0
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	81 1b       	sub	r24, r17
    1d3a:	91 09       	sbc	r25, r1
    1d3c:	a1 09       	sbc	r26, r1
    1d3e:	b1 09       	sbc	r27, r1
    1d40:	8e 87       	std	Y+14, r24	; 0x0e
    1d42:	9f 87       	std	Y+15, r25	; 0x0f
    1d44:	a8 8b       	std	Y+16, r26	; 0x10
    1d46:	b9 8b       	std	Y+17, r27	; 0x11
    1d48:	ce 8b       	std	Y+22, r28	; 0x16
    1d4a:	df 8b       	std	Y+23, r29	; 0x17
    1d4c:	a2 01       	movw	r20, r4
    1d4e:	b5 01       	movw	r22, r10
    1d50:	c3 01       	movw	r24, r6
    1d52:	0e 94 97 09 	call	0x132e	; 0x132e <pxPortInitialiseStack>
    1d56:	88 83       	st	Y, r24
    1d58:	99 83       	std	Y+1, r25	; 0x01
    1d5a:	e1 14       	cp	r14, r1
    1d5c:	f1 04       	cpc	r15, r1
    1d5e:	19 f0       	breq	.+6      	; 0x1d66 <xTaskGenericCreate+0xdc>
    1d60:	f7 01       	movw	r30, r14
    1d62:	c0 83       	st	Z, r28
    1d64:	d1 83       	std	Z+1, r29	; 0x01
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	0f 92       	push	r0
    1d6c:	80 91 f4 30 	lds	r24, 0x30F4	; 0x8030f4 <uxCurrentNumberOfTasks>
    1d70:	8f 5f       	subi	r24, 0xFF	; 255
    1d72:	80 93 f4 30 	sts	0x30F4, r24	; 0x8030f4 <uxCurrentNumberOfTasks>
    1d76:	80 91 48 31 	lds	r24, 0x3148	; 0x803148 <pxCurrentTCB>
    1d7a:	90 91 49 31 	lds	r25, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
    1d7e:	89 2b       	or	r24, r25
    1d80:	89 f5       	brne	.+98     	; 0x1de4 <xTaskGenericCreate+0x15a>
    1d82:	c0 93 48 31 	sts	0x3148, r28	; 0x803148 <pxCurrentTCB>
    1d86:	d0 93 49 31 	sts	0x3149, r29	; 0x803149 <pxCurrentTCB+0x1>
    1d8a:	80 91 f4 30 	lds	r24, 0x30F4	; 0x8030f4 <uxCurrentNumberOfTasks>
    1d8e:	81 30       	cpi	r24, 0x01	; 1
    1d90:	c1 f5       	brne	.+112    	; 0x1e02 <xTaskGenericCreate+0x178>
    1d92:	8c e1       	ldi	r24, 0x1C	; 28
    1d94:	91 e3       	ldi	r25, 0x31	; 49
    1d96:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <vListInitialise>
    1d9a:	87 e2       	ldi	r24, 0x27	; 39
    1d9c:	91 e3       	ldi	r25, 0x31	; 49
    1d9e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <vListInitialise>
    1da2:	82 e3       	ldi	r24, 0x32	; 50
    1da4:	91 e3       	ldi	r25, 0x31	; 49
    1da6:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <vListInitialise>
    1daa:	8d e3       	ldi	r24, 0x3D	; 61
    1dac:	91 e3       	ldi	r25, 0x31	; 49
    1dae:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <vListInitialise>
    1db2:	81 e1       	ldi	r24, 0x11	; 17
    1db4:	91 e3       	ldi	r25, 0x31	; 49
    1db6:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <vListInitialise>
    1dba:	86 e0       	ldi	r24, 0x06	; 6
    1dbc:	91 e3       	ldi	r25, 0x31	; 49
    1dbe:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <vListInitialise>
    1dc2:	87 ef       	ldi	r24, 0xF7	; 247
    1dc4:	90 e3       	ldi	r25, 0x30	; 48
    1dc6:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <vListInitialise>
    1dca:	81 e1       	ldi	r24, 0x11	; 17
    1dcc:	91 e3       	ldi	r25, 0x31	; 49
    1dce:	80 93 04 31 	sts	0x3104, r24	; 0x803104 <pxDelayedTaskList>
    1dd2:	90 93 05 31 	sts	0x3105, r25	; 0x803105 <pxDelayedTaskList+0x1>
    1dd6:	86 e0       	ldi	r24, 0x06	; 6
    1dd8:	91 e3       	ldi	r25, 0x31	; 49
    1dda:	80 93 02 31 	sts	0x3102, r24	; 0x803102 <pxOverflowDelayedTaskList>
    1dde:	90 93 03 31 	sts	0x3103, r25	; 0x803103 <pxOverflowDelayedTaskList+0x1>
    1de2:	0f c0       	rjmp	.+30     	; 0x1e02 <xTaskGenericCreate+0x178>
    1de4:	80 91 ed 30 	lds	r24, 0x30ED	; 0x8030ed <xSchedulerRunning>
    1de8:	81 11       	cpse	r24, r1
    1dea:	0b c0       	rjmp	.+22     	; 0x1e02 <xTaskGenericCreate+0x178>
    1dec:	e0 91 48 31 	lds	r30, 0x3148	; 0x803148 <pxCurrentTCB>
    1df0:	f0 91 49 31 	lds	r31, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
    1df4:	82 8d       	ldd	r24, Z+26	; 0x1a
    1df6:	08 17       	cp	r16, r24
    1df8:	20 f0       	brcs	.+8      	; 0x1e02 <xTaskGenericCreate+0x178>
    1dfa:	c0 93 48 31 	sts	0x3148, r28	; 0x803148 <pxCurrentTCB>
    1dfe:	d0 93 49 31 	sts	0x3149, r29	; 0x803149 <pxCurrentTCB+0x1>
    1e02:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e04:	90 91 ef 30 	lds	r25, 0x30EF	; 0x8030ef <uxTopUsedPriority>
    1e08:	98 17       	cp	r25, r24
    1e0a:	10 f4       	brcc	.+4      	; 0x1e10 <xTaskGenericCreate+0x186>
    1e0c:	80 93 ef 30 	sts	0x30EF, r24	; 0x8030ef <uxTopUsedPriority>
    1e10:	90 91 e8 30 	lds	r25, 0x30E8	; 0x8030e8 <uxTaskNumber>
    1e14:	9f 5f       	subi	r25, 0xFF	; 255
    1e16:	90 93 e8 30 	sts	0x30E8, r25	; 0x8030e8 <uxTaskNumber>
    1e1a:	90 91 ee 30 	lds	r25, 0x30EE	; 0x8030ee <uxTopReadyPriority>
    1e1e:	98 17       	cp	r25, r24
    1e20:	10 f4       	brcc	.+4      	; 0x1e26 <xTaskGenericCreate+0x19c>
    1e22:	80 93 ee 30 	sts	0x30EE, r24	; 0x8030ee <uxTopReadyPriority>
    1e26:	fb e0       	ldi	r31, 0x0B	; 11
    1e28:	8f 9f       	mul	r24, r31
    1e2a:	c0 01       	movw	r24, r0
    1e2c:	11 24       	eor	r1, r1
    1e2e:	b6 01       	movw	r22, r12
    1e30:	84 5e       	subi	r24, 0xE4	; 228
    1e32:	9e 4c       	sbci	r25, 0xCE	; 206
    1e34:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vListInsertEnd>
    1e38:	0f 90       	pop	r0
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	80 91 ed 30 	lds	r24, 0x30ED	; 0x8030ed <xSchedulerRunning>
    1e40:	88 23       	and	r24, r24
    1e42:	59 f0       	breq	.+22     	; 0x1e5a <xTaskGenericCreate+0x1d0>
    1e44:	e0 91 48 31 	lds	r30, 0x3148	; 0x803148 <pxCurrentTCB>
    1e48:	f0 91 49 31 	lds	r31, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
    1e4c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e4e:	80 17       	cp	r24, r16
    1e50:	30 f4       	brcc	.+12     	; 0x1e5e <xTaskGenericCreate+0x1d4>
    1e52:	0e 94 4b 0a 	call	0x1496	; 0x1496 <vPortYield>
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	09 c0       	rjmp	.+18     	; 0x1e6c <xTaskGenericCreate+0x1e2>
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	07 c0       	rjmp	.+14     	; 0x1e6c <xTaskGenericCreate+0x1e2>
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	05 c0       	rjmp	.+10     	; 0x1e6c <xTaskGenericCreate+0x1e2>
    1e62:	cb 8e       	std	Y+27, r12	; 0x1b
    1e64:	dc 8e       	std	Y+28, r13	; 0x1c
    1e66:	c6 01       	movw	r24, r12
    1e68:	3b cf       	rjmp	.-394    	; 0x1ce0 <xTaskGenericCreate+0x56>
    1e6a:	8f ef       	ldi	r24, 0xFF	; 255
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	ff 90       	pop	r15
    1e76:	ef 90       	pop	r14
    1e78:	df 90       	pop	r13
    1e7a:	cf 90       	pop	r12
    1e7c:	bf 90       	pop	r11
    1e7e:	af 90       	pop	r10
    1e80:	9f 90       	pop	r9
    1e82:	8f 90       	pop	r8
    1e84:	7f 90       	pop	r7
    1e86:	6f 90       	pop	r6
    1e88:	5f 90       	pop	r5
    1e8a:	4f 90       	pop	r4
    1e8c:	08 95       	ret

00001e8e <uxTaskPriorityGet>:
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	0f 92       	push	r0
    1e94:	00 97       	sbiw	r24, 0x00	; 0
    1e96:	21 f4       	brne	.+8      	; 0x1ea0 <uxTaskPriorityGet+0x12>
    1e98:	80 91 48 31 	lds	r24, 0x3148	; 0x803148 <pxCurrentTCB>
    1e9c:	90 91 49 31 	lds	r25, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
    1ea0:	0f 90       	pop	r0
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ea8:	08 95       	ret

00001eaa <vTaskStartScheduler>:
    1eaa:	af 92       	push	r10
    1eac:	bf 92       	push	r11
    1eae:	cf 92       	push	r12
    1eb0:	df 92       	push	r13
    1eb2:	ef 92       	push	r14
    1eb4:	ff 92       	push	r15
    1eb6:	0f 93       	push	r16
    1eb8:	a1 2c       	mov	r10, r1
    1eba:	b1 2c       	mov	r11, r1
    1ebc:	c1 2c       	mov	r12, r1
    1ebe:	d1 2c       	mov	r13, r1
    1ec0:	0f 2e       	mov	r0, r31
    1ec2:	f5 ef       	ldi	r31, 0xF5	; 245
    1ec4:	ef 2e       	mov	r14, r31
    1ec6:	f0 e3       	ldi	r31, 0x30	; 48
    1ec8:	ff 2e       	mov	r15, r31
    1eca:	f0 2d       	mov	r31, r0
    1ecc:	00 e0       	ldi	r16, 0x00	; 0
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	44 e6       	ldi	r20, 0x64	; 100
    1ed4:	50 e0       	ldi	r21, 0x00	; 0
    1ed6:	6e e2       	ldi	r22, 0x2E	; 46
    1ed8:	70 e2       	ldi	r23, 0x20	; 32
    1eda:	8f ee       	ldi	r24, 0xEF	; 239
    1edc:	9d e0       	ldi	r25, 0x0D	; 13
    1ede:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <xTaskGenericCreate>
    1ee2:	81 30       	cpi	r24, 0x01	; 1
    1ee4:	69 f4       	brne	.+26     	; 0x1f00 <vTaskStartScheduler+0x56>
    1ee6:	f8 94       	cli
    1ee8:	80 93 ed 30 	sts	0x30ED, r24	; 0x8030ed <xSchedulerRunning>
    1eec:	10 92 f0 30 	sts	0x30F0, r1	; 0x8030f0 <xTickCount>
    1ef0:	10 92 f1 30 	sts	0x30F1, r1	; 0x8030f1 <xTickCount+0x1>
    1ef4:	10 92 f2 30 	sts	0x30F2, r1	; 0x8030f2 <xTickCount+0x2>
    1ef8:	10 92 f3 30 	sts	0x30F3, r1	; 0x8030f3 <xTickCount+0x3>
    1efc:	0e 94 0d 0a 	call	0x141a	; 0x141a <xPortStartScheduler>
    1f00:	0f 91       	pop	r16
    1f02:	ff 90       	pop	r15
    1f04:	ef 90       	pop	r14
    1f06:	df 90       	pop	r13
    1f08:	cf 90       	pop	r12
    1f0a:	bf 90       	pop	r11
    1f0c:	af 90       	pop	r10
    1f0e:	08 95       	ret

00001f10 <vTaskSuspendAll>:
    1f10:	80 91 ec 30 	lds	r24, 0x30EC	; 0x8030ec <uxSchedulerSuspended>
    1f14:	8f 5f       	subi	r24, 0xFF	; 255
    1f16:	80 93 ec 30 	sts	0x30EC, r24	; 0x8030ec <uxSchedulerSuspended>
    1f1a:	08 95       	ret

00001f1c <xTaskGetTickCount>:
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	0f 92       	push	r0
    1f22:	60 91 f0 30 	lds	r22, 0x30F0	; 0x8030f0 <xTickCount>
    1f26:	70 91 f1 30 	lds	r23, 0x30F1	; 0x8030f1 <xTickCount+0x1>
    1f2a:	80 91 f2 30 	lds	r24, 0x30F2	; 0x8030f2 <xTickCount+0x2>
    1f2e:	90 91 f3 30 	lds	r25, 0x30F3	; 0x8030f3 <xTickCount+0x3>
    1f32:	0f 90       	pop	r0
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	08 95       	ret

00001f38 <pcTaskGetTaskName>:
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	21 f4       	brne	.+8      	; 0x1f44 <pcTaskGetTaskName+0xc>
    1f3c:	80 91 48 31 	lds	r24, 0x3148	; 0x803148 <pxCurrentTCB>
    1f40:	90 91 49 31 	lds	r25, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
    1f44:	4d 96       	adiw	r24, 0x1d	; 29
    1f46:	08 95       	ret

00001f48 <xTaskGetIdleTaskHandle>:
    1f48:	80 91 f5 30 	lds	r24, 0x30F5	; 0x8030f5 <xIdleTaskHandle>
    1f4c:	90 91 f6 30 	lds	r25, 0x30F6	; 0x8030f6 <xIdleTaskHandle+0x1>
    1f50:	08 95       	ret

00001f52 <vTaskIncrementTick>:
    1f52:	ff 92       	push	r15
    1f54:	0f 93       	push	r16
    1f56:	1f 93       	push	r17
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	80 91 ec 30 	lds	r24, 0x30EC	; 0x8030ec <uxSchedulerSuspended>
    1f60:	81 11       	cpse	r24, r1
    1f62:	ed c0       	rjmp	.+474    	; 0x213e <vTaskIncrementTick+0x1ec>
    1f64:	80 91 f0 30 	lds	r24, 0x30F0	; 0x8030f0 <xTickCount>
    1f68:	90 91 f1 30 	lds	r25, 0x30F1	; 0x8030f1 <xTickCount+0x1>
    1f6c:	a0 91 f2 30 	lds	r26, 0x30F2	; 0x8030f2 <xTickCount+0x2>
    1f70:	b0 91 f3 30 	lds	r27, 0x30F3	; 0x8030f3 <xTickCount+0x3>
    1f74:	01 96       	adiw	r24, 0x01	; 1
    1f76:	a1 1d       	adc	r26, r1
    1f78:	b1 1d       	adc	r27, r1
    1f7a:	80 93 f0 30 	sts	0x30F0, r24	; 0x8030f0 <xTickCount>
    1f7e:	90 93 f1 30 	sts	0x30F1, r25	; 0x8030f1 <xTickCount+0x1>
    1f82:	a0 93 f2 30 	sts	0x30F2, r26	; 0x8030f2 <xTickCount+0x2>
    1f86:	b0 93 f3 30 	sts	0x30F3, r27	; 0x8030f3 <xTickCount+0x3>
    1f8a:	80 91 f0 30 	lds	r24, 0x30F0	; 0x8030f0 <xTickCount>
    1f8e:	90 91 f1 30 	lds	r25, 0x30F1	; 0x8030f1 <xTickCount+0x1>
    1f92:	a0 91 f2 30 	lds	r26, 0x30F2	; 0x8030f2 <xTickCount+0x2>
    1f96:	b0 91 f3 30 	lds	r27, 0x30F3	; 0x8030f3 <xTickCount+0x3>
    1f9a:	89 2b       	or	r24, r25
    1f9c:	8a 2b       	or	r24, r26
    1f9e:	8b 2b       	or	r24, r27
    1fa0:	f1 f5       	brne	.+124    	; 0x201e <vTaskIncrementTick+0xcc>
    1fa2:	80 91 04 31 	lds	r24, 0x3104	; 0x803104 <pxDelayedTaskList>
    1fa6:	90 91 05 31 	lds	r25, 0x3105	; 0x803105 <pxDelayedTaskList+0x1>
    1faa:	20 91 02 31 	lds	r18, 0x3102	; 0x803102 <pxOverflowDelayedTaskList>
    1fae:	30 91 03 31 	lds	r19, 0x3103	; 0x803103 <pxOverflowDelayedTaskList+0x1>
    1fb2:	20 93 04 31 	sts	0x3104, r18	; 0x803104 <pxDelayedTaskList>
    1fb6:	30 93 05 31 	sts	0x3105, r19	; 0x803105 <pxDelayedTaskList+0x1>
    1fba:	80 93 02 31 	sts	0x3102, r24	; 0x803102 <pxOverflowDelayedTaskList>
    1fbe:	90 93 03 31 	sts	0x3103, r25	; 0x803103 <pxOverflowDelayedTaskList+0x1>
    1fc2:	80 91 e9 30 	lds	r24, 0x30E9	; 0x8030e9 <xNumOfOverflows>
    1fc6:	8f 5f       	subi	r24, 0xFF	; 255
    1fc8:	80 93 e9 30 	sts	0x30E9, r24	; 0x8030e9 <xNumOfOverflows>
    1fcc:	e0 91 04 31 	lds	r30, 0x3104	; 0x803104 <pxDelayedTaskList>
    1fd0:	f0 91 05 31 	lds	r31, 0x3105	; 0x803105 <pxDelayedTaskList+0x1>
    1fd4:	80 81       	ld	r24, Z
    1fd6:	81 11       	cpse	r24, r1
    1fd8:	0c c0       	rjmp	.+24     	; 0x1ff2 <vTaskIncrementTick+0xa0>
    1fda:	8f ef       	ldi	r24, 0xFF	; 255
    1fdc:	9f ef       	ldi	r25, 0xFF	; 255
    1fde:	dc 01       	movw	r26, r24
    1fe0:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    1fe4:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    1fe8:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    1fec:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    1ff0:	16 c0       	rjmp	.+44     	; 0x201e <vTaskIncrementTick+0xcc>
    1ff2:	e0 91 04 31 	lds	r30, 0x3104	; 0x803104 <pxDelayedTaskList>
    1ff6:	f0 91 05 31 	lds	r31, 0x3105	; 0x803105 <pxDelayedTaskList+0x1>
    1ffa:	07 80       	ldd	r0, Z+7	; 0x07
    1ffc:	f0 85       	ldd	r31, Z+8	; 0x08
    1ffe:	e0 2d       	mov	r30, r0
    2000:	00 84       	ldd	r0, Z+8	; 0x08
    2002:	f1 85       	ldd	r31, Z+9	; 0x09
    2004:	e0 2d       	mov	r30, r0
    2006:	82 81       	ldd	r24, Z+2	; 0x02
    2008:	93 81       	ldd	r25, Z+3	; 0x03
    200a:	a4 81       	ldd	r26, Z+4	; 0x04
    200c:	b5 81       	ldd	r27, Z+5	; 0x05
    200e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2012:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2016:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    201a:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    201e:	40 91 f0 30 	lds	r20, 0x30F0	; 0x8030f0 <xTickCount>
    2022:	50 91 f1 30 	lds	r21, 0x30F1	; 0x8030f1 <xTickCount+0x1>
    2026:	60 91 f2 30 	lds	r22, 0x30F2	; 0x8030f2 <xTickCount+0x2>
    202a:	70 91 f3 30 	lds	r23, 0x30F3	; 0x8030f3 <xTickCount+0x3>
    202e:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    2032:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    2036:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    203a:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    203e:	48 17       	cp	r20, r24
    2040:	59 07       	cpc	r21, r25
    2042:	6a 07       	cpc	r22, r26
    2044:	7b 07       	cpc	r23, r27
    2046:	08 f4       	brcc	.+2      	; 0x204a <vTaskIncrementTick+0xf8>
    2048:	7f c0       	rjmp	.+254    	; 0x2148 <vTaskIncrementTick+0x1f6>
    204a:	e0 91 04 31 	lds	r30, 0x3104	; 0x803104 <pxDelayedTaskList>
    204e:	f0 91 05 31 	lds	r31, 0x3105	; 0x803105 <pxDelayedTaskList+0x1>
    2052:	80 81       	ld	r24, Z
    2054:	88 23       	and	r24, r24
    2056:	f9 f0       	breq	.+62     	; 0x2096 <vTaskIncrementTick+0x144>
    2058:	e0 91 04 31 	lds	r30, 0x3104	; 0x803104 <pxDelayedTaskList>
    205c:	f0 91 05 31 	lds	r31, 0x3105	; 0x803105 <pxDelayedTaskList+0x1>
    2060:	07 80       	ldd	r0, Z+7	; 0x07
    2062:	f0 85       	ldd	r31, Z+8	; 0x08
    2064:	e0 2d       	mov	r30, r0
    2066:	c0 85       	ldd	r28, Z+8	; 0x08
    2068:	d1 85       	ldd	r29, Z+9	; 0x09
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	9b 81       	ldd	r25, Y+3	; 0x03
    206e:	ac 81       	ldd	r26, Y+4	; 0x04
    2070:	bd 81       	ldd	r27, Y+5	; 0x05
    2072:	40 91 f0 30 	lds	r20, 0x30F0	; 0x8030f0 <xTickCount>
    2076:	50 91 f1 30 	lds	r21, 0x30F1	; 0x8030f1 <xTickCount+0x1>
    207a:	60 91 f2 30 	lds	r22, 0x30F2	; 0x8030f2 <xTickCount+0x2>
    207e:	70 91 f3 30 	lds	r23, 0x30F3	; 0x8030f3 <xTickCount+0x3>
    2082:	48 17       	cp	r20, r24
    2084:	59 07       	cpc	r21, r25
    2086:	6a 07       	cpc	r22, r26
    2088:	7b 07       	cpc	r23, r27
    208a:	58 f1       	brcs	.+86     	; 0x20e2 <vTaskIncrementTick+0x190>
    208c:	0f 2e       	mov	r0, r31
    208e:	fb e0       	ldi	r31, 0x0B	; 11
    2090:	ff 2e       	mov	r15, r31
    2092:	f0 2d       	mov	r31, r0
    2094:	2f c0       	rjmp	.+94     	; 0x20f4 <vTaskIncrementTick+0x1a2>
    2096:	8f ef       	ldi	r24, 0xFF	; 255
    2098:	9f ef       	ldi	r25, 0xFF	; 255
    209a:	dc 01       	movw	r26, r24
    209c:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    20a0:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    20a4:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    20a8:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    20ac:	4d c0       	rjmp	.+154    	; 0x2148 <vTaskIncrementTick+0x1f6>
    20ae:	e0 91 04 31 	lds	r30, 0x3104	; 0x803104 <pxDelayedTaskList>
    20b2:	f0 91 05 31 	lds	r31, 0x3105	; 0x803105 <pxDelayedTaskList+0x1>
    20b6:	07 80       	ldd	r0, Z+7	; 0x07
    20b8:	f0 85       	ldd	r31, Z+8	; 0x08
    20ba:	e0 2d       	mov	r30, r0
    20bc:	c0 85       	ldd	r28, Z+8	; 0x08
    20be:	d1 85       	ldd	r29, Z+9	; 0x09
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	9b 81       	ldd	r25, Y+3	; 0x03
    20c4:	ac 81       	ldd	r26, Y+4	; 0x04
    20c6:	bd 81       	ldd	r27, Y+5	; 0x05
    20c8:	40 91 f0 30 	lds	r20, 0x30F0	; 0x8030f0 <xTickCount>
    20cc:	50 91 f1 30 	lds	r21, 0x30F1	; 0x8030f1 <xTickCount+0x1>
    20d0:	60 91 f2 30 	lds	r22, 0x30F2	; 0x8030f2 <xTickCount+0x2>
    20d4:	70 91 f3 30 	lds	r23, 0x30F3	; 0x8030f3 <xTickCount+0x3>
    20d8:	48 17       	cp	r20, r24
    20da:	59 07       	cpc	r21, r25
    20dc:	6a 07       	cpc	r22, r26
    20de:	7b 07       	cpc	r23, r27
    20e0:	48 f4       	brcc	.+18     	; 0x20f4 <vTaskIncrementTick+0x1a2>
    20e2:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    20e6:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    20ea:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    20ee:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    20f2:	2a c0       	rjmp	.+84     	; 0x2148 <vTaskIncrementTick+0x1f6>
    20f4:	8e 01       	movw	r16, r28
    20f6:	0e 5f       	subi	r16, 0xFE	; 254
    20f8:	1f 4f       	sbci	r17, 0xFF	; 255
    20fa:	c8 01       	movw	r24, r16
    20fc:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vListRemove>
    2100:	88 8d       	ldd	r24, Y+24	; 0x18
    2102:	99 8d       	ldd	r25, Y+25	; 0x19
    2104:	89 2b       	or	r24, r25
    2106:	21 f0       	breq	.+8      	; 0x2110 <vTaskIncrementTick+0x1be>
    2108:	ce 01       	movw	r24, r28
    210a:	0e 96       	adiw	r24, 0x0e	; 14
    210c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vListRemove>
    2110:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2112:	90 91 ee 30 	lds	r25, 0x30EE	; 0x8030ee <uxTopReadyPriority>
    2116:	98 17       	cp	r25, r24
    2118:	10 f4       	brcc	.+4      	; 0x211e <vTaskIncrementTick+0x1cc>
    211a:	80 93 ee 30 	sts	0x30EE, r24	; 0x8030ee <uxTopReadyPriority>
    211e:	f8 9e       	mul	r15, r24
    2120:	c0 01       	movw	r24, r0
    2122:	11 24       	eor	r1, r1
    2124:	b8 01       	movw	r22, r16
    2126:	84 5e       	subi	r24, 0xE4	; 228
    2128:	9e 4c       	sbci	r25, 0xCE	; 206
    212a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vListInsertEnd>
    212e:	e0 91 04 31 	lds	r30, 0x3104	; 0x803104 <pxDelayedTaskList>
    2132:	f0 91 05 31 	lds	r31, 0x3105	; 0x803105 <pxDelayedTaskList+0x1>
    2136:	80 81       	ld	r24, Z
    2138:	81 11       	cpse	r24, r1
    213a:	b9 cf       	rjmp	.-142    	; 0x20ae <vTaskIncrementTick+0x15c>
    213c:	ac cf       	rjmp	.-168    	; 0x2096 <vTaskIncrementTick+0x144>
    213e:	80 91 eb 30 	lds	r24, 0x30EB	; 0x8030eb <uxMissedTicks>
    2142:	8f 5f       	subi	r24, 0xFF	; 255
    2144:	80 93 eb 30 	sts	0x30EB, r24	; 0x8030eb <uxMissedTicks>
    2148:	df 91       	pop	r29
    214a:	cf 91       	pop	r28
    214c:	1f 91       	pop	r17
    214e:	0f 91       	pop	r16
    2150:	ff 90       	pop	r15
    2152:	08 95       	ret

00002154 <xTaskResumeAll>:
    2154:	cf 92       	push	r12
    2156:	df 92       	push	r13
    2158:	ef 92       	push	r14
    215a:	ff 92       	push	r15
    215c:	0f 93       	push	r16
    215e:	1f 93       	push	r17
    2160:	cf 93       	push	r28
    2162:	df 93       	push	r29
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	f8 94       	cli
    2168:	0f 92       	push	r0
    216a:	80 91 ec 30 	lds	r24, 0x30EC	; 0x8030ec <uxSchedulerSuspended>
    216e:	81 50       	subi	r24, 0x01	; 1
    2170:	80 93 ec 30 	sts	0x30EC, r24	; 0x8030ec <uxSchedulerSuspended>
    2174:	80 91 ec 30 	lds	r24, 0x30EC	; 0x8030ec <uxSchedulerSuspended>
    2178:	81 11       	cpse	r24, r1
    217a:	60 c0       	rjmp	.+192    	; 0x223c <xTaskResumeAll+0xe8>
    217c:	80 91 f4 30 	lds	r24, 0x30F4	; 0x8030f4 <uxCurrentNumberOfTasks>
    2180:	81 11       	cpse	r24, r1
    2182:	2c c0       	rjmp	.+88     	; 0x21dc <xTaskResumeAll+0x88>
    2184:	5e c0       	rjmp	.+188    	; 0x2242 <xTaskResumeAll+0xee>
    2186:	d7 01       	movw	r26, r14
    2188:	17 96       	adiw	r26, 0x07	; 7
    218a:	ed 91       	ld	r30, X+
    218c:	fc 91       	ld	r31, X
    218e:	18 97       	sbiw	r26, 0x08	; 8
    2190:	c0 85       	ldd	r28, Z+8	; 0x08
    2192:	d1 85       	ldd	r29, Z+9	; 0x09
    2194:	ce 01       	movw	r24, r28
    2196:	0e 96       	adiw	r24, 0x0e	; 14
    2198:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vListRemove>
    219c:	8e 01       	movw	r16, r28
    219e:	0e 5f       	subi	r16, 0xFE	; 254
    21a0:	1f 4f       	sbci	r17, 0xFF	; 255
    21a2:	c8 01       	movw	r24, r16
    21a4:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vListRemove>
    21a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21aa:	90 91 ee 30 	lds	r25, 0x30EE	; 0x8030ee <uxTopReadyPriority>
    21ae:	98 17       	cp	r25, r24
    21b0:	10 f4       	brcc	.+4      	; 0x21b6 <xTaskResumeAll+0x62>
    21b2:	80 93 ee 30 	sts	0x30EE, r24	; 0x8030ee <uxTopReadyPriority>
    21b6:	d8 9e       	mul	r13, r24
    21b8:	c0 01       	movw	r24, r0
    21ba:	11 24       	eor	r1, r1
    21bc:	b8 01       	movw	r22, r16
    21be:	84 5e       	subi	r24, 0xE4	; 228
    21c0:	9e 4c       	sbci	r25, 0xCE	; 206
    21c2:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vListInsertEnd>
    21c6:	e0 91 48 31 	lds	r30, 0x3148	; 0x803148 <pxCurrentTCB>
    21ca:	f0 91 49 31 	lds	r31, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
    21ce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    21d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    21d2:	98 17       	cp	r25, r24
    21d4:	70 f0       	brcs	.+28     	; 0x21f2 <xTaskResumeAll+0x9e>
    21d6:	cc 24       	eor	r12, r12
    21d8:	c3 94       	inc	r12
    21da:	0b c0       	rjmp	.+22     	; 0x21f2 <xTaskResumeAll+0x9e>
    21dc:	c1 2c       	mov	r12, r1
    21de:	0f 2e       	mov	r0, r31
    21e0:	f7 ef       	ldi	r31, 0xF7	; 247
    21e2:	ef 2e       	mov	r14, r31
    21e4:	f0 e3       	ldi	r31, 0x30	; 48
    21e6:	ff 2e       	mov	r15, r31
    21e8:	f0 2d       	mov	r31, r0
    21ea:	0f 2e       	mov	r0, r31
    21ec:	fb e0       	ldi	r31, 0x0B	; 11
    21ee:	df 2e       	mov	r13, r31
    21f0:	f0 2d       	mov	r31, r0
    21f2:	f7 01       	movw	r30, r14
    21f4:	80 81       	ld	r24, Z
    21f6:	81 11       	cpse	r24, r1
    21f8:	c6 cf       	rjmp	.-116    	; 0x2186 <xTaskResumeAll+0x32>
    21fa:	80 91 eb 30 	lds	r24, 0x30EB	; 0x8030eb <uxMissedTicks>
    21fe:	88 23       	and	r24, r24
    2200:	81 f0       	breq	.+32     	; 0x2222 <xTaskResumeAll+0xce>
    2202:	80 91 eb 30 	lds	r24, 0x30EB	; 0x8030eb <uxMissedTicks>
    2206:	88 23       	and	r24, r24
    2208:	99 f0       	breq	.+38     	; 0x2230 <xTaskResumeAll+0xdc>
    220a:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <vTaskIncrementTick>
    220e:	80 91 eb 30 	lds	r24, 0x30EB	; 0x8030eb <uxMissedTicks>
    2212:	81 50       	subi	r24, 0x01	; 1
    2214:	80 93 eb 30 	sts	0x30EB, r24	; 0x8030eb <uxMissedTicks>
    2218:	80 91 eb 30 	lds	r24, 0x30EB	; 0x8030eb <uxMissedTicks>
    221c:	81 11       	cpse	r24, r1
    221e:	f5 cf       	rjmp	.-22     	; 0x220a <xTaskResumeAll+0xb6>
    2220:	07 c0       	rjmp	.+14     	; 0x2230 <xTaskResumeAll+0xdc>
    2222:	f1 e0       	ldi	r31, 0x01	; 1
    2224:	cf 16       	cp	r12, r31
    2226:	21 f0       	breq	.+8      	; 0x2230 <xTaskResumeAll+0xdc>
    2228:	80 91 ea 30 	lds	r24, 0x30EA	; 0x8030ea <xMissedYield>
    222c:	81 30       	cpi	r24, 0x01	; 1
    222e:	41 f4       	brne	.+16     	; 0x2240 <xTaskResumeAll+0xec>
    2230:	10 92 ea 30 	sts	0x30EA, r1	; 0x8030ea <xMissedYield>
    2234:	0e 94 4b 0a 	call	0x1496	; 0x1496 <vPortYield>
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	03 c0       	rjmp	.+6      	; 0x2242 <xTaskResumeAll+0xee>
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	01 c0       	rjmp	.+2      	; 0x2242 <xTaskResumeAll+0xee>
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	0f 90       	pop	r0
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	df 91       	pop	r29
    2248:	cf 91       	pop	r28
    224a:	1f 91       	pop	r17
    224c:	0f 91       	pop	r16
    224e:	ff 90       	pop	r15
    2250:	ef 90       	pop	r14
    2252:	df 90       	pop	r13
    2254:	cf 90       	pop	r12
    2256:	08 95       	ret

00002258 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    2258:	cf 92       	push	r12
    225a:	df 92       	push	r13
    225c:	ef 92       	push	r14
    225e:	ff 92       	push	r15
    2260:	6b 01       	movw	r12, r22
    2262:	7c 01       	movw	r14, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    2264:	67 2b       	or	r22, r23
    2266:	68 2b       	or	r22, r24
    2268:	69 2b       	or	r22, r25
    226a:	e9 f0       	breq	.+58     	; 0x22a6 <vTaskDelay+0x4e>
		{
			vTaskSuspendAll();
    226c:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2270:	80 91 f0 30 	lds	r24, 0x30F0	; 0x8030f0 <xTickCount>
    2274:	90 91 f1 30 	lds	r25, 0x30F1	; 0x8030f1 <xTickCount+0x1>
    2278:	a0 91 f2 30 	lds	r26, 0x30F2	; 0x8030f2 <xTickCount+0x2>
    227c:	b0 91 f3 30 	lds	r27, 0x30F3	; 0x8030f3 <xTickCount+0x3>
    2280:	c8 0e       	add	r12, r24
    2282:	d9 1e       	adc	r13, r25
    2284:	ea 1e       	adc	r14, r26
    2286:	fb 1e       	adc	r15, r27

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2288:	80 91 48 31 	lds	r24, 0x3148	; 0x803148 <pxCurrentTCB>
    228c:	90 91 49 31 	lds	r25, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
    2290:	02 96       	adiw	r24, 0x02	; 2
    2292:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2296:	c7 01       	movw	r24, r14
    2298:	b6 01       	movw	r22, r12
    229a:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    229e:	0e 94 aa 10 	call	0x2154	; 0x2154 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    22a2:	81 11       	cpse	r24, r1
    22a4:	02 c0       	rjmp	.+4      	; 0x22aa <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    22a6:	0e 94 4b 0a 	call	0x1496	; 0x1496 <vPortYield>
		}
	}
    22aa:	ff 90       	pop	r15
    22ac:	ef 90       	pop	r14
    22ae:	df 90       	pop	r13
    22b0:	cf 90       	pop	r12
    22b2:	08 95       	ret

000022b4 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    22b4:	80 91 ec 30 	lds	r24, 0x30EC	; 0x8030ec <uxSchedulerSuspended>
    22b8:	81 11       	cpse	r24, r1
    22ba:	0c c0       	rjmp	.+24     	; 0x22d4 <vTaskSwitchContext+0x20>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    22bc:	e0 91 ee 30 	lds	r30, 0x30EE	; 0x8030ee <uxTopReadyPriority>
    22c0:	4b e0       	ldi	r20, 0x0B	; 11
    22c2:	e4 9f       	mul	r30, r20
    22c4:	f0 01       	movw	r30, r0
    22c6:	11 24       	eor	r1, r1
    22c8:	e4 5e       	subi	r30, 0xE4	; 228
    22ca:	fe 4c       	sbci	r31, 0xCE	; 206
    22cc:	80 81       	ld	r24, Z
    22ce:	88 23       	and	r24, r24
    22d0:	29 f0       	breq	.+10     	; 0x22dc <vTaskSwitchContext+0x28>
    22d2:	14 c0       	rjmp	.+40     	; 0x22fc <vTaskSwitchContext+0x48>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	80 93 ea 30 	sts	0x30EA, r24	; 0x8030ea <xMissedYield>
    22da:	08 95       	ret
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    22dc:	9b e0       	ldi	r25, 0x0B	; 11
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    22de:	80 91 ee 30 	lds	r24, 0x30EE	; 0x8030ee <uxTopReadyPriority>
    22e2:	81 50       	subi	r24, 0x01	; 1
    22e4:	80 93 ee 30 	sts	0x30EE, r24	; 0x8030ee <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    22e8:	e0 91 ee 30 	lds	r30, 0x30EE	; 0x8030ee <uxTopReadyPriority>
    22ec:	9e 9f       	mul	r25, r30
    22ee:	f0 01       	movw	r30, r0
    22f0:	11 24       	eor	r1, r1
    22f2:	e4 5e       	subi	r30, 0xE4	; 228
    22f4:	fe 4c       	sbci	r31, 0xCE	; 206
    22f6:	80 81       	ld	r24, Z
    22f8:	88 23       	and	r24, r24
    22fa:	89 f3       	breq	.-30     	; 0x22de <vTaskSwitchContext+0x2a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    22fc:	80 91 ee 30 	lds	r24, 0x30EE	; 0x8030ee <uxTopReadyPriority>
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	4b e0       	ldi	r20, 0x0B	; 11
    2306:	84 9f       	mul	r24, r20
    2308:	c0 01       	movw	r24, r0
    230a:	11 24       	eor	r1, r1
    230c:	dc 01       	movw	r26, r24
    230e:	a4 5e       	subi	r26, 0xE4	; 228
    2310:	be 4c       	sbci	r27, 0xCE	; 206
    2312:	11 96       	adiw	r26, 0x01	; 1
    2314:	ed 91       	ld	r30, X+
    2316:	fc 91       	ld	r31, X
    2318:	12 97       	sbiw	r26, 0x02	; 2
    231a:	04 80       	ldd	r0, Z+4	; 0x04
    231c:	f5 81       	ldd	r31, Z+5	; 0x05
    231e:	e0 2d       	mov	r30, r0
    2320:	11 96       	adiw	r26, 0x01	; 1
    2322:	ed 93       	st	X+, r30
    2324:	fc 93       	st	X, r31
    2326:	12 97       	sbiw	r26, 0x02	; 2
    2328:	81 5e       	subi	r24, 0xE1	; 225
    232a:	9e 4c       	sbci	r25, 0xCE	; 206
    232c:	e8 17       	cp	r30, r24
    232e:	f9 07       	cpc	r31, r25
    2330:	61 f4       	brne	.+24     	; 0x234a <vTaskSwitchContext+0x96>
    2332:	84 81       	ldd	r24, Z+4	; 0x04
    2334:	95 81       	ldd	r25, Z+5	; 0x05
    2336:	4b e0       	ldi	r20, 0x0B	; 11
    2338:	42 9f       	mul	r20, r18
    233a:	f0 01       	movw	r30, r0
    233c:	43 9f       	mul	r20, r19
    233e:	f0 0d       	add	r31, r0
    2340:	11 24       	eor	r1, r1
    2342:	e4 5e       	subi	r30, 0xE4	; 228
    2344:	fe 4c       	sbci	r31, 0xCE	; 206
    2346:	81 83       	std	Z+1, r24	; 0x01
    2348:	92 83       	std	Z+2, r25	; 0x02
    234a:	8b e0       	ldi	r24, 0x0B	; 11
    234c:	82 9f       	mul	r24, r18
    234e:	f0 01       	movw	r30, r0
    2350:	83 9f       	mul	r24, r19
    2352:	f0 0d       	add	r31, r0
    2354:	11 24       	eor	r1, r1
    2356:	e4 5e       	subi	r30, 0xE4	; 228
    2358:	fe 4c       	sbci	r31, 0xCE	; 206
    235a:	01 80       	ldd	r0, Z+1	; 0x01
    235c:	f2 81       	ldd	r31, Z+2	; 0x02
    235e:	e0 2d       	mov	r30, r0
    2360:	80 85       	ldd	r24, Z+8	; 0x08
    2362:	91 85       	ldd	r25, Z+9	; 0x09
    2364:	80 93 48 31 	sts	0x3148, r24	; 0x803148 <pxCurrentTCB>
    2368:	90 93 49 31 	sts	0x3149, r25	; 0x803149 <pxCurrentTCB+0x1>
    236c:	08 95       	ret

0000236e <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    236e:	cf 92       	push	r12
    2370:	df 92       	push	r13
    2372:	ef 92       	push	r14
    2374:	ff 92       	push	r15
    2376:	6a 01       	movw	r12, r20
    2378:	7b 01       	movw	r14, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    237a:	60 91 48 31 	lds	r22, 0x3148	; 0x803148 <pxCurrentTCB>
    237e:	70 91 49 31 	lds	r23, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
    2382:	62 5f       	subi	r22, 0xF2	; 242
    2384:	7f 4f       	sbci	r23, 0xFF	; 255
    2386:	0e 94 26 09 	call	0x124c	; 0x124c <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    238a:	80 91 48 31 	lds	r24, 0x3148	; 0x803148 <pxCurrentTCB>
    238e:	90 91 49 31 	lds	r25, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
    2392:	02 96       	adiw	r24, 0x02	; 2
    2394:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    2398:	80 91 f0 30 	lds	r24, 0x30F0	; 0x8030f0 <xTickCount>
    239c:	90 91 f1 30 	lds	r25, 0x30F1	; 0x8030f1 <xTickCount+0x1>
    23a0:	a0 91 f2 30 	lds	r26, 0x30F2	; 0x8030f2 <xTickCount+0x2>
    23a4:	b0 91 f3 30 	lds	r27, 0x30F3	; 0x8030f3 <xTickCount+0x3>
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    23a8:	bc 01       	movw	r22, r24
    23aa:	cd 01       	movw	r24, r26
    23ac:	6c 0d       	add	r22, r12
    23ae:	7d 1d       	adc	r23, r13
    23b0:	8e 1d       	adc	r24, r14
    23b2:	9f 1d       	adc	r25, r15
    23b4:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    23b8:	ff 90       	pop	r15
    23ba:	ef 90       	pop	r14
    23bc:	df 90       	pop	r13
    23be:	cf 90       	pop	r12
    23c0:	08 95       	ret

000023c2 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    23c2:	0f 93       	push	r16
    23c4:	1f 93       	push	r17
    23c6:	cf 93       	push	r28
    23c8:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    23ca:	dc 01       	movw	r26, r24
    23cc:	17 96       	adiw	r26, 0x07	; 7
    23ce:	ed 91       	ld	r30, X+
    23d0:	fc 91       	ld	r31, X
    23d2:	18 97       	sbiw	r26, 0x08	; 8
    23d4:	c0 85       	ldd	r28, Z+8	; 0x08
    23d6:	d1 85       	ldd	r29, Z+9	; 0x09
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    23d8:	8e 01       	movw	r16, r28
    23da:	02 5f       	subi	r16, 0xF2	; 242
    23dc:	1f 4f       	sbci	r17, 0xFF	; 255
    23de:	c8 01       	movw	r24, r16
    23e0:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    23e4:	80 91 ec 30 	lds	r24, 0x30EC	; 0x8030ec <uxSchedulerSuspended>
    23e8:	81 11       	cpse	r24, r1
    23ea:	16 c0       	rjmp	.+44     	; 0x2418 <xTaskRemoveFromEventList+0x56>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    23ec:	0c 50       	subi	r16, 0x0C	; 12
    23ee:	11 09       	sbc	r17, r1
    23f0:	c8 01       	movw	r24, r16
    23f2:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    23f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23f8:	90 91 ee 30 	lds	r25, 0x30EE	; 0x8030ee <uxTopReadyPriority>
    23fc:	98 17       	cp	r25, r24
    23fe:	10 f4       	brcc	.+4      	; 0x2404 <xTaskRemoveFromEventList+0x42>
    2400:	80 93 ee 30 	sts	0x30EE, r24	; 0x8030ee <uxTopReadyPriority>
    2404:	bb e0       	ldi	r27, 0x0B	; 11
    2406:	8b 9f       	mul	r24, r27
    2408:	c0 01       	movw	r24, r0
    240a:	11 24       	eor	r1, r1
    240c:	b8 01       	movw	r22, r16
    240e:	84 5e       	subi	r24, 0xE4	; 228
    2410:	9e 4c       	sbci	r25, 0xCE	; 206
    2412:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vListInsertEnd>
    2416:	05 c0       	rjmp	.+10     	; 0x2422 <xTaskRemoveFromEventList+0x60>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2418:	b8 01       	movw	r22, r16
    241a:	87 ef       	ldi	r24, 0xF7	; 247
    241c:	90 e3       	ldi	r25, 0x30	; 48
    241e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2422:	e0 91 48 31 	lds	r30, 0x3148	; 0x803148 <pxCurrentTCB>
    2426:	f0 91 49 31 	lds	r31, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    242e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2430:	29 17       	cp	r18, r25
    2432:	08 f4       	brcc	.+2      	; 0x2436 <xTaskRemoveFromEventList+0x74>
    2434:	80 e0       	ldi	r24, 0x00	; 0
}
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	1f 91       	pop	r17
    243c:	0f 91       	pop	r16
    243e:	08 95       	ret

00002440 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2440:	20 91 e9 30 	lds	r18, 0x30E9	; 0x8030e9 <xNumOfOverflows>
    2444:	fc 01       	movw	r30, r24
    2446:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    2448:	40 91 f0 30 	lds	r20, 0x30F0	; 0x8030f0 <xTickCount>
    244c:	50 91 f1 30 	lds	r21, 0x30F1	; 0x8030f1 <xTickCount+0x1>
    2450:	60 91 f2 30 	lds	r22, 0x30F2	; 0x8030f2 <xTickCount+0x2>
    2454:	70 91 f3 30 	lds	r23, 0x30F3	; 0x8030f3 <xTickCount+0x3>
    2458:	41 83       	std	Z+1, r20	; 0x01
    245a:	52 83       	std	Z+2, r21	; 0x02
    245c:	63 83       	std	Z+3, r22	; 0x03
    245e:	74 83       	std	Z+4, r23	; 0x04
    2460:	08 95       	ret

00002462 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    2462:	8f 92       	push	r8
    2464:	9f 92       	push	r9
    2466:	af 92       	push	r10
    2468:	bf 92       	push	r11
    246a:	cf 92       	push	r12
    246c:	df 92       	push	r13
    246e:	ef 92       	push	r14
    2470:	ff 92       	push	r15
    2472:	0f 93       	push	r16
    2474:	1f 93       	push	r17
    2476:	cf 93       	push	r28
    2478:	df 93       	push	r29
    247a:	fc 01       	movw	r30, r24
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    2482:	80 91 e9 30 	lds	r24, 0x30E9	; 0x8030e9 <xNumOfOverflows>
    2486:	90 81       	ld	r25, Z
    2488:	98 17       	cp	r25, r24
    248a:	89 f0       	breq	.+34     	; 0x24ae <xTaskCheckForTimeOut+0x4c>
    248c:	80 91 f0 30 	lds	r24, 0x30F0	; 0x8030f0 <xTickCount>
    2490:	90 91 f1 30 	lds	r25, 0x30F1	; 0x8030f1 <xTickCount+0x1>
    2494:	a0 91 f2 30 	lds	r26, 0x30F2	; 0x8030f2 <xTickCount+0x2>
    2498:	b0 91 f3 30 	lds	r27, 0x30F3	; 0x8030f3 <xTickCount+0x3>
    249c:	01 81       	ldd	r16, Z+1	; 0x01
    249e:	12 81       	ldd	r17, Z+2	; 0x02
    24a0:	23 81       	ldd	r18, Z+3	; 0x03
    24a2:	34 81       	ldd	r19, Z+4	; 0x04
    24a4:	80 17       	cp	r24, r16
    24a6:	91 07       	cpc	r25, r17
    24a8:	a2 07       	cpc	r26, r18
    24aa:	b3 07       	cpc	r27, r19
    24ac:	a8 f5       	brcc	.+106    	; 0x2518 <xTaskCheckForTimeOut+0xb6>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    24ae:	80 91 f0 30 	lds	r24, 0x30F0	; 0x8030f0 <xTickCount>
    24b2:	90 91 f1 30 	lds	r25, 0x30F1	; 0x8030f1 <xTickCount+0x1>
    24b6:	a0 91 f2 30 	lds	r26, 0x30F2	; 0x8030f2 <xTickCount+0x2>
    24ba:	b0 91 f3 30 	lds	r27, 0x30F3	; 0x8030f3 <xTickCount+0x3>
    24be:	c1 80       	ldd	r12, Z+1	; 0x01
    24c0:	d2 80       	ldd	r13, Z+2	; 0x02
    24c2:	e3 80       	ldd	r14, Z+3	; 0x03
    24c4:	f4 80       	ldd	r15, Z+4	; 0x04
    24c6:	eb 01       	movw	r28, r22
    24c8:	08 81       	ld	r16, Y
    24ca:	19 81       	ldd	r17, Y+1	; 0x01
    24cc:	2a 81       	ldd	r18, Y+2	; 0x02
    24ce:	3b 81       	ldd	r19, Y+3	; 0x03
    24d0:	8c 19       	sub	r24, r12
    24d2:	9d 09       	sbc	r25, r13
    24d4:	ae 09       	sbc	r26, r14
    24d6:	bf 09       	sbc	r27, r15
    24d8:	80 17       	cp	r24, r16
    24da:	91 07       	cpc	r25, r17
    24dc:	a2 07       	cpc	r26, r18
    24de:	b3 07       	cpc	r27, r19
    24e0:	e8 f4       	brcc	.+58     	; 0x251c <xTaskCheckForTimeOut+0xba>
    24e2:	cf 01       	movw	r24, r30
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    24e4:	80 90 f0 30 	lds	r8, 0x30F0	; 0x8030f0 <xTickCount>
    24e8:	90 90 f1 30 	lds	r9, 0x30F1	; 0x8030f1 <xTickCount+0x1>
    24ec:	a0 90 f2 30 	lds	r10, 0x30F2	; 0x8030f2 <xTickCount+0x2>
    24f0:	b0 90 f3 30 	lds	r11, 0x30F3	; 0x8030f3 <xTickCount+0x3>
    24f4:	b5 01       	movw	r22, r10
    24f6:	a4 01       	movw	r20, r8
    24f8:	4c 19       	sub	r20, r12
    24fa:	5d 09       	sbc	r21, r13
    24fc:	6e 09       	sbc	r22, r14
    24fe:	7f 09       	sbc	r23, r15
    2500:	04 1b       	sub	r16, r20
    2502:	15 0b       	sbc	r17, r21
    2504:	26 0b       	sbc	r18, r22
    2506:	37 0b       	sbc	r19, r23
    2508:	08 83       	st	Y, r16
    250a:	19 83       	std	Y+1, r17	; 0x01
    250c:	2a 83       	std	Y+2, r18	; 0x02
    250e:	3b 83       	std	Y+3, r19	; 0x03
			vTaskSetTimeOutState( pxTimeOut );
    2510:	0e 94 20 12 	call	0x2440	; 0x2440 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	03 c0       	rjmp	.+6      	; 0x251e <xTaskCheckForTimeOut+0xbc>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	01 c0       	rjmp	.+2      	; 0x251e <xTaskCheckForTimeOut+0xbc>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    251c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    251e:	0f 90       	pop	r0
    2520:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	1f 91       	pop	r17
    2528:	0f 91       	pop	r16
    252a:	ff 90       	pop	r15
    252c:	ef 90       	pop	r14
    252e:	df 90       	pop	r13
    2530:	cf 90       	pop	r12
    2532:	bf 90       	pop	r11
    2534:	af 90       	pop	r10
    2536:	9f 90       	pop	r9
    2538:	8f 90       	pop	r8
    253a:	08 95       	ret

0000253c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	80 93 ea 30 	sts	0x30EA, r24	; 0x8030ea <xMissedYield>
    2542:	08 95       	ret

00002544 <uxTaskGetStackHighWaterMark>:
	{
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	21 f4       	brne	.+8      	; 0x2550 <uxTaskGetStackHighWaterMark+0xc>
    2548:	80 91 48 31 	lds	r24, 0x3148	; 0x803148 <pxCurrentTCB>
    254c:	90 91 49 31 	lds	r25, 0x3149	; 0x803149 <pxCurrentTCB+0x1>

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    2550:	dc 01       	movw	r26, r24
    2552:	5b 96       	adiw	r26, 0x1b	; 27
    2554:	ed 91       	ld	r30, X+
    2556:	fc 91       	ld	r31, X
    2558:	5c 97       	sbiw	r26, 0x1c	; 28

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    255a:	80 81       	ld	r24, Z
    255c:	81 31       	cpi	r24, 0x11	; 17
    255e:	41 f4       	brne	.+16     	; 0x2570 <uxTaskGetStackHighWaterMark+0x2c>
    2560:	31 96       	adiw	r30, 0x01	; 1
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	90 e0       	ldi	r25, 0x00	; 0
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
    2566:	01 96       	adiw	r24, 0x01	; 1

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    2568:	21 91       	ld	r18, Z+
    256a:	21 31       	cpi	r18, 0x11	; 17
    256c:	e1 f3       	breq	.-8      	; 0x2566 <uxTaskGetStackHighWaterMark+0x22>
    256e:	08 95       	ret

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	90 e0       	ldi	r25, 0x00	; 0
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    2574:	08 95       	ret

00002576 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    2576:	80 91 48 31 	lds	r24, 0x3148	; 0x803148 <pxCurrentTCB>
    257a:	90 91 49 31 	lds	r25, 0x3149	; 0x803149 <pxCurrentTCB+0x1>

		return xReturn;
	}
    257e:	08 95       	ret

00002580 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    2580:	0f 93       	push	r16
    2582:	1f 93       	push	r17
    2584:	cf 93       	push	r28
    2586:	df 93       	push	r29
    2588:	fc 01       	movw	r30, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    258a:	22 8d       	ldd	r18, Z+26	; 0x1a
    258c:	a0 91 48 31 	lds	r26, 0x3148	; 0x803148 <pxCurrentTCB>
    2590:	b0 91 49 31 	lds	r27, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
    2594:	5a 96       	adiw	r26, 0x1a	; 26
    2596:	8c 91       	ld	r24, X
    2598:	28 17       	cp	r18, r24
    259a:	08 f0       	brcs	.+2      	; 0x259e <vTaskPriorityInherit+0x1e>
    259c:	41 c0       	rjmp	.+130    	; 0x2620 <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    259e:	a0 91 48 31 	lds	r26, 0x3148	; 0x803148 <pxCurrentTCB>
    25a2:	b0 91 49 31 	lds	r27, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
    25a6:	5a 96       	adiw	r26, 0x1a	; 26
    25a8:	3c 91       	ld	r19, X
    25aa:	84 e0       	ldi	r24, 0x04	; 4
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	a0 e0       	ldi	r26, 0x00	; 0
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	83 1b       	sub	r24, r19
    25b4:	91 09       	sbc	r25, r1
    25b6:	a1 09       	sbc	r26, r1
    25b8:	b1 09       	sbc	r27, r1
    25ba:	86 87       	std	Z+14, r24	; 0x0e
    25bc:	97 87       	std	Z+15, r25	; 0x0f
    25be:	a0 8b       	std	Z+16, r26	; 0x10
    25c0:	b1 8b       	std	Z+17, r27	; 0x11

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    25c2:	8b e0       	ldi	r24, 0x0B	; 11
    25c4:	28 9f       	mul	r18, r24
    25c6:	90 01       	movw	r18, r0
    25c8:	11 24       	eor	r1, r1
    25ca:	24 5e       	subi	r18, 0xE4	; 228
    25cc:	3e 4c       	sbci	r19, 0xCE	; 206
    25ce:	84 85       	ldd	r24, Z+12	; 0x0c
    25d0:	95 85       	ldd	r25, Z+13	; 0x0d
    25d2:	82 17       	cp	r24, r18
    25d4:	93 07       	cpc	r25, r19
    25d6:	e9 f4       	brne	.+58     	; 0x2612 <vTaskPriorityInherit+0x92>
    25d8:	8f 01       	movw	r16, r30
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    25da:	ef 01       	movw	r28, r30
    25dc:	22 96       	adiw	r28, 0x02	; 2
    25de:	ce 01       	movw	r24, r28
    25e0:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    25e4:	e0 91 48 31 	lds	r30, 0x3148	; 0x803148 <pxCurrentTCB>
    25e8:	f0 91 49 31 	lds	r31, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
    25ec:	82 8d       	ldd	r24, Z+26	; 0x1a
    25ee:	f8 01       	movw	r30, r16
    25f0:	82 8f       	std	Z+26, r24	; 0x1a
				prvAddTaskToReadyQueue( pxTCB );
    25f2:	90 91 ee 30 	lds	r25, 0x30EE	; 0x8030ee <uxTopReadyPriority>
    25f6:	98 17       	cp	r25, r24
    25f8:	10 f4       	brcc	.+4      	; 0x25fe <vTaskPriorityInherit+0x7e>
    25fa:	80 93 ee 30 	sts	0x30EE, r24	; 0x8030ee <uxTopReadyPriority>
    25fe:	fb e0       	ldi	r31, 0x0B	; 11
    2600:	8f 9f       	mul	r24, r31
    2602:	c0 01       	movw	r24, r0
    2604:	11 24       	eor	r1, r1
    2606:	be 01       	movw	r22, r28
    2608:	84 5e       	subi	r24, 0xE4	; 228
    260a:	9e 4c       	sbci	r25, 0xCE	; 206
    260c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vListInsertEnd>
    2610:	07 c0       	rjmp	.+14     	; 0x2620 <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    2612:	a0 91 48 31 	lds	r26, 0x3148	; 0x803148 <pxCurrentTCB>
    2616:	b0 91 49 31 	lds	r27, 0x3149	; 0x803149 <pxCurrentTCB+0x1>
    261a:	5a 96       	adiw	r26, 0x1a	; 26
    261c:	8c 91       	ld	r24, X
    261e:	82 8f       	std	Z+26, r24	; 0x1a
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    2620:	df 91       	pop	r29
    2622:	cf 91       	pop	r28
    2624:	1f 91       	pop	r17
    2626:	0f 91       	pop	r16
    2628:	08 95       	ret

0000262a <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    262a:	0f 93       	push	r16
    262c:	1f 93       	push	r17
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    2632:	00 97       	sbiw	r24, 0x00	; 0
    2634:	49 f1       	breq	.+82     	; 0x2688 <vTaskPriorityDisinherit+0x5e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2636:	fc 01       	movw	r30, r24
    2638:	32 8d       	ldd	r19, Z+26	; 0x1a
    263a:	27 a1       	ldd	r18, Z+39	; 0x27
    263c:	32 17       	cp	r19, r18
    263e:	21 f1       	breq	.+72     	; 0x2688 <vTaskPriorityDisinherit+0x5e>
    2640:	ec 01       	movw	r28, r24
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    2642:	8c 01       	movw	r16, r24
    2644:	0e 5f       	subi	r16, 0xFE	; 254
    2646:	1f 4f       	sbci	r17, 0xFF	; 255
    2648:	c8 01       	movw	r24, r16
    264a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    264e:	8f a1       	ldd	r24, Y+39	; 0x27
    2650:	8a 8f       	std	Y+26, r24	; 0x1a
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    2652:	44 e0       	ldi	r20, 0x04	; 4
    2654:	50 e0       	ldi	r21, 0x00	; 0
    2656:	60 e0       	ldi	r22, 0x00	; 0
    2658:	70 e0       	ldi	r23, 0x00	; 0
    265a:	48 1b       	sub	r20, r24
    265c:	51 09       	sbc	r21, r1
    265e:	61 09       	sbc	r22, r1
    2660:	71 09       	sbc	r23, r1
    2662:	4e 87       	std	Y+14, r20	; 0x0e
    2664:	5f 87       	std	Y+15, r21	; 0x0f
    2666:	68 8b       	std	Y+16, r22	; 0x10
    2668:	79 8b       	std	Y+17, r23	; 0x11
				prvAddTaskToReadyQueue( pxTCB );
    266a:	90 91 ee 30 	lds	r25, 0x30EE	; 0x8030ee <uxTopReadyPriority>
    266e:	98 17       	cp	r25, r24
    2670:	10 f4       	brcc	.+4      	; 0x2676 <vTaskPriorityDisinherit+0x4c>
    2672:	80 93 ee 30 	sts	0x30EE, r24	; 0x8030ee <uxTopReadyPriority>
    2676:	fb e0       	ldi	r31, 0x0B	; 11
    2678:	8f 9f       	mul	r24, r31
    267a:	c0 01       	movw	r24, r0
    267c:	11 24       	eor	r1, r1
    267e:	b8 01       	movw	r22, r16
    2680:	84 5e       	subi	r24, 0xE4	; 228
    2682:	9e 4c       	sbci	r25, 0xCE	; 206
    2684:	0e 94 ff 08 	call	0x11fe	; 0x11fe <vListInsertEnd>
			}
		}
	}
    2688:	df 91       	pop	r29
    268a:	cf 91       	pop	r28
    268c:	1f 91       	pop	r17
    268e:	0f 91       	pop	r16
    2690:	08 95       	ret

00002692 <_ZN8frt_task22_call_users_run_methodEPS_>:
 *  the scheduler.
 *  @param p_task A pointer to the task (this task) whose run method is to be called
 */

void frt_task::_call_users_run_method (frt_task* p_task)
{
    2692:	ec 01       	movw	r28, r24
	// If we're not using setup() and loop(), call the user's run() function instead.
	// This version is more similar to the typical RTOS implementation but not quite
	// as easy to use for execution time profiling
	#else
		// This is where the user's run() method is actually called
		p_task->run ();
    2694:	e8 81       	ld	r30, Y
    2696:	f9 81       	ldd	r31, Y+1	; 0x01
    2698:	01 90       	ld	r0, Z+
    269a:	f0 81       	ld	r31, Z
    269c:	e0 2d       	mov	r30, r0
    269e:	19 95       	eicall
		void* temp_handle = p_task->handle;
		p_task->handle = 0;
		vTaskDelete (temp_handle);
	// If task deletion is disabled, set this task's handle to 0 but don't delete task
	#else
		p_task->handle = 0;
    26a0:	1a 82       	std	Y+2, r1	; 0x02
    26a2:	1b 82       	std	Y+3, r1	; 0x03

	// If task deletion is not enabled, we get here if the task run method has exited 
	// (which it shouldn't have, though). 
	for (;;)
	{
		vTaskDelay (portMAX_DELAY);
    26a4:	6f ef       	ldi	r22, 0xFF	; 255
    26a6:	7f ef       	ldi	r23, 0xFF	; 255
    26a8:	cb 01       	movw	r24, r22
    26aa:	0e 94 2c 11 	call	0x2258	; 0x2258 <vTaskDelay>
    26ae:	fa cf       	rjmp	.-12     	; 0x26a4 <_ZN8frt_task22_call_users_run_methodEPS_+0x12>

000026b0 <_ZN8frt_task13transition_toEh>:
 *  help with debugging.
 *  @param new_state The state to which we will transition
 */
void frt_task::transition_to (uint8_t new_state)
{
	state = new_state;
    26b0:	fc 01       	movw	r30, r24
    26b2:	64 87       	std	Z+12, r22	; 0x0c
			*p_serial << tick_res_time () << ":" << (char*)(pcTaskGetTaskName (handle))
					<< ":" << previous_state << PMS ("->") << state << endl;
		}
	#endif // TRANSITION_TRACE

	previous_state = state;
    26b4:	65 87       	std	Z+13, r22	; 0x0d
    26b6:	08 95       	ret

000026b8 <_ZN8frt_taskC1EPKchjP8emstream>:
 *                      (default: configMINIMAL_STACK_SIZE)
 *  @param p_ser_dev Pointer to a serial device (port, radio, SD card, etc.) which can
 *                   be used by this task to communicate (default: NULL)
 */

frt_task::frt_task (const char* a_name, 
    26b8:	4f 92       	push	r4
    26ba:	5f 92       	push	r5
    26bc:	6f 92       	push	r6
    26be:	7f 92       	push	r7
    26c0:	8f 92       	push	r8
    26c2:	9f 92       	push	r9
    26c4:	af 92       	push	r10
    26c6:	bf 92       	push	r11
    26c8:	cf 92       	push	r12
    26ca:	df 92       	push	r13
    26cc:	ef 92       	push	r14
    26ce:	ff 92       	push	r15
    26d0:	0f 93       	push	r16
    26d2:	1f 93       	push	r17
    26d4:	cf 93       	push	r28
    26d6:	df 93       	push	r29
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	2a 97       	sbiw	r28, 0x0a	; 10
    26de:	cd bf       	out	0x3d, r28	; 61
    26e0:	de bf       	out	0x3e, r29	; 62
    26e2:	4c 01       	movw	r8, r24
    26e4:	29 01       	movw	r4, r18
    26e6:	38 01       	movw	r6, r16
					unsigned portBASE_TYPE a_priority, 
					size_t a_stack_size,
					emstream* p_ser_dev
					)
    26e8:	87 e3       	ldi	r24, 0x37	; 55
    26ea:	90 e2       	ldi	r25, 0x20	; 32
    26ec:	f4 01       	movw	r30, r8
    26ee:	80 83       	st	Z, r24
    26f0:	91 83       	std	Z+1, r25	; 0x01
	// Make sure the user doesn't send an excessively long task name to xTaskCreate()
	// by copying at most (configMAX_TASK_NAME_LEN - 1) characters and putting the
	// terminating null character at the end of the string
	char temp_name[configMAX_TASK_NAME_LEN];
	uint8_t index = 0;
	while (*a_name && index < (configMAX_TASK_NAME_LEN - 1))
    26f2:	fb 01       	movw	r30, r22
    26f4:	80 81       	ld	r24, Z
    26f6:	88 23       	and	r24, r24
    26f8:	69 f0       	breq	.+26     	; 0x2714 <_ZN8frt_taskC1EPKchjP8emstream+0x5c>
    26fa:	de 01       	movw	r26, r28
    26fc:	11 96       	adiw	r26, 0x01	; 1
    26fe:	31 96       	adiw	r30, 0x01	; 1
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	02 c0       	rjmp	.+4      	; 0x2708 <_ZN8frt_taskC1EPKchjP8emstream+0x50>
    2704:	99 30       	cpi	r25, 0x09	; 9
    2706:	39 f0       	breq	.+14     	; 0x2716 <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
	{
		temp_name[index++] = *a_name++;
    2708:	9f 5f       	subi	r25, 0xFF	; 255
    270a:	8d 93       	st	X+, r24
	// Make sure the user doesn't send an excessively long task name to xTaskCreate()
	// by copying at most (configMAX_TASK_NAME_LEN - 1) characters and putting the
	// terminating null character at the end of the string
	char temp_name[configMAX_TASK_NAME_LEN];
	uint8_t index = 0;
	while (*a_name && index < (configMAX_TASK_NAME_LEN - 1))
    270c:	81 91       	ld	r24, Z+
    270e:	81 11       	cpse	r24, r1
    2710:	f9 cf       	rjmp	.-14     	; 0x2704 <_ZN8frt_taskC1EPKchjP8emstream+0x4c>
    2712:	01 c0       	rjmp	.+2      	; 0x2716 <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
{
	// Make sure the user doesn't send an excessively long task name to xTaskCreate()
	// by copying at most (configMAX_TASK_NAME_LEN - 1) characters and putting the
	// terminating null character at the end of the string
	char temp_name[configMAX_TASK_NAME_LEN];
	uint8_t index = 0;
    2714:	90 e0       	ldi	r25, 0x00	; 0
	while (*a_name && index < (configMAX_TASK_NAME_LEN - 1))
	{
		temp_name[index++] = *a_name++;
	}
	temp_name[index] = '\0';
    2716:	e1 e0       	ldi	r30, 0x01	; 1
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	ec 0f       	add	r30, r28
    271c:	fd 1f       	adc	r31, r29
    271e:	e9 0f       	add	r30, r25
    2720:	f1 1d       	adc	r31, r1
    2722:	10 82       	st	Z, r1

	// Create the task with a call to the RTOS task creation function
	portBASE_TYPE task_status = xTaskCreate
    2724:	74 01       	movw	r14, r8
    2726:	f2 e0       	ldi	r31, 0x02	; 2
    2728:	ef 0e       	add	r14, r31
    272a:	f1 1c       	adc	r15, r1
    272c:	a1 2c       	mov	r10, r1
    272e:	b1 2c       	mov	r11, r1
    2730:	c1 2c       	mov	r12, r1
    2732:	d1 2c       	mov	r13, r1
    2734:	04 2f       	mov	r16, r20
    2736:	94 01       	movw	r18, r8
    2738:	a2 01       	movw	r20, r4
    273a:	be 01       	movw	r22, r28
    273c:	6f 5f       	subi	r22, 0xFF	; 255
    273e:	7f 4f       	sbci	r23, 0xFF	; 255
    2740:	8a ee       	ldi	r24, 0xEA	; 234
    2742:	92 e0       	ldi	r25, 0x02	; 2
    2744:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <xTaskGenericCreate>
		 a_priority,                                 // Priority for the new task
		 &handle                                     // The new task's handle
		);

	// Save the serial port pointer and the total stack size
	p_serial = p_ser_dev;
    2748:	f4 01       	movw	r30, r8
    274a:	66 82       	std	Z+6, r6	; 0x06
    274c:	77 82       	std	Z+7, r7	; 0x07
	total_stack = a_stack_size;
    274e:	40 86       	std	Z+8, r4	; 0x08
    2750:	51 86       	std	Z+9, r5	; 0x09

	// Set the handles to the previously and last created tasks
	prev_task_pointer = last_created_task_pointer;
    2752:	20 91 4a 31 	lds	r18, 0x314A	; 0x80314a <last_created_task_pointer>
    2756:	30 91 4b 31 	lds	r19, 0x314B	; 0x80314b <last_created_task_pointer+0x1>
    275a:	24 83       	std	Z+4, r18	; 0x04
    275c:	35 83       	std	Z+5, r19	; 0x05
	last_created_task_pointer = this;
    275e:	80 92 4a 31 	sts	0x314A, r8	; 0x80314a <last_created_task_pointer>
    2762:	90 92 4b 31 	sts	0x314B, r9	; 0x80314b <last_created_task_pointer+0x1>

	// Initialize the finite state machine and its transition logger
	state = 0;
    2766:	14 86       	std	Z+12, r1	; 0x0c
	previous_state = 0;
    2768:	15 86       	std	Z+13, r1	; 0x0d

	// If stack tracing is being used, save the address of the top of the stack
	top_of_stack = ++portStackTopForTask;
    276a:	40 90 ac 31 	lds	r4, 0x31AC	; 0x8031ac <portStackTopForTask>
    276e:	50 90 ad 31 	lds	r5, 0x31AD	; 0x8031ad <portStackTopForTask+0x1>
    2772:	ff ef       	ldi	r31, 0xFF	; 255
    2774:	4f 1a       	sub	r4, r31
    2776:	5f 0a       	sbc	r5, r31
    2778:	40 92 ac 31 	sts	0x31AC, r4	; 0x8031ac <portStackTopForTask>
    277c:	50 92 ad 31 	sts	0x31AD, r5	; 0x8031ad <portStackTopForTask+0x1>
    2780:	f4 01       	movw	r30, r8
    2782:	42 86       	std	Z+10, r4	; 0x0a
    2784:	53 86       	std	Z+11, r5	; 0x0b

	// Initialize the run counter
	runs = 0;
    2786:	16 86       	std	Z+14, r1	; 0x0e
    2788:	17 86       	std	Z+15, r1	; 0x0f
    278a:	10 8a       	std	Z+16, r1	; 0x10
    278c:	11 8a       	std	Z+17, r1	; 0x11

	// If the serial port is being used, let the user know if the task was created
	// successfully
	if (p_serial != NULL)
    278e:	61 14       	cp	r6, r1
    2790:	71 04       	cpc	r7, r1
    2792:	09 f4       	brne	.+2      	; 0x2796 <_ZN8frt_taskC1EPKchjP8emstream+0xde>
    2794:	44 c0       	rjmp	.+136    	; 0x281e <_ZN8frt_taskC1EPKchjP8emstream+0x166>
	{
		if (task_status == pdPASS)
    2796:	81 30       	cpi	r24, 0x01	; 1
    2798:	79 f5       	brne	.+94     	; 0x27f8 <_ZN8frt_taskC1EPKchjP8emstream+0x140>
		{
			*p_serial << PMS ("Task ") << temp_name << PMS (" created")
    279a:	6a e0       	ldi	r22, 0x0A	; 10
    279c:	c3 01       	movw	r24, r6
    279e:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    27a2:	7c 01       	movw	r14, r24
    27a4:	61 e2       	ldi	r22, 0x21	; 33
    27a6:	75 e0       	ldi	r23, 0x05	; 5
    27a8:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
    27ac:	be 01       	movw	r22, r28
    27ae:	6f 5f       	subi	r22, 0xFF	; 255
    27b0:	7f 4f       	sbci	r23, 0xFF	; 255
    27b2:	c7 01       	movw	r24, r14
    27b4:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
    27b8:	6a e0       	ldi	r22, 0x0A	; 10
    27ba:	c7 01       	movw	r24, r14
    27bc:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    27c0:	7c 01       	movw	r14, r24
    27c2:	68 e1       	ldi	r22, 0x18	; 24
    27c4:	75 e0       	ldi	r23, 0x05	; 5
    27c6:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
				<< PMS (", stack at 0x") << hex << top_of_stack << dec << endl;
    27ca:	6a e0       	ldi	r22, 0x0A	; 10
    27cc:	c7 01       	movw	r24, r14
    27ce:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    27d2:	7c 01       	movw	r14, r24
    27d4:	6a e0       	ldi	r22, 0x0A	; 10
    27d6:	75 e0       	ldi	r23, 0x05	; 5
    27d8:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
    27dc:	63 e0       	ldi	r22, 0x03	; 3
    27de:	c7 01       	movw	r24, r14
    27e0:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    27e4:	b2 01       	movw	r22, r4
    27e6:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN8emstreamlsEj>
    27ea:	62 e0       	ldi	r22, 0x02	; 2
    27ec:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    27f0:	66 e0       	ldi	r22, 0x06	; 6
    27f2:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    27f6:	13 c0       	rjmp	.+38     	; 0x281e <_ZN8frt_taskC1EPKchjP8emstream+0x166>
		}
		else
		{
			*p_serial << PMS ("ERROR creating task ") << temp_name << endl;
    27f8:	6a e0       	ldi	r22, 0x0A	; 10
    27fa:	c3 01       	movw	r24, r6
    27fc:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2800:	4c 01       	movw	r8, r24
    2802:	65 ef       	ldi	r22, 0xF5	; 245
    2804:	74 e0       	ldi	r23, 0x04	; 4
    2806:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
    280a:	be 01       	movw	r22, r28
    280c:	6f 5f       	subi	r22, 0xFF	; 255
    280e:	7f 4f       	sbci	r23, 0xFF	; 255
    2810:	c4 01       	movw	r24, r8
    2812:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
    2816:	66 e0       	ldi	r22, 0x06	; 6
    2818:	c4 01       	movw	r24, r8
    281a:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
		}
	}
}
    281e:	2a 96       	adiw	r28, 0x0a	; 10
    2820:	cd bf       	out	0x3d, r28	; 61
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	df 91       	pop	r29
    2826:	cf 91       	pop	r28
    2828:	1f 91       	pop	r17
    282a:	0f 91       	pop	r16
    282c:	ff 90       	pop	r15
    282e:	ef 90       	pop	r14
    2830:	df 90       	pop	r13
    2832:	cf 90       	pop	r12
    2834:	bf 90       	pop	r11
    2836:	af 90       	pop	r10
    2838:	9f 90       	pop	r9
    283a:	8f 90       	pop	r8
    283c:	7f 90       	pop	r7
    283e:	6f 90       	pop	r6
    2840:	5f 90       	pop	r5
    2842:	4f 90       	pop	r4
    2844:	08 95       	ret

00002846 <_ZN8frt_task19print_stack_in_listEP8emstream>:
 *  stacks. The idle task's stack is printed separately afterwards. 
 *  @param ser_device The serial device to which each task prints its stack
 */

void frt_task::print_stack_in_list (emstream* ser_device)
{
    2846:	cf 92       	push	r12
    2848:	df 92       	push	r13
    284a:	ef 92       	push	r14
    284c:	ff 92       	push	r15
    284e:	0f 93       	push	r16
    2850:	1f 93       	push	r17
    2852:	cf 93       	push	r28
    2854:	df 93       	push	r29
    2856:	ec 01       	movw	r28, r24
    2858:	7b 01       	movw	r14, r22
	*ser_device << ATERM_BOLD << PMS ("Task: ") 
				<< (const char*)(pcTaskGetTaskName (handle)) 
    285a:	8a 81       	ldd	r24, Y+2	; 0x02
    285c:	9b 81       	ldd	r25, Y+3	; 0x03
    285e:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <pcTaskGetTaskName>
    2862:	6c 01       	movw	r12, r24
 *  @param ser_device The serial device to which each task prints its stack
 */

void frt_task::print_stack_in_list (emstream* ser_device)
{
	*ser_device << ATERM_BOLD << PMS ("Task: ") 
    2864:	6a e0       	ldi	r22, 0x0A	; 10
    2866:	c7 01       	movw	r24, r14
    2868:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    286c:	8c 01       	movw	r16, r24
    286e:	64 e3       	ldi	r22, 0x34	; 52
    2870:	75 e0       	ldi	r23, 0x05	; 5
    2872:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
    2876:	6a e0       	ldi	r22, 0x0A	; 10
    2878:	c8 01       	movw	r24, r16
    287a:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    287e:	8c 01       	movw	r16, r24
    2880:	6d e2       	ldi	r22, 0x2D	; 45
    2882:	75 e0       	ldi	r23, 0x05	; 5
    2884:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
    2888:	b6 01       	movw	r22, r12
    288a:	c8 01       	movw	r24, r16
    288c:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
				<< (const char*)(pcTaskGetTaskName (handle)) 
				<< ATERM_NORM_INT << endl;
    2890:	6a e0       	ldi	r22, 0x0A	; 10
    2892:	c8 01       	movw	r24, r16
    2894:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2898:	8c 01       	movw	r16, r24
    289a:	67 e2       	ldi	r22, 0x27	; 39
    289c:	75 e0       	ldi	r23, 0x05	; 5
    289e:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
    28a2:	66 e0       	ldi	r22, 0x06	; 6
    28a4:	c8 01       	movw	r24, r16
    28a6:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
		 *  @param p_ser_d The serial device to which the stack will be printed
		 */
		void dump_stack (emstream* p_ser_d)
		{
			hex_dump_memory ((uint8_t*)(top_of_stack - total_stack), 
								(uint8_t*)(top_of_stack), p_ser_d, true, 0x11);
    28aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    28ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    28ae:	e8 85       	ldd	r30, Y+8	; 0x08
    28b0:	f9 85       	ldd	r31, Y+9	; 0x09
    28b2:	01 e1       	ldi	r16, 0x11	; 17
    28b4:	21 e0       	ldi	r18, 0x01	; 1
    28b6:	a7 01       	movw	r20, r14
    28b8:	bc 01       	movw	r22, r24
    28ba:	8e 1b       	sub	r24, r30
    28bc:	9f 0b       	sbc	r25, r31
    28be:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <_Z15hex_dump_memoryPhS_P8emstreambh>

	dump_stack (ser_device);

	if (prev_task_pointer != NULL)
    28c2:	8c 81       	ldd	r24, Y+4	; 0x04
    28c4:	9d 81       	ldd	r25, Y+5	; 0x05
    28c6:	00 97       	sbiw	r24, 0x00	; 0
    28c8:	19 f0       	breq	.+6      	; 0x28d0 <_ZN8frt_task19print_stack_in_listEP8emstream+0x8a>
	{
		prev_task_pointer->print_stack_in_list (ser_device);
    28ca:	b7 01       	movw	r22, r14
    28cc:	0e 94 23 14 	call	0x2846	; 0x2846 <_ZN8frt_task19print_stack_in_listEP8emstream>
	}
}
    28d0:	df 91       	pop	r29
    28d2:	cf 91       	pop	r28
    28d4:	1f 91       	pop	r17
    28d6:	0f 91       	pop	r16
    28d8:	ff 90       	pop	r15
    28da:	ef 90       	pop	r14
    28dc:	df 90       	pop	r13
    28de:	cf 90       	pop	r12
    28e0:	08 95       	ret

000028e2 <_Z17print_task_stacksP8emstream>:
/** This function has all the tasks in the task list do a "stack dump", printing their
 *  stacks in hex dump format. The idle task's stack is printed afterwards. 
 *  @param ser_dev Pointer to a serial device on which the information will be printed
 */
void print_task_stacks (emstream* ser_dev)
{
    28e2:	0f 93       	push	r16
    28e4:	1f 93       	push	r17
    28e6:	cf 93       	push	r28
    28e8:	df 93       	push	r29
    28ea:	ec 01       	movw	r28, r24
	// Tell the most recently created task to print its stack and keep the process
	// going by telling the next most recently created task to print its stack, etc.
	if (last_created_task_pointer != NULL)
    28ec:	80 91 4a 31 	lds	r24, 0x314A	; 0x80314a <last_created_task_pointer>
    28f0:	90 91 4b 31 	lds	r25, 0x314B	; 0x80314b <last_created_task_pointer+0x1>
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	19 f0       	breq	.+6      	; 0x28fe <_Z17print_task_stacksP8emstream+0x1c>
	{
		last_created_task_pointer->print_stack_in_list (ser_dev);
    28f8:	be 01       	movw	r22, r28
    28fa:	0e 94 23 14 	call	0x2846	; 0x2846 <_ZN8frt_task19print_stack_in_listEP8emstream>
	}

	// Now print the stack for the idle task, which isn't user created and so isn't
	// in the regular task list
	*ser_dev << ATERM_BOLD << PMS ("Task: IDLE") << ATERM_NORM_INT << endl;
    28fe:	6a e0       	ldi	r22, 0x0A	; 10
    2900:	ce 01       	movw	r24, r28
    2902:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2906:	8c 01       	movw	r16, r24
    2908:	6a e4       	ldi	r22, 0x4A	; 74
    290a:	75 e0       	ldi	r23, 0x05	; 5
    290c:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
    2910:	6a e0       	ldi	r22, 0x0A	; 10
    2912:	c8 01       	movw	r24, r16
    2914:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2918:	8c 01       	movw	r16, r24
    291a:	6f e3       	ldi	r22, 0x3F	; 63
    291c:	75 e0       	ldi	r23, 0x05	; 5
    291e:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
    2922:	6a e0       	ldi	r22, 0x0A	; 10
    2924:	c8 01       	movw	r24, r16
    2926:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    292a:	8c 01       	movw	r16, r24
    292c:	69 e3       	ldi	r22, 0x39	; 57
    292e:	75 e0       	ldi	r23, 0x05	; 5
    2930:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
    2934:	66 e0       	ldi	r22, 0x06	; 6
    2936:	c8 01       	movw	r24, r16
    2938:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
	hex_dump_memory ((uint8_t*)(portStackTopForTask - configMINIMAL_STACK_SIZE + 1), 
							(uint8_t*)(portStackTopForTask + 1), ser_dev, true, 0x11);
    293c:	80 91 ac 31 	lds	r24, 0x31AC	; 0x8031ac <portStackTopForTask>
    2940:	90 91 ad 31 	lds	r25, 0x31AD	; 0x8031ad <portStackTopForTask+0x1>
    2944:	bc 01       	movw	r22, r24
    2946:	6f 5f       	subi	r22, 0xFF	; 255
    2948:	7f 4f       	sbci	r23, 0xFF	; 255
    294a:	01 e1       	ldi	r16, 0x11	; 17
    294c:	21 e0       	ldi	r18, 0x01	; 1
    294e:	ae 01       	movw	r20, r28
    2950:	83 56       	subi	r24, 0x63	; 99
    2952:	91 09       	sbc	r25, r1
    2954:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <_Z15hex_dump_memoryPhS_P8emstreambh>
}
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	1f 91       	pop	r17
    295e:	0f 91       	pop	r16
    2960:	08 95       	ret

00002962 <_ZN8frt_task12print_statusER8emstream>:
 *  information. 
 *  @param ser_dev A reference to the serial device to which to print the task status
 */

void frt_task::print_status (emstream& ser_dev)
{
    2962:	8f 92       	push	r8
    2964:	9f 92       	push	r9
    2966:	af 92       	push	r10
    2968:	bf 92       	push	r11
    296a:	cf 92       	push	r12
    296c:	df 92       	push	r13
    296e:	ef 92       	push	r14
    2970:	ff 92       	push	r15
    2972:	0f 93       	push	r16
    2974:	1f 93       	push	r17
    2976:	cf 93       	push	r28
    2978:	df 93       	push	r29
    297a:	ec 01       	movw	r28, r24
    297c:	8b 01       	movw	r16, r22
	ser_dev << (const char*)(pcTaskGetTaskName (handle));
    297e:	8a 81       	ldd	r24, Y+2	; 0x02
    2980:	9b 81       	ldd	r25, Y+3	; 0x03
    2982:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <pcTaskGetTaskName>
    2986:	bc 01       	movw	r22, r24
    2988:	c8 01       	movw	r24, r16
    298a:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
	ser_dev.putchar ('\t');
    298e:	d8 01       	movw	r26, r16
    2990:	ed 91       	ld	r30, X+
    2992:	fc 91       	ld	r31, X
    2994:	02 80       	ldd	r0, Z+2	; 0x02
    2996:	f3 81       	ldd	r31, Z+3	; 0x03
    2998:	e0 2d       	mov	r30, r0
    299a:	69 e0       	ldi	r22, 0x09	; 9
    299c:	c8 01       	movw	r24, r16
    299e:	19 95       	eicall
	if (strlen ((const char*)(pcTaskGetTaskName (handle))) < 8)
    29a0:	8a 81       	ldd	r24, Y+2	; 0x02
    29a2:	9b 81       	ldd	r25, Y+3	; 0x03
    29a4:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <pcTaskGetTaskName>
    29a8:	fc 01       	movw	r30, r24
    29aa:	01 90       	ld	r0, Z+
    29ac:	00 20       	and	r0, r0
    29ae:	e9 f7       	brne	.-6      	; 0x29aa <_ZN8frt_task12print_statusER8emstream+0x48>
    29b0:	31 97       	sbiw	r30, 0x01	; 1
    29b2:	e8 1b       	sub	r30, r24
    29b4:	f9 0b       	sbc	r31, r25
    29b6:	38 97       	sbiw	r30, 0x08	; 8
    29b8:	48 f4       	brcc	.+18     	; 0x29cc <_ZN8frt_task12print_statusER8emstream+0x6a>
	{
		ser_dev.putchar ('\t');
    29ba:	d8 01       	movw	r26, r16
    29bc:	ed 91       	ld	r30, X+
    29be:	fc 91       	ld	r31, X
    29c0:	02 80       	ldd	r0, Z+2	; 0x02
    29c2:	f3 81       	ldd	r31, Z+3	; 0x03
    29c4:	e0 2d       	mov	r30, r0
    29c6:	69 e0       	ldi	r22, 0x09	; 9
    29c8:	c8 01       	movw	r24, r16
    29ca:	19 95       	eicall
			<< get_state ()
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\t") << uxTaskGetStackHighWaterMark(handle) << PMS ("/") 
			<< get_total_stack () << PMS ("\t")
		#endif
			<< PMS ("\t") << runs;
    29cc:	ce 84       	ldd	r12, Y+14	; 0x0e
    29ce:	df 84       	ldd	r13, Y+15	; 0x0f
    29d0:	e8 88       	ldd	r14, Y+16	; 0x10
    29d2:	f9 88       	ldd	r15, Y+17	; 0x11
		 *  constructor call.
		 *  @return The task's total stack size in bytes
		 */
		size_t get_total_stack (void)
		{
			return (total_stack);
    29d4:	a8 84       	ldd	r10, Y+8	; 0x08
    29d6:	b9 84       	ldd	r11, Y+9	; 0x09
		ser_dev.putchar ('\t');
	}
	ser_dev << uxTaskPriorityGet (handle) << PMS ("\t")
			<< get_state ()
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\t") << uxTaskGetStackHighWaterMark(handle) << PMS ("/") 
    29d8:	8a 81       	ldd	r24, Y+2	; 0x02
    29da:	9b 81       	ldd	r25, Y+3	; 0x03
    29dc:	0e 94 a2 12 	call	0x2544	; 0x2544 <uxTaskGetStackHighWaterMark>
    29e0:	98 2e       	mov	r9, r24
		 *  manipulated by the user within the run() method to cause state transitions.
		 *  @return The current state
		 */
		uint8_t get_state (void)
		{
			return (state);
    29e2:	8c 84       	ldd	r8, Y+12	; 0x0c
	ser_dev.putchar ('\t');
	if (strlen ((const char*)(pcTaskGetTaskName (handle))) < 8)
	{
		ser_dev.putchar ('\t');
	}
	ser_dev << uxTaskPriorityGet (handle) << PMS ("\t")
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	9b 81       	ldd	r25, Y+3	; 0x03
    29e8:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <uxTaskPriorityGet>
    29ec:	68 2f       	mov	r22, r24
    29ee:	c8 01       	movw	r24, r16
    29f0:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN8emstreamlsEh>
    29f4:	6a e0       	ldi	r22, 0x0A	; 10
    29f6:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    29fa:	ec 01       	movw	r28, r24
    29fc:	6f eb       	ldi	r22, 0xBF	; 191
    29fe:	75 e0       	ldi	r23, 0x05	; 5
    2a00:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
			<< get_state ()
    2a04:	68 2d       	mov	r22, r8
    2a06:	ce 01       	movw	r24, r28
    2a08:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN8emstreamlsEh>
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\t") << uxTaskGetStackHighWaterMark(handle) << PMS ("/") 
    2a0c:	6a e0       	ldi	r22, 0x0A	; 10
    2a0e:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2a12:	ec 01       	movw	r28, r24
    2a14:	6d eb       	ldi	r22, 0xBD	; 189
    2a16:	75 e0       	ldi	r23, 0x05	; 5
    2a18:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
    2a1c:	69 2d       	mov	r22, r9
    2a1e:	ce 01       	movw	r24, r28
    2a20:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN8emstreamlsEh>
    2a24:	6a e0       	ldi	r22, 0x0A	; 10
    2a26:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2a2a:	ec 01       	movw	r28, r24
    2a2c:	6b eb       	ldi	r22, 0xBB	; 187
    2a2e:	75 e0       	ldi	r23, 0x05	; 5
    2a30:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
			<< get_total_stack () << PMS ("\t")
    2a34:	b5 01       	movw	r22, r10
    2a36:	ce 01       	movw	r24, r28
    2a38:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN8emstreamlsEj>
    2a3c:	6a e0       	ldi	r22, 0x0A	; 10
    2a3e:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2a42:	ec 01       	movw	r28, r24
    2a44:	69 eb       	ldi	r22, 0xB9	; 185
    2a46:	75 e0       	ldi	r23, 0x05	; 5
    2a48:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
		#endif
			<< PMS ("\t") << runs;
    2a4c:	6a e0       	ldi	r22, 0x0A	; 10
    2a4e:	ce 01       	movw	r24, r28
    2a50:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2a54:	ec 01       	movw	r28, r24
    2a56:	67 eb       	ldi	r22, 0xB7	; 183
    2a58:	75 e0       	ldi	r23, 0x05	; 5
    2a5a:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
    2a5e:	b7 01       	movw	r22, r14
    2a60:	a6 01       	movw	r20, r12
    2a62:	ce 01       	movw	r24, r28
    2a64:	0e 94 3c 19 	call	0x3278	; 0x3278 <_ZN8emstreamlsEm>
}
    2a68:	df 91       	pop	r29
    2a6a:	cf 91       	pop	r28
    2a6c:	1f 91       	pop	r17
    2a6e:	0f 91       	pop	r16
    2a70:	ff 90       	pop	r15
    2a72:	ef 90       	pop	r14
    2a74:	df 90       	pop	r13
    2a76:	cf 90       	pop	r12
    2a78:	bf 90       	pop	r11
    2a7a:	af 90       	pop	r10
    2a7c:	9f 90       	pop	r9
    2a7e:	8f 90       	pop	r8
    2a80:	08 95       	ret

00002a82 <_ZlsR8emstreamR8frt_task>:
 *  @return A reference to the same serial device on which we write information.
 *          This is used to string together things to write with "<<" operators
 */

emstream& operator << (emstream& ser_dev, frt_task& a_task)
{
    2a82:	cf 93       	push	r28
    2a84:	df 93       	push	r29
    2a86:	ec 01       	movw	r28, r24
    2a88:	cb 01       	movw	r24, r22
	a_task.print_status (ser_dev);
    2a8a:	db 01       	movw	r26, r22
    2a8c:	ed 91       	ld	r30, X+
    2a8e:	fc 91       	ld	r31, X
    2a90:	02 80       	ldd	r0, Z+2	; 0x02
    2a92:	f3 81       	ldd	r31, Z+3	; 0x03
    2a94:	e0 2d       	mov	r30, r0
    2a96:	be 01       	movw	r22, r28
    2a98:	19 95       	eicall
	return (ser_dev);
}
    2a9a:	ce 01       	movw	r24, r28
    2a9c:	df 91       	pop	r29
    2a9e:	cf 91       	pop	r28
    2aa0:	08 95       	ret

00002aa2 <_ZN8frt_task20print_status_in_listEP8emstream>:
 *  tasks to do so. The list is kept by the tasks, each having a pointer to another.
 *  @param ser_device The serial device to which each task prints its status
 */

void frt_task::print_status_in_list (emstream* ser_device)
{
    2aa2:	0f 93       	push	r16
    2aa4:	1f 93       	push	r17
    2aa6:	cf 93       	push	r28
    2aa8:	df 93       	push	r29
    2aaa:	ec 01       	movw	r28, r24
    2aac:	8b 01       	movw	r16, r22
	*ser_device << *this << endl;
    2aae:	bc 01       	movw	r22, r24
    2ab0:	c8 01       	movw	r24, r16
    2ab2:	0e 94 41 15 	call	0x2a82	; 0x2a82 <_ZlsR8emstreamR8frt_task>
    2ab6:	66 e0       	ldi	r22, 0x06	; 6
    2ab8:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>

	if (prev_task_pointer != NULL)
    2abc:	8c 81       	ldd	r24, Y+4	; 0x04
    2abe:	9d 81       	ldd	r25, Y+5	; 0x05
    2ac0:	00 97       	sbiw	r24, 0x00	; 0
    2ac2:	19 f0       	breq	.+6      	; 0x2aca <_ZN8frt_task20print_status_in_listEP8emstream+0x28>
	{
		prev_task_pointer->print_status_in_list (ser_device);
    2ac4:	b8 01       	movw	r22, r16
    2ac6:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <_ZN8frt_task20print_status_in_listEP8emstream>
	}
}
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	1f 91       	pop	r17
    2ad0:	0f 91       	pop	r16
    2ad2:	08 95       	ret

00002ad4 <_Z15print_task_listP8emstream>:
 *  The author isn't sure if it can always be trusted. 
 *  @param ser_dev Pointer to a serial device on which the information will be printed
 */

void print_task_list (emstream* ser_dev)
{
    2ad4:	0f 93       	push	r16
    2ad6:	1f 93       	push	r17
    2ad8:	cf 93       	push	r28
    2ada:	df 93       	push	r29
    2adc:	ec 01       	movw	r28, r24
	// Print the first line with the top of the headings
	*ser_dev << PMS ("Task\t\t  \t ")
    2ade:	6a e0       	ldi	r22, 0x0A	; 10
    2ae0:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2ae4:	8c 01       	movw	r16, r24
    2ae6:	6c ea       	ldi	r22, 0xAC	; 172
    2ae8:	75 e0       	ldi	r23, 0x05	; 5
    2aea:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\tStack")
    2aee:	6a e0       	ldi	r22, 0x0A	; 10
    2af0:	c8 01       	movw	r24, r16
    2af2:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2af6:	8c 01       	movw	r16, r24
    2af8:	65 ea       	ldi	r22, 0xA5	; 165
    2afa:	75 e0       	ldi	r23, 0x05	; 5
    2afc:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
		#endif
			<< endl;
    2b00:	66 e0       	ldi	r22, 0x06	; 6
    2b02:	c8 01       	movw	r24, r16
    2b04:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>

	// Print the second line with the rest of the headings
	*ser_dev << PMS ("Name\t\tPri.\tState")
    2b08:	6a e0       	ldi	r22, 0x0A	; 10
    2b0a:	ce 01       	movw	r24, r28
    2b0c:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2b10:	8c 01       	movw	r16, r24
    2b12:	64 e9       	ldi	r22, 0x94	; 148
    2b14:	75 e0       	ldi	r23, 0x05	; 5
    2b16:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\tFree/Total")
    2b1a:	6a e0       	ldi	r22, 0x0A	; 10
    2b1c:	c8 01       	movw	r24, r16
    2b1e:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2b22:	8c 01       	movw	r16, r24
    2b24:	68 e8       	ldi	r22, 0x88	; 136
    2b26:	75 e0       	ldi	r23, 0x05	; 5
    2b28:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
		#endif
			<< PMS ("\tRuns") << endl;
    2b2c:	6a e0       	ldi	r22, 0x0A	; 10
    2b2e:	c8 01       	movw	r24, r16
    2b30:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2b34:	8c 01       	movw	r16, r24
    2b36:	62 e8       	ldi	r22, 0x82	; 130
    2b38:	75 e0       	ldi	r23, 0x05	; 5
    2b3a:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
    2b3e:	66 e0       	ldi	r22, 0x06	; 6
    2b40:	c8 01       	movw	r24, r16
    2b42:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>

	// Print the third line which shows separators between headers and data
	*ser_dev << PMS ("----\t\t----\t-----")
    2b46:	6a e0       	ldi	r22, 0x0A	; 10
    2b48:	ce 01       	movw	r24, r28
    2b4a:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2b4e:	8c 01       	movw	r16, r24
    2b50:	61 e7       	ldi	r22, 0x71	; 113
    2b52:	75 e0       	ldi	r23, 0x05	; 5
    2b54:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\t----------")
    2b58:	6a e0       	ldi	r22, 0x0A	; 10
    2b5a:	c8 01       	movw	r24, r16
    2b5c:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2b60:	8c 01       	movw	r16, r24
    2b62:	65 e6       	ldi	r22, 0x65	; 101
    2b64:	75 e0       	ldi	r23, 0x05	; 5
    2b66:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
		#endif
			<< PMS ("\t----") << endl;
    2b6a:	6a e0       	ldi	r22, 0x0A	; 10
    2b6c:	c8 01       	movw	r24, r16
    2b6e:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2b72:	8c 01       	movw	r16, r24
    2b74:	6f e5       	ldi	r22, 0x5F	; 95
    2b76:	75 e0       	ldi	r23, 0x05	; 5
    2b78:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
    2b7c:	66 e0       	ldi	r22, 0x06	; 6
    2b7e:	c8 01       	movw	r24, r16
    2b80:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>

	// Now have the tasks each print out their status. Tasks form a linked list, so
	// we only need to get the last task started and it will call the next, etc.
	if (last_created_task_pointer != NULL)
    2b84:	80 91 4a 31 	lds	r24, 0x314A	; 0x80314a <last_created_task_pointer>
    2b88:	90 91 4b 31 	lds	r25, 0x314B	; 0x80314b <last_created_task_pointer+0x1>
    2b8c:	00 97       	sbiw	r24, 0x00	; 0
    2b8e:	19 f0       	breq	.+6      	; 0x2b96 <_Z15print_task_listP8emstream+0xc2>
	{
		last_created_task_pointer->print_status_in_list (ser_dev);
    2b90:	be 01       	movw	r22, r28
    2b92:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <_ZN8frt_task20print_status_in_listEP8emstream>
	}

	// Have the idle task print out its information
	*ser_dev << PMS ("IDLE\t\t0\t-\t")
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< uxTaskGetStackHighWaterMark (xTaskGetIdleTaskHandle ())
    2b96:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <xTaskGetIdleTaskHandle>
    2b9a:	0e 94 a2 12 	call	0x2544	; 0x2544 <uxTaskGetStackHighWaterMark>
    2b9e:	18 2f       	mov	r17, r24
	{
		last_created_task_pointer->print_status_in_list (ser_dev);
	}

	// Have the idle task print out its information
	*ser_dev << PMS ("IDLE\t\t0\t-\t")
    2ba0:	6a e0       	ldi	r22, 0x0A	; 10
    2ba2:	ce 01       	movw	r24, r28
    2ba4:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2ba8:	ec 01       	movw	r28, r24
    2baa:	64 e5       	ldi	r22, 0x54	; 84
    2bac:	75 e0       	ldi	r23, 0x05	; 5
    2bae:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< uxTaskGetStackHighWaterMark (xTaskGetIdleTaskHandle ())
    2bb2:	61 2f       	mov	r22, r17
    2bb4:	ce 01       	movw	r24, r28
    2bb6:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN8emstreamlsEh>
			<< PMS ("/") << configMINIMAL_STACK_SIZE << PMS ("\t\t")
    2bba:	6a e0       	ldi	r22, 0x0A	; 10
    2bbc:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2bc0:	ec 01       	movw	r28, r24
    2bc2:	62 e5       	ldi	r22, 0x52	; 82
    2bc4:	75 e0       	ldi	r23, 0x05	; 5
    2bc6:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
    2bca:	64 e6       	ldi	r22, 0x64	; 100
    2bcc:	70 e0       	ldi	r23, 0x00	; 0
    2bce:	ce 01       	movw	r24, r28
    2bd0:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN8emstreamlsEj>
    2bd4:	6a e0       	ldi	r22, 0x0A	; 10
    2bd6:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2bda:	ec 01       	movw	r28, r24
    2bdc:	6f e4       	ldi	r22, 0x4F	; 79
    2bde:	75 e0       	ldi	r23, 0x05	; 5
    2be0:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
		#endif
		#ifdef TASK_SETUP_AND_LOOP
			<< PMS ("-")
		#endif
			<< endl;
    2be4:	66 e0       	ldi	r22, 0x06	; 6
    2be6:	ce 01       	movw	r24, r28
    2be8:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
}
    2bec:	df 91       	pop	r29
    2bee:	cf 91       	pop	r28
    2bf0:	1f 91       	pop	r17
    2bf2:	0f 91       	pop	r16
    2bf4:	08 95       	ret

00002bf6 <_ZN14frt_text_queue7getcharEv>:
 *  the queue, it blocks until a character is received.
 *  @return The character which was received from the queue
 */

inline int16_t frt_text_queue::getchar (void)
{
    2bf6:	0f 93       	push	r16
    2bf8:	cf 93       	push	r28
    2bfa:	df 93       	push	r29
    2bfc:	1f 92       	push	r1
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
	char recv_char;							// Character read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue
	if (xQueueReceive (the_queue, &recv_char, portMAX_DELAY) != pdTRUE)
    2c02:	00 e0       	ldi	r16, 0x00	; 0
    2c04:	2f ef       	ldi	r18, 0xFF	; 255
    2c06:	3f ef       	ldi	r19, 0xFF	; 255
    2c08:	a9 01       	movw	r20, r18
    2c0a:	be 01       	movw	r22, r28
    2c0c:	6f 5f       	subi	r22, 0xFF	; 255
    2c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c10:	fc 01       	movw	r30, r24
    2c12:	80 85       	ldd	r24, Z+8	; 0x08
    2c14:	91 85       	ldd	r25, Z+9	; 0x09
    2c16:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <xQueueGenericReceive>
    2c1a:	81 30       	cpi	r24, 0x01	; 1
    2c1c:	19 f4       	brne	.+6      	; 0x2c24 <_ZN14frt_text_queue7getcharEv+0x2e>
	{
		return (-1);
	}

	// OK, we got good data from the queue, so return it
	return (recv_char);
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	02 c0       	rjmp	.+4      	; 0x2c28 <_ZN14frt_text_queue7getcharEv+0x32>
	char recv_char;							// Character read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue
	if (xQueueReceive (the_queue, &recv_char, portMAX_DELAY) != pdTRUE)
	{
		return (-1);
    2c24:	8f ef       	ldi	r24, 0xFF	; 255
    2c26:	9f ef       	ldi	r25, 0xFF	; 255
	}

	// OK, we got good data from the queue, so return it
	return (recv_char);
}
    2c28:	0f 90       	pop	r0
    2c2a:	df 91       	pop	r29
    2c2c:	cf 91       	pop	r28
    2c2e:	0f 91       	pop	r16
    2c30:	08 95       	ret

00002c32 <_ZN14frt_text_queue14check_for_charEv>:
 *  @return True for character available, false for no character available
 */

inline bool frt_text_queue::check_for_char (void)
{
	if (uxQueueMessagesWaiting (the_queue) == 0)
    2c32:	fc 01       	movw	r30, r24
    2c34:	80 85       	ldd	r24, Z+8	; 0x08
    2c36:	91 85       	ldd	r25, Z+9	; 0x09
    2c38:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <uxQueueMessagesWaiting>
    2c3c:	91 e0       	ldi	r25, 0x01	; 1
    2c3e:	81 11       	cpse	r24, r1
    2c40:	01 c0       	rjmp	.+2      	; 0x2c44 <_ZN14frt_text_queue14check_for_charEv+0x12>
    2c42:	90 e0       	ldi	r25, 0x00	; 0
	{
		return (false);
	}
	return (true);
}
    2c44:	89 2f       	mov	r24, r25
    2c46:	08 95       	ret

00002c48 <_ZN14frt_text_queue7putcharEc>:
 *  @param a_char The character to be sent to the queue
 *  @return True if the character was successfully sent, false if something went wrong
 */

inline bool frt_text_queue::putchar (char a_char)
{
    2c48:	0f 93       	push	r16
    2c4a:	cf 93       	push	r28
    2c4c:	df 93       	push	r29
    2c4e:	1f 92       	push	r1
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
    2c54:	69 83       	std	Y+1, r22	; 0x01
	// If the data is successfully put in the queue, return true
	if (xQueueSendToBack (the_queue, &a_char, ticks_to_wait))
    2c56:	fc 01       	movw	r30, r24
    2c58:	22 85       	ldd	r18, Z+10	; 0x0a
    2c5a:	33 85       	ldd	r19, Z+11	; 0x0b
    2c5c:	44 85       	ldd	r20, Z+12	; 0x0c
    2c5e:	55 85       	ldd	r21, Z+13	; 0x0d
    2c60:	00 e0       	ldi	r16, 0x00	; 0
    2c62:	be 01       	movw	r22, r28
    2c64:	6f 5f       	subi	r22, 0xFF	; 255
    2c66:	7f 4f       	sbci	r23, 0xFF	; 255
    2c68:	80 85       	ldd	r24, Z+8	; 0x08
    2c6a:	91 85       	ldd	r25, Z+9	; 0x09
    2c6c:	0e 94 2c 0c 	call	0x1858	; 0x1858 <xQueueGenericSend>
    2c70:	91 e0       	ldi	r25, 0x01	; 1
    2c72:	81 11       	cpse	r24, r1
    2c74:	01 c0       	rjmp	.+2      	; 0x2c78 <_ZN14frt_text_queue7putcharEc+0x30>
    2c76:	90 e0       	ldi	r25, 0x00	; 0
		return (true);
	}

	// If we get here, something went wrong (probably a timeout), so return false
	return (false);
}
    2c78:	89 2f       	mov	r24, r25
    2c7a:	0f 90       	pop	r0
    2c7c:	df 91       	pop	r29
    2c7e:	cf 91       	pop	r28
    2c80:	0f 91       	pop	r16
    2c82:	08 95       	ret

00002c84 <_ZN14frt_text_queueC1EjP8emstreamm>:
 *                     portMAX_DELAY causes a send to block indefinitely
 *  @param p_ser_dev A pointer which points to a serial device which can be used for
 *                   diagnostic logging or printing
 */

frt_text_queue::frt_text_queue (uint16_t queue_size, emstream* p_ser_dev,
    2c84:	8f 92       	push	r8
    2c86:	9f 92       	push	r9
    2c88:	bf 92       	push	r11
    2c8a:	cf 92       	push	r12
    2c8c:	df 92       	push	r13
    2c8e:	ef 92       	push	r14
    2c90:	ff 92       	push	r15
    2c92:	0f 93       	push	r16
    2c94:	1f 93       	push	r17
    2c96:	cf 93       	push	r28
    2c98:	df 93       	push	r29
    2c9a:	ec 01       	movw	r28, r24
    2c9c:	b6 2e       	mov	r11, r22
    2c9e:	4a 01       	movw	r8, r20
    2ca0:	68 01       	movw	r12, r16
    2ca2:	79 01       	movw	r14, r18
							   portTickType a_wait_time)
    2ca4:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <_ZN8emstreamC1Ev>
    2ca8:	8f e3       	ldi	r24, 0x3F	; 63
    2caa:	90 e2       	ldi	r25, 0x20	; 32
    2cac:	88 83       	st	Y, r24
    2cae:	99 83       	std	Y+1, r25	; 0x01
{
	// Save the pointer to the serial device which is used for debugging
	p_serial = p_ser_dev;
    2cb0:	8e 86       	std	Y+14, r8	; 0x0e
    2cb2:	9f 86       	std	Y+15, r9	; 0x0f

	// Create a FreeRTOS queue object which holds the given number of characters
	the_queue = xQueueCreate (queue_size, sizeof (char));
    2cb4:	40 e0       	ldi	r20, 0x00	; 0
    2cb6:	61 e0       	ldi	r22, 0x01	; 1
    2cb8:	8b 2d       	mov	r24, r11
    2cba:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <xQueueGenericCreate>
    2cbe:	88 87       	std	Y+8, r24	; 0x08
    2cc0:	99 87       	std	Y+9, r25	; 0x09

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = a_wait_time;
    2cc2:	ca 86       	std	Y+10, r12	; 0x0a
    2cc4:	db 86       	std	Y+11, r13	; 0x0b
    2cc6:	ec 86       	std	Y+12, r14	; 0x0c
    2cc8:	fd 86       	std	Y+13, r15	; 0x0d
}
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	1f 91       	pop	r17
    2cd0:	0f 91       	pop	r16
    2cd2:	ff 90       	pop	r15
    2cd4:	ef 90       	pop	r14
    2cd6:	df 90       	pop	r13
    2cd8:	cf 90       	pop	r12
    2cda:	bf 90       	pop	r11
    2cdc:	9f 90       	pop	r9
    2cde:	8f 90       	pop	r8
    2ce0:	08 95       	ret

00002ce2 <_ZN10time_stamp12get_microsecEv>:
 *  integer number of ticks per second.
 *  @return The number of microseconds in time stamp
 */

uint32_t time_stamp::get_microsec (void)
{
    2ce2:	cf 92       	push	r12
    2ce4:	df 92       	push	r13
    2ce6:	ef 92       	push	r14
    2ce8:	ff 92       	push	r15
    2cea:	cf 93       	push	r28
    2cec:	df 93       	push	r29
    2cee:	ec 01       	movw	r28, r24
	return 
	(
		(int32_t)(tick_count % configTICK_RATE_HZ) * 1000000L / configTICK_RATE_HZ
			+ (int32_t)hardware_count * 1000000L 
				/ (configCPU_CLOCK_HZ / portCLOCK_PRESCALER)
	);
    2cf0:	68 81       	ld	r22, Y
    2cf2:	79 81       	ldd	r23, Y+1	; 0x01
    2cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf8:	0f 2e       	mov	r0, r31
    2cfa:	f8 ee       	ldi	r31, 0xE8	; 232
    2cfc:	cf 2e       	mov	r12, r31
    2cfe:	f3 e0       	ldi	r31, 0x03	; 3
    2d00:	df 2e       	mov	r13, r31
    2d02:	e1 2c       	mov	r14, r1
    2d04:	f1 2c       	mov	r15, r1
    2d06:	f0 2d       	mov	r31, r0
    2d08:	a7 01       	movw	r20, r14
    2d0a:	96 01       	movw	r18, r12
    2d0c:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <__udivmodsi4>
    2d10:	9b 01       	movw	r18, r22
    2d12:	ac 01       	movw	r20, r24
    2d14:	60 e4       	ldi	r22, 0x40	; 64
    2d16:	72 e4       	ldi	r23, 0x42	; 66
    2d18:	8f e0       	ldi	r24, 0x0F	; 15
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <__mulsi3>
    2d20:	a7 01       	movw	r20, r14
    2d22:	96 01       	movw	r18, r12
    2d24:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <__udivmodsi4>
    2d28:	69 01       	movw	r12, r18
    2d2a:	7a 01       	movw	r14, r20
    2d2c:	ac 81       	ldd	r26, Y+4	; 0x04
    2d2e:	bd 81       	ldd	r27, Y+5	; 0x05
    2d30:	20 e4       	ldi	r18, 0x40	; 64
    2d32:	32 e4       	ldi	r19, 0x42	; 66
    2d34:	4f e0       	ldi	r20, 0x0F	; 15
    2d36:	50 e0       	ldi	r21, 0x00	; 0
    2d38:	0e 94 2e 20 	call	0x405c	; 0x405c <__muluhisi3>
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	38 e4       	ldi	r19, 0x48	; 72
    2d40:	48 ee       	ldi	r20, 0xE8	; 232
    2d42:	51 e0       	ldi	r21, 0x01	; 1
    2d44:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <__udivmodsi4>
    2d48:	c7 01       	movw	r24, r14
    2d4a:	b6 01       	movw	r22, r12
    2d4c:	62 0f       	add	r22, r18
    2d4e:	73 1f       	adc	r23, r19
    2d50:	84 1f       	adc	r24, r20
    2d52:	95 1f       	adc	r25, r21
}
    2d54:	df 91       	pop	r29
    2d56:	cf 91       	pop	r28
    2d58:	ff 90       	pop	r15
    2d5a:	ef 90       	pop	r14
    2d5c:	df 90       	pop	r13
    2d5e:	cf 90       	pop	r12
    2d60:	08 95       	ret

00002d62 <_ZlsR8emstreamR10time_stamp>:
 *  @return A reference to the serial device to which the data was printed. This
 *          reference is used to string printable items together with "<<" operators
 */

emstream& operator<< (emstream& serial, time_stamp& stamp)
{
    2d62:	cf 92       	push	r12
    2d64:	df 92       	push	r13
    2d66:	ef 92       	push	r14
    2d68:	ff 92       	push	r15
    2d6a:	0f 93       	push	r16
    2d6c:	1f 93       	push	r17
    2d6e:	cf 93       	push	r28
    2d70:	df 93       	push	r29
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    2d76:	2f 97       	sbiw	r28, 0x0f	; 15
    2d78:	cd bf       	out	0x3d, r28	; 61
    2d7a:	de bf       	out	0x3e, r29	; 62
    2d7c:	6c 01       	movw	r12, r24
    2d7e:	8b 01       	movw	r16, r22
	char dig_buffer[7];						// Holds digits we compute
	ldiv_t div_result;						// Holds results of long integer division

	// First write the seconds in the time stamp, then a decimal
	serial << stamp.get_seconds ();
    2d80:	db 01       	movw	r26, r22
    2d82:	6d 91       	ld	r22, X+
    2d84:	7d 91       	ld	r23, X+
    2d86:	8d 91       	ld	r24, X+
    2d88:	9c 91       	ld	r25, X
    2d8a:	28 ee       	ldi	r18, 0xE8	; 232
    2d8c:	33 e0       	ldi	r19, 0x03	; 3
    2d8e:	40 e0       	ldi	r20, 0x00	; 0
    2d90:	50 e0       	ldi	r21, 0x00	; 0
    2d92:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <__udivmodsi4>
    2d96:	ba 01       	movw	r22, r20
    2d98:	a9 01       	movw	r20, r18
    2d9a:	c6 01       	movw	r24, r12
    2d9c:	0e 94 3c 19 	call	0x3278	; 0x3278 <_ZN8emstreamlsEm>
	serial.putchar ('.');
    2da0:	d6 01       	movw	r26, r12
    2da2:	ed 91       	ld	r30, X+
    2da4:	fc 91       	ld	r31, X
    2da6:	02 80       	ldd	r0, Z+2	; 0x02
    2da8:	f3 81       	ldd	r31, Z+3	; 0x03
    2daa:	e0 2d       	mov	r30, r0
    2dac:	6e e2       	ldi	r22, 0x2E	; 46
    2dae:	c6 01       	movw	r24, r12
    2db0:	19 95       	eicall

	// Now get the microseconds; these will be written with leading zeros as needed
	div_result.quot = stamp.get_microsec ();
    2db2:	c8 01       	movw	r24, r16
    2db4:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <_ZN10time_stamp12get_microsecEv>
    2db8:	8e 01       	movw	r16, r28
    2dba:	09 5f       	subi	r16, 0xF9	; 249
    2dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	31 96       	adiw	r30, 0x01	; 1
    2dc2:	7f 01       	movw	r14, r30
	for (int8_t index = 5; index >= 0; index--)
	{
		div_result = ldiv (div_result.quot, 10);
    2dc4:	2a e0       	ldi	r18, 0x0A	; 10
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	40 e0       	ldi	r20, 0x00	; 0
    2dca:	50 e0       	ldi	r21, 0x00	; 0
    2dcc:	0e 94 06 20 	call	0x400c	; 0x400c <__divmodsi4>
    2dd0:	e6 2f       	mov	r30, r22
    2dd2:	28 87       	std	Y+8, r18	; 0x08
    2dd4:	39 87       	std	Y+9, r19	; 0x09
    2dd6:	4a 87       	std	Y+10, r20	; 0x0a
    2dd8:	5b 87       	std	Y+11, r21	; 0x0b
    2dda:	68 85       	ldd	r22, Y+8	; 0x08
    2ddc:	79 85       	ldd	r23, Y+9	; 0x09
    2dde:	8a 85       	ldd	r24, Y+10	; 0x0a
    2de0:	9b 85       	ldd	r25, Y+11	; 0x0b
		dig_buffer[index] = div_result.rem + '0';
    2de2:	20 e3       	ldi	r18, 0x30	; 48
    2de4:	2e 0f       	add	r18, r30
    2de6:	d8 01       	movw	r26, r16
    2de8:	2e 93       	st	-X, r18
    2dea:	8d 01       	movw	r16, r26
	serial << stamp.get_seconds ();
	serial.putchar ('.');

	// Now get the microseconds; these will be written with leading zeros as needed
	div_result.quot = stamp.get_microsec ();
	for (int8_t index = 5; index >= 0; index--)
    2dec:	ae 15       	cp	r26, r14
    2dee:	bf 05       	cpc	r27, r15
    2df0:	49 f7       	brne	.-46     	; 0x2dc4 <_ZlsR8emstreamR10time_stamp+0x62>
		div_result = ldiv (div_result.quot, 10);
		dig_buffer[index] = div_result.rem + '0';
	}

	// The last item in the string must be a '\0' null character
	dig_buffer[6] = '\0';
    2df2:	1f 82       	std	Y+7, r1	; 0x07
    2df4:	be 01       	movw	r22, r28
    2df6:	6f 5f       	subi	r22, 0xFF	; 255
    2df8:	7f 4f       	sbci	r23, 0xFF	; 255
    2dfa:	c6 01       	movw	r24, r12
    2dfc:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>

	// Write the buffer, which now contains microsecond digits
	serial << dig_buffer;

	return (serial);
}
    2e00:	c6 01       	movw	r24, r12
    2e02:	2f 96       	adiw	r28, 0x0f	; 15
    2e04:	cd bf       	out	0x3d, r28	; 61
    2e06:	de bf       	out	0x3e, r29	; 62
    2e08:	df 91       	pop	r29
    2e0a:	cf 91       	pop	r28
    2e0c:	1f 91       	pop	r17
    2e0e:	0f 91       	pop	r16
    2e10:	ff 90       	pop	r15
    2e12:	ef 90       	pop	r14
    2e14:	df 90       	pop	r13
    2e16:	cf 90       	pop	r12
    2e18:	08 95       	ret

00002e1a <_ZN10time_stamp10set_to_nowEv>:
 *  tick count. Still trying to figure out how to detect and fix this problem... 
 *  @return A reference to this time_stamp object, useful for printing the current time
 */

time_stamp& time_stamp::set_to_now (void)
{
    2e1a:	cf 93       	push	r28
    2e1c:	df 93       	push	r29
    2e1e:	ec 01       	movw	r28, r24
	// First disable interrupts so that if the hardware timer hits its maximum value
	// after this point and before we're done, the RTOS tick count won't be incremented
	// and also this function won't be interrupted by a task switch
	portENTER_CRITICAL ();
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	f8 94       	cli
    2e24:	0f 92       	push	r0
	#elif (defined TIMER3_COMPA_vect)
		hardware_count = TCNT3;
	#elif (defined TIMER1_COMPA_vect)
	hardware_count = TCNT1;
	#else
		hardware_count = TCC0.CNT;
    2e26:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    2e2a:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    2e2e:	8c 83       	std	Y+4, r24	; 0x04
    2e30:	9d 83       	std	Y+5, r25	; 0x05
	#endif

	// Now get the tick count (interrupts are still disabled)
	tick_count = xTaskGetTickCount ();
    2e32:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <xTaskGetTickCount>
    2e36:	68 83       	st	Y, r22
    2e38:	79 83       	std	Y+1, r23	; 0x01
    2e3a:	8a 83       	std	Y+2, r24	; 0x02
    2e3c:	9b 83       	std	Y+3, r25	; 0x03

	// Re-enable interrupts here; if the tick count is incremented now, that's fine
	portEXIT_CRITICAL ();
    2e3e:	0f 90       	pop	r0
    2e40:	0f be       	out	0x3f, r0	; 63

	// Return a reference to this object
	return (*this);
}
    2e42:	ce 01       	movw	r24, r28
    2e44:	df 91       	pop	r29
    2e46:	cf 91       	pop	r28
    2e48:	08 95       	ret

00002e4a <_Z15hex_dump_memoryPhS_P8emstreambh>:
 *      of a task's stack memory space. 
 */

void hex_dump_memory (uint8_t* start_address, uint8_t* end_address,
					  emstream* p_ser_dev, bool highlight, uint8_t empty_code)
{
    2e4a:	5f 92       	push	r5
    2e4c:	6f 92       	push	r6
    2e4e:	7f 92       	push	r7
    2e50:	8f 92       	push	r8
    2e52:	9f 92       	push	r9
    2e54:	af 92       	push	r10
    2e56:	bf 92       	push	r11
    2e58:	cf 92       	push	r12
    2e5a:	df 92       	push	r13
    2e5c:	ef 92       	push	r14
    2e5e:	ff 92       	push	r15
    2e60:	0f 93       	push	r16
    2e62:	1f 93       	push	r17
    2e64:	cf 93       	push	r28
    2e66:	df 93       	push	r29
    2e68:	5c 01       	movw	r10, r24
    2e6a:	4b 01       	movw	r8, r22
    2e6c:	7a 01       	movw	r14, r20
    2e6e:	12 2f       	mov	r17, r18
    2e70:	70 2e       	mov	r7, r16
	// pointers together, we convert the pointers into equivalent integers (this is
	// non-portable and may need to be changed for other processors!), add those
	// together, then convert back into a pointer

	// Print DUMP_BYTES_PER_LINE bytes on each line
	*p_ser_dev << hex;
    2e72:	63 e0       	ldi	r22, 0x03	; 3
    2e74:	ca 01       	movw	r24, r20
    2e76:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
	while (start_address < end_address)
    2e7a:	a8 14       	cp	r10, r8
    2e7c:	b9 04       	cpc	r11, r9
    2e7e:	08 f0       	brcs	.+2      	; 0x2e82 <_Z15hex_dump_memoryPhS_P8emstreambh+0x38>
    2e80:	7d c0       	rjmp	.+250    	; 0x2f7c <_Z15hex_dump_memoryPhS_P8emstreambh+0x132>
    2e82:	65 01       	movw	r12, r10
    2e84:	84 e1       	ldi	r24, 0x14	; 20
    2e86:	c8 0e       	add	r12, r24
    2e88:	d1 1c       	adc	r13, r1
    2e8a:	00 e0       	ldi	r16, 0x00	; 0
	{
		// Print the line address 
		*p_ser_dev << (size_t)(start_address) << PMS ("  ");
    2e8c:	6a 2c       	mov	r6, r10
    2e8e:	5b 2c       	mov	r5, r11
    2e90:	b5 01       	movw	r22, r10
    2e92:	c7 01       	movw	r24, r14
    2e94:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN8emstreamlsEj>
    2e98:	6a e0       	ldi	r22, 0x0A	; 10
    2e9a:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2e9e:	61 ed       	ldi	r22, 0xD1	; 209
    2ea0:	75 e0       	ldi	r23, 0x05	; 5
    2ea2:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>

		// Show a line full of data in hexadecimal format. If the memory has not been
		// changed from its original value, show it non-highlighted
		if (highlight && found_changes)
    2ea6:	11 23       	and	r17, r17
    2ea8:	09 f4       	brne	.+2      	; 0x2eac <_Z15hex_dump_memoryPhS_P8emstreambh+0x62>
    2eaa:	6d c0       	rjmp	.+218    	; 0x2f86 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13c>
    2eac:	00 23       	and	r16, r16
    2eae:	09 f4       	brne	.+2      	; 0x2eb2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x68>
    2eb0:	6a c0       	rjmp	.+212    	; 0x2f86 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13c>
		{
			*p_ser_dev << ATERM_BOLD;
    2eb2:	6a e0       	ldi	r22, 0x0A	; 10
    2eb4:	c7 01       	movw	r24, r14
    2eb6:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2eba:	6c ec       	ldi	r22, 0xCC	; 204
    2ebc:	75 e0       	ldi	r23, 0x05	; 5
    2ebe:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
    2ec2:	61 c0       	rjmp	.+194    	; 0x2f86 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13c>
		}
		for (byte_count = 0; byte_count < DUMP_BYTES_PER_LINE; byte_count++)
		{
			if (highlight && (!found_changes) && ((*start_address) != empty_code))
    2ec4:	11 23       	and	r17, r17
    2ec6:	71 f0       	breq	.+28     	; 0x2ee4 <_Z15hex_dump_memoryPhS_P8emstreambh+0x9a>
    2ec8:	01 11       	cpse	r16, r1
    2eca:	0c c0       	rjmp	.+24     	; 0x2ee4 <_Z15hex_dump_memoryPhS_P8emstreambh+0x9a>
    2ecc:	88 81       	ld	r24, Y
    2ece:	87 15       	cp	r24, r7
    2ed0:	49 f0       	breq	.+18     	; 0x2ee4 <_Z15hex_dump_memoryPhS_P8emstreambh+0x9a>
			{
				found_changes = true;
				*p_ser_dev << ATERM_BOLD;
    2ed2:	6a e0       	ldi	r22, 0x0A	; 10
    2ed4:	c7 01       	movw	r24, r14
    2ed6:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2eda:	67 ec       	ldi	r22, 0xC7	; 199
    2edc:	75 e0       	ldi	r23, 0x05	; 5
    2ede:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
		}
		for (byte_count = 0; byte_count < DUMP_BYTES_PER_LINE; byte_count++)
		{
			if (highlight && (!found_changes) && ((*start_address) != empty_code))
			{
				found_changes = true;
    2ee2:	01 e0       	ldi	r16, 0x01	; 1
				*p_ser_dev << ATERM_BOLD;
			}
			*p_ser_dev << (uint8_t)(*start_address++) << (char)(' ');
    2ee4:	69 91       	ld	r22, Y+
    2ee6:	c7 01       	movw	r24, r14
    2ee8:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN8emstreamlsEh>
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    2eec:	dc 01       	movw	r26, r24
    2eee:	ed 91       	ld	r30, X+
    2ef0:	fc 91       	ld	r31, X
    2ef2:	02 80       	ldd	r0, Z+2	; 0x02
    2ef4:	f3 81       	ldd	r31, Z+3	; 0x03
    2ef6:	e0 2d       	mov	r30, r0
    2ef8:	60 e2       	ldi	r22, 0x20	; 32
    2efa:	19 95       	eicall
		// changed from its original value, show it non-highlighted
		if (highlight && found_changes)
		{
			*p_ser_dev << ATERM_BOLD;
		}
		for (byte_count = 0; byte_count < DUMP_BYTES_PER_LINE; byte_count++)
    2efc:	cc 16       	cp	r12, r28
    2efe:	dd 06       	cpc	r13, r29
    2f00:	09 f7       	brne	.-62     	; 0x2ec4 <_Z15hex_dump_memoryPhS_P8emstreambh+0x7a>
			}
			*p_ser_dev << (uint8_t)(*start_address++) << (char)(' ');
		}

		// Show the same line full of data in text format
		if (highlight)
    2f02:	11 23       	and	r17, r17
    2f04:	89 f0       	breq	.+34     	; 0x2f28 <_Z15hex_dump_memoryPhS_P8emstreambh+0xde>
		{
			*p_ser_dev << ATERM_NORM_INT << (char)(' ');
    2f06:	6a e0       	ldi	r22, 0x0A	; 10
    2f08:	c7 01       	movw	r24, r14
    2f0a:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2f0e:	ec 01       	movw	r28, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    2f10:	61 ec       	ldi	r22, 0xC1	; 193
    2f12:	75 e0       	ldi	r23, 0x05	; 5
    2f14:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    2f18:	e8 81       	ld	r30, Y
    2f1a:	f9 81       	ldd	r31, Y+1	; 0x01
    2f1c:	02 80       	ldd	r0, Z+2	; 0x02
    2f1e:	f3 81       	ldd	r31, Z+3	; 0x03
    2f20:	e0 2d       	mov	r30, r0
    2f22:	60 e2       	ldi	r22, 0x20	; 32
    2f24:	ce 01       	movw	r24, r28
    2f26:	19 95       	eicall
		}
		for (byte_count = 0; byte_count < DUMP_BYTES_PER_LINE; byte_count++)
		{
			if (highlight && (!found_changes) && ((*start_address) != empty_code))
			{
				found_changes = true;
    2f28:	c6 2d       	mov	r28, r6
    2f2a:	d5 2d       	mov	r29, r5
		{
			*p_ser_dev << ATERM_NORM_INT << (char)(' ');
		}
		for (start_address -= DUMP_BYTES_PER_LINE; byte_count > 0; byte_count--)
		{
			temp_byte = *start_address++;
    2f2c:	69 91       	ld	r22, Y+
			if (temp_byte >= ' ' && temp_byte <= '~')
    2f2e:	80 ee       	ldi	r24, 0xE0	; 224
    2f30:	86 0f       	add	r24, r22
    2f32:	8f 35       	cpi	r24, 0x5F	; 95
    2f34:	48 f4       	brcc	.+18     	; 0x2f48 <_Z15hex_dump_memoryPhS_P8emstreambh+0xfe>
				p_ser_dev->putchar (temp_byte);
    2f36:	d7 01       	movw	r26, r14
    2f38:	ed 91       	ld	r30, X+
    2f3a:	fc 91       	ld	r31, X
    2f3c:	02 80       	ldd	r0, Z+2	; 0x02
    2f3e:	f3 81       	ldd	r31, Z+3	; 0x03
    2f40:	e0 2d       	mov	r30, r0
    2f42:	c7 01       	movw	r24, r14
    2f44:	19 95       	eicall
    2f46:	09 c0       	rjmp	.+18     	; 0x2f5a <_Z15hex_dump_memoryPhS_P8emstreambh+0x110>
			else
				p_ser_dev->putchar ('.');
    2f48:	d7 01       	movw	r26, r14
    2f4a:	ed 91       	ld	r30, X+
    2f4c:	fc 91       	ld	r31, X
    2f4e:	02 80       	ldd	r0, Z+2	; 0x02
    2f50:	f3 81       	ldd	r31, Z+3	; 0x03
    2f52:	e0 2d       	mov	r30, r0
    2f54:	6e e2       	ldi	r22, 0x2E	; 46
    2f56:	c7 01       	movw	r24, r14
    2f58:	19 95       	eicall
		// Show the same line full of data in text format
		if (highlight)
		{
			*p_ser_dev << ATERM_NORM_INT << (char)(' ');
		}
		for (start_address -= DUMP_BYTES_PER_LINE; byte_count > 0; byte_count--)
    2f5a:	cc 16       	cp	r12, r28
    2f5c:	dd 06       	cpc	r13, r29
    2f5e:	31 f7       	brne	.-52     	; 0x2f2c <_Z15hex_dump_memoryPhS_P8emstreambh+0xe2>
    2f60:	b4 e1       	ldi	r27, 0x14	; 20
    2f62:	ab 0e       	add	r10, r27
    2f64:	b1 1c       	adc	r11, r1
			else
				p_ser_dev->putchar ('.');
		}

		// Put a return at the end of the line
		*p_ser_dev << endl;
    2f66:	66 e0       	ldi	r22, 0x06	; 6
    2f68:	c7 01       	movw	r24, r14
    2f6a:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    2f6e:	84 e1       	ldi	r24, 0x14	; 20
    2f70:	c8 0e       	add	r12, r24
    2f72:	d1 1c       	adc	r13, r1
	// non-portable and may need to be changed for other processors!), add those
	// together, then convert back into a pointer

	// Print DUMP_BYTES_PER_LINE bytes on each line
	*p_ser_dev << hex;
	while (start_address < end_address)
    2f74:	a8 14       	cp	r10, r8
    2f76:	b9 04       	cpc	r11, r9
    2f78:	08 f4       	brcc	.+2      	; 0x2f7c <_Z15hex_dump_memoryPhS_P8emstreambh+0x132>
    2f7a:	88 cf       	rjmp	.-240    	; 0x2e8c <_Z15hex_dump_memoryPhS_P8emstreambh+0x42>
		}

		// Put a return at the end of the line
		*p_ser_dev << endl;
	}
	*p_ser_dev << dec;
    2f7c:	62 e0       	ldi	r22, 0x02	; 2
    2f7e:	c7 01       	movw	r24, r14
    2f80:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
}
    2f84:	03 c0       	rjmp	.+6      	; 0x2f8c <_Z15hex_dump_memoryPhS_P8emstreambh+0x142>
	// non-portable and may need to be changed for other processors!), add those
	// together, then convert back into a pointer

	// Print DUMP_BYTES_PER_LINE bytes on each line
	*p_ser_dev << hex;
	while (start_address < end_address)
    2f86:	c6 2d       	mov	r28, r6
    2f88:	d5 2d       	mov	r29, r5
    2f8a:	9c cf       	rjmp	.-200    	; 0x2ec4 <_Z15hex_dump_memoryPhS_P8emstreambh+0x7a>

		// Put a return at the end of the line
		*p_ser_dev << endl;
	}
	*p_ser_dev << dec;
}
    2f8c:	df 91       	pop	r29
    2f8e:	cf 91       	pop	r28
    2f90:	1f 91       	pop	r17
    2f92:	0f 91       	pop	r16
    2f94:	ff 90       	pop	r15
    2f96:	ef 90       	pop	r14
    2f98:	df 90       	pop	r13
    2f9a:	cf 90       	pop	r12
    2f9c:	bf 90       	pop	r11
    2f9e:	af 90       	pop	r10
    2fa0:	9f 90       	pop	r9
    2fa2:	8f 90       	pop	r8
    2fa4:	7f 90       	pop	r7
    2fa6:	6f 90       	pop	r6
    2fa8:	5f 90       	pop	r5
    2faa:	08 95       	ret

00002fac <_Znwj>:
 *  @param g A pointer to some random thing
 */
extern "C"
{
void __cxa_guard_abort (__guard *g)
    {
    2fac:	0e 94 18 08 	call	0x1030	; 0x1030 <pvPortMalloc>
    2fb0:	08 95       	ret

00002fb2 <_Znaj>:
    2fb2:	0e 94 18 08 	call	0x1030	; 0x1030 <pvPortMalloc>
    2fb6:	08 95       	ret

00002fb8 <__cxa_pure_virtual>:
 */

extern "C"
{    
void __cxa_pure_virtual (void)
    {
    2fb8:	08 95       	ret

00002fba <_ZN7base232C1EjP12USART_struct>:
 *  @param baud_rate The desired baud rate for serial communications. Default is 9600
 *  @param port_number The number of the serial port, 0 or 1 (the second port numbered
 *                     1 only exists on some processors). The default is port 0 
 */

base232::base232 (unsigned int baud_rate, USART_t* p_usart)
    2fba:	cf 93       	push	r28
    2fbc:	df 93       	push	r29
    2fbe:	fc 01       	movw	r30, r24
    2fc0:	da 01       	movw	r26, r20
{
	// Store pointers to usart struct and port struct
	p_usart = p_usart;
	p_port = p_port;
	
	if(p_usart == &USARTC0)
    2fc2:	40 3a       	cpi	r20, 0xA0	; 160
    2fc4:	68 e0       	ldi	r22, 0x08	; 8
    2fc6:	56 07       	cpc	r21, r22
    2fc8:	49 f4       	brne	.+18     	; 0x2fdc <_ZN7base232C1EjP12USART_struct+0x22>
	{
		p_port = &PORTC;
    2fca:	80 e4       	ldi	r24, 0x40	; 64
    2fcc:	96 e0       	ldi	r25, 0x06	; 6
    2fce:	82 83       	std	Z+2, r24	; 0x02
    2fd0:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 2;
    2fd2:	82 e0       	ldi	r24, 0x02	; 2
    2fd4:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 3;
    2fd6:	83 e0       	ldi	r24, 0x03	; 3
    2fd8:	85 83       	std	Z+5, r24	; 0x05
    2fda:	32 c0       	rjmp	.+100    	; 0x3040 <_ZN7base232C1EjP12USART_struct+0x86>
	}
#ifdef USARTC1 
	else if(p_usart == &USARTC1)
    2fdc:	40 3b       	cpi	r20, 0xB0	; 176
    2fde:	78 e0       	ldi	r23, 0x08	; 8
    2fe0:	57 07       	cpc	r21, r23
    2fe2:	49 f4       	brne	.+18     	; 0x2ff6 <_ZN7base232C1EjP12USART_struct+0x3c>
	{
		p_port = &PORTC;
    2fe4:	80 e4       	ldi	r24, 0x40	; 64
    2fe6:	96 e0       	ldi	r25, 0x06	; 6
    2fe8:	82 83       	std	Z+2, r24	; 0x02
    2fea:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 6;
    2fec:	86 e0       	ldi	r24, 0x06	; 6
    2fee:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 7;
    2ff0:	87 e0       	ldi	r24, 0x07	; 7
    2ff2:	85 83       	std	Z+5, r24	; 0x05
    2ff4:	25 c0       	rjmp	.+74     	; 0x3040 <_ZN7base232C1EjP12USART_struct+0x86>
	}
#endif
#ifdef USARTD0
	else if(p_usart == &USARTD0)
    2ff6:	40 3a       	cpi	r20, 0xA0	; 160
    2ff8:	89 e0       	ldi	r24, 0x09	; 9
    2ffa:	58 07       	cpc	r21, r24
    2ffc:	49 f4       	brne	.+18     	; 0x3010 <_ZN7base232C1EjP12USART_struct+0x56>
	{
		p_port = &PORTD;
    2ffe:	80 e6       	ldi	r24, 0x60	; 96
    3000:	96 e0       	ldi	r25, 0x06	; 6
    3002:	82 83       	std	Z+2, r24	; 0x02
    3004:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 2;
    3006:	82 e0       	ldi	r24, 0x02	; 2
    3008:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 3;
    300a:	83 e0       	ldi	r24, 0x03	; 3
    300c:	85 83       	std	Z+5, r24	; 0x05
    300e:	18 c0       	rjmp	.+48     	; 0x3040 <_ZN7base232C1EjP12USART_struct+0x86>
	}
#endif
#ifdef USARTD1 
	else if(p_usart == &USARTD1)
    3010:	40 3b       	cpi	r20, 0xB0	; 176
    3012:	69 e0       	ldi	r22, 0x09	; 9
    3014:	56 07       	cpc	r21, r22
    3016:	49 f4       	brne	.+18     	; 0x302a <_ZN7base232C1EjP12USART_struct+0x70>
	{
		p_port = &PORTD;
    3018:	80 e6       	ldi	r24, 0x60	; 96
    301a:	96 e0       	ldi	r25, 0x06	; 6
    301c:	82 83       	std	Z+2, r24	; 0x02
    301e:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 6;
    3020:	86 e0       	ldi	r24, 0x06	; 6
    3022:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 7;
    3024:	87 e0       	ldi	r24, 0x07	; 7
    3026:	85 83       	std	Z+5, r24	; 0x05
    3028:	0b c0       	rjmp	.+22     	; 0x3040 <_ZN7base232C1EjP12USART_struct+0x86>
	}
#endif
#ifdef USARTE0
	else if(p_usart == &USARTE0)
    302a:	40 3a       	cpi	r20, 0xA0	; 160
    302c:	5a 40       	sbci	r21, 0x0A	; 10
    302e:	41 f4       	brne	.+16     	; 0x3040 <_ZN7base232C1EjP12USART_struct+0x86>
	{
		p_port = &PORTE;
    3030:	80 e8       	ldi	r24, 0x80	; 128
    3032:	96 e0       	ldi	r25, 0x06	; 6
    3034:	82 83       	std	Z+2, r24	; 0x02
    3036:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 2;
    3038:	82 e0       	ldi	r24, 0x02	; 2
    303a:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 3;
    303c:	83 e0       	ldi	r24, 0x03	; 3
    303e:	85 83       	std	Z+5, r24	; 0x05
	else
	{
	}
	
	// Store pointers to data, status, config registers
	p_UDR = &(p_usart->DATA);
    3040:	a6 83       	std	Z+6, r26	; 0x06
    3042:	b7 83       	std	Z+7, r27	; 0x07
	p_USR = &(p_usart->STATUS);
    3044:	cd 01       	movw	r24, r26
    3046:	01 96       	adiw	r24, 0x01	; 1
    3048:	80 87       	std	Z+8, r24	; 0x08
    304a:	91 87       	std	Z+9, r25	; 0x09
	p_UCR = &(p_usart->CTRLB);
    304c:	03 96       	adiw	r24, 0x03	; 3
    304e:	82 87       	std	Z+10, r24	; 0x0a
    3050:	93 87       	std	Z+11, r25	; 0x0b
	
	// Set up TXD as an output that is high
	p_port->OUT |= (1 << txd_pin);
    3052:	25 81       	ldd	r18, Z+5	; 0x05
    3054:	c2 81       	ldd	r28, Z+2	; 0x02
    3056:	d3 81       	ldd	r29, Z+3	; 0x03
    3058:	4c 81       	ldd	r20, Y+4	; 0x04
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	bc 01       	movw	r22, r24
    3060:	02 c0       	rjmp	.+4      	; 0x3066 <_ZN7base232C1EjP12USART_struct+0xac>
    3062:	66 0f       	add	r22, r22
    3064:	77 1f       	adc	r23, r23
    3066:	2a 95       	dec	r18
    3068:	e2 f7       	brpl	.-8      	; 0x3062 <_ZN7base232C1EjP12USART_struct+0xa8>
    306a:	9b 01       	movw	r18, r22
    306c:	24 2b       	or	r18, r20
    306e:	2c 83       	std	Y+4, r18	; 0x04
	p_port->DIR |= (1 << txd_pin);
    3070:	25 81       	ldd	r18, Z+5	; 0x05
    3072:	c2 81       	ldd	r28, Z+2	; 0x02
    3074:	d3 81       	ldd	r29, Z+3	; 0x03
    3076:	48 81       	ld	r20, Y
    3078:	bc 01       	movw	r22, r24
    307a:	02 c0       	rjmp	.+4      	; 0x3080 <_ZN7base232C1EjP12USART_struct+0xc6>
    307c:	66 0f       	add	r22, r22
    307e:	77 1f       	adc	r23, r23
    3080:	2a 95       	dec	r18
    3082:	e2 f7       	brpl	.-8      	; 0x307c <_ZN7base232C1EjP12USART_struct+0xc2>
    3084:	9b 01       	movw	r18, r22
    3086:	24 2b       	or	r18, r20
    3088:	28 83       	st	Y, r18
	
	// Set up RXD as an input
	p_port->DIR &= ~(1 << rxd_pin);
    308a:	34 81       	ldd	r19, Z+4	; 0x04
    308c:	c2 81       	ldd	r28, Z+2	; 0x02
    308e:	d3 81       	ldd	r29, Z+3	; 0x03
    3090:	28 81       	ld	r18, Y
    3092:	02 c0       	rjmp	.+4      	; 0x3098 <_ZN7base232C1EjP12USART_struct+0xde>
    3094:	88 0f       	add	r24, r24
    3096:	99 1f       	adc	r25, r25
    3098:	3a 95       	dec	r19
    309a:	e2 f7       	brpl	.-8      	; 0x3094 <_ZN7base232C1EjP12USART_struct+0xda>
    309c:	80 95       	com	r24
    309e:	90 95       	com	r25
    30a0:	82 23       	and	r24, r18
    30a2:	88 83       	st	Y, r24
	
	// Enable interrupts for RX at high priority
	p_usart->CTRLA = (0 << USART_RXCINTLVL1_bp | 1 << USART_RXCINTLVL0_bp);
    30a4:	80 e1       	ldi	r24, 0x10	; 16
    30a6:	13 96       	adiw	r26, 0x03	; 3
    30a8:	8c 93       	st	X, r24
    30aa:	13 97       	sbiw	r26, 0x03	; 3
	
	// Select USART Asynchronous Mode and choose character size
	p_usart->CTRLC = (1 << USART_CHSIZE0_bp | 1 << USART_CHSIZE1_bp );
    30ac:	83 e0       	ldi	r24, 0x03	; 3
    30ae:	15 96       	adiw	r26, 0x05	; 5
    30b0:	8c 93       	st	X, r24
    30b2:	15 97       	sbiw	r26, 0x05	; 5

	// Select the baudrate according to Table 23-5 in the datasheet
	p_usart->BAUDCTRLB = (-1 << USART_BSCALE0_bp);
    30b4:	80 ef       	ldi	r24, 0xF0	; 240
    30b6:	17 96       	adiw	r26, 0x07	; 7
    30b8:	8c 93       	st	X, r24
    30ba:	17 97       	sbiw	r26, 0x07	; 7
	p_usart->BAUDCTRLA = (33 << USART_BSEL0_bp);
    30bc:	81 e2       	ldi	r24, 0x21	; 33
    30be:	16 96       	adiw	r26, 0x06	; 6
    30c0:	8c 93       	st	X, r24
    30c2:	16 97       	sbiw	r26, 0x06	; 6

	// Enable the RX and TX devices
	p_usart->CTRLB = (1 << USART_RXEN_bp | 1<< USART_TXEN_bp);
    30c4:	88 e1       	ldi	r24, 0x18	; 24
    30c6:	14 96       	adiw	r26, 0x04	; 4
    30c8:	8c 93       	st	X, r24

	// Save some masks
	mask_RXC = USART_RXCIF_bm;
    30ca:	80 e8       	ldi	r24, 0x80	; 128
    30cc:	85 87       	std	Z+13, r24	; 0x0d
	mask_TXC = USART_TXCIF_bm;
    30ce:	80 e4       	ldi	r24, 0x40	; 64
    30d0:	86 87       	std	Z+14, r24	; 0x0e
	mask_UDRE = USART_DREIF_bm;
    30d2:	80 e2       	ldi	r24, 0x20	; 32
    30d4:	84 87       	std	Z+12, r24	; 0x0c
	
	// Read the data register to ensure that it's empty
	p_UDR[0]; p_UDR[0];
    30d6:	06 80       	ldd	r0, Z+6	; 0x06
    30d8:	f7 81       	ldd	r31, Z+7	; 0x07
    30da:	e0 2d       	mov	r30, r0
    30dc:	80 81       	ld	r24, Z
    30de:	80 81       	ld	r24, Z
}
    30e0:	df 91       	pop	r29
    30e2:	cf 91       	pop	r28
    30e4:	08 95       	ret

000030e6 <_ZN8emstream13ready_to_sendEv>:
		digits = 7;
	}
	bts_glob_prec = digits;

	return (manip_set_precision);
}
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	08 95       	ret

000030ea <_ZN8emstream7getcharEv>:
    30ea:	80 e0       	ldi	r24, 0x00	; 0
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	08 95       	ret

000030f0 <_ZN8emstream14check_for_charEv>:
    30f0:	80 e0       	ldi	r24, 0x00	; 0
    30f2:	08 95       	ret

000030f4 <_ZN8emstream12transmit_nowEv>:
    30f4:	08 95       	ret

000030f6 <_ZN8emstream12clear_screenEv>:
    30f6:	08 95       	ret

000030f8 <_ZN8emstreamC1Ev>:
    30f8:	fc 01       	movw	r30, r24
    30fa:	8f e4       	ldi	r24, 0x4F	; 79
    30fc:	90 e2       	ldi	r25, 0x20	; 32
    30fe:	80 83       	st	Z, r24
    3100:	91 83       	std	Z+1, r25	; 0x01
    3102:	8a e0       	ldi	r24, 0x0A	; 10
    3104:	82 83       	std	Z+2, r24	; 0x02
    3106:	13 82       	std	Z+3, r1	; 0x03
    3108:	83 e0       	ldi	r24, 0x03	; 3
    310a:	85 83       	std	Z+5, r24	; 0x05
    310c:	14 82       	std	Z+4, r1	; 0x04
    310e:	16 82       	std	Z+6, r1	; 0x06
    3110:	17 82       	std	Z+7, r1	; 0x07
    3112:	08 95       	ret

00003114 <_ZN8emstream4putsEPKc>:
    3114:	0f 93       	push	r16
    3116:	1f 93       	push	r17
    3118:	cf 93       	push	r28
    311a:	df 93       	push	r29
    311c:	8c 01       	movw	r16, r24
    311e:	fb 01       	movw	r30, r22
    3120:	dc 01       	movw	r26, r24
    3122:	14 96       	adiw	r26, 0x04	; 4
    3124:	8c 91       	ld	r24, X
    3126:	81 11       	cpse	r24, r1
    3128:	04 c0       	rjmp	.+8      	; 0x3132 <_ZN8emstream4putsEPKc+0x1e>
    312a:	60 81       	ld	r22, Z
    312c:	61 11       	cpse	r22, r1
    312e:	17 c0       	rjmp	.+46     	; 0x315e <_ZN8emstream4putsEPKc+0x4a>
    3130:	23 c0       	rjmp	.+70     	; 0x3178 <_ZN8emstream4putsEPKc+0x64>
    3132:	d8 01       	movw	r26, r16
    3134:	14 96       	adiw	r26, 0x04	; 4
    3136:	1c 92       	st	X, r1
    3138:	eb 01       	movw	r28, r22
    313a:	21 96       	adiw	r28, 0x01	; 1
    313c:	64 91       	lpm	r22, Z
    313e:	66 23       	and	r22, r22
    3140:	d9 f0       	breq	.+54     	; 0x3178 <_ZN8emstream4putsEPKc+0x64>
    3142:	d8 01       	movw	r26, r16
    3144:	ed 91       	ld	r30, X+
    3146:	fc 91       	ld	r31, X
    3148:	02 80       	ldd	r0, Z+2	; 0x02
    314a:	f3 81       	ldd	r31, Z+3	; 0x03
    314c:	e0 2d       	mov	r30, r0
    314e:	c8 01       	movw	r24, r16
    3150:	19 95       	eicall
    3152:	fe 01       	movw	r30, r28
    3154:	64 91       	lpm	r22, Z
    3156:	21 96       	adiw	r28, 0x01	; 1
    3158:	61 11       	cpse	r22, r1
    315a:	f3 cf       	rjmp	.-26     	; 0x3142 <_ZN8emstream4putsEPKc+0x2e>
    315c:	0d c0       	rjmp	.+26     	; 0x3178 <_ZN8emstream4putsEPKc+0x64>
    315e:	ef 01       	movw	r28, r30
    3160:	21 96       	adiw	r28, 0x01	; 1
    3162:	d8 01       	movw	r26, r16
    3164:	ed 91       	ld	r30, X+
    3166:	fc 91       	ld	r31, X
    3168:	02 80       	ldd	r0, Z+2	; 0x02
    316a:	f3 81       	ldd	r31, Z+3	; 0x03
    316c:	e0 2d       	mov	r30, r0
    316e:	c8 01       	movw	r24, r16
    3170:	19 95       	eicall
    3172:	69 91       	ld	r22, Y+
    3174:	61 11       	cpse	r22, r1
    3176:	f5 cf       	rjmp	.-22     	; 0x3162 <_ZN8emstream4putsEPKc+0x4e>
    3178:	df 91       	pop	r29
    317a:	cf 91       	pop	r28
    317c:	1f 91       	pop	r17
    317e:	0f 91       	pop	r16
    3180:	08 95       	ret

00003182 <_ZN8emstreamlsE15ser_manipulator>:
 *  @return A reference to the serial device to which the data was printed. This
 *          reference is used to string printable items together with "<<" operators
 */

emstream& emstream::operator<< (ser_manipulator new_manip)
{
    3182:	cf 93       	push	r28
    3184:	df 93       	push	r29
    3186:	ec 01       	movw	r28, r24
	switch (new_manip)
    3188:	86 2f       	mov	r24, r22
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	8b 30       	cpi	r24, 0x0B	; 11
    318e:	91 05       	cpc	r25, r1
    3190:	d8 f5       	brcc	.+118    	; 0x3208 <_ZN8emstreamlsE15ser_manipulator+0x86>
    3192:	fc 01       	movw	r30, r24
    3194:	88 27       	eor	r24, r24
    3196:	e2 50       	subi	r30, 0x02	; 2
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	8f 4f       	sbci	r24, 0xFF	; 255
    319c:	0c 94 25 20 	jmp	0x404a	; 0x404a <__tablejump2__>
	{
		case (bin):                         // Print integers in binary
			base = 2;
    31a0:	82 e0       	ldi	r24, 0x02	; 2
    31a2:	8a 83       	std	Y+2, r24	; 0x02
			break;
    31a4:	31 c0       	rjmp	.+98     	; 0x3208 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (oct):                         // Print integers in octal
			base = 8;
    31a6:	88 e0       	ldi	r24, 0x08	; 8
    31a8:	8a 83       	std	Y+2, r24	; 0x02
			break;
    31aa:	2e c0       	rjmp	.+92     	; 0x3208 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (dec):                         // Print integers in decimal
			base = 10;
    31ac:	8a e0       	ldi	r24, 0x0A	; 10
    31ae:	8a 83       	std	Y+2, r24	; 0x02
			break;
    31b0:	2b c0       	rjmp	.+86     	; 0x3208 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (hex):                         // Print integers in hexadecimal
			base = 16;
    31b2:	80 e1       	ldi	r24, 0x10	; 16
    31b4:	8a 83       	std	Y+2, r24	; 0x02
			break;
    31b6:	28 c0       	rjmp	.+80     	; 0x3208 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (ascii):                       // Print chars as ASCII letters, etc.
			print_ascii = true;
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	8b 83       	std	Y+3, r24	; 0x03
			break;
    31bc:	25 c0       	rjmp	.+74     	; 0x3208 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (numeric):                     // Print chars as numbers
			print_ascii = false;
    31be:	1b 82       	std	Y+3, r1	; 0x03
			break;
    31c0:	23 c0       	rjmp	.+70     	; 0x3208 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (endl):                        // Send an end-of-line
			ENDL_STYLE ();
    31c2:	e8 81       	ld	r30, Y
    31c4:	f9 81       	ldd	r31, Y+1	; 0x01
    31c6:	02 80       	ldd	r0, Z+2	; 0x02
    31c8:	f3 81       	ldd	r31, Z+3	; 0x03
    31ca:	e0 2d       	mov	r30, r0
    31cc:	6d e0       	ldi	r22, 0x0D	; 13
    31ce:	ce 01       	movw	r24, r28
    31d0:	19 95       	eicall
    31d2:	e8 81       	ld	r30, Y
    31d4:	f9 81       	ldd	r31, Y+1	; 0x01
    31d6:	02 80       	ldd	r0, Z+2	; 0x02
    31d8:	f3 81       	ldd	r31, Z+3	; 0x03
    31da:	e0 2d       	mov	r30, r0
    31dc:	6a e0       	ldi	r22, 0x0A	; 10
    31de:	ce 01       	movw	r24, r28
    31e0:	19 95       	eicall
			break;
    31e2:	12 c0       	rjmp	.+36     	; 0x3208 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (clrscr):                      // Send a clear-screen code
			clear_screen ();
    31e4:	e8 81       	ld	r30, Y
    31e6:	f9 81       	ldd	r31, Y+1	; 0x01
    31e8:	02 84       	ldd	r0, Z+10	; 0x0a
    31ea:	f3 85       	ldd	r31, Z+11	; 0x0b
    31ec:	e0 2d       	mov	r30, r0
    31ee:	ce 01       	movw	r24, r28
    31f0:	19 95       	eicall
			break;
    31f2:	0a c0       	rjmp	.+20     	; 0x3208 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (send_now):                    // Send whatever's in the send buffer
			transmit_now ();
    31f4:	e8 81       	ld	r30, Y
    31f6:	f9 81       	ldd	r31, Y+1	; 0x01
    31f8:	00 84       	ldd	r0, Z+8	; 0x08
    31fa:	f1 85       	ldd	r31, Z+9	; 0x09
    31fc:	e0 2d       	mov	r30, r0
    31fe:	ce 01       	movw	r24, r28
    3200:	19 95       	eicall
			break;
    3202:	02 c0       	rjmp	.+4      	; 0x3208 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (_p_str):                      // The next string is in program memory
			pgm_string = true;
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	8c 83       	std	Y+4, r24	; 0x04
		case (manip_set_precision):         // Set precision for printing floats
			break;
	};

	return (*this);
}
    3208:	ce 01       	movw	r24, r28
    320a:	df 91       	pop	r29
    320c:	cf 91       	pop	r28
    320e:	08 95       	ret

00003210 <_ZN8emstreamlsEj>:
 *          reference is used to string printable items together with "<<" operators
 *  @param num The 16-bit number to be sent out
 */

emstream& emstream::operator<< (uint16_t num)
{
    3210:	ff 92       	push	r15
    3212:	0f 93       	push	r16
    3214:	1f 93       	push	r17
    3216:	cf 93       	push	r28
    3218:	df 93       	push	r29
    321a:	cd b7       	in	r28, 0x3d	; 61
    321c:	de b7       	in	r29, 0x3e	; 62
    321e:	61 97       	sbiw	r28, 0x11	; 17
    3220:	cd bf       	out	0x3d, r28	; 61
    3222:	de bf       	out	0x3e, r29	; 62
    3224:	8c 01       	movw	r16, r24
    3226:	f6 2e       	mov	r15, r22
    3228:	97 2f       	mov	r25, r23
	if (base == 16 || base == 8 || base == 2)
    322a:	f8 01       	movw	r30, r16
    322c:	42 81       	ldd	r20, Z+2	; 0x02
    322e:	40 31       	cpi	r20, 0x10	; 16
    3230:	21 f0       	breq	.+8      	; 0x323a <_ZN8emstreamlsEj+0x2a>
    3232:	48 30       	cpi	r20, 0x08	; 8
    3234:	11 f0       	breq	.+4      	; 0x323a <_ZN8emstreamlsEj+0x2a>
    3236:	42 30       	cpi	r20, 0x02	; 2
    3238:	41 f4       	brne	.+16     	; 0x324a <_ZN8emstreamlsEj+0x3a>
		{
			uint16_t whole;
			uint8_t bits[2];
		} parts;
		parts.whole = num;
		*this << parts.bits[1] << parts.bits[0];
    323a:	69 2f       	mov	r22, r25
    323c:	c8 01       	movw	r24, r16
    323e:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN8emstreamlsEh>
    3242:	6f 2d       	mov	r22, r15
    3244:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN8emstreamlsEh>
    3248:	0d c0       	rjmp	.+26     	; 0x3264 <_ZN8emstreamlsEj+0x54>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    324a:	50 e0       	ldi	r21, 0x00	; 0
    324c:	be 01       	movw	r22, r28
    324e:	6f 5f       	subi	r22, 0xFF	; 255
    3250:	7f 4f       	sbci	r23, 0xFF	; 255
    3252:	8f 2d       	mov	r24, r15
    3254:	0e 94 94 20 	call	0x4128	; 0x4128 <utoa>
	}
	else
	{
		char out_str[17];
		utoa (num, out_str, base);
		puts (out_str);
    3258:	be 01       	movw	r22, r28
    325a:	6f 5f       	subi	r22, 0xFF	; 255
    325c:	7f 4f       	sbci	r23, 0xFF	; 255
    325e:	c8 01       	movw	r24, r16
    3260:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
	}

	return (*this);
}
    3264:	c8 01       	movw	r24, r16
    3266:	61 96       	adiw	r28, 0x11	; 17
    3268:	cd bf       	out	0x3d, r28	; 61
    326a:	de bf       	out	0x3e, r29	; 62
    326c:	df 91       	pop	r29
    326e:	cf 91       	pop	r28
    3270:	1f 91       	pop	r17
    3272:	0f 91       	pop	r16
    3274:	ff 90       	pop	r15
    3276:	08 95       	ret

00003278 <_ZN8emstreamlsEm>:
 *          reference is used to string printable items together with "<<" operators
 *  @param num The 32-bit number to be sent out
 */

emstream& emstream::operator<< (uint32_t num)
{
    3278:	df 92       	push	r13
    327a:	ef 92       	push	r14
    327c:	ff 92       	push	r15
    327e:	0f 93       	push	r16
    3280:	1f 93       	push	r17
    3282:	cf 93       	push	r28
    3284:	df 93       	push	r29
    3286:	cd b7       	in	r28, 0x3d	; 61
    3288:	de b7       	in	r29, 0x3e	; 62
    328a:	a1 97       	sbiw	r28, 0x21	; 33
    328c:	cd bf       	out	0x3d, r28	; 61
    328e:	de bf       	out	0x3e, r29	; 62
    3290:	8c 01       	movw	r16, r24
    3292:	d4 2e       	mov	r13, r20
    3294:	e5 2e       	mov	r14, r21
    3296:	f6 2e       	mov	r15, r22
    3298:	97 2f       	mov	r25, r23
	if (base == 16 || base == 8 || base == 2)
    329a:	f8 01       	movw	r30, r16
    329c:	22 81       	ldd	r18, Z+2	; 0x02
    329e:	20 31       	cpi	r18, 0x10	; 16
    32a0:	21 f0       	breq	.+8      	; 0x32aa <_ZN8emstreamlsEm+0x32>
    32a2:	28 30       	cpi	r18, 0x08	; 8
    32a4:	11 f0       	breq	.+4      	; 0x32aa <_ZN8emstreamlsEm+0x32>
    32a6:	22 30       	cpi	r18, 0x02	; 2
    32a8:	71 f4       	brne	.+28     	; 0x32c6 <_ZN8emstreamlsEm+0x4e>
		{
			uint32_t whole;
			uint8_t bits[4];
		} parts;
		parts.whole = num;
		*this << parts.bits[3] << parts.bits[2] << parts.bits[1] << parts.bits[0];
    32aa:	69 2f       	mov	r22, r25
    32ac:	c8 01       	movw	r24, r16
    32ae:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN8emstreamlsEh>
    32b2:	6f 2d       	mov	r22, r15
    32b4:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN8emstreamlsEh>
    32b8:	6e 2d       	mov	r22, r14
    32ba:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN8emstreamlsEh>
    32be:	6d 2d       	mov	r22, r13
    32c0:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN8emstreamlsEh>
    32c4:	0f c0       	rjmp	.+30     	; 0x32e4 <_ZN8emstreamlsEm+0x6c>
extern __inline__ __ATTR_GNU_INLINE__
char *ultoa (unsigned long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__ultoa (unsigned long, char *, int);
	return __ultoa (__val, __s, __radix);
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	ae 01       	movw	r20, r28
    32ca:	4f 5f       	subi	r20, 0xFF	; 255
    32cc:	5f 4f       	sbci	r21, 0xFF	; 255
    32ce:	6d 2d       	mov	r22, r13
    32d0:	7e 2d       	mov	r23, r14
    32d2:	8f 2d       	mov	r24, r15
    32d4:	0e 94 67 20 	call	0x40ce	; 0x40ce <ultoa>
	}
	else
	{
		char out_str[33];
		ultoa ((long)num, out_str, base);
		puts (out_str);
    32d8:	be 01       	movw	r22, r28
    32da:	6f 5f       	subi	r22, 0xFF	; 255
    32dc:	7f 4f       	sbci	r23, 0xFF	; 255
    32de:	c8 01       	movw	r24, r16
    32e0:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
	}

	return (*this);
}
    32e4:	c8 01       	movw	r24, r16
    32e6:	a1 96       	adiw	r28, 0x21	; 33
    32e8:	cd bf       	out	0x3d, r28	; 61
    32ea:	de bf       	out	0x3e, r29	; 62
    32ec:	df 91       	pop	r29
    32ee:	cf 91       	pop	r28
    32f0:	1f 91       	pop	r17
    32f2:	0f 91       	pop	r16
    32f4:	ff 90       	pop	r15
    32f6:	ef 90       	pop	r14
    32f8:	df 90       	pop	r13
    32fa:	08 95       	ret

000032fc <_ZN8emstreamlsEh>:
 *          reference is used to string printable items together with "<<" operators
 *  @param num The 8-bit number or character to be sent out
 */

emstream& emstream::operator<< (uint8_t num)
{
    32fc:	cf 92       	push	r12
    32fe:	df 92       	push	r13
    3300:	ef 92       	push	r14
    3302:	ff 92       	push	r15
    3304:	0f 93       	push	r16
    3306:	1f 93       	push	r17
    3308:	cf 93       	push	r28
    330a:	df 93       	push	r29
    330c:	cd b7       	in	r28, 0x3d	; 61
    330e:	de b7       	in	r29, 0x3e	; 62
    3310:	29 97       	sbiw	r28, 0x09	; 9
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	de bf       	out	0x3e, r29	; 62
    3316:	8c 01       	movw	r16, r24
    3318:	e6 2e       	mov	r14, r22
	uint8_t temp_char;                      // Temporary storage for a nibble

	if (print_ascii)
    331a:	dc 01       	movw	r26, r24
    331c:	13 96       	adiw	r26, 0x03	; 3
    331e:	8c 91       	ld	r24, X
    3320:	13 97       	sbiw	r26, 0x03	; 3
    3322:	88 23       	and	r24, r24
    3324:	41 f0       	breq	.+16     	; 0x3336 <_ZN8emstreamlsEh+0x3a>
	{
		putchar (num);
    3326:	ed 91       	ld	r30, X+
    3328:	fc 91       	ld	r31, X
    332a:	02 80       	ldd	r0, Z+2	; 0x02
    332c:	f3 81       	ldd	r31, Z+3	; 0x03
    332e:	e0 2d       	mov	r30, r0
    3330:	c8 01       	movw	r24, r16
    3332:	19 95       	eicall
    3334:	56 c0       	rjmp	.+172    	; 0x33e2 <_ZN8emstreamlsEh+0xe6>
	}
	else if (base == 2)
    3336:	f8 01       	movw	r30, r16
    3338:	42 81       	ldd	r20, Z+2	; 0x02
    333a:	42 30       	cpi	r20, 0x02	; 2
    333c:	19 f5       	brne	.+70     	; 0x3384 <_ZN8emstreamlsEh+0x88>
    333e:	68 94       	set
    3340:	cc 24       	eor	r12, r12
    3342:	c3 f8       	bld	r12, 3
    3344:	d1 2c       	mov	r13, r1
    3346:	68 94       	set
    3348:	ff 24       	eor	r15, r15
    334a:	f7 f8       	bld	r15, 7
	{
		for (uint8_t bmask = 0x80; bmask != 0; bmask >>= 1)
		{
			if (num & bmask) putchar ('1');
    334c:	8e 2d       	mov	r24, r14
    334e:	8f 21       	and	r24, r15
    3350:	51 f0       	breq	.+20     	; 0x3366 <_ZN8emstreamlsEh+0x6a>
    3352:	d8 01       	movw	r26, r16
    3354:	ed 91       	ld	r30, X+
    3356:	fc 91       	ld	r31, X
    3358:	02 80       	ldd	r0, Z+2	; 0x02
    335a:	f3 81       	ldd	r31, Z+3	; 0x03
    335c:	e0 2d       	mov	r30, r0
    335e:	61 e3       	ldi	r22, 0x31	; 49
    3360:	c8 01       	movw	r24, r16
    3362:	19 95       	eicall
    3364:	09 c0       	rjmp	.+18     	; 0x3378 <_ZN8emstreamlsEh+0x7c>
			else             putchar ('0');
    3366:	d8 01       	movw	r26, r16
    3368:	ed 91       	ld	r30, X+
    336a:	fc 91       	ld	r31, X
    336c:	02 80       	ldd	r0, Z+2	; 0x02
    336e:	f3 81       	ldd	r31, Z+3	; 0x03
    3370:	e0 2d       	mov	r30, r0
    3372:	60 e3       	ldi	r22, 0x30	; 48
    3374:	c8 01       	movw	r24, r16
    3376:	19 95       	eicall
	{
		putchar (num);
	}
	else if (base == 2)
	{
		for (uint8_t bmask = 0x80; bmask != 0; bmask >>= 1)
    3378:	f6 94       	lsr	r15
    337a:	b1 e0       	ldi	r27, 0x01	; 1
    337c:	cb 1a       	sub	r12, r27
    337e:	d1 08       	sbc	r13, r1
    3380:	29 f7       	brne	.-54     	; 0x334c <_ZN8emstreamlsEh+0x50>
    3382:	2f c0       	rjmp	.+94     	; 0x33e2 <_ZN8emstreamlsEh+0xe6>
		{
			if (num & bmask) putchar ('1');
			else             putchar ('0');
		}
	}
	else if (base == 16)
    3384:	40 31       	cpi	r20, 0x10	; 16
    3386:	f9 f4       	brne	.+62     	; 0x33c6 <_ZN8emstreamlsEh+0xca>
	{
		temp_char = (num >> 4) & 0x0F;
    3388:	62 95       	swap	r22
    338a:	6f 70       	andi	r22, 0x0F	; 15
		putchar ((temp_char > 9) ? temp_char + ('A' - 10) : temp_char + '0');
    338c:	01 90       	ld	r0, Z+
    338e:	f0 81       	ld	r31, Z
    3390:	e0 2d       	mov	r30, r0
    3392:	02 80       	ldd	r0, Z+2	; 0x02
    3394:	f3 81       	ldd	r31, Z+3	; 0x03
    3396:	e0 2d       	mov	r30, r0
    3398:	6a 30       	cpi	r22, 0x0A	; 10
    339a:	10 f0       	brcs	.+4      	; 0x33a0 <_ZN8emstreamlsEh+0xa4>
    339c:	69 5c       	subi	r22, 0xC9	; 201
    339e:	01 c0       	rjmp	.+2      	; 0x33a2 <_ZN8emstreamlsEh+0xa6>
    33a0:	60 5d       	subi	r22, 0xD0	; 208
    33a2:	c8 01       	movw	r24, r16
    33a4:	19 95       	eicall
		temp_char = num & 0x0F;
    33a6:	6e 2d       	mov	r22, r14
    33a8:	6f 70       	andi	r22, 0x0F	; 15
		putchar ((temp_char > 9) ? temp_char + ('A' - 10) : temp_char + '0');
    33aa:	d8 01       	movw	r26, r16
    33ac:	ed 91       	ld	r30, X+
    33ae:	fc 91       	ld	r31, X
    33b0:	02 80       	ldd	r0, Z+2	; 0x02
    33b2:	f3 81       	ldd	r31, Z+3	; 0x03
    33b4:	e0 2d       	mov	r30, r0
    33b6:	6a 30       	cpi	r22, 0x0A	; 10
    33b8:	10 f0       	brcs	.+4      	; 0x33be <_ZN8emstreamlsEh+0xc2>
    33ba:	69 5c       	subi	r22, 0xC9	; 201
    33bc:	01 c0       	rjmp	.+2      	; 0x33c0 <_ZN8emstreamlsEh+0xc4>
    33be:	60 5d       	subi	r22, 0xD0	; 208
    33c0:	c8 01       	movw	r24, r16
    33c2:	19 95       	eicall
    33c4:	0e c0       	rjmp	.+28     	; 0x33e2 <_ZN8emstreamlsEh+0xe6>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    33c6:	50 e0       	ldi	r21, 0x00	; 0
    33c8:	be 01       	movw	r22, r28
    33ca:	6f 5f       	subi	r22, 0xFF	; 255
    33cc:	7f 4f       	sbci	r23, 0xFF	; 255
    33ce:	8e 2d       	mov	r24, r14
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	0e 94 94 20 	call	0x4128	; 0x4128 <utoa>
	}
	else
	{
		char out_str[9];
		utoa ((uint16_t)num, out_str, base);
		puts (out_str);
    33d6:	be 01       	movw	r22, r28
    33d8:	6f 5f       	subi	r22, 0xFF	; 255
    33da:	7f 4f       	sbci	r23, 0xFF	; 255
    33dc:	c8 01       	movw	r24, r16
    33de:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
	}
	return (*this);
}
    33e2:	c8 01       	movw	r24, r16
    33e4:	29 96       	adiw	r28, 0x09	; 9
    33e6:	cd bf       	out	0x3d, r28	; 61
    33e8:	de bf       	out	0x3e, r29	; 62
    33ea:	df 91       	pop	r29
    33ec:	cf 91       	pop	r28
    33ee:	1f 91       	pop	r17
    33f0:	0f 91       	pop	r16
    33f2:	ff 90       	pop	r15
    33f4:	ef 90       	pop	r14
    33f6:	df 90       	pop	r13
    33f8:	cf 90       	pop	r12
    33fa:	08 95       	ret

000033fc <_ZN5rs2327putcharEc>:
 *  @param chout The character to be sent out
 *  @return True if everything was OK and false if there was a timeout
 */

bool rs232::putchar (char chout)
{
    33fc:	dc 01       	movw	r26, r24
	// Now wait for the serial port transmitter buffer to be empty	 
	for (uint16_t count = 0; ((*p_USR & mask_UDRE) == 0); count++)
    33fe:	50 96       	adiw	r26, 0x10	; 16
    3400:	ed 91       	ld	r30, X+
    3402:	fc 91       	ld	r31, X
    3404:	51 97       	sbiw	r26, 0x11	; 17
    3406:	80 81       	ld	r24, Z
    3408:	54 96       	adiw	r26, 0x14	; 20
    340a:	4c 91       	ld	r20, X
    340c:	54 97       	sbiw	r26, 0x14	; 20
    340e:	84 23       	and	r24, r20
    3410:	29 f0       	breq	.+10     	; 0x341c <_ZN5rs2327putcharEc+0x20>
    3412:	09 c0       	rjmp	.+18     	; 0x3426 <_ZN5rs2327putcharEc+0x2a>
    3414:	21 50       	subi	r18, 0x01	; 1
    3416:	31 09       	sbc	r19, r1
	{
		if (count > UART_TX_TOUT)
    3418:	19 f4       	brne	.+6      	; 0x3420 <_ZN5rs2327putcharEc+0x24>
    341a:	12 c0       	rjmp	.+36     	; 0x3440 <_ZN5rs2327putcharEc+0x44>
 */

bool rs232::putchar (char chout)
{
	// Now wait for the serial port transmitter buffer to be empty	 
	for (uint16_t count = 0; ((*p_USR & mask_UDRE) == 0); count++)
    341c:	21 e2       	ldi	r18, 0x21	; 33
    341e:	3e e4       	ldi	r19, 0x4E	; 78
    3420:	90 81       	ld	r25, Z
    3422:	94 23       	and	r25, r20
    3424:	b9 f3       	breq	.-18     	; 0x3414 <_ZN5rs2327putcharEc+0x18>
	}

	// Clear the TXCn bit so it can be used to check if the serial port is busy.  This
	// check needs to be done prior to putting the processor into sleep mode.  Oddly,
	// the TXCn bit is cleared by writing a one to its bit location
	*p_USR |= mask_TXC;
    3426:	90 81       	ld	r25, Z
    3428:	56 96       	adiw	r26, 0x16	; 22
    342a:	8c 91       	ld	r24, X
    342c:	56 97       	sbiw	r26, 0x16	; 22
    342e:	89 2b       	or	r24, r25
    3430:	80 83       	st	Z, r24

	// The CTS line is 0 and the transmitter buffer is empty, so send the character
	*p_UDR = chout;
    3432:	1e 96       	adiw	r26, 0x0e	; 14
    3434:	ed 91       	ld	r30, X+
    3436:	fc 91       	ld	r31, X
    3438:	1f 97       	sbiw	r26, 0x0f	; 15
    343a:	60 83       	st	Z, r22
	return (true);
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	08 95       	ret
{
	// Now wait for the serial port transmitter buffer to be empty	 
	for (uint16_t count = 0; ((*p_USR & mask_UDRE) == 0); count++)
	{
		if (count > UART_TX_TOUT)
			return (false);
    3440:	80 e0       	ldi	r24, 0x00	; 0
	*p_USR |= mask_TXC;

	// The CTS line is 0 and the transmitter buffer is empty, so send the character
	*p_UDR = chout;
	return (true);
}
    3442:	08 95       	ret

00003444 <_ZN5rs2327getcharEv>:
 *  check_for_char() to ensure that there's data available first. 
 *  @return The character which was found in the serial port receive buffer
 */

int16_t rs232::getchar (void)
{
    3444:	cf 93       	push	r28
    3446:	df 93       	push	r29
    3448:	fc 01       	movw	r30, r24
	uint8_t recv_char;						// Character read from the queue

	// Wait until there's a character in the receiver queue
	while (*p_rcv_read_index == *p_rcv_write_index);
    344a:	c1 8d       	ldd	r28, Z+25	; 0x19
    344c:	d2 8d       	ldd	r29, Z+26	; 0x1a
    344e:	28 81       	ld	r18, Y
    3450:	39 81       	ldd	r19, Y+1	; 0x01
    3452:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3454:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3456:	4d 91       	ld	r20, X+
    3458:	5c 91       	ld	r21, X
    345a:	24 17       	cp	r18, r20
    345c:	35 07       	cpc	r19, r21
    345e:	e9 f3       	breq	.-6      	; 0x345a <_ZN5rs2327getcharEv+0x16>
	recv_char = (*p_rcv_buffer)[*p_rcv_read_index];
    3460:	a7 89       	ldd	r26, Z+23	; 0x17
    3462:	b0 8d       	ldd	r27, Z+24	; 0x18
    3464:	0d 90       	ld	r0, X+
    3466:	bc 91       	ld	r27, X
    3468:	a0 2d       	mov	r26, r0
    346a:	a2 0f       	add	r26, r18
    346c:	b3 1f       	adc	r27, r19
    346e:	8c 91       	ld	r24, X
	if (++(*p_rcv_read_index) >= RSINT_BUF_SIZE)
    3470:	2f 5f       	subi	r18, 0xFF	; 255
    3472:	3f 4f       	sbci	r19, 0xFF	; 255
    3474:	28 83       	st	Y, r18
    3476:	39 83       	std	Y+1, r19	; 0x01
    3478:	24 36       	cpi	r18, 0x64	; 100
    347a:	31 05       	cpc	r19, r1
    347c:	28 f0       	brcs	.+10     	; 0x3488 <_ZN5rs2327getcharEv+0x44>
		*p_rcv_read_index = 0;
    347e:	01 8c       	ldd	r0, Z+25	; 0x19
    3480:	f2 8d       	ldd	r31, Z+26	; 0x1a
    3482:	e0 2d       	mov	r30, r0
    3484:	10 82       	st	Z, r1
    3486:	11 82       	std	Z+1, r1	; 0x01

	return (recv_char);
}
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	df 91       	pop	r29
    348c:	cf 91       	pop	r28
    348e:	08 95       	ret

00003490 <_ZN5rs23214check_for_charEv>:
 *  caused an interrupt. 
 *  @return True for character available, false for no character available
 */

bool rs232::check_for_char (void)
{
    3490:	cf 93       	push	r28
    3492:	df 93       	push	r29
	return (*p_rcv_read_index != *p_rcv_write_index);
    3494:	ec 01       	movw	r28, r24
    3496:	a9 8d       	ldd	r26, Y+25	; 0x19
    3498:	ba 8d       	ldd	r27, Y+26	; 0x1a
    349a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    349c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    349e:	81 e0       	ldi	r24, 0x01	; 1
    34a0:	4d 91       	ld	r20, X+
    34a2:	5c 91       	ld	r21, X
    34a4:	20 81       	ld	r18, Z
    34a6:	31 81       	ldd	r19, Z+1	; 0x01
    34a8:	42 17       	cp	r20, r18
    34aa:	53 07       	cpc	r21, r19
    34ac:	09 f4       	brne	.+2      	; 0x34b0 <_ZN5rs23214check_for_charEv+0x20>
    34ae:	80 e0       	ldi	r24, 0x00	; 0
}
    34b0:	df 91       	pop	r29
    34b2:	cf 91       	pop	r28
    34b4:	08 95       	ret

000034b6 <_ZN5rs23212clear_screenEv>:
 *  format modifier 'clrscr' is inserted in a line of "<<" stuff.
 */

void rs232::clear_screen (void)
{
	putchar (CLRSCR_STYLE);
    34b6:	dc 01       	movw	r26, r24
    34b8:	ed 91       	ld	r30, X+
    34ba:	fc 91       	ld	r31, X
    34bc:	02 80       	ldd	r0, Z+2	; 0x02
    34be:	f3 81       	ldd	r31, Z+3	; 0x03
    34c0:	e0 2d       	mov	r30, r0
    34c2:	6c e0       	ldi	r22, 0x0C	; 12
    34c4:	19 95       	eicall
    34c6:	08 95       	ret

000034c8 <_ZN5rs232C1EjP12USART_struct>:
 *  @param baud_rate The desired baud rate for serial communications. Default is 9600
 *  @param p_usart A pointer to the desired USART c-struct. The default is USARTC0. On an
 *                 XMGEGA choices are C0, C1, D0, D1, E0, E1, F0  
 */

rs232::rs232 (uint16_t baud_rate, USART_t* p_usart)
    34c8:	ef 92       	push	r14
    34ca:	ff 92       	push	r15
    34cc:	0f 93       	push	r16
    34ce:	1f 93       	push	r17
    34d0:	cf 93       	push	r28
    34d2:	df 93       	push	r29
    34d4:	ec 01       	movw	r28, r24
    34d6:	7b 01       	movw	r14, r22
    34d8:	8a 01       	movw	r16, r20
	: emstream (), base232 (baud_rate, p_usart)
    34da:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <_ZN8emstreamC1Ev>
    34de:	a8 01       	movw	r20, r16
    34e0:	b7 01       	movw	r22, r14
    34e2:	ce 01       	movw	r24, r28
    34e4:	08 96       	adiw	r24, 0x08	; 8
    34e6:	0e 94 dd 17 	call	0x2fba	; 0x2fba <_ZN7base232C1EjP12USART_struct>
    34ea:	8f e5       	ldi	r24, 0x5F	; 95
    34ec:	90 e2       	ldi	r25, 0x20	; 32
    34ee:	88 83       	st	Y, r24
    34f0:	99 83       	std	Y+1, r25	; 0x01
{
	if(p_usart == &USARTC0)
    34f2:	00 3a       	cpi	r16, 0xA0	; 160
    34f4:	88 e0       	ldi	r24, 0x08	; 8
    34f6:	18 07       	cpc	r17, r24
    34f8:	69 f4       	brne	.+26     	; 0x3514 <_ZN5rs232C1EjP12USART_struct+0x4c>
	{
		p_rcv_buffer		= &rcvC0_buffer;
    34fa:	88 e6       	ldi	r24, 0x68	; 104
    34fc:	91 e3       	ldi	r25, 0x31	; 49
    34fe:	8f 8b       	std	Y+23, r24	; 0x17
    3500:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvC0_read_index;
    3502:	8e e5       	ldi	r24, 0x5E	; 94
    3504:	91 e3       	ldi	r25, 0x31	; 49
    3506:	89 8f       	std	Y+25, r24	; 0x19
    3508:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvC0_write_index;
    350a:	84 e5       	ldi	r24, 0x54	; 84
    350c:	91 e3       	ldi	r25, 0x31	; 49
    350e:	8b 8f       	std	Y+27, r24	; 0x1b
    3510:	9c 8f       	std	Y+28, r25	; 0x1c
    3512:	42 c0       	rjmp	.+132    	; 0x3598 <_ZN5rs232C1EjP12USART_struct+0xd0>
	}
#ifdef USARTC1
	else if(p_usart == &USARTC1)
    3514:	00 3b       	cpi	r16, 0xB0	; 176
    3516:	e8 e0       	ldi	r30, 0x08	; 8
    3518:	1e 07       	cpc	r17, r30
    351a:	69 f4       	brne	.+26     	; 0x3536 <_ZN5rs232C1EjP12USART_struct+0x6e>
	{
		p_rcv_buffer		= &rcvC1_buffer;
    351c:	86 e6       	ldi	r24, 0x66	; 102
    351e:	91 e3       	ldi	r25, 0x31	; 49
    3520:	8f 8b       	std	Y+23, r24	; 0x17
    3522:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvC1_read_index;
    3524:	8c e5       	ldi	r24, 0x5C	; 92
    3526:	91 e3       	ldi	r25, 0x31	; 49
    3528:	89 8f       	std	Y+25, r24	; 0x19
    352a:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvC1_write_index;
    352c:	82 e5       	ldi	r24, 0x52	; 82
    352e:	91 e3       	ldi	r25, 0x31	; 49
    3530:	8b 8f       	std	Y+27, r24	; 0x1b
    3532:	9c 8f       	std	Y+28, r25	; 0x1c
    3534:	31 c0       	rjmp	.+98     	; 0x3598 <_ZN5rs232C1EjP12USART_struct+0xd0>
	}
#endif
#ifdef USARTD0
	else if(p_usart == &USARTD0)
    3536:	00 3a       	cpi	r16, 0xA0	; 160
    3538:	f9 e0       	ldi	r31, 0x09	; 9
    353a:	1f 07       	cpc	r17, r31
    353c:	69 f4       	brne	.+26     	; 0x3558 <_ZN5rs232C1EjP12USART_struct+0x90>
	{
		p_rcv_buffer		= &rcvD0_buffer;
    353e:	84 e6       	ldi	r24, 0x64	; 100
    3540:	91 e3       	ldi	r25, 0x31	; 49
    3542:	8f 8b       	std	Y+23, r24	; 0x17
    3544:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvD0_read_index;
    3546:	8a e5       	ldi	r24, 0x5A	; 90
    3548:	91 e3       	ldi	r25, 0x31	; 49
    354a:	89 8f       	std	Y+25, r24	; 0x19
    354c:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvD0_write_index;
    354e:	80 e5       	ldi	r24, 0x50	; 80
    3550:	91 e3       	ldi	r25, 0x31	; 49
    3552:	8b 8f       	std	Y+27, r24	; 0x1b
    3554:	9c 8f       	std	Y+28, r25	; 0x1c
    3556:	20 c0       	rjmp	.+64     	; 0x3598 <_ZN5rs232C1EjP12USART_struct+0xd0>
	}
#endif
#ifdef USARTD1
	else if(p_usart == &USARTD1)
    3558:	00 3b       	cpi	r16, 0xB0	; 176
    355a:	89 e0       	ldi	r24, 0x09	; 9
    355c:	18 07       	cpc	r17, r24
    355e:	69 f4       	brne	.+26     	; 0x357a <_ZN5rs232C1EjP12USART_struct+0xb2>
	{
		p_rcv_buffer		= &rcvD1_buffer;
    3560:	82 e6       	ldi	r24, 0x62	; 98
    3562:	91 e3       	ldi	r25, 0x31	; 49
    3564:	8f 8b       	std	Y+23, r24	; 0x17
    3566:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvD1_read_index;
    3568:	88 e5       	ldi	r24, 0x58	; 88
    356a:	91 e3       	ldi	r25, 0x31	; 49
    356c:	89 8f       	std	Y+25, r24	; 0x19
    356e:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvD1_write_index;
    3570:	8e e4       	ldi	r24, 0x4E	; 78
    3572:	91 e3       	ldi	r25, 0x31	; 49
    3574:	8b 8f       	std	Y+27, r24	; 0x1b
    3576:	9c 8f       	std	Y+28, r25	; 0x1c
    3578:	0f c0       	rjmp	.+30     	; 0x3598 <_ZN5rs232C1EjP12USART_struct+0xd0>
	}
#endif
#ifdef USARTE0
	else if(p_usart == &USARTE0)
    357a:	00 3a       	cpi	r16, 0xA0	; 160
    357c:	1a 40       	sbci	r17, 0x0A	; 10
    357e:	61 f4       	brne	.+24     	; 0x3598 <_ZN5rs232C1EjP12USART_struct+0xd0>
	{
		p_rcv_buffer		= &rcvE0_buffer;
    3580:	80 e6       	ldi	r24, 0x60	; 96
    3582:	91 e3       	ldi	r25, 0x31	; 49
    3584:	8f 8b       	std	Y+23, r24	; 0x17
    3586:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvE0_read_index;
    3588:	86 e5       	ldi	r24, 0x56	; 86
    358a:	91 e3       	ldi	r25, 0x31	; 49
    358c:	89 8f       	std	Y+25, r24	; 0x19
    358e:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvE0_write_index;
    3590:	8c e4       	ldi	r24, 0x4C	; 76
    3592:	91 e3       	ldi	r25, 0x31	; 49
    3594:	8b 8f       	std	Y+27, r24	; 0x1b
    3596:	9c 8f       	std	Y+28, r25	; 0x1c
#endif
	else
	{
	}
	
	*p_rcv_buffer = new uint8_t[RSINT_BUF_SIZE];
    3598:	0f 89       	ldd	r16, Y+23	; 0x17
    359a:	18 8d       	ldd	r17, Y+24	; 0x18
    359c:	84 e6       	ldi	r24, 0x64	; 100
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <_Znaj>
    35a4:	f8 01       	movw	r30, r16
    35a6:	80 83       	st	Z, r24
    35a8:	91 83       	std	Z+1, r25	; 0x01
	*p_rcv_read_index = 0;
    35aa:	e9 8d       	ldd	r30, Y+25	; 0x19
    35ac:	fa 8d       	ldd	r31, Y+26	; 0x1a
    35ae:	10 82       	st	Z, r1
    35b0:	11 82       	std	Z+1, r1	; 0x01
	*p_rcv_write_index = 0;
    35b2:	eb 8d       	ldd	r30, Y+27	; 0x1b
    35b4:	fc 8d       	ldd	r31, Y+28	; 0x1c
    35b6:	10 82       	st	Z, r1
    35b8:	11 82       	std	Z+1, r1	; 0x01
}
    35ba:	df 91       	pop	r29
    35bc:	cf 91       	pop	r28
    35be:	1f 91       	pop	r17
    35c0:	0f 91       	pop	r16
    35c2:	ff 90       	pop	r15
    35c4:	ef 90       	pop	r14
    35c6:	08 95       	ret

000035c8 <__vector_25>:
 *  first serial port (number 0).  It saves that character into the receiver buffer.
 */

#ifdef USARTC0_RXC_vect
ISR (USARTC0_RXC_vect)
{
    35c8:	1f 92       	push	r1
    35ca:	0f 92       	push	r0
    35cc:	0f b6       	in	r0, 0x3f	; 63
    35ce:	0f 92       	push	r0
    35d0:	11 24       	eor	r1, r1
    35d2:	08 b6       	in	r0, 0x38	; 56
    35d4:	0f 92       	push	r0
    35d6:	18 be       	out	0x38, r1	; 56
    35d8:	0b b6       	in	r0, 0x3b	; 59
    35da:	0f 92       	push	r0
    35dc:	1b be       	out	0x3b, r1	; 59
    35de:	2f 93       	push	r18
    35e0:	3f 93       	push	r19
    35e2:	8f 93       	push	r24
    35e4:	9f 93       	push	r25
    35e6:	ef 93       	push	r30
    35e8:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvC0_buffer[rcvC0_write_index] = USARTC0.DATA;
    35ea:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    35ee:	e0 91 68 31 	lds	r30, 0x3168	; 0x803168 <rcvC0_buffer>
    35f2:	f0 91 69 31 	lds	r31, 0x3169	; 0x803169 <rcvC0_buffer+0x1>
    35f6:	80 91 54 31 	lds	r24, 0x3154	; 0x803154 <rcvC0_write_index>
    35fa:	90 91 55 31 	lds	r25, 0x3155	; 0x803155 <rcvC0_write_index+0x1>
    35fe:	e8 0f       	add	r30, r24
    3600:	f9 1f       	adc	r31, r25
    3602:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvC0_write_index >= RSINT_BUF_SIZE)
    3604:	80 91 54 31 	lds	r24, 0x3154	; 0x803154 <rcvC0_write_index>
    3608:	90 91 55 31 	lds	r25, 0x3155	; 0x803155 <rcvC0_write_index+0x1>
    360c:	01 96       	adiw	r24, 0x01	; 1
    360e:	84 36       	cpi	r24, 0x64	; 100
    3610:	91 05       	cpc	r25, r1
    3612:	60 f4       	brcc	.+24     	; 0x362c <__vector_25+0x64>
    3614:	80 93 54 31 	sts	0x3154, r24	; 0x803154 <rcvC0_write_index>
    3618:	90 93 55 31 	sts	0x3155, r25	; 0x803155 <rcvC0_write_index+0x1>
		rcvC0_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC0_write_index == rcvC0_read_index)
    361c:	20 91 5e 31 	lds	r18, 0x315E	; 0x80315e <rcvC0_read_index>
    3620:	30 91 5f 31 	lds	r19, 0x315F	; 0x80315f <rcvC0_read_index+0x1>
    3624:	82 17       	cp	r24, r18
    3626:	93 07       	cpc	r25, r19
    3628:	f1 f4       	brne	.+60     	; 0x3666 <__vector_25+0x9e>
    362a:	0c c0       	rjmp	.+24     	; 0x3644 <__vector_25+0x7c>

	rcvC0_buffer[rcvC0_write_index] = USARTC0.DATA;

	// Increment the write pointer
	if (++rcvC0_write_index >= RSINT_BUF_SIZE)
		rcvC0_write_index = 0;
    362c:	10 92 54 31 	sts	0x3154, r1	; 0x803154 <rcvC0_write_index>
    3630:	10 92 55 31 	sts	0x3155, r1	; 0x803155 <rcvC0_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC0_write_index == rcvC0_read_index)
    3634:	80 91 5e 31 	lds	r24, 0x315E	; 0x80315e <rcvC0_read_index>
    3638:	90 91 5f 31 	lds	r25, 0x315F	; 0x80315f <rcvC0_read_index+0x1>
    363c:	18 16       	cp	r1, r24
    363e:	19 06       	cpc	r1, r25
    3640:	91 f4       	brne	.+36     	; 0x3666 <__vector_25+0x9e>
    3642:	0e c0       	rjmp	.+28     	; 0x3660 <__vector_25+0x98>
		if (++rcvC0_read_index >= RSINT_BUF_SIZE)
    3644:	01 96       	adiw	r24, 0x01	; 1
    3646:	84 36       	cpi	r24, 0x64	; 100
    3648:	91 05       	cpc	r25, r1
    364a:	28 f4       	brcc	.+10     	; 0x3656 <__vector_25+0x8e>
    364c:	80 93 5e 31 	sts	0x315E, r24	; 0x80315e <rcvC0_read_index>
    3650:	90 93 5f 31 	sts	0x315F, r25	; 0x80315f <rcvC0_read_index+0x1>
    3654:	08 c0       	rjmp	.+16     	; 0x3666 <__vector_25+0x9e>
			rcvC0_read_index = 0;
    3656:	10 92 5e 31 	sts	0x315E, r1	; 0x80315e <rcvC0_read_index>
    365a:	10 92 5f 31 	sts	0x315F, r1	; 0x80315f <rcvC0_read_index+0x1>
}
    365e:	03 c0       	rjmp	.+6      	; 0x3666 <__vector_25+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC0_write_index == rcvC0_read_index)
		if (++rcvC0_read_index >= RSINT_BUF_SIZE)
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	f3 cf       	rjmp	.-26     	; 0x364c <__vector_25+0x84>
			rcvC0_read_index = 0;
}
    3666:	ff 91       	pop	r31
    3668:	ef 91       	pop	r30
    366a:	9f 91       	pop	r25
    366c:	8f 91       	pop	r24
    366e:	3f 91       	pop	r19
    3670:	2f 91       	pop	r18
    3672:	0f 90       	pop	r0
    3674:	0b be       	out	0x3b, r0	; 59
    3676:	0f 90       	pop	r0
    3678:	08 be       	out	0x38, r0	; 56
    367a:	0f 90       	pop	r0
    367c:	0f be       	out	0x3f, r0	; 63
    367e:	0f 90       	pop	r0
    3680:	1f 90       	pop	r1
    3682:	18 95       	reti

00003684 <__vector_28>:
#endif

#ifdef USARTC1_RXC_vect
ISR (USARTC1_RXC_vect)
{
    3684:	1f 92       	push	r1
    3686:	0f 92       	push	r0
    3688:	0f b6       	in	r0, 0x3f	; 63
    368a:	0f 92       	push	r0
    368c:	11 24       	eor	r1, r1
    368e:	08 b6       	in	r0, 0x38	; 56
    3690:	0f 92       	push	r0
    3692:	18 be       	out	0x38, r1	; 56
    3694:	0b b6       	in	r0, 0x3b	; 59
    3696:	0f 92       	push	r0
    3698:	1b be       	out	0x3b, r1	; 59
    369a:	2f 93       	push	r18
    369c:	3f 93       	push	r19
    369e:	8f 93       	push	r24
    36a0:	9f 93       	push	r25
    36a2:	ef 93       	push	r30
    36a4:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvC1_buffer[rcvC1_write_index] = USARTC1.DATA;
    36a6:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    36aa:	e0 91 66 31 	lds	r30, 0x3166	; 0x803166 <rcvC1_buffer>
    36ae:	f0 91 67 31 	lds	r31, 0x3167	; 0x803167 <rcvC1_buffer+0x1>
    36b2:	80 91 52 31 	lds	r24, 0x3152	; 0x803152 <rcvC1_write_index>
    36b6:	90 91 53 31 	lds	r25, 0x3153	; 0x803153 <rcvC1_write_index+0x1>
    36ba:	e8 0f       	add	r30, r24
    36bc:	f9 1f       	adc	r31, r25
    36be:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvC1_write_index >= RSINT_BUF_SIZE)
    36c0:	80 91 52 31 	lds	r24, 0x3152	; 0x803152 <rcvC1_write_index>
    36c4:	90 91 53 31 	lds	r25, 0x3153	; 0x803153 <rcvC1_write_index+0x1>
    36c8:	01 96       	adiw	r24, 0x01	; 1
    36ca:	84 36       	cpi	r24, 0x64	; 100
    36cc:	91 05       	cpc	r25, r1
    36ce:	60 f4       	brcc	.+24     	; 0x36e8 <__vector_28+0x64>
    36d0:	80 93 52 31 	sts	0x3152, r24	; 0x803152 <rcvC1_write_index>
    36d4:	90 93 53 31 	sts	0x3153, r25	; 0x803153 <rcvC1_write_index+0x1>
	rcvC1_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC1_write_index == rcvC1_read_index)
    36d8:	20 91 5c 31 	lds	r18, 0x315C	; 0x80315c <rcvC1_read_index>
    36dc:	30 91 5d 31 	lds	r19, 0x315D	; 0x80315d <rcvC1_read_index+0x1>
    36e0:	82 17       	cp	r24, r18
    36e2:	93 07       	cpc	r25, r19
    36e4:	f1 f4       	brne	.+60     	; 0x3722 <__vector_28+0x9e>
    36e6:	0c c0       	rjmp	.+24     	; 0x3700 <__vector_28+0x7c>

	rcvC1_buffer[rcvC1_write_index] = USARTC1.DATA;

	// Increment the write pointer
	if (++rcvC1_write_index >= RSINT_BUF_SIZE)
	rcvC1_write_index = 0;
    36e8:	10 92 52 31 	sts	0x3152, r1	; 0x803152 <rcvC1_write_index>
    36ec:	10 92 53 31 	sts	0x3153, r1	; 0x803153 <rcvC1_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC1_write_index == rcvC1_read_index)
    36f0:	80 91 5c 31 	lds	r24, 0x315C	; 0x80315c <rcvC1_read_index>
    36f4:	90 91 5d 31 	lds	r25, 0x315D	; 0x80315d <rcvC1_read_index+0x1>
    36f8:	18 16       	cp	r1, r24
    36fa:	19 06       	cpc	r1, r25
    36fc:	91 f4       	brne	.+36     	; 0x3722 <__vector_28+0x9e>
    36fe:	0e c0       	rjmp	.+28     	; 0x371c <__vector_28+0x98>
	if (++rcvC1_read_index >= RSINT_BUF_SIZE)
    3700:	01 96       	adiw	r24, 0x01	; 1
    3702:	84 36       	cpi	r24, 0x64	; 100
    3704:	91 05       	cpc	r25, r1
    3706:	28 f4       	brcc	.+10     	; 0x3712 <__vector_28+0x8e>
    3708:	80 93 5c 31 	sts	0x315C, r24	; 0x80315c <rcvC1_read_index>
    370c:	90 93 5d 31 	sts	0x315D, r25	; 0x80315d <rcvC1_read_index+0x1>
    3710:	08 c0       	rjmp	.+16     	; 0x3722 <__vector_28+0x9e>
	rcvC1_read_index = 0;
    3712:	10 92 5c 31 	sts	0x315C, r1	; 0x80315c <rcvC1_read_index>
    3716:	10 92 5d 31 	sts	0x315D, r1	; 0x80315d <rcvC1_read_index+0x1>
}
    371a:	03 c0       	rjmp	.+6      	; 0x3722 <__vector_28+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC1_write_index == rcvC1_read_index)
	if (++rcvC1_read_index >= RSINT_BUF_SIZE)
    371c:	81 e0       	ldi	r24, 0x01	; 1
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	f3 cf       	rjmp	.-26     	; 0x3708 <__vector_28+0x84>
	rcvC1_read_index = 0;
}
    3722:	ff 91       	pop	r31
    3724:	ef 91       	pop	r30
    3726:	9f 91       	pop	r25
    3728:	8f 91       	pop	r24
    372a:	3f 91       	pop	r19
    372c:	2f 91       	pop	r18
    372e:	0f 90       	pop	r0
    3730:	0b be       	out	0x3b, r0	; 59
    3732:	0f 90       	pop	r0
    3734:	08 be       	out	0x38, r0	; 56
    3736:	0f 90       	pop	r0
    3738:	0f be       	out	0x3f, r0	; 63
    373a:	0f 90       	pop	r0
    373c:	1f 90       	pop	r1
    373e:	18 95       	reti

00003740 <__vector_88>:
#endif

#ifdef USARTD0_RXC_vect
ISR (USARTD0_RXC_vect)
{
    3740:	1f 92       	push	r1
    3742:	0f 92       	push	r0
    3744:	0f b6       	in	r0, 0x3f	; 63
    3746:	0f 92       	push	r0
    3748:	11 24       	eor	r1, r1
    374a:	08 b6       	in	r0, 0x38	; 56
    374c:	0f 92       	push	r0
    374e:	18 be       	out	0x38, r1	; 56
    3750:	0b b6       	in	r0, 0x3b	; 59
    3752:	0f 92       	push	r0
    3754:	1b be       	out	0x3b, r1	; 59
    3756:	2f 93       	push	r18
    3758:	3f 93       	push	r19
    375a:	8f 93       	push	r24
    375c:	9f 93       	push	r25
    375e:	ef 93       	push	r30
    3760:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvD0_buffer[rcvC0_write_index] = USARTD0.DATA;
    3762:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    3766:	e0 91 64 31 	lds	r30, 0x3164	; 0x803164 <rcvD0_buffer>
    376a:	f0 91 65 31 	lds	r31, 0x3165	; 0x803165 <rcvD0_buffer+0x1>
    376e:	80 91 54 31 	lds	r24, 0x3154	; 0x803154 <rcvC0_write_index>
    3772:	90 91 55 31 	lds	r25, 0x3155	; 0x803155 <rcvC0_write_index+0x1>
    3776:	e8 0f       	add	r30, r24
    3778:	f9 1f       	adc	r31, r25
    377a:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvD0_write_index >= RSINT_BUF_SIZE)
    377c:	80 91 50 31 	lds	r24, 0x3150	; 0x803150 <rcvD0_write_index>
    3780:	90 91 51 31 	lds	r25, 0x3151	; 0x803151 <rcvD0_write_index+0x1>
    3784:	01 96       	adiw	r24, 0x01	; 1
    3786:	84 36       	cpi	r24, 0x64	; 100
    3788:	91 05       	cpc	r25, r1
    378a:	60 f4       	brcc	.+24     	; 0x37a4 <__vector_88+0x64>
    378c:	80 93 50 31 	sts	0x3150, r24	; 0x803150 <rcvD0_write_index>
    3790:	90 93 51 31 	sts	0x3151, r25	; 0x803151 <rcvD0_write_index+0x1>
	rcvD0_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD0_write_index == rcvD0_read_index)
    3794:	20 91 5a 31 	lds	r18, 0x315A	; 0x80315a <rcvD0_read_index>
    3798:	30 91 5b 31 	lds	r19, 0x315B	; 0x80315b <rcvD0_read_index+0x1>
    379c:	82 17       	cp	r24, r18
    379e:	93 07       	cpc	r25, r19
    37a0:	f1 f4       	brne	.+60     	; 0x37de <__vector_88+0x9e>
    37a2:	0c c0       	rjmp	.+24     	; 0x37bc <__vector_88+0x7c>

	rcvD0_buffer[rcvC0_write_index] = USARTD0.DATA;

	// Increment the write pointer
	if (++rcvD0_write_index >= RSINT_BUF_SIZE)
	rcvD0_write_index = 0;
    37a4:	10 92 50 31 	sts	0x3150, r1	; 0x803150 <rcvD0_write_index>
    37a8:	10 92 51 31 	sts	0x3151, r1	; 0x803151 <rcvD0_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD0_write_index == rcvD0_read_index)
    37ac:	80 91 5a 31 	lds	r24, 0x315A	; 0x80315a <rcvD0_read_index>
    37b0:	90 91 5b 31 	lds	r25, 0x315B	; 0x80315b <rcvD0_read_index+0x1>
    37b4:	18 16       	cp	r1, r24
    37b6:	19 06       	cpc	r1, r25
    37b8:	91 f4       	brne	.+36     	; 0x37de <__vector_88+0x9e>
    37ba:	0e c0       	rjmp	.+28     	; 0x37d8 <__vector_88+0x98>
	if (++rcvD0_read_index >= RSINT_BUF_SIZE)
    37bc:	01 96       	adiw	r24, 0x01	; 1
    37be:	84 36       	cpi	r24, 0x64	; 100
    37c0:	91 05       	cpc	r25, r1
    37c2:	28 f4       	brcc	.+10     	; 0x37ce <__vector_88+0x8e>
    37c4:	80 93 5a 31 	sts	0x315A, r24	; 0x80315a <rcvD0_read_index>
    37c8:	90 93 5b 31 	sts	0x315B, r25	; 0x80315b <rcvD0_read_index+0x1>
    37cc:	08 c0       	rjmp	.+16     	; 0x37de <__vector_88+0x9e>
	rcvD0_read_index = 0;
    37ce:	10 92 5a 31 	sts	0x315A, r1	; 0x80315a <rcvD0_read_index>
    37d2:	10 92 5b 31 	sts	0x315B, r1	; 0x80315b <rcvD0_read_index+0x1>
}
    37d6:	03 c0       	rjmp	.+6      	; 0x37de <__vector_88+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD0_write_index == rcvD0_read_index)
	if (++rcvD0_read_index >= RSINT_BUF_SIZE)
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	f3 cf       	rjmp	.-26     	; 0x37c4 <__vector_88+0x84>
	rcvD0_read_index = 0;
}
    37de:	ff 91       	pop	r31
    37e0:	ef 91       	pop	r30
    37e2:	9f 91       	pop	r25
    37e4:	8f 91       	pop	r24
    37e6:	3f 91       	pop	r19
    37e8:	2f 91       	pop	r18
    37ea:	0f 90       	pop	r0
    37ec:	0b be       	out	0x3b, r0	; 59
    37ee:	0f 90       	pop	r0
    37f0:	08 be       	out	0x38, r0	; 56
    37f2:	0f 90       	pop	r0
    37f4:	0f be       	out	0x3f, r0	; 63
    37f6:	0f 90       	pop	r0
    37f8:	1f 90       	pop	r1
    37fa:	18 95       	reti

000037fc <__vector_91>:
#endif

#ifdef USARTD1_RXC_vect
ISR (USARTD1_RXC_vect)
{
    37fc:	1f 92       	push	r1
    37fe:	0f 92       	push	r0
    3800:	0f b6       	in	r0, 0x3f	; 63
    3802:	0f 92       	push	r0
    3804:	11 24       	eor	r1, r1
    3806:	08 b6       	in	r0, 0x38	; 56
    3808:	0f 92       	push	r0
    380a:	18 be       	out	0x38, r1	; 56
    380c:	0b b6       	in	r0, 0x3b	; 59
    380e:	0f 92       	push	r0
    3810:	1b be       	out	0x3b, r1	; 59
    3812:	2f 93       	push	r18
    3814:	3f 93       	push	r19
    3816:	8f 93       	push	r24
    3818:	9f 93       	push	r25
    381a:	ef 93       	push	r30
    381c:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvD1_buffer[rcvD1_write_index] = USARTD1.DATA;
    381e:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    3822:	e0 91 62 31 	lds	r30, 0x3162	; 0x803162 <rcvD1_buffer>
    3826:	f0 91 63 31 	lds	r31, 0x3163	; 0x803163 <rcvD1_buffer+0x1>
    382a:	80 91 4e 31 	lds	r24, 0x314E	; 0x80314e <rcvD1_write_index>
    382e:	90 91 4f 31 	lds	r25, 0x314F	; 0x80314f <rcvD1_write_index+0x1>
    3832:	e8 0f       	add	r30, r24
    3834:	f9 1f       	adc	r31, r25
    3836:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvD1_write_index >= RSINT_BUF_SIZE)
    3838:	80 91 4e 31 	lds	r24, 0x314E	; 0x80314e <rcvD1_write_index>
    383c:	90 91 4f 31 	lds	r25, 0x314F	; 0x80314f <rcvD1_write_index+0x1>
    3840:	01 96       	adiw	r24, 0x01	; 1
    3842:	84 36       	cpi	r24, 0x64	; 100
    3844:	91 05       	cpc	r25, r1
    3846:	60 f4       	brcc	.+24     	; 0x3860 <__vector_91+0x64>
    3848:	80 93 4e 31 	sts	0x314E, r24	; 0x80314e <rcvD1_write_index>
    384c:	90 93 4f 31 	sts	0x314F, r25	; 0x80314f <rcvD1_write_index+0x1>
	rcvD1_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD1_write_index == rcvD1_read_index)
    3850:	20 91 58 31 	lds	r18, 0x3158	; 0x803158 <rcvD1_read_index>
    3854:	30 91 59 31 	lds	r19, 0x3159	; 0x803159 <rcvD1_read_index+0x1>
    3858:	82 17       	cp	r24, r18
    385a:	93 07       	cpc	r25, r19
    385c:	f1 f4       	brne	.+60     	; 0x389a <__vector_91+0x9e>
    385e:	0c c0       	rjmp	.+24     	; 0x3878 <__vector_91+0x7c>

	rcvD1_buffer[rcvD1_write_index] = USARTD1.DATA;

	// Increment the write pointer
	if (++rcvD1_write_index >= RSINT_BUF_SIZE)
	rcvD1_write_index = 0;
    3860:	10 92 4e 31 	sts	0x314E, r1	; 0x80314e <rcvD1_write_index>
    3864:	10 92 4f 31 	sts	0x314F, r1	; 0x80314f <rcvD1_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD1_write_index == rcvD1_read_index)
    3868:	80 91 58 31 	lds	r24, 0x3158	; 0x803158 <rcvD1_read_index>
    386c:	90 91 59 31 	lds	r25, 0x3159	; 0x803159 <rcvD1_read_index+0x1>
    3870:	18 16       	cp	r1, r24
    3872:	19 06       	cpc	r1, r25
    3874:	91 f4       	brne	.+36     	; 0x389a <__vector_91+0x9e>
    3876:	0e c0       	rjmp	.+28     	; 0x3894 <__vector_91+0x98>
	if (++rcvD1_read_index >= RSINT_BUF_SIZE)
    3878:	01 96       	adiw	r24, 0x01	; 1
    387a:	84 36       	cpi	r24, 0x64	; 100
    387c:	91 05       	cpc	r25, r1
    387e:	28 f4       	brcc	.+10     	; 0x388a <__vector_91+0x8e>
    3880:	80 93 58 31 	sts	0x3158, r24	; 0x803158 <rcvD1_read_index>
    3884:	90 93 59 31 	sts	0x3159, r25	; 0x803159 <rcvD1_read_index+0x1>
    3888:	08 c0       	rjmp	.+16     	; 0x389a <__vector_91+0x9e>
	rcvD1_read_index = 0;
    388a:	10 92 58 31 	sts	0x3158, r1	; 0x803158 <rcvD1_read_index>
    388e:	10 92 59 31 	sts	0x3159, r1	; 0x803159 <rcvD1_read_index+0x1>
}
    3892:	03 c0       	rjmp	.+6      	; 0x389a <__vector_91+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD1_write_index == rcvD1_read_index)
	if (++rcvD1_read_index >= RSINT_BUF_SIZE)
    3894:	81 e0       	ldi	r24, 0x01	; 1
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	f3 cf       	rjmp	.-26     	; 0x3880 <__vector_91+0x84>
	rcvD1_read_index = 0;
}
    389a:	ff 91       	pop	r31
    389c:	ef 91       	pop	r30
    389e:	9f 91       	pop	r25
    38a0:	8f 91       	pop	r24
    38a2:	3f 91       	pop	r19
    38a4:	2f 91       	pop	r18
    38a6:	0f 90       	pop	r0
    38a8:	0b be       	out	0x3b, r0	; 59
    38aa:	0f 90       	pop	r0
    38ac:	08 be       	out	0x38, r0	; 56
    38ae:	0f 90       	pop	r0
    38b0:	0f be       	out	0x3f, r0	; 63
    38b2:	0f 90       	pop	r0
    38b4:	1f 90       	pop	r1
    38b6:	18 95       	reti

000038b8 <__vector_58>:
#endif

#ifdef USARTE0_RXC_vect
ISR (USARTE0_RXC_vect)
{
    38b8:	1f 92       	push	r1
    38ba:	0f 92       	push	r0
    38bc:	0f b6       	in	r0, 0x3f	; 63
    38be:	0f 92       	push	r0
    38c0:	11 24       	eor	r1, r1
    38c2:	08 b6       	in	r0, 0x38	; 56
    38c4:	0f 92       	push	r0
    38c6:	18 be       	out	0x38, r1	; 56
    38c8:	0b b6       	in	r0, 0x3b	; 59
    38ca:	0f 92       	push	r0
    38cc:	1b be       	out	0x3b, r1	; 59
    38ce:	2f 93       	push	r18
    38d0:	3f 93       	push	r19
    38d2:	8f 93       	push	r24
    38d4:	9f 93       	push	r25
    38d6:	ef 93       	push	r30
    38d8:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvE0_buffer[rcvE0_write_index] = USARTE0.DATA;
    38da:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    38de:	e0 91 60 31 	lds	r30, 0x3160	; 0x803160 <rcvE0_buffer>
    38e2:	f0 91 61 31 	lds	r31, 0x3161	; 0x803161 <rcvE0_buffer+0x1>
    38e6:	80 91 4c 31 	lds	r24, 0x314C	; 0x80314c <rcvE0_write_index>
    38ea:	90 91 4d 31 	lds	r25, 0x314D	; 0x80314d <rcvE0_write_index+0x1>
    38ee:	e8 0f       	add	r30, r24
    38f0:	f9 1f       	adc	r31, r25
    38f2:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvE0_write_index >= RSINT_BUF_SIZE)
    38f4:	80 91 4c 31 	lds	r24, 0x314C	; 0x80314c <rcvE0_write_index>
    38f8:	90 91 4d 31 	lds	r25, 0x314D	; 0x80314d <rcvE0_write_index+0x1>
    38fc:	01 96       	adiw	r24, 0x01	; 1
    38fe:	84 36       	cpi	r24, 0x64	; 100
    3900:	91 05       	cpc	r25, r1
    3902:	60 f4       	brcc	.+24     	; 0x391c <__vector_58+0x64>
    3904:	80 93 4c 31 	sts	0x314C, r24	; 0x80314c <rcvE0_write_index>
    3908:	90 93 4d 31 	sts	0x314D, r25	; 0x80314d <rcvE0_write_index+0x1>
	rcvE0_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvE0_write_index == rcvE0_read_index)
    390c:	20 91 56 31 	lds	r18, 0x3156	; 0x803156 <rcvE0_read_index>
    3910:	30 91 57 31 	lds	r19, 0x3157	; 0x803157 <rcvE0_read_index+0x1>
    3914:	82 17       	cp	r24, r18
    3916:	93 07       	cpc	r25, r19
    3918:	f1 f4       	brne	.+60     	; 0x3956 <__vector_58+0x9e>
    391a:	0c c0       	rjmp	.+24     	; 0x3934 <__vector_58+0x7c>

	rcvE0_buffer[rcvE0_write_index] = USARTE0.DATA;

	// Increment the write pointer
	if (++rcvE0_write_index >= RSINT_BUF_SIZE)
	rcvE0_write_index = 0;
    391c:	10 92 4c 31 	sts	0x314C, r1	; 0x80314c <rcvE0_write_index>
    3920:	10 92 4d 31 	sts	0x314D, r1	; 0x80314d <rcvE0_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvE0_write_index == rcvE0_read_index)
    3924:	80 91 56 31 	lds	r24, 0x3156	; 0x803156 <rcvE0_read_index>
    3928:	90 91 57 31 	lds	r25, 0x3157	; 0x803157 <rcvE0_read_index+0x1>
    392c:	18 16       	cp	r1, r24
    392e:	19 06       	cpc	r1, r25
    3930:	91 f4       	brne	.+36     	; 0x3956 <__vector_58+0x9e>
    3932:	0e c0       	rjmp	.+28     	; 0x3950 <__vector_58+0x98>
	if (++rcvE0_read_index >= RSINT_BUF_SIZE)
    3934:	01 96       	adiw	r24, 0x01	; 1
    3936:	84 36       	cpi	r24, 0x64	; 100
    3938:	91 05       	cpc	r25, r1
    393a:	28 f4       	brcc	.+10     	; 0x3946 <__vector_58+0x8e>
    393c:	80 93 56 31 	sts	0x3156, r24	; 0x803156 <rcvE0_read_index>
    3940:	90 93 57 31 	sts	0x3157, r25	; 0x803157 <rcvE0_read_index+0x1>
    3944:	08 c0       	rjmp	.+16     	; 0x3956 <__vector_58+0x9e>
	rcvE0_read_index = 0;
    3946:	10 92 56 31 	sts	0x3156, r1	; 0x803156 <rcvE0_read_index>
    394a:	10 92 57 31 	sts	0x3157, r1	; 0x803157 <rcvE0_read_index+0x1>
}
    394e:	03 c0       	rjmp	.+6      	; 0x3956 <__vector_58+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvE0_write_index == rcvE0_read_index)
	if (++rcvE0_read_index >= RSINT_BUF_SIZE)
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	f3 cf       	rjmp	.-26     	; 0x393c <__vector_58+0x84>
	rcvE0_read_index = 0;
}
    3956:	ff 91       	pop	r31
    3958:	ef 91       	pop	r30
    395a:	9f 91       	pop	r25
    395c:	8f 91       	pop	r24
    395e:	3f 91       	pop	r19
    3960:	2f 91       	pop	r18
    3962:	0f 90       	pop	r0
    3964:	0b be       	out	0x3b, r0	; 59
    3966:	0f 90       	pop	r0
    3968:	08 be       	out	0x38, r0	; 56
    396a:	0f 90       	pop	r0
    396c:	0f be       	out	0x3f, r0	; 63
    396e:	0f 90       	pop	r0
    3970:	1f 90       	pop	r1
    3972:	18 95       	reti

00003974 <_ZN9frt_queueIjE16ISR_num_items_inEv>:
		 *  called only from within an interrupt service routine.
		 *  @return The number of items in the queue
		 */
		size_t ISR_num_items_in (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle));
    3974:	fc 01       	movw	r30, r24
    3976:	84 81       	ldd	r24, Z+4	; 0x04
    3978:	95 81       	ldd	r25, Z+5	; 0x05
    397a:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <uxQueueMessagesWaitingFromISR>
		}
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	08 95       	ret

00003982 <_ZN9frt_queueIjE13ISR_not_emptyEv>:
		 *  an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool ISR_not_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) != 0);
    3982:	fc 01       	movw	r30, r24
    3984:	84 81       	ldd	r24, Z+4	; 0x04
    3986:	95 81       	ldd	r25, Z+5	; 0x05
    3988:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <uxQueueMessagesWaitingFromISR>
    398c:	91 e0       	ldi	r25, 0x01	; 1
    398e:	81 11       	cpse	r24, r1
    3990:	01 c0       	rjmp	.+2      	; 0x3994 <_ZN9frt_queueIjE13ISR_not_emptyEv+0x12>
    3992:	90 e0       	ldi	r25, 0x00	; 0
		}
    3994:	89 2f       	mov	r24, r25
    3996:	08 95       	ret

00003998 <_ZN9frt_queueIjE12ISR_is_emptyEv>:
		 *  routine. It must not be used in normal non-ISR code. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool ISR_is_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) == 0);
    3998:	fc 01       	movw	r30, r24
    399a:	84 81       	ldd	r24, Z+4	; 0x04
    399c:	95 81       	ldd	r25, Z+5	; 0x05
    399e:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <uxQueueMessagesWaitingFromISR>
    39a2:	91 e0       	ldi	r25, 0x01	; 1
    39a4:	81 11       	cpse	r24, r1
    39a6:	90 e0       	ldi	r25, 0x00	; 0
		}
    39a8:	89 2f       	mov	r24, r25
    39aa:	08 95       	ret

000039ac <_ZN9frt_queueIiE16ISR_num_items_inEv>:
		 *  called only from within an interrupt service routine.
		 *  @return The number of items in the queue
		 */
		size_t ISR_num_items_in (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle));
    39ac:	fc 01       	movw	r30, r24
    39ae:	84 81       	ldd	r24, Z+4	; 0x04
    39b0:	95 81       	ldd	r25, Z+5	; 0x05
    39b2:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <uxQueueMessagesWaitingFromISR>
		}
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	08 95       	ret

000039ba <_ZN9frt_queueIiE13ISR_not_emptyEv>:
		 *  an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool ISR_not_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) != 0);
    39ba:	fc 01       	movw	r30, r24
    39bc:	84 81       	ldd	r24, Z+4	; 0x04
    39be:	95 81       	ldd	r25, Z+5	; 0x05
    39c0:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <uxQueueMessagesWaitingFromISR>
    39c4:	91 e0       	ldi	r25, 0x01	; 1
    39c6:	81 11       	cpse	r24, r1
    39c8:	01 c0       	rjmp	.+2      	; 0x39cc <_ZN9frt_queueIiE13ISR_not_emptyEv+0x12>
    39ca:	90 e0       	ldi	r25, 0x00	; 0
		}
    39cc:	89 2f       	mov	r24, r25
    39ce:	08 95       	ret

000039d0 <_ZN9frt_queueIiE12ISR_is_emptyEv>:
		 *  routine. It must not be used in normal non-ISR code. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool ISR_is_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) == 0);
    39d0:	fc 01       	movw	r30, r24
    39d2:	84 81       	ldd	r24, Z+4	; 0x04
    39d4:	95 81       	ldd	r25, Z+5	; 0x05
    39d6:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <uxQueueMessagesWaitingFromISR>
    39da:	91 e0       	ldi	r25, 0x01	; 1
    39dc:	81 11       	cpse	r24, r1
    39de:	90 e0       	ldi	r25, 0x00	; 0
		}
    39e0:	89 2f       	mov	r24, r25
    39e2:	08 95       	ret

000039e4 <_ZN9frt_queueIjE12num_items_inEv>:
		 *  ISR_num_items_in() can be called from within an ISR. 
		 *  @return The number of items in the queue
		 */
		size_t num_items_in (void)
		{
			return (uxQueueMessagesWaiting (handle));
    39e4:	fc 01       	movw	r30, r24
    39e6:	84 81       	ldd	r24, Z+4	; 0x04
    39e8:	95 81       	ldd	r25, Z+5	; 0x05
    39ea:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <uxQueueMessagesWaiting>
		}
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	08 95       	ret

000039f2 <_ZN9frt_queueIjE9not_emptyEv>:
		 *  \b not be called from within an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool not_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) != 0);
    39f2:	fc 01       	movw	r30, r24
    39f4:	84 81       	ldd	r24, Z+4	; 0x04
    39f6:	95 81       	ldd	r25, Z+5	; 0x05
    39f8:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <uxQueueMessagesWaiting>
    39fc:	91 e0       	ldi	r25, 0x01	; 1
    39fe:	81 11       	cpse	r24, r1
    3a00:	01 c0       	rjmp	.+2      	; 0x3a04 <_ZN9frt_queueIjE9not_emptyEv+0x12>
    3a02:	90 e0       	ldi	r25, 0x00	; 0
		}
    3a04:	89 2f       	mov	r24, r25
    3a06:	08 95       	ret

00003a08 <_ZN9frt_queueIjE8is_emptyEv>:
		/** This method checks if the queue is empty. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool is_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) == 0);
    3a08:	fc 01       	movw	r30, r24
    3a0a:	84 81       	ldd	r24, Z+4	; 0x04
    3a0c:	95 81       	ldd	r25, Z+5	; 0x05
    3a0e:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <uxQueueMessagesWaiting>
    3a12:	91 e0       	ldi	r25, 0x01	; 1
    3a14:	81 11       	cpse	r24, r1
    3a16:	90 e0       	ldi	r25, 0x00	; 0
		}
    3a18:	89 2f       	mov	r24, r25
    3a1a:	08 95       	ret

00003a1c <_ZN9frt_queueIiE12num_items_inEv>:
		 *  ISR_num_items_in() can be called from within an ISR. 
		 *  @return The number of items in the queue
		 */
		size_t num_items_in (void)
		{
			return (uxQueueMessagesWaiting (handle));
    3a1c:	fc 01       	movw	r30, r24
    3a1e:	84 81       	ldd	r24, Z+4	; 0x04
    3a20:	95 81       	ldd	r25, Z+5	; 0x05
    3a22:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <uxQueueMessagesWaiting>
		}
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	08 95       	ret

00003a2a <_ZN9frt_queueIiE9not_emptyEv>:
		 *  \b not be called from within an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool not_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) != 0);
    3a2a:	fc 01       	movw	r30, r24
    3a2c:	84 81       	ldd	r24, Z+4	; 0x04
    3a2e:	95 81       	ldd	r25, Z+5	; 0x05
    3a30:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <uxQueueMessagesWaiting>
    3a34:	91 e0       	ldi	r25, 0x01	; 1
    3a36:	81 11       	cpse	r24, r1
    3a38:	01 c0       	rjmp	.+2      	; 0x3a3c <_ZN9frt_queueIiE9not_emptyEv+0x12>
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
		}
    3a3c:	89 2f       	mov	r24, r25
    3a3e:	08 95       	ret

00003a40 <_ZN9frt_queueIiE8is_emptyEv>:
		/** This method checks if the queue is empty. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool is_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) == 0);
    3a40:	fc 01       	movw	r30, r24
    3a42:	84 81       	ldd	r24, Z+4	; 0x04
    3a44:	95 81       	ldd	r25, Z+5	; 0x05
    3a46:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <uxQueueMessagesWaiting>
    3a4a:	91 e0       	ldi	r25, 0x01	; 1
    3a4c:	81 11       	cpse	r24, r1
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
		}
    3a50:	89 2f       	mov	r24, r25
    3a52:	08 95       	ret

00003a54 <_ZN9frt_queueIjE10get_a_copyERj>:
 *  \c xQueuePeekFromISR() which would allow copying items from a queue in an ISR. 
 *  @param item A reference to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get_a_copy (data_type& item)
    3a54:	0f 93       	push	r16
{
	xQueuePeek (handle, &item, portMAX_DELAY);
    3a56:	01 e0       	ldi	r16, 0x01	; 1
    3a58:	2f ef       	ldi	r18, 0xFF	; 255
    3a5a:	3f ef       	ldi	r19, 0xFF	; 255
    3a5c:	a9 01       	movw	r20, r18
    3a5e:	fc 01       	movw	r30, r24
    3a60:	84 81       	ldd	r24, Z+4	; 0x04
    3a62:	95 81       	ldd	r25, Z+5	; 0x05
    3a64:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <xQueueGenericReceive>
}
    3a68:	0f 91       	pop	r16
    3a6a:	08 95       	ret

00003a6c <_ZN9frt_queueIjE10get_a_copyEv>:
 *          data type if we couldn't get any data from the queue and the attempt
 *          timed out
 */

template <class data_type>
inline data_type frt_queue<data_type>::get_a_copy (void)
    3a6c:	0f 93       	push	r16
    3a6e:	cf 93       	push	r28
    3a70:	df 93       	push	r29
    3a72:	1f 92       	push	r1
    3a74:	1f 92       	push	r1
    3a76:	cd b7       	in	r28, 0x3d	; 61
    3a78:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueuePeek (handle, &recv_item, portMAX_DELAY);
    3a7a:	01 e0       	ldi	r16, 0x01	; 1
    3a7c:	2f ef       	ldi	r18, 0xFF	; 255
    3a7e:	3f ef       	ldi	r19, 0xFF	; 255
    3a80:	a9 01       	movw	r20, r18
    3a82:	be 01       	movw	r22, r28
    3a84:	6f 5f       	subi	r22, 0xFF	; 255
    3a86:	7f 4f       	sbci	r23, 0xFF	; 255
    3a88:	fc 01       	movw	r30, r24
    3a8a:	84 81       	ldd	r24, Z+4	; 0x04
    3a8c:	95 81       	ldd	r25, Z+5	; 0x05
    3a8e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <xQueueGenericReceive>
	return (recv_item);
}
    3a92:	89 81       	ldd	r24, Y+1	; 0x01
    3a94:	9a 81       	ldd	r25, Y+2	; 0x02
    3a96:	0f 90       	pop	r0
    3a98:	0f 90       	pop	r0
    3a9a:	df 91       	pop	r29
    3a9c:	cf 91       	pop	r28
    3a9e:	0f 91       	pop	r16
    3aa0:	08 95       	ret

00003aa2 <_ZN9frt_queueIjE3getEPj>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get (data_type* p_item)
    3aa2:	0f 93       	push	r16
{
	xQueueReceive (handle, p_item, portMAX_DELAY);
    3aa4:	00 e0       	ldi	r16, 0x00	; 0
    3aa6:	2f ef       	ldi	r18, 0xFF	; 255
    3aa8:	3f ef       	ldi	r19, 0xFF	; 255
    3aaa:	a9 01       	movw	r20, r18
    3aac:	fc 01       	movw	r30, r24
    3aae:	84 81       	ldd	r24, Z+4	; 0x04
    3ab0:	95 81       	ldd	r25, Z+5	; 0x05
    3ab2:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <xQueueGenericReceive>
}
    3ab6:	0f 91       	pop	r16
    3ab8:	08 95       	ret

00003aba <_ZN9frt_queueIjE3getEv>:
 *  up. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::get (void)
    3aba:	0f 93       	push	r16
    3abc:	cf 93       	push	r28
    3abe:	df 93       	push	r29
    3ac0:	1f 92       	push	r1
    3ac2:	1f 92       	push	r1
    3ac4:	cd b7       	in	r28, 0x3d	; 61
    3ac6:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceive (handle, &recv_item, portMAX_DELAY);
    3ac8:	00 e0       	ldi	r16, 0x00	; 0
    3aca:	2f ef       	ldi	r18, 0xFF	; 255
    3acc:	3f ef       	ldi	r19, 0xFF	; 255
    3ace:	a9 01       	movw	r20, r18
    3ad0:	be 01       	movw	r22, r28
    3ad2:	6f 5f       	subi	r22, 0xFF	; 255
    3ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ad6:	fc 01       	movw	r30, r24
    3ad8:	84 81       	ldd	r24, Z+4	; 0x04
    3ada:	95 81       	ldd	r25, Z+5	; 0x05
    3adc:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <xQueueGenericReceive>
	return (recv_item);
}
    3ae0:	89 81       	ldd	r24, Y+1	; 0x01
    3ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae4:	0f 90       	pop	r0
    3ae6:	0f 90       	pop	r0
    3ae8:	df 91       	pop	r29
    3aea:	cf 91       	pop	r28
    3aec:	0f 91       	pop	r16
    3aee:	08 95       	ret

00003af0 <_ZN9frt_queueIiE10get_a_copyERi>:
 *  \c xQueuePeekFromISR() which would allow copying items from a queue in an ISR. 
 *  @param item A reference to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get_a_copy (data_type& item)
    3af0:	0f 93       	push	r16
{
	xQueuePeek (handle, &item, portMAX_DELAY);
    3af2:	01 e0       	ldi	r16, 0x01	; 1
    3af4:	2f ef       	ldi	r18, 0xFF	; 255
    3af6:	3f ef       	ldi	r19, 0xFF	; 255
    3af8:	a9 01       	movw	r20, r18
    3afa:	fc 01       	movw	r30, r24
    3afc:	84 81       	ldd	r24, Z+4	; 0x04
    3afe:	95 81       	ldd	r25, Z+5	; 0x05
    3b00:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <xQueueGenericReceive>
}
    3b04:	0f 91       	pop	r16
    3b06:	08 95       	ret

00003b08 <_ZN9frt_queueIiE10get_a_copyEv>:
 *          data type if we couldn't get any data from the queue and the attempt
 *          timed out
 */

template <class data_type>
inline data_type frt_queue<data_type>::get_a_copy (void)
    3b08:	0f 93       	push	r16
    3b0a:	cf 93       	push	r28
    3b0c:	df 93       	push	r29
    3b0e:	1f 92       	push	r1
    3b10:	1f 92       	push	r1
    3b12:	cd b7       	in	r28, 0x3d	; 61
    3b14:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueuePeek (handle, &recv_item, portMAX_DELAY);
    3b16:	01 e0       	ldi	r16, 0x01	; 1
    3b18:	2f ef       	ldi	r18, 0xFF	; 255
    3b1a:	3f ef       	ldi	r19, 0xFF	; 255
    3b1c:	a9 01       	movw	r20, r18
    3b1e:	be 01       	movw	r22, r28
    3b20:	6f 5f       	subi	r22, 0xFF	; 255
    3b22:	7f 4f       	sbci	r23, 0xFF	; 255
    3b24:	fc 01       	movw	r30, r24
    3b26:	84 81       	ldd	r24, Z+4	; 0x04
    3b28:	95 81       	ldd	r25, Z+5	; 0x05
    3b2a:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <xQueueGenericReceive>
	return (recv_item);
}
    3b2e:	89 81       	ldd	r24, Y+1	; 0x01
    3b30:	9a 81       	ldd	r25, Y+2	; 0x02
    3b32:	0f 90       	pop	r0
    3b34:	0f 90       	pop	r0
    3b36:	df 91       	pop	r29
    3b38:	cf 91       	pop	r28
    3b3a:	0f 91       	pop	r16
    3b3c:	08 95       	ret

00003b3e <_ZN9frt_queueIiE3getEPi>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get (data_type* p_item)
    3b3e:	0f 93       	push	r16
{
	xQueueReceive (handle, p_item, portMAX_DELAY);
    3b40:	00 e0       	ldi	r16, 0x00	; 0
    3b42:	2f ef       	ldi	r18, 0xFF	; 255
    3b44:	3f ef       	ldi	r19, 0xFF	; 255
    3b46:	a9 01       	movw	r20, r18
    3b48:	fc 01       	movw	r30, r24
    3b4a:	84 81       	ldd	r24, Z+4	; 0x04
    3b4c:	95 81       	ldd	r25, Z+5	; 0x05
    3b4e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <xQueueGenericReceive>
}
    3b52:	0f 91       	pop	r16
    3b54:	08 95       	ret

00003b56 <_ZN9frt_queueIiE3getEv>:
 *  up. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::get (void)
    3b56:	0f 93       	push	r16
    3b58:	cf 93       	push	r28
    3b5a:	df 93       	push	r29
    3b5c:	1f 92       	push	r1
    3b5e:	1f 92       	push	r1
    3b60:	cd b7       	in	r28, 0x3d	; 61
    3b62:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceive (handle, &recv_item, portMAX_DELAY);
    3b64:	00 e0       	ldi	r16, 0x00	; 0
    3b66:	2f ef       	ldi	r18, 0xFF	; 255
    3b68:	3f ef       	ldi	r19, 0xFF	; 255
    3b6a:	a9 01       	movw	r20, r18
    3b6c:	be 01       	movw	r22, r28
    3b6e:	6f 5f       	subi	r22, 0xFF	; 255
    3b70:	7f 4f       	sbci	r23, 0xFF	; 255
    3b72:	fc 01       	movw	r30, r24
    3b74:	84 81       	ldd	r24, Z+4	; 0x04
    3b76:	95 81       	ldd	r25, Z+5	; 0x05
    3b78:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <xQueueGenericReceive>
	return (recv_item);
}
    3b7c:	89 81       	ldd	r24, Y+1	; 0x01
    3b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b80:	0f 90       	pop	r0
    3b82:	0f 90       	pop	r0
    3b84:	df 91       	pop	r29
    3b86:	cf 91       	pop	r28
    3b88:	0f 91       	pop	r16
    3b8a:	08 95       	ret

00003b8c <_ZN9frt_queueIjE7ISR_getEPj>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::ISR_get (data_type* p_item)
    3b8c:	cf 93       	push	r28
    3b8e:	df 93       	push	r29
    3b90:	1f 92       	push	r1
    3b92:	cd b7       	in	r28, 0x3d	; 61
    3b94:	de b7       	in	r29, 0x3e	; 62
{
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, and
	// nothing will actually be copied
	xQueueReceiveFromISR (handle, p_item, &task_awakened);
    3b96:	ae 01       	movw	r20, r28
    3b98:	4f 5f       	subi	r20, 0xFF	; 255
    3b9a:	5f 4f       	sbci	r21, 0xFF	; 255
    3b9c:	fc 01       	movw	r30, r24
    3b9e:	84 81       	ldd	r24, Z+4	; 0x04
    3ba0:	95 81       	ldd	r25, Z+5	; 0x05
    3ba2:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xQueueReceiveFromISR>
}
    3ba6:	0f 90       	pop	r0
    3ba8:	df 91       	pop	r29
    3baa:	cf 91       	pop	r28
    3bac:	08 95       	ret

00003bae <_ZN9frt_queueIjE7ISR_getEv>:
 *  service routine. This method must not be called from within normal non-ISR code. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::ISR_get (void)
    3bae:	cf 93       	push	r28
    3bb0:	df 93       	push	r29
    3bb2:	00 d0       	rcall	.+0      	; 0x3bb4 <_ZN9frt_queueIjE7ISR_getEv+0x6>
    3bb4:	cd b7       	in	r28, 0x3d	; 61
    3bb6:	de b7       	in	r29, 0x3e	; 62
	data_type recv_item;                    // Data item read from the queue
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceiveFromISR (handle, &recv_item, &task_awakened);
    3bb8:	ae 01       	movw	r20, r28
    3bba:	4d 5f       	subi	r20, 0xFD	; 253
    3bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    3bbe:	be 01       	movw	r22, r28
    3bc0:	6f 5f       	subi	r22, 0xFF	; 255
    3bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    3bc4:	fc 01       	movw	r30, r24
    3bc6:	84 81       	ldd	r24, Z+4	; 0x04
    3bc8:	95 81       	ldd	r25, Z+5	; 0x05
    3bca:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xQueueReceiveFromISR>
	return (recv_item);
}
    3bce:	89 81       	ldd	r24, Y+1	; 0x01
    3bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd2:	23 96       	adiw	r28, 0x03	; 3
    3bd4:	cd bf       	out	0x3d, r28	; 61
    3bd6:	de bf       	out	0x3e, r29	; 62
    3bd8:	df 91       	pop	r29
    3bda:	cf 91       	pop	r28
    3bdc:	08 95       	ret

00003bde <_ZN9frt_queueIiE7ISR_getEPi>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::ISR_get (data_type* p_item)
    3bde:	cf 93       	push	r28
    3be0:	df 93       	push	r29
    3be2:	1f 92       	push	r1
    3be4:	cd b7       	in	r28, 0x3d	; 61
    3be6:	de b7       	in	r29, 0x3e	; 62
{
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, and
	// nothing will actually be copied
	xQueueReceiveFromISR (handle, p_item, &task_awakened);
    3be8:	ae 01       	movw	r20, r28
    3bea:	4f 5f       	subi	r20, 0xFF	; 255
    3bec:	5f 4f       	sbci	r21, 0xFF	; 255
    3bee:	fc 01       	movw	r30, r24
    3bf0:	84 81       	ldd	r24, Z+4	; 0x04
    3bf2:	95 81       	ldd	r25, Z+5	; 0x05
    3bf4:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xQueueReceiveFromISR>
}
    3bf8:	0f 90       	pop	r0
    3bfa:	df 91       	pop	r29
    3bfc:	cf 91       	pop	r28
    3bfe:	08 95       	ret

00003c00 <_ZN9frt_queueIiE7ISR_getEv>:
 *  service routine. This method must not be called from within normal non-ISR code. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::ISR_get (void)
    3c00:	cf 93       	push	r28
    3c02:	df 93       	push	r29
    3c04:	00 d0       	rcall	.+0      	; 0x3c06 <_ZN9frt_queueIiE7ISR_getEv+0x6>
    3c06:	cd b7       	in	r28, 0x3d	; 61
    3c08:	de b7       	in	r29, 0x3e	; 62
	data_type recv_item;                    // Data item read from the queue
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceiveFromISR (handle, &recv_item, &task_awakened);
    3c0a:	ae 01       	movw	r20, r28
    3c0c:	4d 5f       	subi	r20, 0xFD	; 253
    3c0e:	5f 4f       	sbci	r21, 0xFF	; 255
    3c10:	be 01       	movw	r22, r28
    3c12:	6f 5f       	subi	r22, 0xFF	; 255
    3c14:	7f 4f       	sbci	r23, 0xFF	; 255
    3c16:	fc 01       	movw	r30, r24
    3c18:	84 81       	ldd	r24, Z+4	; 0x04
    3c1a:	95 81       	ldd	r25, Z+5	; 0x05
    3c1c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xQueueReceiveFromISR>
	return (recv_item);
}
    3c20:	89 81       	ldd	r24, Y+1	; 0x01
    3c22:	9a 81       	ldd	r25, Y+2	; 0x02
    3c24:	23 96       	adiw	r28, 0x03	; 3
    3c26:	cd bf       	out	0x3d, r28	; 61
    3c28:	de bf       	out	0x3e, r29	; 62
    3c2a:	df 91       	pop	r29
    3c2c:	cf 91       	pop	r28
    3c2e:	08 95       	ret

00003c30 <_ZN9frt_queueIjE11ISR_butt_inERKj>:
 *              the front of the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
bool frt_queue<data_type>::ISR_butt_in (const data_type& item)
    3c30:	cf 93       	push	r28
    3c32:	df 93       	push	r29
    3c34:	1f 92       	push	r1
    3c36:	cd b7       	in	r28, 0x3d	; 61
    3c38:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    3c3a:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;                      // Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToFrontFromISR (handle, &item, &shouldSwitch));
    3c3c:	21 e0       	ldi	r18, 0x01	; 1
    3c3e:	ae 01       	movw	r20, r28
    3c40:	4f 5f       	subi	r20, 0xFF	; 255
    3c42:	5f 4f       	sbci	r21, 0xFF	; 255
    3c44:	fc 01       	movw	r30, r24
    3c46:	84 81       	ldd	r24, Z+4	; 0x04
    3c48:	95 81       	ldd	r25, Z+5	; 0x05
    3c4a:	0e 94 c7 0c 	call	0x198e	; 0x198e <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    3c4e:	91 e0       	ldi	r25, 0x01	; 1
    3c50:	81 11       	cpse	r24, r1
    3c52:	01 c0       	rjmp	.+2      	; 0x3c56 <_ZN9frt_queueIjE11ISR_butt_inERKj+0x26>
    3c54:	90 e0       	ldi	r25, 0x00	; 0
}
    3c56:	89 2f       	mov	r24, r25
    3c58:	0f 90       	pop	r0
    3c5a:	df 91       	pop	r29
    3c5c:	cf 91       	pop	r28
    3c5e:	08 95       	ret

00003c60 <_ZN9frt_queueIjE7ISR_putERKj>:
 *  @param item Reference to the item which is going to be put into the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
inline bool frt_queue<data_type>::ISR_put (const data_type& item)
    3c60:	cf 93       	push	r28
    3c62:	df 93       	push	r29
    3c64:	1f 92       	push	r1
    3c66:	cd b7       	in	r28, 0x3d	; 61
    3c68:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    3c6a:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;						// Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToBackFromISR (handle, &item, &shouldSwitch));
    3c6c:	20 e0       	ldi	r18, 0x00	; 0
    3c6e:	ae 01       	movw	r20, r28
    3c70:	4f 5f       	subi	r20, 0xFF	; 255
    3c72:	5f 4f       	sbci	r21, 0xFF	; 255
    3c74:	fc 01       	movw	r30, r24
    3c76:	84 81       	ldd	r24, Z+4	; 0x04
    3c78:	95 81       	ldd	r25, Z+5	; 0x05
    3c7a:	0e 94 c7 0c 	call	0x198e	; 0x198e <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    3c7e:	91 e0       	ldi	r25, 0x01	; 1
    3c80:	81 11       	cpse	r24, r1
    3c82:	01 c0       	rjmp	.+2      	; 0x3c86 <_ZN9frt_queueIjE7ISR_putERKj+0x26>
    3c84:	90 e0       	ldi	r25, 0x00	; 0
}
    3c86:	89 2f       	mov	r24, r25
    3c88:	0f 90       	pop	r0
    3c8a:	df 91       	pop	r29
    3c8c:	cf 91       	pop	r28
    3c8e:	08 95       	ret

00003c90 <_ZN9frt_queueIiE11ISR_butt_inERKi>:
 *              the front of the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
bool frt_queue<data_type>::ISR_butt_in (const data_type& item)
    3c90:	cf 93       	push	r28
    3c92:	df 93       	push	r29
    3c94:	1f 92       	push	r1
    3c96:	cd b7       	in	r28, 0x3d	; 61
    3c98:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    3c9a:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;                      // Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToFrontFromISR (handle, &item, &shouldSwitch));
    3c9c:	21 e0       	ldi	r18, 0x01	; 1
    3c9e:	ae 01       	movw	r20, r28
    3ca0:	4f 5f       	subi	r20, 0xFF	; 255
    3ca2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ca4:	fc 01       	movw	r30, r24
    3ca6:	84 81       	ldd	r24, Z+4	; 0x04
    3ca8:	95 81       	ldd	r25, Z+5	; 0x05
    3caa:	0e 94 c7 0c 	call	0x198e	; 0x198e <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    3cae:	91 e0       	ldi	r25, 0x01	; 1
    3cb0:	81 11       	cpse	r24, r1
    3cb2:	01 c0       	rjmp	.+2      	; 0x3cb6 <_ZN9frt_queueIiE11ISR_butt_inERKi+0x26>
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
}
    3cb6:	89 2f       	mov	r24, r25
    3cb8:	0f 90       	pop	r0
    3cba:	df 91       	pop	r29
    3cbc:	cf 91       	pop	r28
    3cbe:	08 95       	ret

00003cc0 <_ZN9frt_queueIiE7ISR_putERKi>:
 *  @param item Reference to the item which is going to be put into the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
inline bool frt_queue<data_type>::ISR_put (const data_type& item)
    3cc0:	cf 93       	push	r28
    3cc2:	df 93       	push	r29
    3cc4:	1f 92       	push	r1
    3cc6:	cd b7       	in	r28, 0x3d	; 61
    3cc8:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    3cca:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;						// Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToBackFromISR (handle, &item, &shouldSwitch));
    3ccc:	20 e0       	ldi	r18, 0x00	; 0
    3cce:	ae 01       	movw	r20, r28
    3cd0:	4f 5f       	subi	r20, 0xFF	; 255
    3cd2:	5f 4f       	sbci	r21, 0xFF	; 255
    3cd4:	fc 01       	movw	r30, r24
    3cd6:	84 81       	ldd	r24, Z+4	; 0x04
    3cd8:	95 81       	ldd	r25, Z+5	; 0x05
    3cda:	0e 94 c7 0c 	call	0x198e	; 0x198e <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    3cde:	91 e0       	ldi	r25, 0x01	; 1
    3ce0:	81 11       	cpse	r24, r1
    3ce2:	01 c0       	rjmp	.+2      	; 0x3ce6 <_ZN9frt_queueIiE7ISR_putERKi+0x26>
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
}
    3ce6:	89 2f       	mov	r24, r25
    3ce8:	0f 90       	pop	r0
    3cea:	df 91       	pop	r29
    3cec:	cf 91       	pop	r28
    3cee:	08 95       	ret

00003cf0 <_ZN9frt_queueIjE7butt_inERKj>:
		 *  \b not be used within an interrupt service routine. 
		 *  @param item Reference to the item which is going to be (rudely) put into 
		 *              the front of the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool butt_in (const data_type& item)
    3cf0:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToFront (handle, &item, ticks_to_wait)));
    3cf2:	fc 01       	movw	r30, r24
    3cf4:	26 81       	ldd	r18, Z+6	; 0x06
    3cf6:	37 81       	ldd	r19, Z+7	; 0x07
    3cf8:	40 85       	ldd	r20, Z+8	; 0x08
    3cfa:	51 85       	ldd	r21, Z+9	; 0x09
    3cfc:	01 e0       	ldi	r16, 0x01	; 1
    3cfe:	84 81       	ldd	r24, Z+4	; 0x04
    3d00:	95 81       	ldd	r25, Z+5	; 0x05
    3d02:	0e 94 2c 0c 	call	0x1858	; 0x1858 <xQueueGenericSend>
    3d06:	91 e0       	ldi	r25, 0x01	; 1
    3d08:	81 11       	cpse	r24, r1
    3d0a:	01 c0       	rjmp	.+2      	; 0x3d0e <_ZN9frt_queueIjE7butt_inERKj+0x1e>
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
		}
    3d0e:	89 2f       	mov	r24, r25
    3d10:	0f 91       	pop	r16
    3d12:	08 95       	ret

00003d14 <_ZN9frt_queueIjE3putERKj>:
		 *  an item into the front of the queue so it will be retreived first, use 
		 *  \c butt_in() instead. This method must \b not be used within an ISR.
		 *  @param item Reference to the item which is going to be put into the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool put (const data_type& item)
    3d14:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToBack (handle, &item, ticks_to_wait)));
    3d16:	fc 01       	movw	r30, r24
    3d18:	26 81       	ldd	r18, Z+6	; 0x06
    3d1a:	37 81       	ldd	r19, Z+7	; 0x07
    3d1c:	40 85       	ldd	r20, Z+8	; 0x08
    3d1e:	51 85       	ldd	r21, Z+9	; 0x09
    3d20:	00 e0       	ldi	r16, 0x00	; 0
    3d22:	84 81       	ldd	r24, Z+4	; 0x04
    3d24:	95 81       	ldd	r25, Z+5	; 0x05
    3d26:	0e 94 2c 0c 	call	0x1858	; 0x1858 <xQueueGenericSend>
    3d2a:	91 e0       	ldi	r25, 0x01	; 1
    3d2c:	81 11       	cpse	r24, r1
    3d2e:	01 c0       	rjmp	.+2      	; 0x3d32 <_ZN9frt_queueIjE3putERKj+0x1e>
    3d30:	90 e0       	ldi	r25, 0x00	; 0
		}
    3d32:	89 2f       	mov	r24, r25
    3d34:	0f 91       	pop	r16
    3d36:	08 95       	ret

00003d38 <_ZN9frt_queueIiE7butt_inERKi>:
		 *  \b not be used within an interrupt service routine. 
		 *  @param item Reference to the item which is going to be (rudely) put into 
		 *              the front of the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool butt_in (const data_type& item)
    3d38:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToFront (handle, &item, ticks_to_wait)));
    3d3a:	fc 01       	movw	r30, r24
    3d3c:	26 81       	ldd	r18, Z+6	; 0x06
    3d3e:	37 81       	ldd	r19, Z+7	; 0x07
    3d40:	40 85       	ldd	r20, Z+8	; 0x08
    3d42:	51 85       	ldd	r21, Z+9	; 0x09
    3d44:	01 e0       	ldi	r16, 0x01	; 1
    3d46:	84 81       	ldd	r24, Z+4	; 0x04
    3d48:	95 81       	ldd	r25, Z+5	; 0x05
    3d4a:	0e 94 2c 0c 	call	0x1858	; 0x1858 <xQueueGenericSend>
    3d4e:	91 e0       	ldi	r25, 0x01	; 1
    3d50:	81 11       	cpse	r24, r1
    3d52:	01 c0       	rjmp	.+2      	; 0x3d56 <_ZN9frt_queueIiE7butt_inERKi+0x1e>
    3d54:	90 e0       	ldi	r25, 0x00	; 0
		}
    3d56:	89 2f       	mov	r24, r25
    3d58:	0f 91       	pop	r16
    3d5a:	08 95       	ret

00003d5c <_ZN9frt_queueIiE3putERKi>:
		 *  an item into the front of the queue so it will be retreived first, use 
		 *  \c butt_in() instead. This method must \b not be used within an ISR.
		 *  @param item Reference to the item which is going to be put into the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool put (const data_type& item)
    3d5c:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToBack (handle, &item, ticks_to_wait)));
    3d5e:	fc 01       	movw	r30, r24
    3d60:	26 81       	ldd	r18, Z+6	; 0x06
    3d62:	37 81       	ldd	r19, Z+7	; 0x07
    3d64:	40 85       	ldd	r20, Z+8	; 0x08
    3d66:	51 85       	ldd	r21, Z+9	; 0x09
    3d68:	00 e0       	ldi	r16, 0x00	; 0
    3d6a:	84 81       	ldd	r24, Z+4	; 0x04
    3d6c:	95 81       	ldd	r25, Z+5	; 0x05
    3d6e:	0e 94 2c 0c 	call	0x1858	; 0x1858 <xQueueGenericSend>
    3d72:	91 e0       	ldi	r25, 0x01	; 1
    3d74:	81 11       	cpse	r24, r1
    3d76:	01 c0       	rjmp	.+2      	; 0x3d7a <_ZN9frt_queueIiE3putERKi+0x1e>
    3d78:	90 e0       	ldi	r25, 0x00	; 0
		}
    3d7a:	89 2f       	mov	r24, r25
    3d7c:	0f 91       	pop	r16
    3d7e:	08 95       	ret

00003d80 <_Z8CCPWritePVhh>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    3d80:	0f 93       	push	r16
    3d82:	cf 93       	push	r28
    3d84:	df 93       	push	r29
    3d86:	1f 92       	push	r1
    3d88:	cd b7       	in	r28, 0x3d	; 61
    3d8a:	de b7       	in	r29, 0x3e	; 62
	#if defined __GNUC__
	uint8_t volatile saved_sreg = SREG;
    3d8c:	2f b7       	in	r18, 0x3f	; 63
    3d8e:	29 83       	std	Y+1, r18	; 0x01
	cli();
    3d90:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
	#ifdef RAMPZ
	RAMPZ = 0;
    3d92:	1b be       	out	0x3b, r1	; 59
	"out   %3, r16"	      "\n\t"
	"st     Z,  %1"       "\n\t"
	:
	: "r" (tmpAddr), "r" (value), "M" (0xD8), "i" (&CCP)
	: "r16", "r30", "r31"
	);
    3d94:	fc 01       	movw	r30, r24
    3d96:	08 ed       	ldi	r16, 0xD8	; 216
    3d98:	04 bf       	out	0x34, r16	; 52
    3d9a:	60 83       	st	Z, r22

	SREG = saved_sreg;
    3d9c:	89 81       	ldd	r24, Y+1	; 0x01
    3d9e:	8f bf       	out	0x3f, r24	; 63
	#endif
}
    3da0:	0f 90       	pop	r0
    3da2:	df 91       	pop	r29
    3da4:	cf 91       	pop	r28
    3da6:	0f 91       	pop	r16
    3da8:	08 95       	ret

00003daa <main>:
 *  reset.
 *  @return This is a real-time microcontroller program which doesn't return. Ever.
 */

int main (void)
{
    3daa:	ef 92       	push	r14
    3dac:	ff 92       	push	r15
    3dae:	0f 93       	push	r16
    3db0:	1f 93       	push	r17
    3db2:	cf 93       	push	r28
    3db4:	df 93       	push	r29
    3db6:	cd b7       	in	r28, 0x3d	; 61
    3db8:	de b7       	in	r29, 0x3e	; 62
    3dba:	ef 97       	sbiw	r28, 0x3f	; 63
    3dbc:	cd bf       	out	0x3d, r28	; 61
    3dbe:	de bf       	out	0x3e, r29	; 62
	cli();
    3dc0:	f8 94       	cli
	// Configure the system clock
	{	
		// Enable the 32MHz internal RC oscillator and the external 32KHz oscillator
		OSC.CTRL |= (1 << OSC_RC32MEN_bp);
    3dc2:	e0 e5       	ldi	r30, 0x50	; 80
    3dc4:	f0 e0       	ldi	r31, 0x00	; 0
    3dc6:	80 81       	ld	r24, Z
    3dc8:	82 60       	ori	r24, 0x02	; 2
    3dca:	80 83       	st	Z, r24
		do {} while((OSC.STATUS & (1 << OSC_RC32MRDY_bp)) != (1 << OSC_RC32MRDY_bp));
    3dcc:	81 81       	ldd	r24, Z+1	; 0x01
    3dce:	81 ff       	sbrs	r24, 1
    3dd0:	fd cf       	rjmp	.-6      	; 0x3dcc <main+0x22>
		// Enable the DFLL auto-calibration
//		DFLLRC32M.CTRL = (1 << DFLL_ENABLE_bp);
//		DFLLRC2M.CTRL = (1 << DFLL_ENABLE_bp);

		// Select the clock
		CCPWrite(&(CLK.CTRL),((CLK.CTRL & ~CLK_SCLKSEL_gm) | (1 << CLK_SCLKSEL0_bp)));
    3dd2:	60 91 40 00 	lds	r22, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    3dd6:	68 7f       	andi	r22, 0xF8	; 248
    3dd8:	61 60       	ori	r22, 0x01	; 1
    3dda:	80 e4       	ldi	r24, 0x40	; 64
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <_Z8CCPWritePVhh>
		// Enable the RTC as an external oscillator
		//CLK.RTCCTRL = (CLK_RTCSRC_TOSC_gc | CLK_RTCEN_bm);
		// CCPWrite(&(CLK.RTCCTRL),(CLK_RTCSRC_TOSC_gc | CLK_RTCEN_bm));
		
		// Disable the 2MHz internal RC oscillator
		OSC.CTRL &= ~(1 << OSC_RC2MEN_bp);
    3de2:	e0 e5       	ldi	r30, 0x50	; 80
    3de4:	f0 e0       	ldi	r31, 0x00	; 0
    3de6:	80 81       	ld	r24, Z
    3de8:	8e 7f       	andi	r24, 0xFE	; 254
    3dea:	80 83       	st	Z, r24
	}
	
	// Disable the watchdog timer unless it's needed later. This is important because
	// sometimes the watchdog timer may have been left on...and it tends to stay on	 
	wdt_disable ();
    3dec:	9d ef       	ldi	r25, 0xFD	; 253
    3dee:	88 ed       	ldi	r24, 0xD8	; 216
    3df0:	08 b6       	in	r0, 0x38	; 56
    3df2:	18 be       	out	0x38, r1	; 56
    3df4:	84 bf       	out	0x34, r24	; 52
    3df6:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    3dfa:	08 be       	out	0x38, r0	; 56

	// Configure a serial port which can be used by a task to print debugging infor-
	// mation, or to allow user interaction, or for whatever use is appropriate.  The
	// serial port will be used by the user interface task after setup is complete and
	// the task scheduler has been started by the function vTaskStartScheduler()
	rs232 ser_dev(0,&USARTE0); // Create a serial device on USART E0
    3dfc:	40 ea       	ldi	r20, 0xA0	; 160
    3dfe:	5a e0       	ldi	r21, 0x0A	; 10
    3e00:	60 e0       	ldi	r22, 0x00	; 0
    3e02:	70 e0       	ldi	r23, 0x00	; 0
    3e04:	ce 01       	movw	r24, r28
    3e06:	01 96       	adiw	r24, 0x01	; 1
    3e08:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <_ZN5rs232C1EjP12USART_struct>
	ser_dev << clrscr << "FreeRTOS Xmega Testing Program" << endl << endl;
    3e0c:	67 e0       	ldi	r22, 0x07	; 7
    3e0e:	ce 01       	movw	r24, r28
    3e10:	01 96       	adiw	r24, 0x01	; 1
    3e12:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    3e16:	8c 01       	movw	r16, r24
    3e18:	6b e6       	ldi	r22, 0x6B	; 107
    3e1a:	70 e2       	ldi	r23, 0x20	; 32
    3e1c:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN8emstream4putsEPKc>
    3e20:	66 e0       	ldi	r22, 0x06	; 6
    3e22:	c8 01       	movw	r24, r16
    3e24:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
    3e28:	66 e0       	ldi	r22, 0x06	; 6
    3e2a:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN8emstreamlsE15ser_manipulator>
	
	I2CMaster i2c (&TWIE, 62000);
    3e2e:	20 e3       	ldi	r18, 0x30	; 48
    3e30:	32 ef       	ldi	r19, 0xF2	; 242
    3e32:	40 e0       	ldi	r20, 0x00	; 0
    3e34:	50 e0       	ldi	r21, 0x00	; 0
    3e36:	60 ea       	ldi	r22, 0xA0	; 160
    3e38:	74 e0       	ldi	r23, 0x04	; 4
    3e3a:	ce 01       	movw	r24, r28
    3e3c:	4e 96       	adiw	r24, 0x1e	; 30
    3e3e:	0e 94 ba 03 	call	0x774	; 0x774 <_ZN9I2CMasterC1EP10TWI_structm>
	
	MB1202 mb1202 (&i2c);
    3e42:	be 01       	movw	r22, r28
    3e44:	62 5e       	subi	r22, 0xE2	; 226
    3e46:	7f 4f       	sbci	r23, 0xFF	; 255
    3e48:	ce 01       	movw	r24, r28
    3e4a:	c3 96       	adiw	r24, 0x33	; 51
    3e4c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <_ZN6MB1202C1EP9I2CMaster>
	
	//hi = i2c.is_ready(85);
	
	// The user interface is at low priority; it could have been run in the idle task
	// but it is desired to exercise the RTOS more thoroughly in this test program
	new task_user ("UserInt", task_priority (0), 128, &ser_dev);
    3e50:	82 e1       	ldi	r24, 0x12	; 18
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	0e 94 d6 17 	call	0x2fac	; 0x2fac <_Znwj>
    3e58:	8e 01       	movw	r16, r28
    3e5a:	0f 5f       	subi	r16, 0xFF	; 255
    3e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e5e:	20 e8       	ldi	r18, 0x80	; 128
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	40 e0       	ldi	r20, 0x00	; 0
    3e64:	6a e8       	ldi	r22, 0x8A	; 138
    3e66:	70 e2       	ldi	r23, 0x20	; 32
    3e68:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN9task_userC1EPKchjP8emstream>
	
	new task_sonar ("Sonar", task_priority (2), 128, &ser_dev, &mb1202);
    3e6c:	88 e1       	ldi	r24, 0x18	; 24
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	0e 94 d6 17 	call	0x2fac	; 0x2fac <_Znwj>
    3e74:	9e 01       	movw	r18, r28
    3e76:	2d 5c       	subi	r18, 0xCD	; 205
    3e78:	3f 4f       	sbci	r19, 0xFF	; 255
    3e7a:	79 01       	movw	r14, r18
    3e7c:	20 e8       	ldi	r18, 0x80	; 128
    3e7e:	30 e0       	ldi	r19, 0x00	; 0
    3e80:	42 e0       	ldi	r20, 0x02	; 2
    3e82:	62 e9       	ldi	r22, 0x92	; 146
    3e84:	70 e2       	ldi	r23, 0x20	; 32
    3e86:	0e 94 8b 05 	call	0xb16	; 0xb16 <_ZN10task_sonarC1EPKchjP8emstreamP6MB1202>
	
	// Enable high level interrupts and global interrupts
	PMIC_CTRL = (1 << PMIC_HILVLEN_bp | 1 << PMIC_MEDLVLEN_bp | 1 << PMIC_LOLVLEN_bp);
    3e8a:	87 e0       	ldi	r24, 0x07	; 7
    3e8c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    3e90:	78 94       	sei
	
	// Here's where the RTOS scheduler is started up. It should never exit as long as
	// power is on and the microcontroller isn't rebooted
	vTaskStartScheduler ();
    3e92:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <vTaskStartScheduler>
}
    3e96:	80 e0       	ldi	r24, 0x00	; 0
    3e98:	90 e0       	ldi	r25, 0x00	; 0
    3e9a:	ef 96       	adiw	r28, 0x3f	; 63
    3e9c:	cd bf       	out	0x3d, r28	; 61
    3e9e:	de bf       	out	0x3e, r29	; 62
    3ea0:	df 91       	pop	r29
    3ea2:	cf 91       	pop	r28
    3ea4:	1f 91       	pop	r17
    3ea6:	0f 91       	pop	r16
    3ea8:	ff 90       	pop	r15
    3eaa:	ef 90       	pop	r14
    3eac:	08 95       	ret

00003eae <_GLOBAL__sub_I_counter>:
    3eae:	cf 92       	push	r12
    3eb0:	df 92       	push	r13
    3eb2:	ef 92       	push	r14
    3eb4:	ff 92       	push	r15
    3eb6:	0f 93       	push	r16
    3eb8:	1f 93       	push	r17
    3eba:	cf 93       	push	r28
    3ebc:	df 93       	push	r29

#include "task_user.h"                      // Header for user interface task
#include "task_sonar.h"

volatile int counter;
frt_text_queue print_ser_queue (32, NULL, 10);
    3ebe:	0a e0       	ldi	r16, 0x0A	; 10
    3ec0:	10 e0       	ldi	r17, 0x00	; 0
    3ec2:	20 e0       	ldi	r18, 0x00	; 0
    3ec4:	30 e0       	ldi	r19, 0x00	; 0
    3ec6:	40 e0       	ldi	r20, 0x00	; 0
    3ec8:	50 e0       	ldi	r21, 0x00	; 0
    3eca:	60 e2       	ldi	r22, 0x20	; 32
    3ecc:	70 e0       	ldi	r23, 0x00	; 0
    3ece:	8c e9       	ldi	r24, 0x9C	; 156
    3ed0:	91 e3       	ldi	r25, 0x31	; 49
    3ed2:	0e 94 42 16 	call	0x2c84	; 0x2c84 <_ZN14frt_text_queueC1EjP8emstreamm>

template <class data_type>
frt_base_queue<data_type>::frt_base_queue (emstream* p_ser_dev)
{
	// Save the pointer to a serial devide so it may be used for debugging
	p_serial = p_ser_dev;
    3ed6:	c2 e9       	ldi	r28, 0x92	; 146
    3ed8:	d1 e3       	ldi	r29, 0x31	; 49
    3eda:	1a 82       	std	Y+2, r1	; 0x02
    3edc:	1b 82       	std	Y+3, r1	; 0x03
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    3ede:	8c e9       	ldi	r24, 0x9C	; 156
    3ee0:	90 e2       	ldi	r25, 0x20	; 32
    3ee2:	88 83       	st	Y, r24
    3ee4:	99 83       	std	Y+1, r25	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    3ee6:	40 e0       	ldi	r20, 0x00	; 0
    3ee8:	62 e0       	ldi	r22, 0x02	; 2
    3eea:	8f ef       	ldi	r24, 0xFF	; 255
    3eec:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <xQueueGenericCreate>
    3ef0:	8c 83       	std	Y+4, r24	; 0x04
    3ef2:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    3ef4:	0f 2e       	mov	r0, r31
    3ef6:	fa e0       	ldi	r31, 0x0A	; 10
    3ef8:	cf 2e       	mov	r12, r31
    3efa:	d1 2c       	mov	r13, r1
    3efc:	e1 2c       	mov	r14, r1
    3efe:	f1 2c       	mov	r15, r1
    3f00:	f0 2d       	mov	r31, r0
    3f02:	ce 82       	std	Y+6, r12	; 0x06
    3f04:	df 82       	std	Y+7, r13	; 0x07
    3f06:	e8 86       	std	Y+8, r14	; 0x08
    3f08:	f9 86       	std	Y+9, r15	; 0x09
    3f0a:	c8 e8       	ldi	r28, 0x88	; 136
    3f0c:	d1 e3       	ldi	r29, 0x31	; 49
    3f0e:	1a 82       	std	Y+2, r1	; 0x02
    3f10:	1b 82       	std	Y+3, r1	; 0x03
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    3f12:	00 ec       	ldi	r16, 0xC0	; 192
    3f14:	10 e2       	ldi	r17, 0x20	; 32
    3f16:	08 83       	st	Y, r16
    3f18:	19 83       	std	Y+1, r17	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    3f1a:	40 e0       	ldi	r20, 0x00	; 0
    3f1c:	62 e0       	ldi	r22, 0x02	; 2
    3f1e:	8f ef       	ldi	r24, 0xFF	; 255
    3f20:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <xQueueGenericCreate>
    3f24:	8c 83       	std	Y+4, r24	; 0x04
    3f26:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    3f28:	ce 82       	std	Y+6, r12	; 0x06
    3f2a:	df 82       	std	Y+7, r13	; 0x07
    3f2c:	e8 86       	std	Y+8, r14	; 0x08
    3f2e:	f9 86       	std	Y+9, r15	; 0x09
    3f30:	ce e7       	ldi	r28, 0x7E	; 126
    3f32:	d1 e3       	ldi	r29, 0x31	; 49
    3f34:	1a 82       	std	Y+2, r1	; 0x02
    3f36:	1b 82       	std	Y+3, r1	; 0x03
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    3f38:	08 83       	st	Y, r16
    3f3a:	19 83       	std	Y+1, r17	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    3f3c:	40 e0       	ldi	r20, 0x00	; 0
    3f3e:	62 e0       	ldi	r22, 0x02	; 2
    3f40:	8f ef       	ldi	r24, 0xFF	; 255
    3f42:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <xQueueGenericCreate>
    3f46:	8c 83       	std	Y+4, r24	; 0x04
    3f48:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    3f4a:	ce 82       	std	Y+6, r12	; 0x06
    3f4c:	df 82       	std	Y+7, r13	; 0x07
    3f4e:	e8 86       	std	Y+8, r14	; 0x08
    3f50:	f9 86       	std	Y+9, r15	; 0x09
    3f52:	c4 e7       	ldi	r28, 0x74	; 116
    3f54:	d1 e3       	ldi	r29, 0x31	; 49
    3f56:	1a 82       	std	Y+2, r1	; 0x02
    3f58:	1b 82       	std	Y+3, r1	; 0x03
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    3f5a:	08 83       	st	Y, r16
    3f5c:	19 83       	std	Y+1, r17	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    3f5e:	40 e0       	ldi	r20, 0x00	; 0
    3f60:	62 e0       	ldi	r22, 0x02	; 2
    3f62:	8f ef       	ldi	r24, 0xFF	; 255
    3f64:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <xQueueGenericCreate>
    3f68:	8c 83       	std	Y+4, r24	; 0x04
    3f6a:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    3f6c:	ce 82       	std	Y+6, r12	; 0x06
    3f6e:	df 82       	std	Y+7, r13	; 0x07
    3f70:	e8 86       	std	Y+8, r14	; 0x08
    3f72:	f9 86       	std	Y+9, r15	; 0x09
    3f74:	ca e6       	ldi	r28, 0x6A	; 106
    3f76:	d1 e3       	ldi	r29, 0x31	; 49
    3f78:	1a 82       	std	Y+2, r1	; 0x02
    3f7a:	1b 82       	std	Y+3, r1	; 0x03
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    3f7c:	08 83       	st	Y, r16
    3f7e:	19 83       	std	Y+1, r17	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    3f80:	40 e0       	ldi	r20, 0x00	; 0
    3f82:	62 e0       	ldi	r22, 0x02	; 2
    3f84:	8f ef       	ldi	r24, 0xFF	; 255
    3f86:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <xQueueGenericCreate>
    3f8a:	8c 83       	std	Y+4, r24	; 0x04
    3f8c:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    3f8e:	ce 82       	std	Y+6, r12	; 0x06
    3f90:	df 82       	std	Y+7, r13	; 0x07
    3f92:	e8 86       	std	Y+8, r14	; 0x08
    3f94:	f9 86       	std	Y+9, r15	; 0x09
	sei();
	
	// Here's where the RTOS scheduler is started up. It should never exit as long as
	// power is on and the microcontroller isn't rebooted
	vTaskStartScheduler ();
}
    3f96:	df 91       	pop	r29
    3f98:	cf 91       	pop	r28
    3f9a:	1f 91       	pop	r17
    3f9c:	0f 91       	pop	r16
    3f9e:	ff 90       	pop	r15
    3fa0:	ef 90       	pop	r14
    3fa2:	df 90       	pop	r13
    3fa4:	cf 90       	pop	r12
    3fa6:	08 95       	ret

00003fa8 <__mulsi3>:
    3fa8:	db 01       	movw	r26, r22
    3faa:	8f 93       	push	r24
    3fac:	9f 93       	push	r25
    3fae:	0e 94 2e 20 	call	0x405c	; 0x405c <__muluhisi3>
    3fb2:	bf 91       	pop	r27
    3fb4:	af 91       	pop	r26
    3fb6:	a2 9f       	mul	r26, r18
    3fb8:	80 0d       	add	r24, r0
    3fba:	91 1d       	adc	r25, r1
    3fbc:	a3 9f       	mul	r26, r19
    3fbe:	90 0d       	add	r25, r0
    3fc0:	b2 9f       	mul	r27, r18
    3fc2:	90 0d       	add	r25, r0
    3fc4:	11 24       	eor	r1, r1
    3fc6:	08 95       	ret

00003fc8 <__udivmodsi4>:
    3fc8:	a1 e2       	ldi	r26, 0x21	; 33
    3fca:	1a 2e       	mov	r1, r26
    3fcc:	aa 1b       	sub	r26, r26
    3fce:	bb 1b       	sub	r27, r27
    3fd0:	fd 01       	movw	r30, r26
    3fd2:	0d c0       	rjmp	.+26     	; 0x3fee <__udivmodsi4_ep>

00003fd4 <__udivmodsi4_loop>:
    3fd4:	aa 1f       	adc	r26, r26
    3fd6:	bb 1f       	adc	r27, r27
    3fd8:	ee 1f       	adc	r30, r30
    3fda:	ff 1f       	adc	r31, r31
    3fdc:	a2 17       	cp	r26, r18
    3fde:	b3 07       	cpc	r27, r19
    3fe0:	e4 07       	cpc	r30, r20
    3fe2:	f5 07       	cpc	r31, r21
    3fe4:	20 f0       	brcs	.+8      	; 0x3fee <__udivmodsi4_ep>
    3fe6:	a2 1b       	sub	r26, r18
    3fe8:	b3 0b       	sbc	r27, r19
    3fea:	e4 0b       	sbc	r30, r20
    3fec:	f5 0b       	sbc	r31, r21

00003fee <__udivmodsi4_ep>:
    3fee:	66 1f       	adc	r22, r22
    3ff0:	77 1f       	adc	r23, r23
    3ff2:	88 1f       	adc	r24, r24
    3ff4:	99 1f       	adc	r25, r25
    3ff6:	1a 94       	dec	r1
    3ff8:	69 f7       	brne	.-38     	; 0x3fd4 <__udivmodsi4_loop>
    3ffa:	60 95       	com	r22
    3ffc:	70 95       	com	r23
    3ffe:	80 95       	com	r24
    4000:	90 95       	com	r25
    4002:	9b 01       	movw	r18, r22
    4004:	ac 01       	movw	r20, r24
    4006:	bd 01       	movw	r22, r26
    4008:	cf 01       	movw	r24, r30
    400a:	08 95       	ret

0000400c <__divmodsi4>:
    400c:	05 2e       	mov	r0, r21
    400e:	97 fb       	bst	r25, 7
    4010:	1e f4       	brtc	.+6      	; 0x4018 <__divmodsi4+0xc>
    4012:	00 94       	com	r0
    4014:	0e 94 1d 20 	call	0x403a	; 0x403a <__negsi2>
    4018:	57 fd       	sbrc	r21, 7
    401a:	07 d0       	rcall	.+14     	; 0x402a <__divmodsi4_neg2>
    401c:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <__udivmodsi4>
    4020:	07 fc       	sbrc	r0, 7
    4022:	03 d0       	rcall	.+6      	; 0x402a <__divmodsi4_neg2>
    4024:	4e f4       	brtc	.+18     	; 0x4038 <__divmodsi4_exit>
    4026:	0c 94 1d 20 	jmp	0x403a	; 0x403a <__negsi2>

0000402a <__divmodsi4_neg2>:
    402a:	50 95       	com	r21
    402c:	40 95       	com	r20
    402e:	30 95       	com	r19
    4030:	21 95       	neg	r18
    4032:	3f 4f       	sbci	r19, 0xFF	; 255
    4034:	4f 4f       	sbci	r20, 0xFF	; 255
    4036:	5f 4f       	sbci	r21, 0xFF	; 255

00004038 <__divmodsi4_exit>:
    4038:	08 95       	ret

0000403a <__negsi2>:
    403a:	90 95       	com	r25
    403c:	80 95       	com	r24
    403e:	70 95       	com	r23
    4040:	61 95       	neg	r22
    4042:	7f 4f       	sbci	r23, 0xFF	; 255
    4044:	8f 4f       	sbci	r24, 0xFF	; 255
    4046:	9f 4f       	sbci	r25, 0xFF	; 255
    4048:	08 95       	ret

0000404a <__tablejump2__>:
    404a:	ee 0f       	add	r30, r30
    404c:	ff 1f       	adc	r31, r31
    404e:	88 1f       	adc	r24, r24
    4050:	8b bf       	out	0x3b, r24	; 59
    4052:	07 90       	elpm	r0, Z+
    4054:	f6 91       	elpm	r31, Z
    4056:	e0 2d       	mov	r30, r0
    4058:	1b be       	out	0x3b, r1	; 59
    405a:	19 94       	eijmp

0000405c <__muluhisi3>:
    405c:	0e 94 39 20 	call	0x4072	; 0x4072 <__umulhisi3>
    4060:	a5 9f       	mul	r26, r21
    4062:	90 0d       	add	r25, r0
    4064:	b4 9f       	mul	r27, r20
    4066:	90 0d       	add	r25, r0
    4068:	a4 9f       	mul	r26, r20
    406a:	80 0d       	add	r24, r0
    406c:	91 1d       	adc	r25, r1
    406e:	11 24       	eor	r1, r1
    4070:	08 95       	ret

00004072 <__umulhisi3>:
    4072:	a2 9f       	mul	r26, r18
    4074:	b0 01       	movw	r22, r0
    4076:	b3 9f       	mul	r27, r19
    4078:	c0 01       	movw	r24, r0
    407a:	a3 9f       	mul	r26, r19
    407c:	70 0d       	add	r23, r0
    407e:	81 1d       	adc	r24, r1
    4080:	11 24       	eor	r1, r1
    4082:	91 1d       	adc	r25, r1
    4084:	b2 9f       	mul	r27, r18
    4086:	70 0d       	add	r23, r0
    4088:	81 1d       	adc	r24, r1
    408a:	11 24       	eor	r1, r1
    408c:	91 1d       	adc	r25, r1
    408e:	08 95       	ret

00004090 <memcpy>:
    4090:	fb 01       	movw	r30, r22
    4092:	dc 01       	movw	r26, r24
    4094:	02 c0       	rjmp	.+4      	; 0x409a <memcpy+0xa>
    4096:	01 90       	ld	r0, Z+
    4098:	0d 92       	st	X+, r0
    409a:	41 50       	subi	r20, 0x01	; 1
    409c:	50 40       	sbci	r21, 0x00	; 0
    409e:	d8 f7       	brcc	.-10     	; 0x4096 <memcpy+0x6>
    40a0:	08 95       	ret

000040a2 <memset>:
    40a2:	dc 01       	movw	r26, r24
    40a4:	01 c0       	rjmp	.+2      	; 0x40a8 <memset+0x6>
    40a6:	6d 93       	st	X+, r22
    40a8:	41 50       	subi	r20, 0x01	; 1
    40aa:	50 40       	sbci	r21, 0x00	; 0
    40ac:	e0 f7       	brcc	.-8      	; 0x40a6 <memset+0x4>
    40ae:	08 95       	ret

000040b0 <strncpy>:
    40b0:	fb 01       	movw	r30, r22
    40b2:	dc 01       	movw	r26, r24
    40b4:	41 50       	subi	r20, 0x01	; 1
    40b6:	50 40       	sbci	r21, 0x00	; 0
    40b8:	48 f0       	brcs	.+18     	; 0x40cc <strncpy+0x1c>
    40ba:	01 90       	ld	r0, Z+
    40bc:	0d 92       	st	X+, r0
    40be:	00 20       	and	r0, r0
    40c0:	c9 f7       	brne	.-14     	; 0x40b4 <strncpy+0x4>
    40c2:	01 c0       	rjmp	.+2      	; 0x40c6 <strncpy+0x16>
    40c4:	1d 92       	st	X+, r1
    40c6:	41 50       	subi	r20, 0x01	; 1
    40c8:	50 40       	sbci	r21, 0x00	; 0
    40ca:	e0 f7       	brcc	.-8      	; 0x40c4 <strncpy+0x14>
    40cc:	08 95       	ret

000040ce <ultoa>:
    40ce:	25 32       	cpi	r18, 0x25	; 37
    40d0:	31 05       	cpc	r19, r1
    40d2:	20 f4       	brcc	.+8      	; 0x40dc <ultoa+0xe>
    40d4:	22 30       	cpi	r18, 0x02	; 2
    40d6:	10 f0       	brcs	.+4      	; 0x40dc <ultoa+0xe>
    40d8:	0c 94 72 20 	jmp	0x40e4	; 0x40e4 <__ultoa_ncheck>
    40dc:	fa 01       	movw	r30, r20
    40de:	10 82       	st	Z, r1
    40e0:	ca 01       	movw	r24, r20
    40e2:	08 95       	ret

000040e4 <__ultoa_ncheck>:
    40e4:	bb 27       	eor	r27, r27

000040e6 <__ultoa_common>:
    40e6:	fa 01       	movw	r30, r20
    40e8:	a6 2f       	mov	r26, r22
    40ea:	62 17       	cp	r22, r18
    40ec:	71 05       	cpc	r23, r1
    40ee:	81 05       	cpc	r24, r1
    40f0:	91 05       	cpc	r25, r1
    40f2:	33 0b       	sbc	r19, r19
    40f4:	30 fb       	bst	r19, 0
    40f6:	66 f0       	brts	.+24     	; 0x4110 <__ultoa_common+0x2a>
    40f8:	aa 27       	eor	r26, r26
    40fa:	66 0f       	add	r22, r22
    40fc:	77 1f       	adc	r23, r23
    40fe:	88 1f       	adc	r24, r24
    4100:	99 1f       	adc	r25, r25
    4102:	aa 1f       	adc	r26, r26
    4104:	a2 17       	cp	r26, r18
    4106:	10 f0       	brcs	.+4      	; 0x410c <__ultoa_common+0x26>
    4108:	a2 1b       	sub	r26, r18
    410a:	63 95       	inc	r22
    410c:	38 50       	subi	r19, 0x08	; 8
    410e:	a9 f7       	brne	.-22     	; 0x40fa <__ultoa_common+0x14>
    4110:	a0 5d       	subi	r26, 0xD0	; 208
    4112:	aa 33       	cpi	r26, 0x3A	; 58
    4114:	08 f0       	brcs	.+2      	; 0x4118 <__ultoa_common+0x32>
    4116:	a9 5d       	subi	r26, 0xD9	; 217
    4118:	a1 93       	st	Z+, r26
    411a:	36 f7       	brtc	.-52     	; 0x40e8 <__ultoa_common+0x2>
    411c:	b1 11       	cpse	r27, r1
    411e:	b1 93       	st	Z+, r27
    4120:	10 82       	st	Z, r1
    4122:	ca 01       	movw	r24, r20
    4124:	0c 94 b9 20 	jmp	0x4172	; 0x4172 <strrev>

00004128 <utoa>:
    4128:	45 32       	cpi	r20, 0x25	; 37
    412a:	51 05       	cpc	r21, r1
    412c:	20 f4       	brcc	.+8      	; 0x4136 <utoa+0xe>
    412e:	42 30       	cpi	r20, 0x02	; 2
    4130:	10 f0       	brcs	.+4      	; 0x4136 <utoa+0xe>
    4132:	0c 94 9f 20 	jmp	0x413e	; 0x413e <__utoa_ncheck>
    4136:	fb 01       	movw	r30, r22
    4138:	10 82       	st	Z, r1
    413a:	cb 01       	movw	r24, r22
    413c:	08 95       	ret

0000413e <__utoa_ncheck>:
    413e:	bb 27       	eor	r27, r27

00004140 <__utoa_common>:
    4140:	fb 01       	movw	r30, r22
    4142:	55 27       	eor	r21, r21
    4144:	aa 27       	eor	r26, r26
    4146:	88 0f       	add	r24, r24
    4148:	99 1f       	adc	r25, r25
    414a:	aa 1f       	adc	r26, r26
    414c:	a4 17       	cp	r26, r20
    414e:	10 f0       	brcs	.+4      	; 0x4154 <__utoa_common+0x14>
    4150:	a4 1b       	sub	r26, r20
    4152:	83 95       	inc	r24
    4154:	50 51       	subi	r21, 0x10	; 16
    4156:	b9 f7       	brne	.-18     	; 0x4146 <__utoa_common+0x6>
    4158:	a0 5d       	subi	r26, 0xD0	; 208
    415a:	aa 33       	cpi	r26, 0x3A	; 58
    415c:	08 f0       	brcs	.+2      	; 0x4160 <__utoa_common+0x20>
    415e:	a9 5d       	subi	r26, 0xD9	; 217
    4160:	a1 93       	st	Z+, r26
    4162:	00 97       	sbiw	r24, 0x00	; 0
    4164:	79 f7       	brne	.-34     	; 0x4144 <__utoa_common+0x4>
    4166:	b1 11       	cpse	r27, r1
    4168:	b1 93       	st	Z+, r27
    416a:	11 92       	st	Z+, r1
    416c:	cb 01       	movw	r24, r22
    416e:	0c 94 b9 20 	jmp	0x4172	; 0x4172 <strrev>

00004172 <strrev>:
    4172:	dc 01       	movw	r26, r24
    4174:	fc 01       	movw	r30, r24
    4176:	67 2f       	mov	r22, r23
    4178:	71 91       	ld	r23, Z+
    417a:	77 23       	and	r23, r23
    417c:	e1 f7       	brne	.-8      	; 0x4176 <strrev+0x4>
    417e:	32 97       	sbiw	r30, 0x02	; 2
    4180:	04 c0       	rjmp	.+8      	; 0x418a <strrev+0x18>
    4182:	7c 91       	ld	r23, X
    4184:	6d 93       	st	X+, r22
    4186:	70 83       	st	Z, r23
    4188:	62 91       	ld	r22, -Z
    418a:	ae 17       	cp	r26, r30
    418c:	bf 07       	cpc	r27, r31
    418e:	c8 f3       	brcs	.-14     	; 0x4182 <strrev+0x10>
    4190:	08 95       	ret

00004192 <_exit>:
    4192:	f8 94       	cli

00004194 <__stop_program>:
    4194:	ff cf       	rjmp	.-2      	; 0x4194 <__stop_program>
