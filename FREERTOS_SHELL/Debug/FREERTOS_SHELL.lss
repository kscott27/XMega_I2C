
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ef4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000236  00802000  00004ef4  00004f88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000010ce  00802236  00802236  000051be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000051be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000051f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a58  00000000  00000000  00005230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001bc59  00000000  00000000  00005c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007189  00000000  00000000  000218e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006702  00000000  00000000  00028a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ef4  00000000  00000000  0002f16c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007019  00000000  00000000  00031060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009bec  00000000  00000000  00038079  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000958  00000000  00000000  00041c65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 03 	jmp	0x672	; 0x672 <__ctors_end>
       4:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
       8:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
       c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      10:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      14:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      18:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      1c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      20:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      24:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      28:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      2c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      30:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      34:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      38:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      3c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      40:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      44:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      48:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      4c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      50:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      54:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      58:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__vector_22>
      5c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      60:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      64:	0c 94 87 21 	jmp	0x430e	; 0x430e <__vector_25>
      68:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      6c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      70:	0c 94 e5 21 	jmp	0x43ca	; 0x43ca <__vector_28>
      74:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      78:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      7c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      80:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      84:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      88:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      8c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      90:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      94:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      98:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      9c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      a0:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      a4:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      a8:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      ac:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      b0:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      b4:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      b8:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      bc:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      c0:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      c4:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      c8:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      cc:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      d0:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      d4:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      d8:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      dc:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      e0:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      e4:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      e8:	0c 94 ff 22 	jmp	0x45fe	; 0x45fe <__vector_58>
      ec:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      f0:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      f4:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      f8:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
      fc:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     100:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     104:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     108:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     10c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     110:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     114:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     118:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     11c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     120:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     124:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     128:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     12c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     130:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     134:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     138:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     13c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     140:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     144:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     148:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     14c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     150:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     154:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     158:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     15c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     160:	0c 94 43 22 	jmp	0x4486	; 0x4486 <__vector_88>
     164:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     168:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     16c:	0c 94 a1 22 	jmp	0x4542	; 0x4542 <__vector_91>
     170:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     174:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     178:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     17c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     180:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     184:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     188:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     18c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     190:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     194:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     198:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     19c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1a0:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1a4:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1a8:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1ac:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1b0:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1b4:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1b8:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1bc:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1c0:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1c4:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1c8:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1cc:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1d0:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1d4:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1d8:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1dc:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1e0:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1e4:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1e8:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1ec:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1f0:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1f4:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1f8:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__bad_interrupt>
     1fc:	73 1f       	adc	r23, r19
     1fe:	76 1f       	adc	r23, r22
     200:	79 1f       	adc	r23, r25
     202:	7c 1f       	adc	r23, r28
     204:	7f 1f       	adc	r23, r31
     206:	82 1f       	adc	r24, r18
     208:	84 1f       	adc	r24, r20
     20a:	95 1f       	adc	r25, r21
     20c:	9d 1f       	adc	r25, r29
     20e:	a7 1f       	adc	r26, r23
     210:	a5 1f       	adc	r26, r21

00000212 <__trampolines_start>:
     212:	0c 94 7a 24 	jmp	0x48f4	; 0x48f4 <_ZN9frt_queueIjE7ISR_getEv>
     216:	0c 94 1b 25 	jmp	0x4a36	; 0x4a36 <_ZN9frt_queueIjE7butt_inERKj>
     21a:	0c 94 95 23 	jmp	0x472a	; 0x472a <_ZN9frt_queueIjE12num_items_inEv>
     21e:	0c 94 c7 1c 	jmp	0x398e	; 0x398e <_ZN14frt_text_queue7putcharEc>
     222:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__cxa_pure_virtual>
     226:	0c 94 2d 25 	jmp	0x4a5a	; 0x4a5a <_ZN9frt_queueIjE3putERKj>
     22a:	0c 94 df 0b 	jmp	0x17be	; 0x17be <_ZN11task_sensor3runEv>
     22e:	0c 94 27 24 	jmp	0x484e	; 0x484e <_ZN9frt_queueIiE10get_a_copyEv>
     232:	0c 94 7c 1f 	jmp	0x3ef8	; 0x3ef8 <_ZN8emstreamlsE15ser_manipulator+0x30>
     236:	0c 94 18 1f 	jmp	0x3e30	; 0x3e30 <_ZN8emstream7getcharEv>
     23a:	0c 94 0e 09 	jmp	0x121c	; 0x121c <_ZN9frt_queueIhE7ISR_putERKh>
     23e:	0c 94 5f 05 	jmp	0xabe	; 0xabe <_ZN9I2CMaster10StartState11serialDebugEv>
     242:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <_ZN7MMA845113ActiveCommand11writePacketER6Packet>
     246:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <_ZN9frt_queueIhE13ISR_not_emptyEv>
     24a:	0c 94 bb 24 	jmp	0x4976	; 0x4976 <_ZN9frt_queueIjE11ISR_butt_inERKj>
     24e:	0c 94 69 24 	jmp	0x48d2	; 0x48d2 <_ZN9frt_queueIjE7ISR_getEPj>
     252:	0c 94 a3 24 	jmp	0x4946	; 0x4946 <_ZN9frt_queueIiE7ISR_getEv>
     256:	0c 94 41 08 	jmp	0x1082	; 0x1082 <_ZN6MB120212RangeCommand11writePacketER6Packet>
     25a:	0c 94 c3 23 	jmp	0x4786	; 0x4786 <_ZN9frt_queueIiE8is_emptyEv>
     25e:	0c 94 42 24 	jmp	0x4884	; 0x4884 <_ZN9frt_queueIiE3getEPi>
     262:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <_ZN9I2CMaster8Receiver17PacketStatusState7executeER6Packet>
     266:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <_ZN9frt_queueIhE3getEPh>
     26a:	0c 94 86 08 	jmp	0x110c	; 0x110c <_ZN9frt_queueIhE10get_a_copyERh>
     26e:	0c 94 74 05 	jmp	0xae8	; 0xae8 <_ZN9I2CMaster11Transmitter11StatusState11serialDebugEv>
     272:	0c 94 03 25 	jmp	0x4a06	; 0x4a06 <_ZN9frt_queueIiE7ISR_putERKi>
     276:	0c 94 92 05 	jmp	0xb24	; 0xb24 <_ZN9I2CMaster8Receiver11StatusState11serialDebugEv>
     27a:	0c 94 9d 1f 	jmp	0x3f3a	; 0x3f3a <_ZN8emstreamlsE15ser_manipulator+0x72>
     27e:	0c 94 51 25 	jmp	0x4aa2	; 0x4aa2 <_ZN9frt_queueIiE3putERKi>
     282:	0c 94 4e 08 	jmp	0x109c	; 0x109c <_ZN9frt_queueIhE16ISR_num_items_inEv>
     286:	0c 94 6f 04 	jmp	0x8de	; 0x8de <_ZN9I2CMaster11Transmitter13ExchangeState7executeER6Packet>
     28a:	0c 94 cd 23 	jmp	0x479a	; 0x479a <_ZN9frt_queueIjE10get_a_copyERj>
     28e:	0c 94 9c 23 	jmp	0x4738	; 0x4738 <_ZN9frt_queueIjE9not_emptyEv>
     292:	0c 94 9f 04 	jmp	0x93e	; 0x93e <_ZN9I2CMaster8Receiver13ExchangeState7executeER6Packet>
     296:	0c 94 95 1f 	jmp	0x3f2a	; 0x3f2a <_ZN8emstreamlsE15ser_manipulator+0x62>
     29a:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <_ZN7MMA845116QueryXRegCommand11writePacketER6Packet>
     29e:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <_ZN9frt_queueIhE12ISR_is_emptyEv>
     2a2:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <_ZN8I2CAgent11resetPacketER6Packet>
     2a6:	0c 94 91 03 	jmp	0x722	; 0x722 <_ZN8I2CAgent7receiveEv>
     2aa:	0c 94 79 1f 	jmp	0x3ef2	; 0x3ef2 <_ZN8emstreamlsE15ser_manipulator+0x2a>
     2ae:	0c 94 92 08 	jmp	0x1124	; 0x1124 <_ZN9frt_queueIhE10get_a_copyEv>
     2b2:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <_ZN9frt_queueIhE8is_emptyEv>
     2b6:	0c 94 7f 1f 	jmp	0x3efe	; 0x3efe <_ZN8emstreamlsE15ser_manipulator+0x36>
     2ba:	0c 94 4e 24 	jmp	0x489c	; 0x489c <_ZN9frt_queueIiE3getEv>
     2be:	0c 94 00 24 	jmp	0x4800	; 0x4800 <_ZN9frt_queueIjE3getEv>
     2c2:	0c 94 b8 23 	jmp	0x4770	; 0x4770 <_ZN9frt_queueIiE9not_emptyEv>
     2c6:	0c 94 eb 24 	jmp	0x49d6	; 0x49d6 <_ZN9frt_queueIiE11ISR_butt_inERKi>
     2ca:	0c 94 16 1f 	jmp	0x3e2c	; 0x3e2c <_ZN8emstream13ready_to_sendEv>
     2ce:	0c 94 35 04 	jmp	0x86a	; 0x86a <_ZN9I2CMaster8Receiver11StatusState7executeER6Packet>
     2d2:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <_ZN9I2CMaster8Receiver17PacketStatusState11serialDebugEv>
     2d6:	0c 94 80 23 	jmp	0x4700	; 0x4700 <_ZN9frt_queueIiE13ISR_not_emptyEv>
     2da:	0c 94 92 24 	jmp	0x4924	; 0x4924 <_ZN9frt_queueIiE7ISR_getEPi>
     2de:	0c 94 79 23 	jmp	0x46f2	; 0x46f2 <_ZN9frt_queueIiE16ISR_num_items_inEv>
     2e2:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <_ZN5rs23214check_for_charEv>
     2e6:	0c 94 36 03 	jmp	0x66c	; 0x66c <_call_static_run_method>
     2ea:	0c 94 84 1f 	jmp	0x3f08	; 0x3f08 <_ZN8emstreamlsE15ser_manipulator+0x40>
     2ee:	0c 94 c5 04 	jmp	0x98a	; 0x98a <_ZN9I2CMaster11Transmitter17PacketStatusState7executeER6Packet>
     2f2:	0c 94 6f 23 	jmp	0x46de	; 0x46de <_ZN9frt_queueIjE12ISR_is_emptyEv>
     2f6:	0c 94 8b 23 	jmp	0x4716	; 0x4716 <_ZN9frt_queueIiE12ISR_is_emptyEv>
     2fa:	0c 94 1e 08 	jmp	0x103c	; 0x103c <_ZN9I2CMaster10StartState7executeER6Packet>
     2fe:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <_ZN9frt_queueIhE11ISR_butt_inERKh>
     302:	0c 94 bc 03 	jmp	0x778	; 0x778 <_ZN8I2CAgent11writePacketER7Command>
     306:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <_ZN5rs23212clear_screenEv>
     30a:	0c 94 d3 24 	jmp	0x49a6	; 0x49a6 <_ZN9frt_queueIjE7ISR_putERKj>
     30e:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <_ZN9I2CMaster8Receiver13ExchangeState11serialDebugEv>
     312:	0c 94 9e 1c 	jmp	0x393c	; 0x393c <_ZN14frt_text_queue7getcharEv>
     316:	0c 94 a1 20 	jmp	0x4142	; 0x4142 <_ZN5rs2327putcharEc>
     31a:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <_ZN8emstream12transmit_nowEv>
     31e:	0c 94 92 14 	jmp	0x2924	; 0x2924 <prvIdleTask>
     322:	0c 94 d9 23 	jmp	0x47b2	; 0x47b2 <_ZN9frt_queueIjE10get_a_copyEv>
     326:	0c 94 82 1f 	jmp	0x3f04	; 0x3f04 <_ZN8emstreamlsE15ser_manipulator+0x3c>
     32a:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <_ZN9I2CMaster11Transmitter11StatusState7executeER6Packet>
     32e:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <_ZN9I2CMaster9DoneState7executeER6Packet>
     332:	0c 94 f4 23 	jmp	0x47e8	; 0x47e8 <_ZN9frt_queueIjE3getEPj>
     336:	0c 94 c5 20 	jmp	0x418a	; 0x418a <_ZN5rs2327getcharEv>
     33a:	0c 94 ce 08 	jmp	0x119c	; 0x119c <_ZN9frt_queueIhE7ISR_getEPh>
     33e:	0c 94 1b 24 	jmp	0x4836	; 0x4836 <_ZN9frt_queueIiE10get_a_copyERi>
     342:	0c 94 5d 23 	jmp	0x46ba	; 0x46ba <_ZN9frt_queueIjE16ISR_num_items_inEv>
     346:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <_ZN9task_user3runEv>
     34a:	0c 94 16 0a 	jmp	0x142c	; 0x142c <_ZN7MMA845116QueryYRegCommand11writePacketER6Packet>
     34e:	0c 94 6a 08 	jmp	0x10d4	; 0x10d4 <_ZN9frt_queueIhE12num_items_inEv>
     352:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <_ZN9I2CMaster10ErrorState7executeER6Packet>
     356:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <_ZN8I2CAgent10readPacketEv>
     35a:	0c 94 a7 23 	jmp	0x474e	; 0x474e <_ZN9frt_queueIjE8is_emptyEv>
     35e:	0c 94 20 05 	jmp	0xa40	; 0xa40 <_ZN9I2CMaster11Transmitter17PacketStatusState11serialDebugEv>
     362:	0c 94 73 1f 	jmp	0x3ee6	; 0x3ee6 <_ZN8emstreamlsE15ser_manipulator+0x1e>
     366:	0c 94 3f 25 	jmp	0x4a7e	; 0x4a7e <_ZN9frt_queueIiE7butt_inERKi>
     36a:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <_ZN8frt_task12print_statusER8emstream>
     36e:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <_ZN14frt_text_queue14check_for_charEv>
     372:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <_ZN9I2CMaster10ErrorState11serialDebugEv>
     376:	0c 94 1b 1f 	jmp	0x3e36	; 0x3e36 <_ZN8emstream14check_for_charEv>
     37a:	0c 94 38 09 	jmp	0x1270	; 0x1270 <_ZN9frt_queueIhE3putERKh>
     37e:	0c 94 df 08 	jmp	0x11be	; 0x11be <_ZN9frt_queueIhE7ISR_getEv>
     382:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <_ZN9I2CMaster9DoneState11serialDebugEv>
     386:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <_ZN9I2CMaster11Transmitter13ExchangeState11serialDebugEv>
     38a:	0c 94 06 26 	jmp	0x4c0c	; 0x4c0c <_GLOBAL__sub_I_counter>
     38e:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <_ZN7MMA845116QueryZRegCommand11writePacketER6Packet>
     392:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <_ZN9frt_queueIhE9not_emptyEv>
     396:	0c 94 a5 1f 	jmp	0x3f4a	; 0x3f4a <_ZN8emstreamlsE15ser_manipulator+0x82>
     39a:	0c 94 b6 08 	jmp	0x116c	; 0x116c <_ZN9frt_queueIhE3getEv>
     39e:	0c 94 76 1f 	jmp	0x3eec	; 0x3eec <_ZN8emstreamlsE15ser_manipulator+0x24>
     3a2:	0c 94 b1 23 	jmp	0x4762	; 0x4762 <_ZN9frt_queueIiE12num_items_inEv>
     3a6:	0c 94 26 09 	jmp	0x124c	; 0x124c <_ZN9frt_queueIhE7butt_inERKh>
     3aa:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <_ZN8I2CAgent8transmitER7Command>
     3ae:	0c 94 64 23 	jmp	0x46c8	; 0x46c8 <_ZN9frt_queueIjE13ISR_not_emptyEv>
     3b2:	0c 94 1e 1f 	jmp	0x3e3c	; 0x3e3c <_ZN8emstream12clear_screenEv>
     3b6:	0c 94 a7 1f 	jmp	0x3f4e	; 0x3f4e <_ZN8emstreamlsE15ser_manipulator+0x86>

000003ba <__trampolines_end>:
     3ba:	2c 20       	and	r2, r12
     3bc:	54 43       	sbci	r21, 0x34	; 52
     3be:	43 30       	cpi	r20, 0x03	; 3
     3c0:	43 43       	sbci	r20, 0x33	; 51
     3c2:	41 3d       	cpi	r20, 0xD1	; 209
	...

000003c5 <_ZZN9task_user11show_statusEvE3__c_3>:
     3c5:	2f 00                                               /.

000003c7 <_ZZN9task_user11show_statusEvE3__c_2>:
     3c7:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

000003d5 <_ZZN9task_user11show_statusEvE3__c_1>:
     3d5:	54 69 6d 65 3a 20 00                                Time: .

000003dc <_ZZN9task_user11show_statusEvE3__c_0>:
     3dc:	4e 6f 76 20 32 33 20 32 30 31 38 00                 Nov 23 2018.

000003e8 <_ZZN9task_user11show_statusEvE3__c>:
     3e8:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     3f8:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

00000407 <_ZZN9task_user18print_help_messageEvE3__c_10>:
     407:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

00000416 <_ZZN9task_user18print_help_messageEvE3__c_9>:
     416:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     426:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

00000431 <_ZZN9task_user18print_help_messageEvE3__c_8>:
     431:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     441:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

0000044f <_ZZN9task_user18print_help_messageEvE3__c_7>:
     44f:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     45f:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     46f:	6d 61 74 69 6f 6e 00                                mation.

00000476 <_ZZN9task_user18print_help_messageEvE3__c_6>:
     476:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     486:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

00000497 <_ZZN9task_user18print_help_messageEvE3__c_5>:
     497:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     4a7:	65 20 6f 6e 6c 79 3a 00                             e only:.

000004af <_ZZN9task_user18print_help_messageEvE3__c_4>:
     4af:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     4bf:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

000004cb <_ZZN9task_user18print_help_messageEvE3__c_3>:
     4cb:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     4db:	68 65 20 41 56 52 00                                he AVR.

000004e2 <_ZZN9task_user18print_help_messageEvE3__c_2>:
     4e2:	20 68 65 6c 70 00                                    help.

000004e8 <_ZZN9task_user18print_help_messageEvE3__c_1>:
     4e8:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     4f8:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

00000507 <_ZZN9task_user18print_help_messageEvE3__c_0>:
     507:	1b 5b 33 30 6d 00                                   .[30m.

0000050d <_ZZN9task_user18print_help_messageEvE3__c>:
     50d:	1b 5b 34 36 6d 00                                   .[46m.

00000513 <_ZZN9task_user3runEvE3__c_3>:
     513:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     523:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

00000530 <_ZZN9task_user3runEvE3__c_2>:
     530:	3a 57 54 46 3f 00                                   :WTF?.

00000536 <_ZZN9task_user3runEvE3__c_1>:
     536:	45 78 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     Exit command mod
     546:	65 00                                               e.

00000548 <_ZZN9task_user3runEvE3__c_0>:
     548:	52 65 73 65 74 74 69 6e 67 20 41 56 52 00           Resetting AVR.

00000556 <_ZZN9task_user3runEvE3__c>:
     556:	50 72 65 73 73 20 43 74 72 6c 2d 41 20 66 6f 72     Press Ctrl-A for
     566:	20 63 6f 6d 6d 61 6e 64 20 6d 6f 64 65 00            command mode.

00000574 <_ZZN8frt_task15emergency_resetEvE3__c_0>:
     574:	52 65 73 65 74 74 69 6e 67 00                       Resetting.

0000057e <_ZZN8frt_task15emergency_resetEvE3__c>:
     57e:	45 52 52 4f 52 20 69 6e 20 74 61 73 6b 20 00        ERROR in task .

0000058d <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     58d:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     59d:	61 73 6b 20 00                                      ask .

000005a2 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     5a2:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

000005b0 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     5b0:	20 63 72 65 61 74 65 64 00                           created.

000005b9 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     5b9:	54 61 73 6b 20 00                                   Task .

000005bf <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_1>:
     5bf:	1b 5b 32 32 6d 00                                   .[22m.

000005c5 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_0>:
     5c5:	54 61 73 6b 3a 20 00                                Task: .

000005cc <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c>:
     5cc:	1b 5b 31 6d 00                                      .[1m.

000005d1 <_ZZ17print_task_stacksP8emstreamE3__c_1>:
     5d1:	1b 5b 32 32 6d 00                                   .[22m.

000005d7 <_ZZ17print_task_stacksP8emstreamE3__c_0>:
     5d7:	54 61 73 6b 3a 20 49 44 4c 45 00                    Task: IDLE.

000005e2 <_ZZ17print_task_stacksP8emstreamE3__c>:
     5e2:	1b 5b 31 6d 00                                      .[1m.

000005e7 <_ZZ15print_task_listP8emstreamE3__c_9>:
     5e7:	09 09 00                                            ...

000005ea <_ZZ15print_task_listP8emstreamE3__c_8>:
     5ea:	2f 00                                               /.

000005ec <_ZZ15print_task_listP8emstreamE3__c_7>:
     5ec:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

000005f7 <_ZZ15print_task_listP8emstreamE3__c_6>:
     5f7:	09 2d 2d 2d 2d 00                                   .----.

000005fd <_ZZ15print_task_listP8emstreamE3__c_5>:
     5fd:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

00000609 <_ZZ15print_task_listP8emstreamE3__c_4>:
     609:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

0000061a <_ZZ15print_task_listP8emstreamE3__c_3>:
     61a:	09 52 75 6e 73 00                                   .Runs.

00000620 <_ZZ15print_task_listP8emstreamE3__c_2>:
     620:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

0000062c <_ZZ15print_task_listP8emstreamE3__c_1>:
     62c:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

0000063d <_ZZ15print_task_listP8emstreamE3__c_0>:
     63d:	09 53 74 61 63 6b 00                                .Stack.

00000644 <_ZZ15print_task_listP8emstreamE3__c>:
     644:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

0000064f <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     64f:	09 00                                               ..

00000651 <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     651:	09 00                                               ..

00000653 <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     653:	2f 00                                               /.

00000655 <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     655:	09 00                                               ..

00000657 <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     657:	09 00                                               ..

00000659 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_2>:
     659:	1b 5b 32 32 6d 00                                   .[22m.

0000065f <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_1>:
     65f:	1b 5b 31 6d 00                                      .[1m.

00000664 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_0>:
     664:	1b 5b 31 6d 00                                      .[1m.

00000669 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c>:
     669:	20 20 00                                              .

0000066c <_call_static_run_method>:
 *                the pointer is used to find the task's static run method
 */

extern "C" inline void _call_static_run_method (frt_task* p_task)
{
	frt_task::_call_users_run_method (p_task);
     66c:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <_ZN8frt_task22_call_users_run_methodEPS_>

00000670 <__ctors_start>:
     670:	06 26       	eor	r0, r22

00000672 <__ctors_end>:
     672:	11 24       	eor	r1, r1
     674:	1f be       	out	0x3f, r1	; 63
     676:	cf ef       	ldi	r28, 0xFF	; 255
     678:	cd bf       	out	0x3d, r28	; 61
     67a:	df e3       	ldi	r29, 0x3F	; 63
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	00 e0       	ldi	r16, 0x00	; 0
     680:	0c bf       	out	0x3c, r16	; 60
     682:	18 be       	out	0x38, r1	; 56
     684:	19 be       	out	0x39, r1	; 57
     686:	1a be       	out	0x3a, r1	; 58
     688:	1b be       	out	0x3b, r1	; 59

0000068a <__do_copy_data>:
     68a:	12 e2       	ldi	r17, 0x22	; 34
     68c:	a0 e0       	ldi	r26, 0x00	; 0
     68e:	b0 e2       	ldi	r27, 0x20	; 32
     690:	e4 ef       	ldi	r30, 0xF4	; 244
     692:	fe e4       	ldi	r31, 0x4E	; 78
     694:	00 e0       	ldi	r16, 0x00	; 0
     696:	0b bf       	out	0x3b, r16	; 59
     698:	02 c0       	rjmp	.+4      	; 0x69e <__do_copy_data+0x14>
     69a:	07 90       	elpm	r0, Z+
     69c:	0d 92       	st	X+, r0
     69e:	a6 33       	cpi	r26, 0x36	; 54
     6a0:	b1 07       	cpc	r27, r17
     6a2:	d9 f7       	brne	.-10     	; 0x69a <__do_copy_data+0x10>
     6a4:	1b be       	out	0x3b, r1	; 59

000006a6 <__do_clear_bss>:
     6a6:	23 e3       	ldi	r18, 0x33	; 51
     6a8:	a6 e3       	ldi	r26, 0x36	; 54
     6aa:	b2 e2       	ldi	r27, 0x22	; 34
     6ac:	01 c0       	rjmp	.+2      	; 0x6b0 <.do_clear_bss_start>

000006ae <.do_clear_bss_loop>:
     6ae:	1d 92       	st	X+, r1

000006b0 <.do_clear_bss_start>:
     6b0:	a4 30       	cpi	r26, 0x04	; 4
     6b2:	b2 07       	cpc	r27, r18
     6b4:	e1 f7       	brne	.-8      	; 0x6ae <.do_clear_bss_loop>

000006b6 <__do_global_ctors>:
     6b6:	13 e0       	ldi	r17, 0x03	; 3
     6b8:	c9 e3       	ldi	r28, 0x39	; 57
     6ba:	d3 e0       	ldi	r29, 0x03	; 3
     6bc:	00 e0       	ldi	r16, 0x00	; 0
     6be:	06 c0       	rjmp	.+12     	; 0x6cc <__do_global_ctors+0x16>
     6c0:	21 97       	sbiw	r28, 0x01	; 1
     6c2:	01 09       	sbc	r16, r1
     6c4:	80 2f       	mov	r24, r16
     6c6:	fe 01       	movw	r30, r28
     6c8:	0e 94 d4 26 	call	0x4da8	; 0x4da8 <__tablejump2__>
     6cc:	c8 33       	cpi	r28, 0x38	; 56
     6ce:	d1 07       	cpc	r29, r17
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	08 07       	cpc	r16, r24
     6d4:	a9 f7       	brne	.-22     	; 0x6c0 <__do_global_ctors+0xa>
     6d6:	0e 94 78 25 	call	0x4af0	; 0x4af0 <main>
     6da:	0c 94 78 27 	jmp	0x4ef0	; 0x4ef0 <_exit>

000006de <__bad_interrupt>:
     6de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006e2 <_ZN8I2CAgent10readPacketEv>:
  cmd.writePacket(outPacket_);
}

void I2CAgent::readPacket()
{
  resetPacket(inPacket_);
     6e2:	bc 01       	movw	r22, r24
     6e4:	6e 5f       	subi	r22, 0xFE	; 254
     6e6:	7f 4f       	sbci	r23, 0xFF	; 255
     6e8:	dc 01       	movw	r26, r24
     6ea:	ed 91       	ld	r30, X+
     6ec:	fc 91       	ld	r31, X
     6ee:	00 84       	ldd	r0, Z+8	; 0x08
     6f0:	f1 85       	ldd	r31, Z+9	; 0x09
     6f2:	e0 2d       	mov	r30, r0
     6f4:	19 95       	eicall
     6f6:	08 95       	ret

000006f8 <_ZN8I2CAgent8transmitER7Command>:
#include "I2CAgent.h"

bool I2CAgent::transmit( Command & cmd )
{
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	ec 01       	movw	r28, r24
  writePacket(cmd);
     6fe:	e8 81       	ld	r30, Y
     700:	f9 81       	ldd	r31, Y+1	; 0x01
     702:	04 80       	ldd	r0, Z+4	; 0x04
     704:	f5 81       	ldd	r31, Z+5	; 0x05
     706:	e0 2d       	mov	r30, r0
     708:	19 95       	eicall
  bool status = driver_->getTransmitter()->run(outPacket_);
     70a:	be 01       	movw	r22, r28
     70c:	62 5f       	subi	r22, 0xF2	; 242
     70e:	7f 4f       	sbci	r23, 0xFF	; 255

  };

  I2CMaster(TWI_t * interface, uint32_t i2c_freq, emstream * s);

  Transmitter * getTransmitter()  { return transmitter_; }
     710:	ec 8d       	ldd	r30, Y+28	; 0x1c
     712:	fd 8d       	ldd	r31, Y+29	; 0x1d
     714:	80 81       	ld	r24, Z
     716:	91 81       	ldd	r25, Z+1	; 0x01
     718:	0e 94 20 07 	call	0xe40	; 0xe40 <_ZN9I2CMaster11Transmitter3runER6Packet>
  return status;
}
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <_ZN8I2CAgent7receiveEv>:

Packet & I2CAgent::receive()
{
     722:	ef 92       	push	r14
     724:	ff 92       	push	r15
     726:	0f 93       	push	r16
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	ec 01       	movw	r28, r24
  resetPacket(inPacket_);
     72e:	7c 01       	movw	r14, r24
     730:	82 e0       	ldi	r24, 0x02	; 2
     732:	e8 0e       	add	r14, r24
     734:	f1 1c       	adc	r15, r1
     736:	e8 81       	ld	r30, Y
     738:	f9 81       	ldd	r31, Y+1	; 0x01
     73a:	00 84       	ldd	r0, Z+8	; 0x08
     73c:	f1 85       	ldd	r31, Z+9	; 0x09
     73e:	e0 2d       	mov	r30, r0
     740:	b7 01       	movw	r22, r14
     742:	ce 01       	movw	r24, r28
     744:	19 95       	eicall
		 *  @param item Reference to the item which is going to be put into the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool put (const data_type& item)
		{
			return ((bool)(xQueueSendToBack (handle, &item, ticks_to_wait)));
     746:	28 85       	ldd	r18, Y+8	; 0x08
     748:	39 85       	ldd	r19, Y+9	; 0x09
     74a:	4a 85       	ldd	r20, Y+10	; 0x0a
     74c:	5b 85       	ldd	r21, Y+11	; 0x0b
  inPacket_.put(readCommand_);
     74e:	be 01       	movw	r22, r28
     750:	60 5e       	subi	r22, 0xE0	; 224
     752:	7f 4f       	sbci	r23, 0xFF	; 255
     754:	00 e0       	ldi	r16, 0x00	; 0
     756:	8e 81       	ldd	r24, Y+6	; 0x06
     758:	9f 81       	ldd	r25, Y+7	; 0x07
     75a:	0e 94 cf 12 	call	0x259e	; 0x259e <xQueueGenericSend>
  Receiver *    getReceiver()     { return receiver_; }
     75e:	ec 8d       	ldd	r30, Y+28	; 0x1c
     760:	fd 8d       	ldd	r31, Y+29	; 0x1d
  return driver_->getReceiver()->run(inPacket_);
     762:	b7 01       	movw	r22, r14
     764:	82 81       	ldd	r24, Z+2	; 0x02
     766:	93 81       	ldd	r25, Z+3	; 0x03
     768:	0e 94 63 07 	call	0xec6	; 0xec6 <_ZN9I2CMaster8Receiver3runER6Packet>
}
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	0f 91       	pop	r16
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	08 95       	ret

00000778 <_ZN8I2CAgent11writePacketER7Command>:
  writeCommand_ = addr << 1;
  readCommand_ = addr << 1 | 1 << 0;
}

void I2CAgent::writePacket( Command & cmd )
{
     778:	cf 92       	push	r12
     77a:	df 92       	push	r13
     77c:	ef 92       	push	r14
     77e:	ff 92       	push	r15
     780:	0f 93       	push	r16
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	ec 01       	movw	r28, r24
     788:	7b 01       	movw	r14, r22
  resetPacket(outPacket_);
     78a:	6c 01       	movw	r12, r24
     78c:	8e e0       	ldi	r24, 0x0E	; 14
     78e:	c8 0e       	add	r12, r24
     790:	d1 1c       	adc	r13, r1
     792:	e8 81       	ld	r30, Y
     794:	f9 81       	ldd	r31, Y+1	; 0x01
     796:	00 84       	ldd	r0, Z+8	; 0x08
     798:	f1 85       	ldd	r31, Z+9	; 0x09
     79a:	e0 2d       	mov	r30, r0
     79c:	b6 01       	movw	r22, r12
     79e:	ce 01       	movw	r24, r28
     7a0:	19 95       	eicall
     7a2:	2c 89       	ldd	r18, Y+20	; 0x14
     7a4:	3d 89       	ldd	r19, Y+21	; 0x15
     7a6:	4e 89       	ldd	r20, Y+22	; 0x16
     7a8:	5f 89       	ldd	r21, Y+23	; 0x17
  outPacket_.put(writeCommand_);
     7aa:	be 01       	movw	r22, r28
     7ac:	61 5e       	subi	r22, 0xE1	; 225
     7ae:	7f 4f       	sbci	r23, 0xFF	; 255
     7b0:	00 e0       	ldi	r16, 0x00	; 0
     7b2:	8a 89       	ldd	r24, Y+18	; 0x12
     7b4:	9b 89       	ldd	r25, Y+19	; 0x13
     7b6:	0e 94 cf 12 	call	0x259e	; 0x259e <xQueueGenericSend>
  cmd.writePacket(outPacket_);
     7ba:	d7 01       	movw	r26, r14
     7bc:	ed 91       	ld	r30, X+
     7be:	fc 91       	ld	r31, X
     7c0:	01 90       	ld	r0, Z+
     7c2:	f0 81       	ld	r31, Z
     7c4:	e0 2d       	mov	r30, r0
     7c6:	b6 01       	movw	r22, r12
     7c8:	c7 01       	movw	r24, r14
     7ca:	19 95       	eicall
}
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	0f 91       	pop	r16
     7d2:	ff 90       	pop	r15
     7d4:	ef 90       	pop	r14
     7d6:	df 90       	pop	r13
     7d8:	cf 90       	pop	r12
     7da:	08 95       	ret

000007dc <_ZN8I2CAgent11resetPacketER6Packet>:
{
  resetPacket(inPacket_);
}

void I2CAgent::resetPacket( Packet & packet )
{
     7dc:	cb 01       	movw	r24, r22
  packet.resetContent();
     7de:	0e 94 c7 0b 	call	0x178e	; 0x178e <_ZN6Packet12resetContentEv>
     7e2:	08 95       	ret

000007e4 <_ZN8I2CAgent12setSlaveAddrEh>:
  inPacket_.put(readCommand_);
  return driver_->getReceiver()->run(inPacket_);
}

void I2CAgent::setSlaveAddr( uint8_t addr )
{
     7e4:	fc 01       	movw	r30, r24
  slaveAddr_ = addr;
     7e6:	66 8f       	std	Z+30, r22	; 0x1e
  writeCommand_ = addr << 1;
     7e8:	86 2f       	mov	r24, r22
     7ea:	88 0f       	add	r24, r24
     7ec:	87 8f       	std	Z+31, r24	; 0x1f
  readCommand_ = addr << 1 | 1 << 0;
     7ee:	68 2f       	mov	r22, r24
     7f0:	61 60       	ori	r22, 0x01	; 1
     7f2:	60 a3       	std	Z+32, r22	; 0x20
     7f4:	08 95       	ret

000007f6 <_ZN9I2CMaster11Transmitter11StatusState7executeER6Packet>:
  driver_->getInterfacePtr()->MASTER.ADDR = *startCommand;
  return nextState_;
}

I2CMaster::State * I2CMaster::Transmitter::StatusState::execute( Packet & packet )
{
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	1f 92       	push	r1
     7fc:	1f 92       	push	r1
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62
     802:	dc 01       	movw	r26, r24
  volatile uint16_t counter;
  counter = timeout_;
     804:	19 96       	adiw	r26, 0x09	; 9
     806:	8d 91       	ld	r24, X+
     808:	9c 91       	ld	r25, X
     80a:	1a 97       	sbiw	r26, 0x0a	; 10
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	9a 83       	std	Y+2, r25	; 0x02
  while( ( --counter != 0 ) && 
     810:	29 81       	ldd	r18, Y+1	; 0x01
     812:	3a 81       	ldd	r19, Y+2	; 0x02
     814:	21 50       	subi	r18, 0x01	; 1
     816:	31 09       	sbc	r19, r1
     818:	29 83       	std	Y+1, r18	; 0x01
     81a:	3a 83       	std	Y+2, r19	; 0x02
     81c:	23 2b       	or	r18, r19
     81e:	51 f0       	breq	.+20     	; 0x834 <_ZN9I2CMaster11Transmitter11StatusState7executeER6Packet+0x3e>
  TWI_t *       getInterfacePtr() { return interface_; }
     820:	17 96       	adiw	r26, 0x07	; 7
     822:	ed 91       	ld	r30, X+
     824:	fc 91       	ld	r31, X
     826:	18 97       	sbiw	r26, 0x08	; 8
     828:	04 80       	ldd	r0, Z+4	; 0x04
     82a:	f5 81       	ldd	r31, Z+5	; 0x05
     82c:	e0 2d       	mov	r30, r0
         !( driver_->getInterfacePtr()->MASTER.STATUS & TWI_MASTER_WIF_bm ) ) { }
     82e:	94 81       	ldd	r25, Z+4	; 0x04

I2CMaster::State * I2CMaster::Transmitter::StatusState::execute( Packet & packet )
{
  volatile uint16_t counter;
  counter = timeout_;
  while( ( --counter != 0 ) && 
     830:	96 ff       	sbrs	r25, 6
     832:	ee cf       	rjmp	.-36     	; 0x810 <_ZN9I2CMaster11Transmitter11StatusState7executeER6Packet+0x1a>
     834:	17 96       	adiw	r26, 0x07	; 7
     836:	ed 91       	ld	r30, X+
     838:	fc 91       	ld	r31, X
     83a:	18 97       	sbiw	r26, 0x08	; 8
     83c:	04 80       	ldd	r0, Z+4	; 0x04
     83e:	f5 81       	ldd	r31, Z+5	; 0x05
     840:	e0 2d       	mov	r30, r0
         !( driver_->getInterfacePtr()->MASTER.STATUS & TWI_MASTER_WIF_bm ) ) { }
  if( !(driver_->getInterfacePtr()->MASTER.STATUS & TWI_MASTER_RXACK_bm) &&
     842:	84 81       	ldd	r24, Z+4	; 0x04
     844:	84 fd       	sbrc	r24, 4
     846:	08 c0       	rjmp	.+16     	; 0x858 <_ZN9I2CMaster11Transmitter11StatusState7executeER6Packet+0x62>
        (driver_->getInterfacePtr()->MASTER.STATUS & TWI_MASTER_WIF_bm) ) {
     848:	84 81       	ldd	r24, Z+4	; 0x04
{
  volatile uint16_t counter;
  counter = timeout_;
  while( ( --counter != 0 ) && 
         !( driver_->getInterfacePtr()->MASTER.STATUS & TWI_MASTER_WIF_bm ) ) { }
  if( !(driver_->getInterfacePtr()->MASTER.STATUS & TWI_MASTER_RXACK_bm) &&
     84a:	86 ff       	sbrs	r24, 6
     84c:	05 c0       	rjmp	.+10     	; 0x858 <_ZN9I2CMaster11Transmitter11StatusState7executeER6Packet+0x62>
        (driver_->getInterfacePtr()->MASTER.STATUS & TWI_MASTER_WIF_bm) ) {
    return nextState_; }
     84e:	12 96       	adiw	r26, 0x02	; 2
     850:	8d 91       	ld	r24, X+
     852:	9c 91       	ld	r25, X
     854:	13 97       	sbiw	r26, 0x03	; 3
     856:	04 c0       	rjmp	.+8      	; 0x860 <_ZN9I2CMaster11Transmitter11StatusState7executeER6Packet+0x6a>
  else {
    return returnState_; }
     858:	14 96       	adiw	r26, 0x04	; 4
     85a:	8d 91       	ld	r24, X+
     85c:	9c 91       	ld	r25, X
     85e:	15 97       	sbiw	r26, 0x05	; 5
}
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <_ZN9I2CMaster8Receiver11StatusState7executeER6Packet>:

I2CMaster::State * I2CMaster::Receiver::StatusState::execute( Packet & packet )
{
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	1f 92       	push	r1
     870:	1f 92       	push	r1
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
     876:	dc 01       	movw	r26, r24
  volatile uint16_t counter;
  counter = timeout_;
     878:	19 96       	adiw	r26, 0x09	; 9
     87a:	8d 91       	ld	r24, X+
     87c:	9c 91       	ld	r25, X
     87e:	1a 97       	sbiw	r26, 0x0a	; 10
     880:	89 83       	std	Y+1, r24	; 0x01
     882:	9a 83       	std	Y+2, r25	; 0x02
  while( ( --counter != 0) && 
     884:	29 81       	ldd	r18, Y+1	; 0x01
     886:	3a 81       	ldd	r19, Y+2	; 0x02
     888:	21 50       	subi	r18, 0x01	; 1
     88a:	31 09       	sbc	r19, r1
     88c:	29 83       	std	Y+1, r18	; 0x01
     88e:	3a 83       	std	Y+2, r19	; 0x02
     890:	23 2b       	or	r18, r19
     892:	51 f0       	breq	.+20     	; 0x8a8 <_ZN9I2CMaster8Receiver11StatusState7executeER6Packet+0x3e>
     894:	17 96       	adiw	r26, 0x07	; 7
     896:	ed 91       	ld	r30, X+
     898:	fc 91       	ld	r31, X
     89a:	18 97       	sbiw	r26, 0x08	; 8
     89c:	04 80       	ldd	r0, Z+4	; 0x04
     89e:	f5 81       	ldd	r31, Z+5	; 0x05
     8a0:	e0 2d       	mov	r30, r0
         !( driver_->getInterfacePtr()->MASTER.STATUS & TWI_MASTER_RIF_bm ) ){ }
     8a2:	94 81       	ldd	r25, Z+4	; 0x04

I2CMaster::State * I2CMaster::Receiver::StatusState::execute( Packet & packet )
{
  volatile uint16_t counter;
  counter = timeout_;
  while( ( --counter != 0) && 
     8a4:	99 23       	and	r25, r25
     8a6:	74 f7       	brge	.-36     	; 0x884 <_ZN9I2CMaster8Receiver11StatusState7executeER6Packet+0x1a>
     8a8:	17 96       	adiw	r26, 0x07	; 7
     8aa:	ed 91       	ld	r30, X+
     8ac:	fc 91       	ld	r31, X
     8ae:	18 97       	sbiw	r26, 0x08	; 8
     8b0:	04 80       	ldd	r0, Z+4	; 0x04
     8b2:	f5 81       	ldd	r31, Z+5	; 0x05
     8b4:	e0 2d       	mov	r30, r0
         !( driver_->getInterfacePtr()->MASTER.STATUS & TWI_MASTER_RIF_bm ) ){ }
  if( !(driver_->getInterfacePtr()->MASTER.STATUS & TWI_MASTER_RXACK_bm) &&
     8b6:	84 81       	ldd	r24, Z+4	; 0x04
     8b8:	84 fd       	sbrc	r24, 4
     8ba:	08 c0       	rjmp	.+16     	; 0x8cc <_ZN9I2CMaster8Receiver11StatusState7executeER6Packet+0x62>
        (driver_->getInterfacePtr()->MASTER.STATUS & TWI_MASTER_RIF_bm) ) {
     8bc:	84 81       	ldd	r24, Z+4	; 0x04
{
  volatile uint16_t counter;
  counter = timeout_;
  while( ( --counter != 0) && 
         !( driver_->getInterfacePtr()->MASTER.STATUS & TWI_MASTER_RIF_bm ) ){ }
  if( !(driver_->getInterfacePtr()->MASTER.STATUS & TWI_MASTER_RXACK_bm) &&
     8be:	88 23       	and	r24, r24
     8c0:	2c f4       	brge	.+10     	; 0x8cc <_ZN9I2CMaster8Receiver11StatusState7executeER6Packet+0x62>
        (driver_->getInterfacePtr()->MASTER.STATUS & TWI_MASTER_RIF_bm) ) {
    return nextState_; }
     8c2:	12 96       	adiw	r26, 0x02	; 2
     8c4:	8d 91       	ld	r24, X+
     8c6:	9c 91       	ld	r25, X
     8c8:	13 97       	sbiw	r26, 0x03	; 3
     8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <_ZN9I2CMaster8Receiver11StatusState7executeER6Packet+0x6a>
  else {
    return returnState_; }
     8cc:	14 96       	adiw	r26, 0x04	; 4
     8ce:	8d 91       	ld	r24, X+
     8d0:	9c 91       	ld	r25, X
     8d2:	15 97       	sbiw	r26, 0x05	; 5
}
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <_ZN9I2CMaster11Transmitter13ExchangeState7executeER6Packet>:

I2CMaster::State * I2CMaster::Transmitter::ExchangeState::execute( Packet & packet )
{
     8de:	ef 92       	push	r14
     8e0:	ff 92       	push	r15
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	8c 01       	movw	r16, r24
     8ec:	eb 01       	movw	r28, r22
  if( packet.not_empty() ) {
     8ee:	e8 81       	ld	r30, Y
     8f0:	f9 81       	ldd	r31, Y+1	; 0x01
     8f2:	00 8c       	ldd	r0, Z+24	; 0x18
     8f4:	f1 8d       	ldd	r31, Z+25	; 0x19
     8f6:	e0 2d       	mov	r30, r0
     8f8:	cb 01       	movw	r24, r22
     8fa:	19 95       	eicall
     8fc:	88 23       	and	r24, r24
     8fe:	a9 f0       	breq	.+42     	; 0x92a <_ZN9I2CMaster11Transmitter13ExchangeState7executeER6Packet+0x4c>
    uint8_t * data; 
    packet.get(data);
     900:	e8 81       	ld	r30, Y
     902:	f9 81       	ldd	r31, Y+1	; 0x01
     904:	02 84       	ldd	r0, Z+10	; 0x0a
     906:	f3 85       	ldd	r31, Z+11	; 0x0b
     908:	e0 2d       	mov	r30, r0
     90a:	e1 2c       	mov	r14, r1
     90c:	f1 2c       	mov	r15, r1
     90e:	b7 01       	movw	r22, r14
     910:	ce 01       	movw	r24, r28
     912:	19 95       	eicall
     914:	d8 01       	movw	r26, r16
     916:	17 96       	adiw	r26, 0x07	; 7
     918:	ed 91       	ld	r30, X+
     91a:	fc 91       	ld	r31, X
     91c:	18 97       	sbiw	r26, 0x08	; 8
     91e:	04 80       	ldd	r0, Z+4	; 0x04
     920:	f5 81       	ldd	r31, Z+5	; 0x05
     922:	e0 2d       	mov	r30, r0
    driver_->getInterfacePtr()->MASTER.DATA = *data; }
     924:	d7 01       	movw	r26, r14
     926:	8c 91       	ld	r24, X
     928:	87 83       	std	Z+7, r24	; 0x07
  return nextState_;
}
     92a:	f8 01       	movw	r30, r16
     92c:	82 81       	ldd	r24, Z+2	; 0x02
     92e:	93 81       	ldd	r25, Z+3	; 0x03
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	08 95       	ret

0000093e <_ZN9I2CMaster8Receiver13ExchangeState7executeER6Packet>:

I2CMaster::State * I2CMaster::Receiver::ExchangeState::execute( Packet & packet )
{
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	1f 92       	push	r1
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
     94c:	8c 01       	movw	r16, r24
     94e:	cb 01       	movw	r24, r22
     950:	d8 01       	movw	r26, r16
     952:	17 96       	adiw	r26, 0x07	; 7
     954:	ed 91       	ld	r30, X+
     956:	fc 91       	ld	r31, X
     958:	18 97       	sbiw	r26, 0x08	; 8
     95a:	04 80       	ldd	r0, Z+4	; 0x04
     95c:	f5 81       	ldd	r31, Z+5	; 0x05
     95e:	e0 2d       	mov	r30, r0
  uint8_t data = driver_->getInterfacePtr()->MASTER.DATA;
     960:	27 81       	ldd	r18, Z+7	; 0x07
     962:	29 83       	std	Y+1, r18	; 0x01
  packet.put(data);
     964:	db 01       	movw	r26, r22
     966:	ed 91       	ld	r30, X+
     968:	fc 91       	ld	r31, X
     96a:	01 90       	ld	r0, Z+
     96c:	f0 81       	ld	r31, Z
     96e:	e0 2d       	mov	r30, r0
     970:	be 01       	movw	r22, r28
     972:	6f 5f       	subi	r22, 0xFF	; 255
     974:	7f 4f       	sbci	r23, 0xFF	; 255
     976:	19 95       	eicall
  return nextState_;
}
     978:	f8 01       	movw	r30, r16
     97a:	82 81       	ldd	r24, Z+2	; 0x02
     97c:	93 81       	ldd	r25, Z+3	; 0x03
     97e:	0f 90       	pop	r0
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	08 95       	ret

0000098a <_ZN9I2CMaster11Transmitter17PacketStatusState7executeER6Packet>:

I2CMaster::State * I2CMaster::Transmitter::PacketStatusState::execute( Packet & packet )
{
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	ec 01       	movw	r28, r24
     990:	cb 01       	movw	r24, r22
  if( packet.is_empty() ) {
     992:	db 01       	movw	r26, r22
     994:	ed 91       	ld	r30, X+
     996:	fc 91       	ld	r31, X
     998:	04 88       	ldd	r0, Z+20	; 0x14
     99a:	f5 89       	ldd	r31, Z+21	; 0x15
     99c:	e0 2d       	mov	r30, r0
     99e:	19 95       	eicall
     9a0:	88 23       	and	r24, r24
     9a2:	19 f0       	breq	.+6      	; 0x9aa <_ZN9I2CMaster11Transmitter17PacketStatusState7executeER6Packet+0x20>
    return nextState_; }
     9a4:	8a 81       	ldd	r24, Y+2	; 0x02
     9a6:	9b 81       	ldd	r25, Y+3	; 0x03
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <_ZN9I2CMaster11Transmitter17PacketStatusState7executeER6Packet+0x24>
  else {
    return returnState_; }
     9aa:	8c 81       	ldd	r24, Y+4	; 0x04
     9ac:	9d 81       	ldd	r25, Y+5	; 0x05
}
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	08 95       	ret

000009b4 <_ZN9I2CMaster9DoneState7executeER6Packet>:
      size_(queue_size)
  { }
  uint8_t getSize() const { return size_; }
  void resetContent();
  bool validData() { return success_; }
  void isValid() { success_ = true; }
     9b4:	21 e0       	ldi	r18, 0x01	; 1
     9b6:	fb 01       	movw	r30, r22
     9b8:	23 87       	std	Z+11, r18	; 0x0b

I2CMaster::State * I2CMaster::DoneState::execute( Packet & packet )
{
  packet.isValid();
  return nextState_;
}
     9ba:	fc 01       	movw	r30, r24
     9bc:	82 81       	ldd	r24, Z+2	; 0x02
     9be:	93 81       	ldd	r25, Z+3	; 0x03
     9c0:	08 95       	ret

000009c2 <_ZN9I2CMaster10ErrorState11serialDebugEv>:
  public:
    inline ErrorState( I2CMaster * d )
      : driver_(d)
    { }
    State * execute( Packet & packet );
    void serialDebug() { *(driver_->getSerial()) << "error" << endl; }
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
  I2CMaster(TWI_t * interface, uint32_t i2c_freq, emstream * s);

  Transmitter * getTransmitter()  { return transmitter_; }
  Receiver *    getReceiver()     { return receiver_; }
  TWI_t *       getInterfacePtr() { return interface_; }
  emstream *    getSerial()       { return p_serial; }
     9c6:	dc 01       	movw	r26, r24
     9c8:	17 96       	adiw	r26, 0x07	; 7
     9ca:	ed 91       	ld	r30, X+
     9cc:	fc 91       	ld	r31, X
     9ce:	18 97       	sbiw	r26, 0x08	; 8
     9d0:	c6 81       	ldd	r28, Z+6	; 0x06
     9d2:	d7 81       	ldd	r29, Z+7	; 0x07
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
     9d4:	64 e1       	ldi	r22, 0x14	; 20
     9d6:	70 e2       	ldi	r23, 0x20	; 32
     9d8:	ce 01       	movw	r24, r28
     9da:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
  public:
    inline ErrorState( I2CMaster * d )
      : driver_(d)
    { }
    State * execute( Packet & packet );
    void serialDebug() { *(driver_->getSerial()) << "error" << endl; }
     9de:	66 e0       	ldi	r22, 0x06	; 6
     9e0:	ce 01       	movw	r24, r28
     9e2:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	08 95       	ret

000009ec <_ZN9I2CMaster9DoneState11serialDebugEv>:
  public:
    inline DoneState( I2CMaster * d )
      : driver_(d)
    { }
    State * execute( Packet & packet );
    void serialDebug() { *(driver_->getSerial()) << "done" << endl; }
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
  I2CMaster(TWI_t * interface, uint32_t i2c_freq, emstream * s);

  Transmitter * getTransmitter()  { return transmitter_; }
  Receiver *    getReceiver()     { return receiver_; }
  TWI_t *       getInterfacePtr() { return interface_; }
  emstream *    getSerial()       { return p_serial; }
     9f0:	dc 01       	movw	r26, r24
     9f2:	17 96       	adiw	r26, 0x07	; 7
     9f4:	ed 91       	ld	r30, X+
     9f6:	fc 91       	ld	r31, X
     9f8:	18 97       	sbiw	r26, 0x08	; 8
     9fa:	c6 81       	ldd	r28, Z+6	; 0x06
     9fc:	d7 81       	ldd	r29, Z+7	; 0x07
     9fe:	6a e1       	ldi	r22, 0x1A	; 26
     a00:	70 e2       	ldi	r23, 0x20	; 32
     a02:	ce 01       	movw	r24, r28
     a04:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
  public:
    inline DoneState( I2CMaster * d )
      : driver_(d)
    { }
    State * execute( Packet & packet );
    void serialDebug() { *(driver_->getSerial()) << "done" << endl; }
     a08:	66 e0       	ldi	r22, 0x06	; 6
     a0a:	ce 01       	movw	r24, r28
     a0c:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	08 95       	ret

00000a16 <_ZN9I2CMaster8Receiver17PacketStatusState11serialDebugEv>:
    public:
      inline PacketStatusState( I2CMaster * d )
        : driver_(d)
      { }
      State * execute( Packet & packet );
      void serialDebug() { *(driver_->getSerial()) << "r packet" << endl; }
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
  I2CMaster(TWI_t * interface, uint32_t i2c_freq, emstream * s);

  Transmitter * getTransmitter()  { return transmitter_; }
  Receiver *    getReceiver()     { return receiver_; }
  TWI_t *       getInterfacePtr() { return interface_; }
  emstream *    getSerial()       { return p_serial; }
     a1a:	dc 01       	movw	r26, r24
     a1c:	17 96       	adiw	r26, 0x07	; 7
     a1e:	ed 91       	ld	r30, X+
     a20:	fc 91       	ld	r31, X
     a22:	18 97       	sbiw	r26, 0x08	; 8
     a24:	c6 81       	ldd	r28, Z+6	; 0x06
     a26:	d7 81       	ldd	r29, Z+7	; 0x07
     a28:	6f e1       	ldi	r22, 0x1F	; 31
     a2a:	70 e2       	ldi	r23, 0x20	; 32
     a2c:	ce 01       	movw	r24, r28
     a2e:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    public:
      inline PacketStatusState( I2CMaster * d )
        : driver_(d)
      { }
      State * execute( Packet & packet );
      void serialDebug() { *(driver_->getSerial()) << "r packet" << endl; }
     a32:	66 e0       	ldi	r22, 0x06	; 6
     a34:	ce 01       	movw	r24, r28
     a36:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	08 95       	ret

00000a40 <_ZN9I2CMaster11Transmitter17PacketStatusState11serialDebugEv>:
    public:
      inline PacketStatusState( I2CMaster * d )
        : driver_(d)
      { }
      State * execute( Packet & packet );
      void serialDebug() { *(driver_->getSerial()) << "t packet" << endl; }
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
  I2CMaster(TWI_t * interface, uint32_t i2c_freq, emstream * s);

  Transmitter * getTransmitter()  { return transmitter_; }
  Receiver *    getReceiver()     { return receiver_; }
  TWI_t *       getInterfacePtr() { return interface_; }
  emstream *    getSerial()       { return p_serial; }
     a44:	dc 01       	movw	r26, r24
     a46:	17 96       	adiw	r26, 0x07	; 7
     a48:	ed 91       	ld	r30, X+
     a4a:	fc 91       	ld	r31, X
     a4c:	18 97       	sbiw	r26, 0x08	; 8
     a4e:	c6 81       	ldd	r28, Z+6	; 0x06
     a50:	d7 81       	ldd	r29, Z+7	; 0x07
     a52:	68 e2       	ldi	r22, 0x28	; 40
     a54:	70 e2       	ldi	r23, 0x20	; 32
     a56:	ce 01       	movw	r24, r28
     a58:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    public:
      inline PacketStatusState( I2CMaster * d )
        : driver_(d)
      { }
      State * execute( Packet & packet );
      void serialDebug() { *(driver_->getSerial()) << "t packet" << endl; }
     a5c:	66 e0       	ldi	r22, 0x06	; 6
     a5e:	ce 01       	movw	r24, r28
     a60:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <_ZN9I2CMaster8Receiver13ExchangeState11serialDebugEv>:
    public:
      inline ExchangeState( I2CMaster * d )
        : driver_(d)
      { }
      State * execute( Packet & packet );
      void serialDebug() { *(driver_->getSerial()) << "r exchange" << endl; }
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
  I2CMaster(TWI_t * interface, uint32_t i2c_freq, emstream * s);

  Transmitter * getTransmitter()  { return transmitter_; }
  Receiver *    getReceiver()     { return receiver_; }
  TWI_t *       getInterfacePtr() { return interface_; }
  emstream *    getSerial()       { return p_serial; }
     a6e:	dc 01       	movw	r26, r24
     a70:	17 96       	adiw	r26, 0x07	; 7
     a72:	ed 91       	ld	r30, X+
     a74:	fc 91       	ld	r31, X
     a76:	18 97       	sbiw	r26, 0x08	; 8
     a78:	c6 81       	ldd	r28, Z+6	; 0x06
     a7a:	d7 81       	ldd	r29, Z+7	; 0x07
     a7c:	61 e3       	ldi	r22, 0x31	; 49
     a7e:	70 e2       	ldi	r23, 0x20	; 32
     a80:	ce 01       	movw	r24, r28
     a82:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    public:
      inline ExchangeState( I2CMaster * d )
        : driver_(d)
      { }
      State * execute( Packet & packet );
      void serialDebug() { *(driver_->getSerial()) << "r exchange" << endl; }
     a86:	66 e0       	ldi	r22, 0x06	; 6
     a88:	ce 01       	movw	r24, r28
     a8a:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	08 95       	ret

00000a94 <_ZN9I2CMaster11Transmitter13ExchangeState11serialDebugEv>:
    public:
      inline ExchangeState( I2CMaster * d )
        : driver_(d)
      { }
      State * execute( Packet & packet );
      void serialDebug() { *(driver_->getSerial()) << "t exchange" << endl; }
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
  I2CMaster(TWI_t * interface, uint32_t i2c_freq, emstream * s);

  Transmitter * getTransmitter()  { return transmitter_; }
  Receiver *    getReceiver()     { return receiver_; }
  TWI_t *       getInterfacePtr() { return interface_; }
  emstream *    getSerial()       { return p_serial; }
     a98:	dc 01       	movw	r26, r24
     a9a:	17 96       	adiw	r26, 0x07	; 7
     a9c:	ed 91       	ld	r30, X+
     a9e:	fc 91       	ld	r31, X
     aa0:	18 97       	sbiw	r26, 0x08	; 8
     aa2:	c6 81       	ldd	r28, Z+6	; 0x06
     aa4:	d7 81       	ldd	r29, Z+7	; 0x07
     aa6:	6c e3       	ldi	r22, 0x3C	; 60
     aa8:	70 e2       	ldi	r23, 0x20	; 32
     aaa:	ce 01       	movw	r24, r28
     aac:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    public:
      inline ExchangeState( I2CMaster * d )
        : driver_(d)
      { }
      State * execute( Packet & packet );
      void serialDebug() { *(driver_->getSerial()) << "t exchange" << endl; }
     ab0:	66 e0       	ldi	r22, 0x06	; 6
     ab2:	ce 01       	movw	r24, r28
     ab4:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <_ZN9I2CMaster10StartState11serialDebugEv>:
  public:
    StartState( I2CMaster * d )
      : driver_(d)
    { }
    State * execute( Packet & packet );
    void serialDebug() { *(driver_->getSerial()) << "start" << endl; }
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
  I2CMaster(TWI_t * interface, uint32_t i2c_freq, emstream * s);

  Transmitter * getTransmitter()  { return transmitter_; }
  Receiver *    getReceiver()     { return receiver_; }
  TWI_t *       getInterfacePtr() { return interface_; }
  emstream *    getSerial()       { return p_serial; }
     ac2:	dc 01       	movw	r26, r24
     ac4:	17 96       	adiw	r26, 0x07	; 7
     ac6:	ed 91       	ld	r30, X+
     ac8:	fc 91       	ld	r31, X
     aca:	18 97       	sbiw	r26, 0x08	; 8
     acc:	c6 81       	ldd	r28, Z+6	; 0x06
     ace:	d7 81       	ldd	r29, Z+7	; 0x07
     ad0:	67 e4       	ldi	r22, 0x47	; 71
     ad2:	70 e2       	ldi	r23, 0x20	; 32
     ad4:	ce 01       	movw	r24, r28
     ad6:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
  public:
    StartState( I2CMaster * d )
      : driver_(d)
    { }
    State * execute( Packet & packet );
    void serialDebug() { *(driver_->getSerial()) << "start" << endl; }
     ada:	66 e0       	ldi	r22, 0x06	; 6
     adc:	ce 01       	movw	r24, r28
     ade:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	08 95       	ret

00000ae8 <_ZN9I2CMaster11Transmitter11StatusState11serialDebugEv>:
  else {
    return false; }
}

void I2CMaster::Transmitter::StatusState::serialDebug()
{
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
  uint8_t status = driver_->getInterfacePtr()->MASTER.STATUS;
     aee:	dc 01       	movw	r26, r24
     af0:	17 96       	adiw	r26, 0x07	; 7
     af2:	ed 91       	ld	r30, X+
     af4:	fc 91       	ld	r31, X
     af6:	18 97       	sbiw	r26, 0x08	; 8

  I2CMaster(TWI_t * interface, uint32_t i2c_freq, emstream * s);

  Transmitter * getTransmitter()  { return transmitter_; }
  Receiver *    getReceiver()     { return receiver_; }
  TWI_t *       getInterfacePtr() { return interface_; }
     af8:	a4 81       	ldd	r26, Z+4	; 0x04
     afa:	b5 81       	ldd	r27, Z+5	; 0x05
     afc:	14 96       	adiw	r26, 0x04	; 4
     afe:	1c 91       	ld	r17, X
  emstream *    getSerial()       { return p_serial; }
     b00:	c6 81       	ldd	r28, Z+6	; 0x06
     b02:	d7 81       	ldd	r29, Z+7	; 0x07
     b04:	6d e4       	ldi	r22, 0x4D	; 77
     b06:	70 e2       	ldi	r23, 0x20	; 32
     b08:	ce 01       	movw	r24, r28
     b0a:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
  *(driver_->getSerial()) << "T Status: " << status << endl;
     b0e:	61 2f       	mov	r22, r17
     b10:	ce 01       	movw	r24, r28
     b12:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN8emstreamlsEh>
     b16:	66 e0       	ldi	r22, 0x06	; 6
     b18:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
}
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	1f 91       	pop	r17
     b22:	08 95       	ret

00000b24 <_ZN9I2CMaster8Receiver11StatusState11serialDebugEv>:

void I2CMaster::Receiver::StatusState::serialDebug()
{
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
  uint8_t status = driver_->getInterfacePtr()->MASTER.STATUS;
     b2a:	dc 01       	movw	r26, r24
     b2c:	17 96       	adiw	r26, 0x07	; 7
     b2e:	ed 91       	ld	r30, X+
     b30:	fc 91       	ld	r31, X
     b32:	18 97       	sbiw	r26, 0x08	; 8

  I2CMaster(TWI_t * interface, uint32_t i2c_freq, emstream * s);

  Transmitter * getTransmitter()  { return transmitter_; }
  Receiver *    getReceiver()     { return receiver_; }
  TWI_t *       getInterfacePtr() { return interface_; }
     b34:	a4 81       	ldd	r26, Z+4	; 0x04
     b36:	b5 81       	ldd	r27, Z+5	; 0x05
     b38:	14 96       	adiw	r26, 0x04	; 4
     b3a:	1c 91       	ld	r17, X
  emstream *    getSerial()       { return p_serial; }
     b3c:	c6 81       	ldd	r28, Z+6	; 0x06
     b3e:	d7 81       	ldd	r29, Z+7	; 0x07
     b40:	68 e5       	ldi	r22, 0x58	; 88
     b42:	70 e2       	ldi	r23, 0x20	; 32
     b44:	ce 01       	movw	r24, r28
     b46:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
  *(driver_->getSerial()) << "R Status: " << status << endl;
     b4a:	61 2f       	mov	r22, r17
     b4c:	ce 01       	movw	r24, r28
     b4e:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN8emstreamlsEh>
     b52:	66 e0       	ldi	r22, 0x06	; 6
     b54:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
}
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	08 95       	ret

00000b60 <_ZN9I2CMaster10ErrorState7executeER6Packet>:
  packet.isValid();
  return nextState_;
}

I2CMaster::State * I2CMaster::ErrorState::execute( Packet & packet )
{
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	ec 01       	movw	r28, r24
  uint8_t statusReg = driver_->getInterfacePtr()->MASTER.STATUS;
     b6c:	ef 81       	ldd	r30, Y+7	; 0x07
     b6e:	f8 85       	ldd	r31, Y+8	; 0x08

  I2CMaster(TWI_t * interface, uint32_t i2c_freq, emstream * s);

  Transmitter * getTransmitter()  { return transmitter_; }
  Receiver *    getReceiver()     { return receiver_; }
  TWI_t *       getInterfacePtr() { return interface_; }
     b70:	a4 81       	ldd	r26, Z+4	; 0x04
     b72:	b5 81       	ldd	r27, Z+5	; 0x05
     b74:	14 96       	adiw	r26, 0x04	; 4
     b76:	fc 90       	ld	r15, X
  emstream *    getSerial()       { return p_serial; }
     b78:	06 81       	ldd	r16, Z+6	; 0x06
     b7a:	17 81       	ldd	r17, Z+7	; 0x07
     b7c:	63 e6       	ldi	r22, 0x63	; 99
     b7e:	70 e2       	ldi	r23, 0x20	; 32
     b80:	c8 01       	movw	r24, r16
     b82:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
  *(driver_->getSerial()) << "I2C transfer failed with status: " << statusReg << endl;
     b86:	6f 2d       	mov	r22, r15
     b88:	c8 01       	movw	r24, r16
     b8a:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN8emstreamlsEh>
     b8e:	66 e0       	ldi	r22, 0x06	; 6
     b90:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
  return nextState_;
}
     b94:	8a 81       	ldd	r24, Y+2	; 0x02
     b96:	9b 81       	ldd	r25, Y+3	; 0x03
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	08 95       	ret

00000ba4 <_ZN9I2CMaster8Receiver17PacketStatusState7executeER6Packet>:
  else {
    return returnState_; }
}

I2CMaster::State * I2CMaster::Receiver::PacketStatusState::execute( Packet & packet )
{
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	8c 01       	movw	r16, r24
     bae:	eb 01       	movw	r28, r22
  if( packet.num_items_in() == packet.getSize() ) {
     bb0:	e8 81       	ld	r30, Y
     bb2:	f9 81       	ldd	r31, Y+1	; 0x01
     bb4:	04 8c       	ldd	r0, Z+28	; 0x1c
     bb6:	f5 8d       	ldd	r31, Z+29	; 0x1d
     bb8:	e0 2d       	mov	r30, r0
     bba:	cb 01       	movw	r24, r22
     bbc:	19 95       	eicall
     bbe:	2a 85       	ldd	r18, Y+10	; 0x0a
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	82 17       	cp	r24, r18
     bc4:	93 07       	cpc	r25, r19
     bc6:	79 f4       	brne	.+30     	; 0xbe6 <_ZN9I2CMaster8Receiver17PacketStatusState7executeER6Packet+0x42>
  interface_->MASTER.CTRLC |= TWI_MASTER_CMD_REPSTART_gc;
}

void I2CMaster::send_nack_stop(void)
{
  interface_->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     bc8:	d8 01       	movw	r26, r16
     bca:	17 96       	adiw	r26, 0x07	; 7
     bcc:	ed 91       	ld	r30, X+
     bce:	fc 91       	ld	r31, X
     bd0:	18 97       	sbiw	r26, 0x08	; 8
     bd2:	04 80       	ldd	r0, Z+4	; 0x04
     bd4:	f5 81       	ldd	r31, Z+5	; 0x05
     bd6:	e0 2d       	mov	r30, r0
     bd8:	87 e0       	ldi	r24, 0x07	; 7
     bda:	83 83       	std	Z+3, r24	; 0x03

I2CMaster::State * I2CMaster::Receiver::PacketStatusState::execute( Packet & packet )
{
  if( packet.num_items_in() == packet.getSize() ) {
    driver_->send_nack_stop();
    return nextState_; }
     bdc:	12 96       	adiw	r26, 0x02	; 2
     bde:	8d 91       	ld	r24, X+
     be0:	9c 91       	ld	r25, X
     be2:	13 97       	sbiw	r26, 0x03	; 3
     be4:	0e c0       	rjmp	.+28     	; 0xc02 <_ZN9I2CMaster8Receiver17PacketStatusState7executeER6Packet+0x5e>
  interface_->MASTER.CTRLC |= (1<<TWI_MASTER_CMD0_bp);
}

void I2CMaster::byte_recv(void)
{
  interface_->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     be6:	d8 01       	movw	r26, r16
     be8:	17 96       	adiw	r26, 0x07	; 7
     bea:	ed 91       	ld	r30, X+
     bec:	fc 91       	ld	r31, X
     bee:	18 97       	sbiw	r26, 0x08	; 8
     bf0:	04 80       	ldd	r0, Z+4	; 0x04
     bf2:	f5 81       	ldd	r31, Z+5	; 0x05
     bf4:	e0 2d       	mov	r30, r0
     bf6:	82 e0       	ldi	r24, 0x02	; 2
     bf8:	83 83       	std	Z+3, r24	; 0x03
  if( packet.num_items_in() == packet.getSize() ) {
    driver_->send_nack_stop();
    return nextState_; }
  else {
    driver_->byte_recv();
    return returnState_; }
     bfa:	14 96       	adiw	r26, 0x04	; 4
     bfc:	8d 91       	ld	r24, X+
     bfe:	9c 91       	ld	r25, X
     c00:	15 97       	sbiw	r26, 0x05	; 5
}
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	08 95       	ret

00000c0c <_ZN9I2CMaster11TransmitterC1EPS_>:

  *s << "I2CMaster created" << endl;
}


I2CMaster::Transmitter::Transmitter( I2CMaster * d )
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	ec 01       	movw	r28, r24
     c16:	8b 01       	movw	r16, r22
    startState_(new StartState( d )),
    statusState_(new StatusState( d, timeout_ )),
    exchangeState_(new ExchangeState( d )),
    packetStatusState_(new PacketStatusState( d )),
    doneState_(new DoneState( d )),
    errorState_(new ErrorState( d ))
     c18:	68 83       	st	Y, r22
     c1a:	79 83       	std	Y+1, r23	; 0x01
     c1c:	89 e0       	ldi	r24, 0x09	; 9
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
     c24:	fc 01       	movw	r30, r24
  
  class State
  {
  public:
    inline State() 
      : runs_(0)
     c26:	16 82       	std	Z+6, r1	; 0x06
  class StartState
    : public State
  {
  public:
    StartState( I2CMaster * d )
      : driver_(d)
     c28:	8f ea       	ldi	r24, 0xAF	; 175
     c2a:	90 e2       	ldi	r25, 0x20	; 32
     c2c:	80 83       	st	Z, r24
     c2e:	91 83       	std	Z+1, r25	; 0x01
     c30:	07 83       	std	Z+7, r16	; 0x07
     c32:	10 87       	std	Z+8, r17	; 0x08
     c34:	ec 83       	std	Y+4, r30	; 0x04
     c36:	fd 83       	std	Y+5, r31	; 0x05
     c38:	8b e0       	ldi	r24, 0x0B	; 11
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
     c40:	fc 01       	movw	r30, r24

I2CMaster::Transmitter::Transmitter( I2CMaster * d )
  : driver_(d),
    timeout_(10000),
    startState_(new StartState( d )),
    statusState_(new StatusState( d, timeout_ )),
     c42:	89 89       	ldd	r24, Y+17	; 0x11
     c44:	9a 89       	ldd	r25, Y+18	; 0x12
  
  class State
  {
  public:
    inline State() 
      : runs_(0)
     c46:	16 82       	std	Z+6, r1	; 0x06
      : public State
    {
    public:
      inline StatusState( I2CMaster * d, uint16_t timeout )
        : driver_(d),
          timeout_(timeout)
     c48:	27 eb       	ldi	r18, 0xB7	; 183
     c4a:	30 e2       	ldi	r19, 0x20	; 32
     c4c:	20 83       	st	Z, r18
     c4e:	31 83       	std	Z+1, r19	; 0x01
     c50:	07 83       	std	Z+7, r16	; 0x07
     c52:	10 87       	std	Z+8, r17	; 0x08
     c54:	81 87       	std	Z+9, r24	; 0x09
     c56:	92 87       	std	Z+10, r25	; 0x0a
    exchangeState_(new ExchangeState( d )),
    packetStatusState_(new PacketStatusState( d )),
    doneState_(new DoneState( d )),
    errorState_(new ErrorState( d ))
     c58:	ee 83       	std	Y+6, r30	; 0x06
     c5a:	ff 83       	std	Y+7, r31	; 0x07
     c5c:	89 e0       	ldi	r24, 0x09	; 9
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
     c64:	fc 01       	movw	r30, r24
  
  class State
  {
  public:
    inline State() 
      : runs_(0)
     c66:	16 82       	std	Z+6, r1	; 0x06
    class ExchangeState
      : public State
    {
    public:
      inline ExchangeState( I2CMaster * d )
        : driver_(d)
     c68:	87 ec       	ldi	r24, 0xC7	; 199
     c6a:	90 e2       	ldi	r25, 0x20	; 32
     c6c:	80 83       	st	Z, r24
     c6e:	91 83       	std	Z+1, r25	; 0x01
     c70:	07 83       	std	Z+7, r16	; 0x07
     c72:	10 87       	std	Z+8, r17	; 0x08
     c74:	e8 87       	std	Y+8, r30	; 0x08
     c76:	f9 87       	std	Y+9, r31	; 0x09
     c78:	89 e0       	ldi	r24, 0x09	; 9
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
     c80:	fc 01       	movw	r30, r24
  
  class State
  {
  public:
    inline State() 
      : runs_(0)
     c82:	16 82       	std	Z+6, r1	; 0x06
    class PacketStatusState
      : public State
    {
    public:
      inline PacketStatusState( I2CMaster * d )
        : driver_(d)
     c84:	87 ed       	ldi	r24, 0xD7	; 215
     c86:	90 e2       	ldi	r25, 0x20	; 32
     c88:	80 83       	st	Z, r24
     c8a:	91 83       	std	Z+1, r25	; 0x01
     c8c:	07 83       	std	Z+7, r16	; 0x07
     c8e:	10 87       	std	Z+8, r17	; 0x08
     c90:	ea 87       	std	Y+10, r30	; 0x0a
     c92:	fb 87       	std	Y+11, r31	; 0x0b
     c94:	89 e0       	ldi	r24, 0x09	; 9
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
     c9c:	fc 01       	movw	r30, r24
  
  class State
  {
  public:
    inline State() 
      : runs_(0)
     c9e:	16 82       	std	Z+6, r1	; 0x06
  class ErrorState
    : public State
  {
  public:
    inline ErrorState( I2CMaster * d )
      : driver_(d)
     ca0:	8f ee       	ldi	r24, 0xEF	; 239
     ca2:	90 e2       	ldi	r25, 0x20	; 32
     ca4:	80 83       	st	Z, r24
     ca6:	91 83       	std	Z+1, r25	; 0x01
     ca8:	07 83       	std	Z+7, r16	; 0x07
     caa:	10 87       	std	Z+8, r17	; 0x08
     cac:	ec 87       	std	Y+12, r30	; 0x0c
     cae:	fd 87       	std	Y+13, r31	; 0x0d
     cb0:	89 e0       	ldi	r24, 0x09	; 9
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
     cb8:	fc 01       	movw	r30, r24
  
  class State
  {
  public:
    inline State() 
      : runs_(0)
     cba:	16 82       	std	Z+6, r1	; 0x06
  class DoneState
    : public State
  {
  public:
    inline DoneState( I2CMaster * d )
      : driver_(d)
     cbc:	87 ee       	ldi	r24, 0xE7	; 231
     cbe:	90 e2       	ldi	r25, 0x20	; 32
     cc0:	80 83       	st	Z, r24
     cc2:	91 83       	std	Z+1, r25	; 0x01
     cc4:	07 83       	std	Z+7, r16	; 0x07
     cc6:	10 87       	std	Z+8, r17	; 0x08
     cc8:	ee 87       	std	Y+14, r30	; 0x0e
     cca:	ff 87       	std	Y+15, r31	; 0x0f
     ccc:	80 e1       	ldi	r24, 0x10	; 16
     cce:	97 e2       	ldi	r25, 0x27	; 39
     cd0:	89 8b       	std	Y+17, r24	; 0x11
     cd2:	9a 8b       	std	Y+18, r25	; 0x12
{
  startState_->setTransition(statusState_, statusState_);
     cd4:	8e 81       	ldd	r24, Y+6	; 0x06
     cd6:	9f 81       	ldd	r25, Y+7	; 0x07
     cd8:	ec 81       	ldd	r30, Y+4	; 0x04
     cda:	fd 81       	ldd	r31, Y+5	; 0x05
    inline State() 
      : runs_(0)
    { }
    void setTransition( State * nextState, State * returnState )
    {
      nextState_ = nextState;
     cdc:	82 83       	std	Z+2, r24	; 0x02
     cde:	93 83       	std	Z+3, r25	; 0x03
      returnState_ = returnState;
     ce0:	84 83       	std	Z+4, r24	; 0x04
     ce2:	95 83       	std	Z+5, r25	; 0x05
  statusState_->setTransition(exchangeState_, errorState_);
     ce4:	8c 85       	ldd	r24, Y+12	; 0x0c
     ce6:	9d 85       	ldd	r25, Y+13	; 0x0d
     ce8:	28 85       	ldd	r18, Y+8	; 0x08
     cea:	39 85       	ldd	r19, Y+9	; 0x09
     cec:	ee 81       	ldd	r30, Y+6	; 0x06
     cee:	ff 81       	ldd	r31, Y+7	; 0x07
    inline State() 
      : runs_(0)
    { }
    void setTransition( State * nextState, State * returnState )
    {
      nextState_ = nextState;
     cf0:	22 83       	std	Z+2, r18	; 0x02
     cf2:	33 83       	std	Z+3, r19	; 0x03
      returnState_ = returnState;
     cf4:	84 83       	std	Z+4, r24	; 0x04
     cf6:	95 83       	std	Z+5, r25	; 0x05
  exchangeState_->setTransition(packetStatusState_, packetStatusState_);
     cf8:	8a 85       	ldd	r24, Y+10	; 0x0a
     cfa:	9b 85       	ldd	r25, Y+11	; 0x0b
     cfc:	e8 85       	ldd	r30, Y+8	; 0x08
     cfe:	f9 85       	ldd	r31, Y+9	; 0x09
    inline State() 
      : runs_(0)
    { }
    void setTransition( State * nextState, State * returnState )
    {
      nextState_ = nextState;
     d00:	82 83       	std	Z+2, r24	; 0x02
     d02:	93 83       	std	Z+3, r25	; 0x03
      returnState_ = returnState;
     d04:	84 83       	std	Z+4, r24	; 0x04
     d06:	95 83       	std	Z+5, r25	; 0x05
  packetStatusState_->setTransition(doneState_, statusState_);
     d08:	8e 81       	ldd	r24, Y+6	; 0x06
     d0a:	9f 81       	ldd	r25, Y+7	; 0x07
     d0c:	2e 85       	ldd	r18, Y+14	; 0x0e
     d0e:	3f 85       	ldd	r19, Y+15	; 0x0f
     d10:	ea 85       	ldd	r30, Y+10	; 0x0a
     d12:	fb 85       	ldd	r31, Y+11	; 0x0b
    inline State() 
      : runs_(0)
    { }
    void setTransition( State * nextState, State * returnState )
    {
      nextState_ = nextState;
     d14:	22 83       	std	Z+2, r18	; 0x02
     d16:	33 83       	std	Z+3, r19	; 0x03
      returnState_ = returnState;
     d18:	84 83       	std	Z+4, r24	; 0x04
     d1a:	95 83       	std	Z+5, r25	; 0x05
}
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	08 95       	ret

00000d26 <_ZN9I2CMaster8ReceiverC1EPS_>:

I2CMaster::Receiver::Receiver( I2CMaster * d )
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	ec 01       	movw	r28, r24
     d30:	8b 01       	movw	r16, r22
    startState_(new StartState( d )),
    statusState_(new StatusState( d, timeout_ )),
    exchangeState_(new ExchangeState( d )),
    packetStatusState_(new PacketStatusState( d )),
    doneState_(new DoneState( d )),
    errorState_(new ErrorState( d ))
     d32:	68 83       	st	Y, r22
     d34:	79 83       	std	Y+1, r23	; 0x01
     d36:	89 e0       	ldi	r24, 0x09	; 9
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
     d3e:	fc 01       	movw	r30, r24
  
  class State
  {
  public:
    inline State() 
      : runs_(0)
     d40:	16 82       	std	Z+6, r1	; 0x06
  class StartState
    : public State
  {
  public:
    StartState( I2CMaster * d )
      : driver_(d)
     d42:	8f ea       	ldi	r24, 0xAF	; 175
     d44:	90 e2       	ldi	r25, 0x20	; 32
     d46:	80 83       	st	Z, r24
     d48:	91 83       	std	Z+1, r25	; 0x01
     d4a:	07 83       	std	Z+7, r16	; 0x07
     d4c:	10 87       	std	Z+8, r17	; 0x08
     d4e:	ec 83       	std	Y+4, r30	; 0x04
     d50:	fd 83       	std	Y+5, r31	; 0x05
     d52:	8b e0       	ldi	r24, 0x0B	; 11
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
     d5a:	fc 01       	movw	r30, r24

I2CMaster::Receiver::Receiver( I2CMaster * d )
  : driver_(d),
    timeout_(10000),
    startState_(new StartState( d )),
    statusState_(new StatusState( d, timeout_ )),
     d5c:	89 89       	ldd	r24, Y+17	; 0x11
     d5e:	9a 89       	ldd	r25, Y+18	; 0x12
  
  class State
  {
  public:
    inline State() 
      : runs_(0)
     d60:	16 82       	std	Z+6, r1	; 0x06
      : public State
    {
    public:
      inline StatusState( I2CMaster * d, uint16_t timeout )
        : driver_(d),
          timeout_(timeout)
     d62:	2f eb       	ldi	r18, 0xBF	; 191
     d64:	30 e2       	ldi	r19, 0x20	; 32
     d66:	20 83       	st	Z, r18
     d68:	31 83       	std	Z+1, r19	; 0x01
     d6a:	07 83       	std	Z+7, r16	; 0x07
     d6c:	10 87       	std	Z+8, r17	; 0x08
     d6e:	81 87       	std	Z+9, r24	; 0x09
     d70:	92 87       	std	Z+10, r25	; 0x0a
    exchangeState_(new ExchangeState( d )),
    packetStatusState_(new PacketStatusState( d )),
    doneState_(new DoneState( d )),
    errorState_(new ErrorState( d ))
     d72:	ee 83       	std	Y+6, r30	; 0x06
     d74:	ff 83       	std	Y+7, r31	; 0x07
     d76:	89 e0       	ldi	r24, 0x09	; 9
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
     d7e:	fc 01       	movw	r30, r24
  
  class State
  {
  public:
    inline State() 
      : runs_(0)
     d80:	16 82       	std	Z+6, r1	; 0x06
    class ExchangeState
      : public State
    {
    public:
      inline ExchangeState( I2CMaster * d )
        : driver_(d)
     d82:	8f ec       	ldi	r24, 0xCF	; 207
     d84:	90 e2       	ldi	r25, 0x20	; 32
     d86:	80 83       	st	Z, r24
     d88:	91 83       	std	Z+1, r25	; 0x01
     d8a:	07 83       	std	Z+7, r16	; 0x07
     d8c:	10 87       	std	Z+8, r17	; 0x08
     d8e:	e8 87       	std	Y+8, r30	; 0x08
     d90:	f9 87       	std	Y+9, r31	; 0x09
     d92:	89 e0       	ldi	r24, 0x09	; 9
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
     d9a:	fc 01       	movw	r30, r24
  
  class State
  {
  public:
    inline State() 
      : runs_(0)
     d9c:	16 82       	std	Z+6, r1	; 0x06
    class PacketStatusState
      : public State
    {
    public:
      inline PacketStatusState( I2CMaster * d )
        : driver_(d)
     d9e:	8f ed       	ldi	r24, 0xDF	; 223
     da0:	90 e2       	ldi	r25, 0x20	; 32
     da2:	80 83       	st	Z, r24
     da4:	91 83       	std	Z+1, r25	; 0x01
     da6:	07 83       	std	Z+7, r16	; 0x07
     da8:	10 87       	std	Z+8, r17	; 0x08
     daa:	ea 87       	std	Y+10, r30	; 0x0a
     dac:	fb 87       	std	Y+11, r31	; 0x0b
     dae:	89 e0       	ldi	r24, 0x09	; 9
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
     db6:	fc 01       	movw	r30, r24
  
  class State
  {
  public:
    inline State() 
      : runs_(0)
     db8:	16 82       	std	Z+6, r1	; 0x06
  class ErrorState
    : public State
  {
  public:
    inline ErrorState( I2CMaster * d )
      : driver_(d)
     dba:	8f ee       	ldi	r24, 0xEF	; 239
     dbc:	90 e2       	ldi	r25, 0x20	; 32
     dbe:	80 83       	st	Z, r24
     dc0:	91 83       	std	Z+1, r25	; 0x01
     dc2:	07 83       	std	Z+7, r16	; 0x07
     dc4:	10 87       	std	Z+8, r17	; 0x08
     dc6:	ec 87       	std	Y+12, r30	; 0x0c
     dc8:	fd 87       	std	Y+13, r31	; 0x0d
     dca:	89 e0       	ldi	r24, 0x09	; 9
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
     dd2:	fc 01       	movw	r30, r24
  
  class State
  {
  public:
    inline State() 
      : runs_(0)
     dd4:	16 82       	std	Z+6, r1	; 0x06
  class DoneState
    : public State
  {
  public:
    inline DoneState( I2CMaster * d )
      : driver_(d)
     dd6:	87 ee       	ldi	r24, 0xE7	; 231
     dd8:	90 e2       	ldi	r25, 0x20	; 32
     dda:	80 83       	st	Z, r24
     ddc:	91 83       	std	Z+1, r25	; 0x01
     dde:	07 83       	std	Z+7, r16	; 0x07
     de0:	10 87       	std	Z+8, r17	; 0x08
     de2:	ee 87       	std	Y+14, r30	; 0x0e
     de4:	ff 87       	std	Y+15, r31	; 0x0f
     de6:	80 e1       	ldi	r24, 0x10	; 16
     de8:	97 e2       	ldi	r25, 0x27	; 39
     dea:	89 8b       	std	Y+17, r24	; 0x11
     dec:	9a 8b       	std	Y+18, r25	; 0x12
{
  startState_->setTransition(statusState_, statusState_);
     dee:	8e 81       	ldd	r24, Y+6	; 0x06
     df0:	9f 81       	ldd	r25, Y+7	; 0x07
     df2:	ec 81       	ldd	r30, Y+4	; 0x04
     df4:	fd 81       	ldd	r31, Y+5	; 0x05
    inline State() 
      : runs_(0)
    { }
    void setTransition( State * nextState, State * returnState )
    {
      nextState_ = nextState;
     df6:	82 83       	std	Z+2, r24	; 0x02
     df8:	93 83       	std	Z+3, r25	; 0x03
      returnState_ = returnState;
     dfa:	84 83       	std	Z+4, r24	; 0x04
     dfc:	95 83       	std	Z+5, r25	; 0x05
  statusState_->setTransition(exchangeState_, errorState_);
     dfe:	8c 85       	ldd	r24, Y+12	; 0x0c
     e00:	9d 85       	ldd	r25, Y+13	; 0x0d
     e02:	28 85       	ldd	r18, Y+8	; 0x08
     e04:	39 85       	ldd	r19, Y+9	; 0x09
     e06:	ee 81       	ldd	r30, Y+6	; 0x06
     e08:	ff 81       	ldd	r31, Y+7	; 0x07
    inline State() 
      : runs_(0)
    { }
    void setTransition( State * nextState, State * returnState )
    {
      nextState_ = nextState;
     e0a:	22 83       	std	Z+2, r18	; 0x02
     e0c:	33 83       	std	Z+3, r19	; 0x03
      returnState_ = returnState;
     e0e:	84 83       	std	Z+4, r24	; 0x04
     e10:	95 83       	std	Z+5, r25	; 0x05
  exchangeState_->setTransition(packetStatusState_, packetStatusState_);
     e12:	8a 85       	ldd	r24, Y+10	; 0x0a
     e14:	9b 85       	ldd	r25, Y+11	; 0x0b
     e16:	e8 85       	ldd	r30, Y+8	; 0x08
     e18:	f9 85       	ldd	r31, Y+9	; 0x09
    inline State() 
      : runs_(0)
    { }
    void setTransition( State * nextState, State * returnState )
    {
      nextState_ = nextState;
     e1a:	82 83       	std	Z+2, r24	; 0x02
     e1c:	93 83       	std	Z+3, r25	; 0x03
      returnState_ = returnState;
     e1e:	84 83       	std	Z+4, r24	; 0x04
     e20:	95 83       	std	Z+5, r25	; 0x05
  packetStatusState_->setTransition(doneState_, statusState_);
     e22:	8e 81       	ldd	r24, Y+6	; 0x06
     e24:	9f 81       	ldd	r25, Y+7	; 0x07
     e26:	2e 85       	ldd	r18, Y+14	; 0x0e
     e28:	3f 85       	ldd	r19, Y+15	; 0x0f
     e2a:	ea 85       	ldd	r30, Y+10	; 0x0a
     e2c:	fb 85       	ldd	r31, Y+11	; 0x0b
    inline State() 
      : runs_(0)
    { }
    void setTransition( State * nextState, State * returnState )
    {
      nextState_ = nextState;
     e2e:	22 83       	std	Z+2, r18	; 0x02
     e30:	33 83       	std	Z+3, r19	; 0x03
      returnState_ = returnState;
     e32:	84 83       	std	Z+4, r24	; 0x04
     e34:	95 83       	std	Z+5, r25	; 0x05
}
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	08 95       	ret

00000e40 <_ZN9I2CMaster11Transmitter3runER6Packet>:

bool I2CMaster::Transmitter::run( Packet & packet )
{
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	ec 01       	movw	r28, r24
     e4a:	8b 01       	movw	r16, r22
  currentState_ = startState_;
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	9d 81       	ldd	r25, Y+5	; 0x05
     e50:	8a 83       	std	Y+2, r24	; 0x02
     e52:	9b 83       	std	Y+3, r25	; 0x03
  
  while( (currentState_ != doneState_) && (currentState_ != errorState_) ) {
     e54:	2e 85       	ldd	r18, Y+14	; 0x0e
     e56:	3f 85       	ldd	r19, Y+15	; 0x0f
     e58:	82 17       	cp	r24, r18
     e5a:	93 07       	cpc	r25, r19
     e5c:	d9 f0       	breq	.+54     	; 0xe94 <_ZN9I2CMaster11Transmitter3runER6Packet+0x54>
     e5e:	2c 85       	ldd	r18, Y+12	; 0x0c
     e60:	3d 85       	ldd	r19, Y+13	; 0x0d
     e62:	82 17       	cp	r24, r18
     e64:	93 07       	cpc	r25, r19
     e66:	31 f4       	brne	.+12     	; 0xe74 <_ZN9I2CMaster11Transmitter3runER6Packet+0x34>
     e68:	17 c0       	rjmp	.+46     	; 0xe98 <_ZN9I2CMaster11Transmitter3runER6Packet+0x58>
     e6a:	2c 85       	ldd	r18, Y+12	; 0x0c
     e6c:	3d 85       	ldd	r19, Y+13	; 0x0d
     e6e:	28 17       	cp	r18, r24
     e70:	39 07       	cpc	r19, r25
     e72:	99 f0       	breq	.+38     	; 0xe9a <_ZN9I2CMaster11Transmitter3runER6Packet+0x5a>
    currentState_ = currentState_->execute(packet); }
     e74:	dc 01       	movw	r26, r24
     e76:	ed 91       	ld	r30, X+
     e78:	fc 91       	ld	r31, X
     e7a:	01 90       	ld	r0, Z+
     e7c:	f0 81       	ld	r31, Z
     e7e:	e0 2d       	mov	r30, r0
     e80:	b8 01       	movw	r22, r16
     e82:	19 95       	eicall
     e84:	8a 83       	std	Y+2, r24	; 0x02
     e86:	9b 83       	std	Y+3, r25	; 0x03

bool I2CMaster::Transmitter::run( Packet & packet )
{
  currentState_ = startState_;
  
  while( (currentState_ != doneState_) && (currentState_ != errorState_) ) {
     e88:	2e 85       	ldd	r18, Y+14	; 0x0e
     e8a:	3f 85       	ldd	r19, Y+15	; 0x0f
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	61 f7       	brne	.-40     	; 0xe6a <_ZN9I2CMaster11Transmitter3runER6Packet+0x2a>
     e92:	03 c0       	rjmp	.+6      	; 0xe9a <_ZN9I2CMaster11Transmitter3runER6Packet+0x5a>
     e94:	c9 01       	movw	r24, r18
     e96:	01 c0       	rjmp	.+2      	; 0xe9a <_ZN9I2CMaster11Transmitter3runER6Packet+0x5a>
     e98:	c9 01       	movw	r24, r18
    currentState_ = currentState_->execute(packet); }

  currentState_->execute(packet);
     e9a:	dc 01       	movw	r26, r24
     e9c:	ed 91       	ld	r30, X+
     e9e:	fc 91       	ld	r31, X
     ea0:	01 90       	ld	r0, Z+
     ea2:	f0 81       	ld	r31, Z
     ea4:	e0 2d       	mov	r30, r0
     ea6:	b8 01       	movw	r22, r16
     ea8:	19 95       	eicall
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	4a 81       	ldd	r20, Y+2	; 0x02
     eae:	5b 81       	ldd	r21, Y+3	; 0x03
     eb0:	2e 85       	ldd	r18, Y+14	; 0x0e
     eb2:	3f 85       	ldd	r19, Y+15	; 0x0f
     eb4:	42 17       	cp	r20, r18
     eb6:	53 07       	cpc	r21, r19
     eb8:	09 f0       	breq	.+2      	; 0xebc <_ZN9I2CMaster11Transmitter3runER6Packet+0x7c>
     eba:	80 e0       	ldi	r24, 0x00	; 0

  if( currentState_ == doneState_ ) {
    return true; }
  else {
    return false; }
}
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	1f 91       	pop	r17
     ec2:	0f 91       	pop	r16
     ec4:	08 95       	ret

00000ec6 <_ZN9I2CMaster8Receiver3runER6Packet>:
  uint8_t status = driver_->getInterfacePtr()->MASTER.STATUS;
  *(driver_->getSerial()) << "R Status: " << status << endl;
}

Packet & I2CMaster::Receiver::run( Packet & packet )
{
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	ec 01       	movw	r28, r24
     ed0:	8b 01       	movw	r16, r22
  currentState_ = startState_;
     ed2:	8c 81       	ldd	r24, Y+4	; 0x04
     ed4:	9d 81       	ldd	r25, Y+5	; 0x05
     ed6:	8a 83       	std	Y+2, r24	; 0x02
     ed8:	9b 83       	std	Y+3, r25	; 0x03
  
  while( (currentState_ != doneState_) && (currentState_ != errorState_) ) {
     eda:	2e 85       	ldd	r18, Y+14	; 0x0e
     edc:	3f 85       	ldd	r19, Y+15	; 0x0f
     ede:	82 17       	cp	r24, r18
     ee0:	93 07       	cpc	r25, r19
     ee2:	d9 f0       	breq	.+54     	; 0xf1a <_ZN9I2CMaster8Receiver3runER6Packet+0x54>
     ee4:	2c 85       	ldd	r18, Y+12	; 0x0c
     ee6:	3d 85       	ldd	r19, Y+13	; 0x0d
     ee8:	82 17       	cp	r24, r18
     eea:	93 07       	cpc	r25, r19
     eec:	31 f4       	brne	.+12     	; 0xefa <_ZN9I2CMaster8Receiver3runER6Packet+0x34>
     eee:	17 c0       	rjmp	.+46     	; 0xf1e <_ZN9I2CMaster8Receiver3runER6Packet+0x58>
     ef0:	2c 85       	ldd	r18, Y+12	; 0x0c
     ef2:	3d 85       	ldd	r19, Y+13	; 0x0d
     ef4:	28 17       	cp	r18, r24
     ef6:	39 07       	cpc	r19, r25
     ef8:	99 f0       	breq	.+38     	; 0xf20 <_ZN9I2CMaster8Receiver3runER6Packet+0x5a>
    currentState_ = currentState_->execute(packet); }
     efa:	dc 01       	movw	r26, r24
     efc:	ed 91       	ld	r30, X+
     efe:	fc 91       	ld	r31, X
     f00:	01 90       	ld	r0, Z+
     f02:	f0 81       	ld	r31, Z
     f04:	e0 2d       	mov	r30, r0
     f06:	b8 01       	movw	r22, r16
     f08:	19 95       	eicall
     f0a:	8a 83       	std	Y+2, r24	; 0x02
     f0c:	9b 83       	std	Y+3, r25	; 0x03

Packet & I2CMaster::Receiver::run( Packet & packet )
{
  currentState_ = startState_;
  
  while( (currentState_ != doneState_) && (currentState_ != errorState_) ) {
     f0e:	2e 85       	ldd	r18, Y+14	; 0x0e
     f10:	3f 85       	ldd	r19, Y+15	; 0x0f
     f12:	28 17       	cp	r18, r24
     f14:	39 07       	cpc	r19, r25
     f16:	61 f7       	brne	.-40     	; 0xef0 <_ZN9I2CMaster8Receiver3runER6Packet+0x2a>
     f18:	03 c0       	rjmp	.+6      	; 0xf20 <_ZN9I2CMaster8Receiver3runER6Packet+0x5a>
     f1a:	c9 01       	movw	r24, r18
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <_ZN9I2CMaster8Receiver3runER6Packet+0x5a>
     f1e:	c9 01       	movw	r24, r18
    currentState_ = currentState_->execute(packet); }

  currentState_->execute(packet);
     f20:	dc 01       	movw	r26, r24
     f22:	ed 91       	ld	r30, X+
     f24:	fc 91       	ld	r31, X
     f26:	01 90       	ld	r0, Z+
     f28:	f0 81       	ld	r31, Z
     f2a:	e0 2d       	mov	r30, r0
     f2c:	b8 01       	movw	r22, r16
     f2e:	19 95       	eicall

  return packet;
}
     f30:	c8 01       	movw	r24, r16
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	08 95       	ret

00000f3c <_ZN9I2CMaster12set_baudrateEm>:
  *(driver_->getSerial()) << "I2C transfer failed with status: " << statusReg << endl;
  return nextState_;
}

void I2CMaster::set_baudrate(uint32_t i2c_freq)
{
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	ec 01       	movw	r28, r24
  baudrate = (F_CPU / (2 * i2c_freq)) - 5;
     f42:	9a 01       	movw	r18, r20
     f44:	ab 01       	movw	r20, r22
     f46:	22 0f       	add	r18, r18
     f48:	33 1f       	adc	r19, r19
     f4a:	44 1f       	adc	r20, r20
     f4c:	55 1f       	adc	r21, r21
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	78 e4       	ldi	r23, 0x48	; 72
     f52:	88 ee       	ldi	r24, 0xE8	; 232
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	0e 94 93 26 	call	0x4d26	; 0x4d26 <__udivmodsi4>
     f5a:	25 50       	subi	r18, 0x05	; 5
     f5c:	2a 87       	std	Y+10, r18	; 0x0a
  interface_->MASTER.BAUD = baudrate;
     f5e:	ec 81       	ldd	r30, Y+4	; 0x04
     f60:	fd 81       	ldd	r31, Y+5	; 0x05
     f62:	25 83       	std	Z+5, r18	; 0x05
}
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	08 95       	ret

00000f6a <_ZN9I2CMasterC1EP10TWI_structmP8emstream>:
 *  Author: Kevin
 */ 

#include "I2CMaster.h"

I2CMaster::I2CMaster(TWI_t * interface, uint32_t i2c_freq, emstream * s)
     f6a:	ef 92       	push	r14
     f6c:	ff 92       	push	r15
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	ec 01       	movw	r28, r24
     f78:	7b 01       	movw	r14, r22
     f7a:	ba 01       	movw	r22, r20
     f7c:	a9 01       	movw	r20, r18
  : interface_(interface), 
    i2c_freq(i2c_freq),
    p_serial(s)
     f7e:	ec 82       	std	Y+4, r14	; 0x04
     f80:	fd 82       	std	Y+5, r15	; 0x05
     f82:	0e 83       	std	Y+6, r16	; 0x06
     f84:	1f 83       	std	Y+7, r17	; 0x07
     f86:	4b 87       	std	Y+11, r20	; 0x0b
     f88:	5c 87       	std	Y+12, r21	; 0x0c
     f8a:	6d 87       	std	Y+13, r22	; 0x0d
     f8c:	7e 87       	std	Y+14, r23	; 0x0e
{ 
  if (interface == &TWIC) {
     f8e:	80 e8       	ldi	r24, 0x80	; 128
     f90:	e8 16       	cp	r14, r24
     f92:	84 e0       	ldi	r24, 0x04	; 4
     f94:	f8 06       	cpc	r15, r24
     f96:	29 f4       	brne	.+10     	; 0xfa2 <_ZN9I2CMasterC1EP10TWI_structmP8emstream+0x38>
    bus_port = &PORTC; }
     f98:	80 e4       	ldi	r24, 0x40	; 64
     f9a:	96 e0       	ldi	r25, 0x06	; 6
     f9c:	88 87       	std	Y+8, r24	; 0x08
     f9e:	99 87       	std	Y+9, r25	; 0x09
     fa0:	09 c0       	rjmp	.+18     	; 0xfb4 <_ZN9I2CMasterC1EP10TWI_structmP8emstream+0x4a>
  else if (interface == &TWIE) {
     fa2:	e0 ea       	ldi	r30, 0xA0	; 160
     fa4:	ee 16       	cp	r14, r30
     fa6:	e4 e0       	ldi	r30, 0x04	; 4
     fa8:	fe 06       	cpc	r15, r30
     faa:	21 f4       	brne	.+8      	; 0xfb4 <_ZN9I2CMasterC1EP10TWI_structmP8emstream+0x4a>
    bus_port = &PORTE; }
     fac:	80 e8       	ldi	r24, 0x80	; 128
     fae:	96 e0       	ldi	r25, 0x06	; 6
     fb0:	88 87       	std	Y+8, r24	; 0x08
     fb2:	99 87       	std	Y+9, r25	; 0x09
  
  bus_port->DIRSET = PIN0_bm | PIN1_bm;
     fb4:	e8 85       	ldd	r30, Y+8	; 0x08
     fb6:	f9 85       	ldd	r31, Y+9	; 0x09
     fb8:	83 e0       	ldi	r24, 0x03	; 3
     fba:	81 83       	std	Z+1, r24	; 0x01
  bus_port->PIN0CTRL = PORT_OPC_WIREDANDPULL_gc; //SDA pull up output
     fbc:	e8 85       	ldd	r30, Y+8	; 0x08
     fbe:	f9 85       	ldd	r31, Y+9	; 0x09
     fc0:	88 e3       	ldi	r24, 0x38	; 56
     fc2:	80 8b       	std	Z+16, r24	; 0x10
  bus_port->PIN1CTRL = PORT_OPC_WIREDANDPULL_gc; //SCL pull up output
     fc4:	e8 85       	ldd	r30, Y+8	; 0x08
     fc6:	f9 85       	ldd	r31, Y+9	; 0x09
     fc8:	81 8b       	std	Z+17, r24	; 0x11
  // Set the quick command enable bit so that status interrupt flags are set immediately after slave ACKs
  interface->MASTER.CTRLB = 1 << 1;
     fca:	82 e0       	ldi	r24, 0x02	; 2
     fcc:	f7 01       	movw	r30, r14
     fce:	82 83       	std	Z+2, r24	; 0x02
  set_baudrate(i2c_freq); //baud rate is set such that TWI freq=100KHz
     fd0:	ce 01       	movw	r24, r28
     fd2:	0e 94 9e 07 	call	0xf3c	; 0xf3c <_ZN9I2CMaster12set_baudrateEm>
  interface->MASTER.STATUS |= TWI_MASTER_RIF_bm | TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm | TWI_MASTER_BUSERR_bm | TWI_MASTER_BUSSTATE_IDLE_gc; //clear all flags initially and select bus state IDLE
     fd6:	f7 01       	movw	r30, r14
     fd8:	84 81       	ldd	r24, Z+4	; 0x04
     fda:	8d 6c       	ori	r24, 0xCD	; 205
     fdc:	84 83       	std	Z+4, r24	; 0x04
  interface->MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
     fde:	88 e0       	ldi	r24, 0x08	; 8
     fe0:	81 83       	std	Z+1, r24	; 0x01

  transmitter_ = new Transmitter(this);
     fe2:	83 e1       	ldi	r24, 0x13	; 19
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
     fea:	7c 01       	movw	r14, r24
     fec:	be 01       	movw	r22, r28
     fee:	0e 94 06 06 	call	0xc0c	; 0xc0c <_ZN9I2CMaster11TransmitterC1EPS_>
     ff2:	e8 82       	st	Y, r14
     ff4:	f9 82       	std	Y+1, r15	; 0x01
  receiver_ = new Receiver(this);
     ff6:	84 e1       	ldi	r24, 0x14	; 20
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
     ffe:	7c 01       	movw	r14, r24
    1000:	be 01       	movw	r22, r28
    1002:	0e 94 93 06 	call	0xd26	; 0xd26 <_ZN9I2CMaster8ReceiverC1EPS_>
    1006:	ea 82       	std	Y+2, r14	; 0x02
    1008:	fb 82       	std	Y+3, r15	; 0x03
    100a:	65 e8       	ldi	r22, 0x85	; 133
    100c:	70 e2       	ldi	r23, 0x20	; 32
    100e:	c8 01       	movw	r24, r16
    1010:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>

  *s << "I2CMaster created" << endl;
    1014:	66 e0       	ldi	r22, 0x06	; 6
    1016:	c8 01       	movw	r24, r16
    1018:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
}
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	08 95       	ret

0000102a <_ZN9I2CMaster10send_startEv>:
  send_nack_stop();
}

void I2CMaster::send_start(void)
{
  interface_->MASTER.CTRLC |= (1<<TWI_MASTER_CMD0_bp);
    102a:	dc 01       	movw	r26, r24
    102c:	14 96       	adiw	r26, 0x04	; 4
    102e:	ed 91       	ld	r30, X+
    1030:	fc 91       	ld	r31, X
    1032:	15 97       	sbiw	r26, 0x05	; 5
    1034:	83 81       	ldd	r24, Z+3	; 0x03
    1036:	81 60       	ori	r24, 0x01	; 1
    1038:	83 83       	std	Z+3, r24	; 0x03
    103a:	08 95       	ret

0000103c <_ZN9I2CMaster10StartState7executeER6Packet>:

  return packet;
}

I2CMaster::State * I2CMaster::StartState::execute( Packet & packet )
{
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	ec 01       	movw	r28, r24
    1046:	cb 01       	movw	r24, r22
  uint8_t * startCommand;
  packet.get(startCommand);
    1048:	db 01       	movw	r26, r22
    104a:	ed 91       	ld	r30, X+
    104c:	fc 91       	ld	r31, X
    104e:	02 84       	ldd	r0, Z+10	; 0x0a
    1050:	f3 85       	ldd	r31, Z+11	; 0x0b
    1052:	e0 2d       	mov	r30, r0
    1054:	00 e0       	ldi	r16, 0x00	; 0
    1056:	10 e0       	ldi	r17, 0x00	; 0
    1058:	b8 01       	movw	r22, r16
    105a:	19 95       	eicall
  driver_->send_start();
    105c:	8f 81       	ldd	r24, Y+7	; 0x07
    105e:	98 85       	ldd	r25, Y+8	; 0x08
    1060:	0e 94 15 08 	call	0x102a	; 0x102a <_ZN9I2CMaster10send_startEv>

  I2CMaster(TWI_t * interface, uint32_t i2c_freq, emstream * s);

  Transmitter * getTransmitter()  { return transmitter_; }
  Receiver *    getReceiver()     { return receiver_; }
  TWI_t *       getInterfacePtr() { return interface_; }
    1064:	ef 81       	ldd	r30, Y+7	; 0x07
    1066:	f8 85       	ldd	r31, Y+8	; 0x08
    1068:	04 80       	ldd	r0, Z+4	; 0x04
    106a:	f5 81       	ldd	r31, Z+5	; 0x05
    106c:	e0 2d       	mov	r30, r0
  driver_->getInterfacePtr()->MASTER.ADDR = *startCommand;
    106e:	d8 01       	movw	r26, r16
    1070:	8c 91       	ld	r24, X
    1072:	86 83       	std	Z+6, r24	; 0x06
  return nextState_;
}
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	9b 81       	ldd	r25, Y+3	; 0x03
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	08 95       	ret

00001082 <_ZN6MB120212RangeCommand11writePacketER6Packet>:
		 */
		virtual bool ISR_butt_in (const data_type& item)
		{
			(void) item;                    // This just shuts up a compiler warning
			return (false);
		}
    1082:	db 01       	movw	r26, r22
    1084:	bc 01       	movw	r22, r24
    1086:	6e 5f       	subi	r22, 0xFE	; 254
    1088:	7f 4f       	sbci	r23, 0xFF	; 255
    108a:	ed 91       	ld	r30, X+
    108c:	fc 91       	ld	r31, X
    108e:	11 97       	sbiw	r26, 0x01	; 1
    1090:	01 90       	ld	r0, Z+
    1092:	f0 81       	ld	r31, Z
    1094:	e0 2d       	mov	r30, r0
    1096:	cd 01       	movw	r24, r26
    1098:	19 95       	eicall
    109a:	08 95       	ret

0000109c <_ZN9frt_queueIhE16ISR_num_items_inEv>:
		 *  called only from within an interrupt service routine.
		 *  @return The number of items in the queue
		 */
		size_t ISR_num_items_in (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle));
    109c:	fc 01       	movw	r30, r24
    109e:	84 81       	ldd	r24, Z+4	; 0x04
    10a0:	95 81       	ldd	r25, Z+5	; 0x05
    10a2:	0e 94 8f 14 	call	0x291e	; 0x291e <uxQueueMessagesWaitingFromISR>
		}
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	08 95       	ret

000010aa <_ZN9frt_queueIhE13ISR_not_emptyEv>:
		 *  an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool ISR_not_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) != 0);
    10aa:	fc 01       	movw	r30, r24
    10ac:	84 81       	ldd	r24, Z+4	; 0x04
    10ae:	95 81       	ldd	r25, Z+5	; 0x05
    10b0:	0e 94 8f 14 	call	0x291e	; 0x291e <uxQueueMessagesWaitingFromISR>
    10b4:	91 e0       	ldi	r25, 0x01	; 1
    10b6:	81 11       	cpse	r24, r1
    10b8:	01 c0       	rjmp	.+2      	; 0x10bc <_ZN9frt_queueIhE13ISR_not_emptyEv+0x12>
    10ba:	90 e0       	ldi	r25, 0x00	; 0
		}
    10bc:	89 2f       	mov	r24, r25
    10be:	08 95       	ret

000010c0 <_ZN9frt_queueIhE12ISR_is_emptyEv>:
		 *  routine. It must not be used in normal non-ISR code. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool ISR_is_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) == 0);
    10c0:	fc 01       	movw	r30, r24
    10c2:	84 81       	ldd	r24, Z+4	; 0x04
    10c4:	95 81       	ldd	r25, Z+5	; 0x05
    10c6:	0e 94 8f 14 	call	0x291e	; 0x291e <uxQueueMessagesWaitingFromISR>
    10ca:	91 e0       	ldi	r25, 0x01	; 1
    10cc:	81 11       	cpse	r24, r1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
		}
    10d0:	89 2f       	mov	r24, r25
    10d2:	08 95       	ret

000010d4 <_ZN9frt_queueIhE12num_items_inEv>:
		 *  ISR_num_items_in() can be called from within an ISR. 
		 *  @return The number of items in the queue
		 */
		size_t num_items_in (void)
		{
			return (uxQueueMessagesWaiting (handle));
    10d4:	fc 01       	movw	r30, r24
    10d6:	84 81       	ldd	r24, Z+4	; 0x04
    10d8:	95 81       	ldd	r25, Z+5	; 0x05
    10da:	0e 94 87 14 	call	0x290e	; 0x290e <uxQueueMessagesWaiting>
		}
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	08 95       	ret

000010e2 <_ZN9frt_queueIhE9not_emptyEv>:
		 *  \b not be called from within an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool not_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) != 0);
    10e2:	fc 01       	movw	r30, r24
    10e4:	84 81       	ldd	r24, Z+4	; 0x04
    10e6:	95 81       	ldd	r25, Z+5	; 0x05
    10e8:	0e 94 87 14 	call	0x290e	; 0x290e <uxQueueMessagesWaiting>
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	81 11       	cpse	r24, r1
    10f0:	01 c0       	rjmp	.+2      	; 0x10f4 <_ZN9frt_queueIhE9not_emptyEv+0x12>
    10f2:	90 e0       	ldi	r25, 0x00	; 0
		}
    10f4:	89 2f       	mov	r24, r25
    10f6:	08 95       	ret

000010f8 <_ZN9frt_queueIhE8is_emptyEv>:
		/** This method checks if the queue is empty. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool is_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) == 0);
    10f8:	fc 01       	movw	r30, r24
    10fa:	84 81       	ldd	r24, Z+4	; 0x04
    10fc:	95 81       	ldd	r25, Z+5	; 0x05
    10fe:	0e 94 87 14 	call	0x290e	; 0x290e <uxQueueMessagesWaiting>
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	81 11       	cpse	r24, r1
    1106:	90 e0       	ldi	r25, 0x00	; 0
		}
    1108:	89 2f       	mov	r24, r25
    110a:	08 95       	ret

0000110c <_ZN9frt_queueIhE10get_a_copyERh>:
 *  \c xQueuePeekFromISR() which would allow copying items from a queue in an ISR. 
 *  @param item A reference to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get_a_copy (data_type& item)
    110c:	0f 93       	push	r16
{
	xQueuePeek (handle, &item, portMAX_DELAY);
    110e:	01 e0       	ldi	r16, 0x01	; 1
    1110:	2f ef       	ldi	r18, 0xFF	; 255
    1112:	3f ef       	ldi	r19, 0xFF	; 255
    1114:	a9 01       	movw	r20, r18
    1116:	fc 01       	movw	r30, r24
    1118:	84 81       	ldd	r24, Z+4	; 0x04
    111a:	95 81       	ldd	r25, Z+5	; 0x05
    111c:	0e 94 96 13 	call	0x272c	; 0x272c <xQueueGenericReceive>
}
    1120:	0f 91       	pop	r16
    1122:	08 95       	ret

00001124 <_ZN9frt_queueIhE10get_a_copyEv>:
 *          data type if we couldn't get any data from the queue and the attempt
 *          timed out
 */

template <class data_type>
inline data_type frt_queue<data_type>::get_a_copy (void)
    1124:	0f 93       	push	r16
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	1f 92       	push	r1
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueuePeek (handle, &recv_item, portMAX_DELAY);
    1130:	01 e0       	ldi	r16, 0x01	; 1
    1132:	2f ef       	ldi	r18, 0xFF	; 255
    1134:	3f ef       	ldi	r19, 0xFF	; 255
    1136:	a9 01       	movw	r20, r18
    1138:	be 01       	movw	r22, r28
    113a:	6f 5f       	subi	r22, 0xFF	; 255
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	fc 01       	movw	r30, r24
    1140:	84 81       	ldd	r24, Z+4	; 0x04
    1142:	95 81       	ldd	r25, Z+5	; 0x05
    1144:	0e 94 96 13 	call	0x272c	; 0x272c <xQueueGenericReceive>
	return (recv_item);
}
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	0f 90       	pop	r0
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	0f 91       	pop	r16
    1152:	08 95       	ret

00001154 <_ZN9frt_queueIhE3getEPh>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get (data_type* p_item)
    1154:	0f 93       	push	r16
{
	xQueueReceive (handle, p_item, portMAX_DELAY);
    1156:	00 e0       	ldi	r16, 0x00	; 0
    1158:	2f ef       	ldi	r18, 0xFF	; 255
    115a:	3f ef       	ldi	r19, 0xFF	; 255
    115c:	a9 01       	movw	r20, r18
    115e:	fc 01       	movw	r30, r24
    1160:	84 81       	ldd	r24, Z+4	; 0x04
    1162:	95 81       	ldd	r25, Z+5	; 0x05
    1164:	0e 94 96 13 	call	0x272c	; 0x272c <xQueueGenericReceive>
}
    1168:	0f 91       	pop	r16
    116a:	08 95       	ret

0000116c <_ZN9frt_queueIhE3getEv>:
 *  up. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::get (void)
    116c:	0f 93       	push	r16
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	1f 92       	push	r1
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceive (handle, &recv_item, portMAX_DELAY);
    1178:	00 e0       	ldi	r16, 0x00	; 0
    117a:	2f ef       	ldi	r18, 0xFF	; 255
    117c:	3f ef       	ldi	r19, 0xFF	; 255
    117e:	a9 01       	movw	r20, r18
    1180:	be 01       	movw	r22, r28
    1182:	6f 5f       	subi	r22, 0xFF	; 255
    1184:	7f 4f       	sbci	r23, 0xFF	; 255
    1186:	fc 01       	movw	r30, r24
    1188:	84 81       	ldd	r24, Z+4	; 0x04
    118a:	95 81       	ldd	r25, Z+5	; 0x05
    118c:	0e 94 96 13 	call	0x272c	; 0x272c <xQueueGenericReceive>
	return (recv_item);
}
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	0f 90       	pop	r0
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	0f 91       	pop	r16
    119a:	08 95       	ret

0000119c <_ZN9frt_queueIhE7ISR_getEPh>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::ISR_get (data_type* p_item)
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	1f 92       	push	r1
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
{
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, and
	// nothing will actually be copied
	xQueueReceiveFromISR (handle, p_item, &task_awakened);
    11a6:	ae 01       	movw	r20, r28
    11a8:	4f 5f       	subi	r20, 0xFF	; 255
    11aa:	5f 4f       	sbci	r21, 0xFF	; 255
    11ac:	fc 01       	movw	r30, r24
    11ae:	84 81       	ldd	r24, Z+4	; 0x04
    11b0:	95 81       	ldd	r25, Z+5	; 0x05
    11b2:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <xQueueReceiveFromISR>
}
    11b6:	0f 90       	pop	r0
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	08 95       	ret

000011be <_ZN9frt_queueIhE7ISR_getEv>:
 *  service routine. This method must not be called from within normal non-ISR code. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::ISR_get (void)
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	1f 92       	push	r1
    11c4:	1f 92       	push	r1
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	data_type recv_item;                    // Data item read from the queue
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceiveFromISR (handle, &recv_item, &task_awakened);
    11ca:	ae 01       	movw	r20, r28
    11cc:	4e 5f       	subi	r20, 0xFE	; 254
    11ce:	5f 4f       	sbci	r21, 0xFF	; 255
    11d0:	be 01       	movw	r22, r28
    11d2:	6f 5f       	subi	r22, 0xFF	; 255
    11d4:	7f 4f       	sbci	r23, 0xFF	; 255
    11d6:	fc 01       	movw	r30, r24
    11d8:	84 81       	ldd	r24, Z+4	; 0x04
    11da:	95 81       	ldd	r25, Z+5	; 0x05
    11dc:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <xQueueReceiveFromISR>
	return (recv_item);
}
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	08 95       	ret

000011ec <_ZN9frt_queueIhE11ISR_butt_inERKh>:
 *              the front of the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
bool frt_queue<data_type>::ISR_butt_in (const data_type& item)
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	1f 92       	push	r1
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    11f6:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;                      // Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToFrontFromISR (handle, &item, &shouldSwitch));
    11f8:	21 e0       	ldi	r18, 0x01	; 1
    11fa:	ae 01       	movw	r20, r28
    11fc:	4f 5f       	subi	r20, 0xFF	; 255
    11fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1200:	fc 01       	movw	r30, r24
    1202:	84 81       	ldd	r24, Z+4	; 0x04
    1204:	95 81       	ldd	r25, Z+5	; 0x05
    1206:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	81 11       	cpse	r24, r1
    120e:	01 c0       	rjmp	.+2      	; 0x1212 <_ZN9frt_queueIhE11ISR_butt_inERKh+0x26>
    1210:	90 e0       	ldi	r25, 0x00	; 0
}
    1212:	89 2f       	mov	r24, r25
    1214:	0f 90       	pop	r0
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	08 95       	ret

0000121c <_ZN9frt_queueIhE7ISR_putERKh>:
 *  @param item Reference to the item which is going to be put into the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
inline bool frt_queue<data_type>::ISR_put (const data_type& item)
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	1f 92       	push	r1
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    1226:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;						// Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToBackFromISR (handle, &item, &shouldSwitch));
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	ae 01       	movw	r20, r28
    122c:	4f 5f       	subi	r20, 0xFF	; 255
    122e:	5f 4f       	sbci	r21, 0xFF	; 255
    1230:	fc 01       	movw	r30, r24
    1232:	84 81       	ldd	r24, Z+4	; 0x04
    1234:	95 81       	ldd	r25, Z+5	; 0x05
    1236:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    123a:	91 e0       	ldi	r25, 0x01	; 1
    123c:	81 11       	cpse	r24, r1
    123e:	01 c0       	rjmp	.+2      	; 0x1242 <_ZN9frt_queueIhE7ISR_putERKh+0x26>
    1240:	90 e0       	ldi	r25, 0x00	; 0
}
    1242:	89 2f       	mov	r24, r25
    1244:	0f 90       	pop	r0
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	08 95       	ret

0000124c <_ZN9frt_queueIhE7butt_inERKh>:
		 *  \b not be used within an interrupt service routine. 
		 *  @param item Reference to the item which is going to be (rudely) put into 
		 *              the front of the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool butt_in (const data_type& item)
    124c:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToFront (handle, &item, ticks_to_wait)));
    124e:	fc 01       	movw	r30, r24
    1250:	26 81       	ldd	r18, Z+6	; 0x06
    1252:	37 81       	ldd	r19, Z+7	; 0x07
    1254:	40 85       	ldd	r20, Z+8	; 0x08
    1256:	51 85       	ldd	r21, Z+9	; 0x09
    1258:	01 e0       	ldi	r16, 0x01	; 1
    125a:	84 81       	ldd	r24, Z+4	; 0x04
    125c:	95 81       	ldd	r25, Z+5	; 0x05
    125e:	0e 94 cf 12 	call	0x259e	; 0x259e <xQueueGenericSend>
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	81 11       	cpse	r24, r1
    1266:	01 c0       	rjmp	.+2      	; 0x126a <_ZN9frt_queueIhE7butt_inERKh+0x1e>
    1268:	90 e0       	ldi	r25, 0x00	; 0
		}
    126a:	89 2f       	mov	r24, r25
    126c:	0f 91       	pop	r16
    126e:	08 95       	ret

00001270 <_ZN9frt_queueIhE3putERKh>:
		 *  an item into the front of the queue so it will be retreived first, use 
		 *  \c butt_in() instead. This method must \b not be used within an ISR.
		 *  @param item Reference to the item which is going to be put into the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool put (const data_type& item)
    1270:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToBack (handle, &item, ticks_to_wait)));
    1272:	fc 01       	movw	r30, r24
    1274:	26 81       	ldd	r18, Z+6	; 0x06
    1276:	37 81       	ldd	r19, Z+7	; 0x07
    1278:	40 85       	ldd	r20, Z+8	; 0x08
    127a:	51 85       	ldd	r21, Z+9	; 0x09
    127c:	00 e0       	ldi	r16, 0x00	; 0
    127e:	84 81       	ldd	r24, Z+4	; 0x04
    1280:	95 81       	ldd	r25, Z+5	; 0x05
    1282:	0e 94 cf 12 	call	0x259e	; 0x259e <xQueueGenericSend>
    1286:	91 e0       	ldi	r25, 0x01	; 1
    1288:	81 11       	cpse	r24, r1
    128a:	01 c0       	rjmp	.+2      	; 0x128e <_ZN9frt_queueIhE3putERKh+0x1e>
    128c:	90 e0       	ldi	r25, 0x00	; 0
		}
    128e:	89 2f       	mov	r24, r25
    1290:	0f 91       	pop	r16
    1292:	08 95       	ret

00001294 <_ZN6MB1202C1EP9I2CMasterP8emstream>:
//-------------------------------------------------------------------------------------
/** This constructor creates an object to use when interacting with the SPI registers on the MAX31855
    Thermocouple Analog to Digital Converter chip.
 *  @param SPIM A pointer to an SPI_master object
 */
MB1202::MB1202(I2CMaster * d, emstream * s)
    1294:	3f 92       	push	r3
    1296:	4f 92       	push	r4
    1298:	5f 92       	push	r5
    129a:	6f 92       	push	r6
    129c:	7f 92       	push	r7
    129e:	8f 92       	push	r8
    12a0:	9f 92       	push	r9
    12a2:	af 92       	push	r10
    12a4:	bf 92       	push	r11
    12a6:	cf 92       	push	r12
    12a8:	df 92       	push	r13
    12aa:	ef 92       	push	r14
    12ac:	ff 92       	push	r15
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	8c 01       	movw	r16, r24
    12b8:	7b 01       	movw	r14, r22
    12ba:	6a 01       	movw	r12, r20
  : driver_(d),
  	p_serial(s),
  	i2cAgent_(new I2CAgent(s, outPacketSize_, inPacketSize_)),
  	slaveAddr_(SLAVE_ADDR),
  	rangeCommand_(new RangeCommand())
    12bc:	dc 01       	movw	r26, r24
    12be:	6d 93       	st	X+, r22
    12c0:	7c 93       	st	X, r23
    12c2:	11 97       	sbiw	r26, 0x01	; 1
    12c4:	12 96       	adiw	r26, 0x02	; 2
    12c6:	4d 93       	st	X+, r20
    12c8:	5c 93       	st	X, r21
    12ca:	13 97       	sbiw	r26, 0x03	; 3
    12cc:	81 e2       	ldi	r24, 0x21	; 33
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
    12d4:	ec 01       	movw	r28, r24
class CommAgent
{
public:
  CommAgent( uint8_t outPacketSize, uint8_t inPacketSize)
    : inPacket_(inPacketSize,NULL,10),
      outPacket_(outPacketSize,NULL,10)
    12d6:	8f e3       	ldi	r24, 0x3F	; 63
    12d8:	91 e2       	ldi	r25, 0x21	; 33
    12da:	88 83       	st	Y, r24
    12dc:	99 83       	std	Y+1, r25	; 0x01

template <class data_type>
frt_base_queue<data_type>::frt_base_queue (emstream* p_ser_dev)
{
	// Save the pointer to a serial devide so it may be used for debugging
	p_serial = p_ser_dev;
    12de:	1c 82       	std	Y+4, r1	; 0x04
    12e0:	1d 82       	std	Y+5, r1	; 0x05
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    12e2:	0f 2e       	mov	r0, r31
    12e4:	f7 ef       	ldi	r31, 0xF7	; 247
    12e6:	af 2e       	mov	r10, r31
    12e8:	f0 e2       	ldi	r31, 0x20	; 32
    12ea:	bf 2e       	mov	r11, r31
    12ec:	f0 2d       	mov	r31, r0
    12ee:	aa 82       	std	Y+2, r10	; 0x02
    12f0:	bb 82       	std	Y+3, r11	; 0x03
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    12f2:	40 e0       	ldi	r20, 0x00	; 0
    12f4:	61 e0       	ldi	r22, 0x01	; 1
    12f6:	82 e0       	ldi	r24, 0x02	; 2
    12f8:	0e 94 a1 12 	call	0x2542	; 0x2542 <xQueueGenericCreate>
    12fc:	8e 83       	std	Y+6, r24	; 0x06
    12fe:	9f 83       	std	Y+7, r25	; 0x07

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    1300:	0f 2e       	mov	r0, r31
    1302:	fa e0       	ldi	r31, 0x0A	; 10
    1304:	4f 2e       	mov	r4, r31
    1306:	51 2c       	mov	r5, r1
    1308:	61 2c       	mov	r6, r1
    130a:	71 2c       	mov	r7, r1
    130c:	f0 2d       	mov	r31, r0
    130e:	48 86       	std	Y+8, r4	; 0x08
    1310:	59 86       	std	Y+9, r5	; 0x09
    1312:	6a 86       	std	Y+10, r6	; 0x0a
    1314:	7b 86       	std	Y+11, r7	; 0x0b
  : public frt_queue< uint8_t >
{
public:
  inline Packet( uint8_t queue_size = 10, emstream * p_ser_dev = NULL, portTickType wait_time = 10 )
    : frt_queue(queue_size, p_ser_dev, wait_time),
      size_(queue_size)
    1316:	0f 2e       	mov	r0, r31
    1318:	fb e1       	ldi	r31, 0x1B	; 27
    131a:	8f 2e       	mov	r8, r31
    131c:	f1 e2       	ldi	r31, 0x21	; 33
    131e:	9f 2e       	mov	r9, r31
    1320:	f0 2d       	mov	r31, r0
    1322:	8a 82       	std	Y+2, r8	; 0x02
    1324:	9b 82       	std	Y+3, r9	; 0x03
    1326:	68 94       	set
    1328:	33 24       	eor	r3, r3
    132a:	31 f8       	bld	r3, 1
    132c:	3c 86       	std	Y+12, r3	; 0x0c
    132e:	18 8a       	std	Y+16, r1	; 0x10
    1330:	19 8a       	std	Y+17, r1	; 0x11
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    1332:	ae 86       	std	Y+14, r10	; 0x0e
    1334:	bf 86       	std	Y+15, r11	; 0x0f
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    1336:	40 e0       	ldi	r20, 0x00	; 0
    1338:	61 e0       	ldi	r22, 0x01	; 1
    133a:	82 e0       	ldi	r24, 0x02	; 2
    133c:	0e 94 a1 12 	call	0x2542	; 0x2542 <xQueueGenericCreate>
    1340:	8a 8b       	std	Y+18, r24	; 0x12
    1342:	9b 8b       	std	Y+19, r25	; 0x13

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    1344:	4c 8a       	std	Y+20, r4	; 0x14
    1346:	5d 8a       	std	Y+21, r5	; 0x15
    1348:	6e 8a       	std	Y+22, r6	; 0x16
    134a:	7f 8a       	std	Y+23, r7	; 0x17
    134c:	8e 86       	std	Y+14, r8	; 0x0e
    134e:	9f 86       	std	Y+15, r9	; 0x0f
    1350:	38 8e       	std	Y+24, r3	; 0x18
  inline I2CAgent( uint8_t outPacketSize = 2, uint8_t inPacketSize = 1 ) 
    : CommAgent(outPacketSize, inPacketSize)
  {}
  inline I2CAgent( emstream * s, uint8_t outPacketSize = 2, uint8_t inPacketSize = 1 ) 
    : CommAgent(outPacketSize, inPacketSize),
      p_serial(s)
    1352:	8a e0       	ldi	r24, 0x0A	; 10
    1354:	90 e2       	ldi	r25, 0x20	; 32
    1356:	88 83       	st	Y, r24
    1358:	99 83       	std	Y+1, r25	; 0x01
    135a:	ca 8e       	std	Y+26, r12	; 0x1a
    135c:	db 8e       	std	Y+27, r13	; 0x1b
    135e:	f8 01       	movw	r30, r16
    1360:	c4 83       	std	Z+4, r28	; 0x04
    1362:	d5 83       	std	Z+5, r29	; 0x05
    1364:	80 e7       	ldi	r24, 0x70	; 112
    1366:	86 83       	std	Z+6, r24	; 0x06
    1368:	10 86       	std	Z+8, r1	; 0x08
    136a:	11 86       	std	Z+9, r1	; 0x09
    136c:	12 86       	std	Z+10, r1	; 0x0a
    136e:	13 86       	std	Z+11, r1	; 0x0b
    1370:	14 86       	std	Z+12, r1	; 0x0c
    1372:	83 e0       	ldi	r24, 0x03	; 3
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
		: public Command
	{
	public:

		inline RangeCommand()
			: commandCode_(RANGE_CMD)
    137a:	2d e4       	ldi	r18, 0x4D	; 77
    137c:	31 e2       	ldi	r19, 0x21	; 33
    137e:	fc 01       	movw	r30, r24
    1380:	20 83       	st	Z, r18
    1382:	31 83       	std	Z+1, r19	; 0x01
    1384:	21 e5       	ldi	r18, 0x51	; 81
    1386:	22 83       	std	Z+2, r18	; 0x02
    1388:	d8 01       	movw	r26, r16
    138a:	1f 96       	adiw	r26, 0x0f	; 15
    138c:	8d 93       	st	X+, r24
    138e:	9c 93       	st	X, r25
    1390:	50 97       	sbiw	r26, 0x10	; 16
{
	i2cAgent_->setI2CDriver(d);
    1392:	14 96       	adiw	r26, 0x04	; 4
    1394:	ed 91       	ld	r30, X+
    1396:	fc 91       	ld	r31, X
    1398:	15 97       	sbiw	r26, 0x05	; 5
  {}
  virtual bool transmit( Command & cmd );
  virtual Packet & receive();
  void setI2CDriver( I2CMaster * d ) { driver_ = d; }
    139a:	e4 8e       	std	Z+28, r14	; 0x1c
    139c:	f5 8e       	std	Z+29, r15	; 0x1d
	i2cAgent_->setSlaveAddr(slaveAddr_);
    139e:	16 96       	adiw	r26, 0x06	; 6
    13a0:	6c 91       	ld	r22, X
    13a2:	16 97       	sbiw	r26, 0x06	; 6
    13a4:	14 96       	adiw	r26, 0x04	; 4
    13a6:	8d 91       	ld	r24, X+
    13a8:	9c 91       	ld	r25, X
    13aa:	15 97       	sbiw	r26, 0x05	; 5
    13ac:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <_ZN8I2CAgent12setSlaveAddrEh>
}
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	ff 90       	pop	r15
    13ba:	ef 90       	pop	r14
    13bc:	df 90       	pop	r13
    13be:	cf 90       	pop	r12
    13c0:	bf 90       	pop	r11
    13c2:	af 90       	pop	r10
    13c4:	9f 90       	pop	r9
    13c6:	8f 90       	pop	r8
    13c8:	7f 90       	pop	r7
    13ca:	6f 90       	pop	r6
    13cc:	5f 90       	pop	r5
    13ce:	4f 90       	pop	r4
    13d0:	3f 90       	pop	r3
    13d2:	08 95       	ret

000013d4 <_ZN7MMA845113ActiveCommand11writePacketER6Packet>:
}

bool MMA8451::is_ready()
{
  return driver_->is_ready(slaveAddr_);
}
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	8c 01       	movw	r16, r24
    13de:	eb 01       	movw	r28, r22
    13e0:	bc 01       	movw	r22, r24
    13e2:	6e 5f       	subi	r22, 0xFE	; 254
    13e4:	7f 4f       	sbci	r23, 0xFF	; 255
    13e6:	e8 81       	ld	r30, Y
    13e8:	f9 81       	ldd	r31, Y+1	; 0x01
    13ea:	01 90       	ld	r0, Z+
    13ec:	f0 81       	ld	r31, Z
    13ee:	e0 2d       	mov	r30, r0
    13f0:	ce 01       	movw	r24, r28
    13f2:	19 95       	eicall
    13f4:	b8 01       	movw	r22, r16
    13f6:	6d 5f       	subi	r22, 0xFD	; 253
    13f8:	7f 4f       	sbci	r23, 0xFF	; 255
    13fa:	e8 81       	ld	r30, Y
    13fc:	f9 81       	ldd	r31, Y+1	; 0x01
    13fe:	01 90       	ld	r0, Z+
    1400:	f0 81       	ld	r31, Z
    1402:	e0 2d       	mov	r30, r0
    1404:	ce 01       	movw	r24, r28
    1406:	19 95       	eicall
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	08 95       	ret

00001412 <_ZN7MMA845116QueryXRegCommand11writePacketER6Packet>:
    1412:	db 01       	movw	r26, r22
    1414:	bc 01       	movw	r22, r24
    1416:	6e 5f       	subi	r22, 0xFE	; 254
    1418:	7f 4f       	sbci	r23, 0xFF	; 255
    141a:	ed 91       	ld	r30, X+
    141c:	fc 91       	ld	r31, X
    141e:	11 97       	sbiw	r26, 0x01	; 1
    1420:	01 90       	ld	r0, Z+
    1422:	f0 81       	ld	r31, Z
    1424:	e0 2d       	mov	r30, r0
    1426:	cd 01       	movw	r24, r26
    1428:	19 95       	eicall
    142a:	08 95       	ret

0000142c <_ZN7MMA845116QueryYRegCommand11writePacketER6Packet>:
    142c:	db 01       	movw	r26, r22
    142e:	bc 01       	movw	r22, r24
    1430:	6e 5f       	subi	r22, 0xFE	; 254
    1432:	7f 4f       	sbci	r23, 0xFF	; 255
    1434:	ed 91       	ld	r30, X+
    1436:	fc 91       	ld	r31, X
    1438:	11 97       	sbiw	r26, 0x01	; 1
    143a:	01 90       	ld	r0, Z+
    143c:	f0 81       	ld	r31, Z
    143e:	e0 2d       	mov	r30, r0
    1440:	cd 01       	movw	r24, r26
    1442:	19 95       	eicall
    1444:	08 95       	ret

00001446 <_ZN7MMA845116QueryZRegCommand11writePacketER6Packet>:
    1446:	db 01       	movw	r26, r22
    1448:	bc 01       	movw	r22, r24
    144a:	6e 5f       	subi	r22, 0xFE	; 254
    144c:	7f 4f       	sbci	r23, 0xFF	; 255
    144e:	ed 91       	ld	r30, X+
    1450:	fc 91       	ld	r31, X
    1452:	11 97       	sbiw	r26, 0x01	; 1
    1454:	01 90       	ld	r0, Z+
    1456:	f0 81       	ld	r31, Z
    1458:	e0 2d       	mov	r30, r0
    145a:	cd 01       	movw	r24, r26
    145c:	19 95       	eicall
    145e:	08 95       	ret

00001460 <_ZN7MMA8451C1EP9I2CMasterP8emstream>:
    1460:	4f 92       	push	r4
    1462:	5f 92       	push	r5
    1464:	6f 92       	push	r6
    1466:	7f 92       	push	r7
    1468:	8f 92       	push	r8
    146a:	9f 92       	push	r9
    146c:	af 92       	push	r10
    146e:	bf 92       	push	r11
    1470:	cf 92       	push	r12
    1472:	df 92       	push	r13
    1474:	ef 92       	push	r14
    1476:	ff 92       	push	r15
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	8c 01       	movw	r16, r24
    1482:	7b 01       	movw	r14, r22
    1484:	6a 01       	movw	r12, r20
    1486:	dc 01       	movw	r26, r24
    1488:	6d 93       	st	X+, r22
    148a:	7c 93       	st	X, r23
    148c:	11 97       	sbiw	r26, 0x01	; 1
    148e:	12 96       	adiw	r26, 0x02	; 2
    1490:	4d 93       	st	X+, r20
    1492:	5c 93       	st	X, r21
    1494:	13 97       	sbiw	r26, 0x03	; 3
    1496:	81 e2       	ldi	r24, 0x21	; 33
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
    149e:	ec 01       	movw	r28, r24
    14a0:	8f e3       	ldi	r24, 0x3F	; 63
    14a2:	91 e2       	ldi	r25, 0x21	; 33
    14a4:	88 83       	st	Y, r24
    14a6:	99 83       	std	Y+1, r25	; 0x01
    14a8:	1c 82       	std	Y+4, r1	; 0x04
    14aa:	1d 82       	std	Y+5, r1	; 0x05
    14ac:	0f 2e       	mov	r0, r31
    14ae:	f7 ef       	ldi	r31, 0xF7	; 247
    14b0:	af 2e       	mov	r10, r31
    14b2:	f0 e2       	ldi	r31, 0x20	; 32
    14b4:	bf 2e       	mov	r11, r31
    14b6:	f0 2d       	mov	r31, r0
    14b8:	aa 82       	std	Y+2, r10	; 0x02
    14ba:	bb 82       	std	Y+3, r11	; 0x03
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	61 e0       	ldi	r22, 0x01	; 1
    14c0:	82 e0       	ldi	r24, 0x02	; 2
    14c2:	0e 94 a1 12 	call	0x2542	; 0x2542 <xQueueGenericCreate>
    14c6:	8e 83       	std	Y+6, r24	; 0x06
    14c8:	9f 83       	std	Y+7, r25	; 0x07
    14ca:	0f 2e       	mov	r0, r31
    14cc:	fa e0       	ldi	r31, 0x0A	; 10
    14ce:	4f 2e       	mov	r4, r31
    14d0:	51 2c       	mov	r5, r1
    14d2:	61 2c       	mov	r6, r1
    14d4:	71 2c       	mov	r7, r1
    14d6:	f0 2d       	mov	r31, r0
    14d8:	48 86       	std	Y+8, r4	; 0x08
    14da:	59 86       	std	Y+9, r5	; 0x09
    14dc:	6a 86       	std	Y+10, r6	; 0x0a
    14de:	7b 86       	std	Y+11, r7	; 0x0b
    14e0:	0f 2e       	mov	r0, r31
    14e2:	fb e1       	ldi	r31, 0x1B	; 27
    14e4:	8f 2e       	mov	r8, r31
    14e6:	f1 e2       	ldi	r31, 0x21	; 33
    14e8:	9f 2e       	mov	r9, r31
    14ea:	f0 2d       	mov	r31, r0
    14ec:	8a 82       	std	Y+2, r8	; 0x02
    14ee:	9b 82       	std	Y+3, r9	; 0x03
    14f0:	82 e0       	ldi	r24, 0x02	; 2
    14f2:	8c 87       	std	Y+12, r24	; 0x0c
    14f4:	18 8a       	std	Y+16, r1	; 0x10
    14f6:	19 8a       	std	Y+17, r1	; 0x11
    14f8:	ae 86       	std	Y+14, r10	; 0x0e
    14fa:	bf 86       	std	Y+15, r11	; 0x0f
    14fc:	40 e0       	ldi	r20, 0x00	; 0
    14fe:	61 e0       	ldi	r22, 0x01	; 1
    1500:	83 e0       	ldi	r24, 0x03	; 3
    1502:	0e 94 a1 12 	call	0x2542	; 0x2542 <xQueueGenericCreate>
    1506:	8a 8b       	std	Y+18, r24	; 0x12
    1508:	9b 8b       	std	Y+19, r25	; 0x13
    150a:	4c 8a       	std	Y+20, r4	; 0x14
    150c:	5d 8a       	std	Y+21, r5	; 0x15
    150e:	6e 8a       	std	Y+22, r6	; 0x16
    1510:	7f 8a       	std	Y+23, r7	; 0x17
    1512:	8e 86       	std	Y+14, r8	; 0x0e
    1514:	9f 86       	std	Y+15, r9	; 0x0f
    1516:	0f 2e       	mov	r0, r31
    1518:	f3 e0       	ldi	r31, 0x03	; 3
    151a:	bf 2e       	mov	r11, r31
    151c:	f0 2d       	mov	r31, r0
    151e:	b8 8e       	std	Y+24, r11	; 0x18
    1520:	8a e0       	ldi	r24, 0x0A	; 10
    1522:	90 e2       	ldi	r25, 0x20	; 32
    1524:	88 83       	st	Y, r24
    1526:	99 83       	std	Y+1, r25	; 0x01
    1528:	ca 8e       	std	Y+26, r12	; 0x1a
    152a:	db 8e       	std	Y+27, r13	; 0x1b
    152c:	f8 01       	movw	r30, r16
    152e:	c4 83       	std	Z+4, r28	; 0x04
    1530:	d5 83       	std	Z+5, r29	; 0x05
    1532:	8d e1       	ldi	r24, 0x1D	; 29
    1534:	86 83       	std	Z+6, r24	; 0x06
    1536:	84 e0       	ldi	r24, 0x04	; 4
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
    153e:	fc 01       	movw	r30, r24
    1540:	83 e5       	ldi	r24, 0x53	; 83
    1542:	91 e2       	ldi	r25, 0x21	; 33
    1544:	80 83       	st	Z, r24
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	8a e2       	ldi	r24, 0x2A	; 42
    154a:	82 83       	std	Z+2, r24	; 0x02
    154c:	c1 e0       	ldi	r28, 0x01	; 1
    154e:	c3 83       	std	Z+3, r28	; 0x03
    1550:	d8 01       	movw	r26, r16
    1552:	19 96       	adiw	r26, 0x09	; 9
    1554:	ed 93       	st	X+, r30
    1556:	fc 93       	st	X, r31
    1558:	1a 97       	sbiw	r26, 0x0a	; 10
    155a:	83 e0       	ldi	r24, 0x03	; 3
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
    1562:	29 e5       	ldi	r18, 0x59	; 89
    1564:	31 e2       	ldi	r19, 0x21	; 33
    1566:	fc 01       	movw	r30, r24
    1568:	20 83       	st	Z, r18
    156a:	31 83       	std	Z+1, r19	; 0x01
    156c:	c2 83       	std	Z+2, r28	; 0x02
    156e:	d8 01       	movw	r26, r16
    1570:	1b 96       	adiw	r26, 0x0b	; 11
    1572:	8d 93       	st	X+, r24
    1574:	9c 93       	st	X, r25
    1576:	1c 97       	sbiw	r26, 0x0c	; 12
    1578:	83 e0       	ldi	r24, 0x03	; 3
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
    1580:	2f e5       	ldi	r18, 0x5F	; 95
    1582:	31 e2       	ldi	r19, 0x21	; 33
    1584:	fc 01       	movw	r30, r24
    1586:	20 83       	st	Z, r18
    1588:	31 83       	std	Z+1, r19	; 0x01
    158a:	b2 82       	std	Z+2, r11	; 0x02
    158c:	d8 01       	movw	r26, r16
    158e:	1d 96       	adiw	r26, 0x0d	; 13
    1590:	8d 93       	st	X+, r24
    1592:	9c 93       	st	X, r25
    1594:	1e 97       	sbiw	r26, 0x0e	; 14
    1596:	83 e0       	ldi	r24, 0x03	; 3
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
    159e:	25 e6       	ldi	r18, 0x65	; 101
    15a0:	31 e2       	ldi	r19, 0x21	; 33
    15a2:	fc 01       	movw	r30, r24
    15a4:	20 83       	st	Z, r18
    15a6:	31 83       	std	Z+1, r19	; 0x01
    15a8:	25 e0       	ldi	r18, 0x05	; 5
    15aa:	22 83       	std	Z+2, r18	; 0x02
    15ac:	d8 01       	movw	r26, r16
    15ae:	1f 96       	adiw	r26, 0x0f	; 15
    15b0:	8d 93       	st	X+, r24
    15b2:	9c 93       	st	X, r25
    15b4:	50 97       	sbiw	r26, 0x10	; 16
    15b6:	14 96       	adiw	r26, 0x04	; 4
    15b8:	ed 91       	ld	r30, X+
    15ba:	fc 91       	ld	r31, X
    15bc:	15 97       	sbiw	r26, 0x05	; 5
    15be:	e4 8e       	std	Z+28, r14	; 0x1c
    15c0:	f5 8e       	std	Z+29, r15	; 0x1d
    15c2:	16 96       	adiw	r26, 0x06	; 6
    15c4:	6c 91       	ld	r22, X
    15c6:	16 97       	sbiw	r26, 0x06	; 6
    15c8:	14 96       	adiw	r26, 0x04	; 4
    15ca:	8d 91       	ld	r24, X+
    15cc:	9c 91       	ld	r25, X
    15ce:	15 97       	sbiw	r26, 0x05	; 5
    15d0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <_ZN8I2CAgent12setSlaveAddrEh>
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	1f 91       	pop	r17
    15da:	0f 91       	pop	r16
    15dc:	ff 90       	pop	r15
    15de:	ef 90       	pop	r14
    15e0:	df 90       	pop	r13
    15e2:	cf 90       	pop	r12
    15e4:	bf 90       	pop	r11
    15e6:	af 90       	pop	r10
    15e8:	9f 90       	pop	r9
    15ea:	8f 90       	pop	r8
    15ec:	7f 90       	pop	r7
    15ee:	6f 90       	pop	r6
    15f0:	5f 90       	pop	r5
    15f2:	4f 90       	pop	r4
    15f4:	08 95       	ret

000015f6 <_ZN7MMA845111getXReadingEv>:

uint16_t MMA8451::getXReading()
{
    15f6:	1f 93       	push	r17
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	ec 01       	movw	r28, r24
  i2cAgent_->transmit(*activeCommand_);
    15fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1600:	9d 81       	ldd	r25, Y+5	; 0x05
    1602:	69 85       	ldd	r22, Y+9	; 0x09
    1604:	7a 85       	ldd	r23, Y+10	; 0x0a
    1606:	dc 01       	movw	r26, r24
    1608:	ed 91       	ld	r30, X+
    160a:	fc 91       	ld	r31, X
    160c:	01 90       	ld	r0, Z+
    160e:	f0 81       	ld	r31, Z
    1610:	e0 2d       	mov	r30, r0
    1612:	19 95       	eicall
  i2cAgent_->transmit(*queryX_);
    1614:	8c 81       	ldd	r24, Y+4	; 0x04
    1616:	9d 81       	ldd	r25, Y+5	; 0x05
    1618:	6b 85       	ldd	r22, Y+11	; 0x0b
    161a:	7c 85       	ldd	r23, Y+12	; 0x0c
    161c:	dc 01       	movw	r26, r24
    161e:	ed 91       	ld	r30, X+
    1620:	fc 91       	ld	r31, X
    1622:	01 90       	ld	r0, Z+
    1624:	f0 81       	ld	r31, Z
    1626:	e0 2d       	mov	r30, r0
    1628:	19 95       	eicall
  Packet & xData = i2cAgent_->receive();
    162a:	8c 81       	ldd	r24, Y+4	; 0x04
    162c:	9d 81       	ldd	r25, Y+5	; 0x05
    162e:	dc 01       	movw	r26, r24
    1630:	ed 91       	ld	r30, X+
    1632:	fc 91       	ld	r31, X
    1634:	02 80       	ldd	r0, Z+2	; 0x02
    1636:	f3 81       	ldd	r31, Z+3	; 0x03
    1638:	e0 2d       	mov	r30, r0
    163a:	19 95       	eicall
    163c:	ec 01       	movw	r28, r24
  uint16_t data = 0;
  if(xData.validData())
    163e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1640:	88 23       	and	r24, r24
    1642:	b9 f0       	breq	.+46     	; 0x1672 <_ZN7MMA845111getXReadingEv+0x7c>
    data = ((uint16_t) xData.get() << 8) | ((uint16_t) xData.get());
    1644:	e8 81       	ld	r30, Y
    1646:	f9 81       	ldd	r31, Y+1	; 0x01
    1648:	00 84       	ldd	r0, Z+8	; 0x08
    164a:	f1 85       	ldd	r31, Z+9	; 0x09
    164c:	e0 2d       	mov	r30, r0
    164e:	ce 01       	movw	r24, r28
    1650:	19 95       	eicall
    1652:	18 2f       	mov	r17, r24
    1654:	e8 81       	ld	r30, Y
    1656:	f9 81       	ldd	r31, Y+1	; 0x01
    1658:	00 84       	ldd	r0, Z+8	; 0x08
    165a:	f1 85       	ldd	r31, Z+9	; 0x09
    165c:	e0 2d       	mov	r30, r0
    165e:	ce 01       	movw	r24, r28
    1660:	19 95       	eicall
    1662:	21 2f       	mov	r18, r17
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	32 2f       	mov	r19, r18
    1668:	22 27       	eor	r18, r18
    166a:	a9 01       	movw	r20, r18
    166c:	48 2b       	or	r20, r24
    166e:	ca 01       	movw	r24, r20
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <_ZN7MMA845111getXReadingEv+0x80>
uint16_t MMA8451::getXReading()
{
  i2cAgent_->transmit(*activeCommand_);
  i2cAgent_->transmit(*queryX_);
  Packet & xData = i2cAgent_->receive();
  uint16_t data = 0;
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
  if(xData.validData())
    data = ((uint16_t) xData.get() << 8) | ((uint16_t) xData.get());
  return data;
}
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	08 95       	ret

0000167e <_ZN7MMA845111getYReadingEv>:

uint16_t MMA8451::getYReading()
{
    167e:	1f 93       	push	r17
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	ec 01       	movw	r28, r24
  i2cAgent_->transmit(*activeCommand_);
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	9d 81       	ldd	r25, Y+5	; 0x05
    168a:	69 85       	ldd	r22, Y+9	; 0x09
    168c:	7a 85       	ldd	r23, Y+10	; 0x0a
    168e:	dc 01       	movw	r26, r24
    1690:	ed 91       	ld	r30, X+
    1692:	fc 91       	ld	r31, X
    1694:	01 90       	ld	r0, Z+
    1696:	f0 81       	ld	r31, Z
    1698:	e0 2d       	mov	r30, r0
    169a:	19 95       	eicall
  i2cAgent_->transmit(*queryY_);
    169c:	8c 81       	ldd	r24, Y+4	; 0x04
    169e:	9d 81       	ldd	r25, Y+5	; 0x05
    16a0:	6d 85       	ldd	r22, Y+13	; 0x0d
    16a2:	7e 85       	ldd	r23, Y+14	; 0x0e
    16a4:	dc 01       	movw	r26, r24
    16a6:	ed 91       	ld	r30, X+
    16a8:	fc 91       	ld	r31, X
    16aa:	01 90       	ld	r0, Z+
    16ac:	f0 81       	ld	r31, Z
    16ae:	e0 2d       	mov	r30, r0
    16b0:	19 95       	eicall
  Packet & yData = i2cAgent_->receive();
    16b2:	8c 81       	ldd	r24, Y+4	; 0x04
    16b4:	9d 81       	ldd	r25, Y+5	; 0x05
    16b6:	dc 01       	movw	r26, r24
    16b8:	ed 91       	ld	r30, X+
    16ba:	fc 91       	ld	r31, X
    16bc:	02 80       	ldd	r0, Z+2	; 0x02
    16be:	f3 81       	ldd	r31, Z+3	; 0x03
    16c0:	e0 2d       	mov	r30, r0
    16c2:	19 95       	eicall
    16c4:	ec 01       	movw	r28, r24
  uint16_t data = 0;
  if(yData.validData())
    16c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    16c8:	88 23       	and	r24, r24
    16ca:	b9 f0       	breq	.+46     	; 0x16fa <_ZN7MMA845111getYReadingEv+0x7c>
    data = ((uint16_t) yData.get() << 8) | ((uint16_t) yData.get());
    16cc:	e8 81       	ld	r30, Y
    16ce:	f9 81       	ldd	r31, Y+1	; 0x01
    16d0:	00 84       	ldd	r0, Z+8	; 0x08
    16d2:	f1 85       	ldd	r31, Z+9	; 0x09
    16d4:	e0 2d       	mov	r30, r0
    16d6:	ce 01       	movw	r24, r28
    16d8:	19 95       	eicall
    16da:	18 2f       	mov	r17, r24
    16dc:	e8 81       	ld	r30, Y
    16de:	f9 81       	ldd	r31, Y+1	; 0x01
    16e0:	00 84       	ldd	r0, Z+8	; 0x08
    16e2:	f1 85       	ldd	r31, Z+9	; 0x09
    16e4:	e0 2d       	mov	r30, r0
    16e6:	ce 01       	movw	r24, r28
    16e8:	19 95       	eicall
    16ea:	21 2f       	mov	r18, r17
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	32 2f       	mov	r19, r18
    16f0:	22 27       	eor	r18, r18
    16f2:	a9 01       	movw	r20, r18
    16f4:	48 2b       	or	r20, r24
    16f6:	ca 01       	movw	r24, r20
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <_ZN7MMA845111getYReadingEv+0x80>
uint16_t MMA8451::getYReading()
{
  i2cAgent_->transmit(*activeCommand_);
  i2cAgent_->transmit(*queryY_);
  Packet & yData = i2cAgent_->receive();
  uint16_t data = 0;
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	90 e0       	ldi	r25, 0x00	; 0
  if(yData.validData())
    data = ((uint16_t) yData.get() << 8) | ((uint16_t) yData.get());
  return data;
}
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	08 95       	ret

00001706 <_ZN7MMA845111getZReadingEv>:

uint16_t MMA8451::getZReading()
{
    1706:	1f 93       	push	r17
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	ec 01       	movw	r28, r24
  i2cAgent_->transmit(*activeCommand_);
    170e:	8c 81       	ldd	r24, Y+4	; 0x04
    1710:	9d 81       	ldd	r25, Y+5	; 0x05
    1712:	69 85       	ldd	r22, Y+9	; 0x09
    1714:	7a 85       	ldd	r23, Y+10	; 0x0a
    1716:	dc 01       	movw	r26, r24
    1718:	ed 91       	ld	r30, X+
    171a:	fc 91       	ld	r31, X
    171c:	01 90       	ld	r0, Z+
    171e:	f0 81       	ld	r31, Z
    1720:	e0 2d       	mov	r30, r0
    1722:	19 95       	eicall
  i2cAgent_->transmit(*queryZ_);
    1724:	8c 81       	ldd	r24, Y+4	; 0x04
    1726:	9d 81       	ldd	r25, Y+5	; 0x05
    1728:	6f 85       	ldd	r22, Y+15	; 0x0f
    172a:	78 89       	ldd	r23, Y+16	; 0x10
    172c:	dc 01       	movw	r26, r24
    172e:	ed 91       	ld	r30, X+
    1730:	fc 91       	ld	r31, X
    1732:	01 90       	ld	r0, Z+
    1734:	f0 81       	ld	r31, Z
    1736:	e0 2d       	mov	r30, r0
    1738:	19 95       	eicall
  Packet & zData = i2cAgent_->receive();
    173a:	8c 81       	ldd	r24, Y+4	; 0x04
    173c:	9d 81       	ldd	r25, Y+5	; 0x05
    173e:	dc 01       	movw	r26, r24
    1740:	ed 91       	ld	r30, X+
    1742:	fc 91       	ld	r31, X
    1744:	02 80       	ldd	r0, Z+2	; 0x02
    1746:	f3 81       	ldd	r31, Z+3	; 0x03
    1748:	e0 2d       	mov	r30, r0
    174a:	19 95       	eicall
    174c:	ec 01       	movw	r28, r24
  uint16_t data = 0;
  if(zData.validData())
    174e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1750:	88 23       	and	r24, r24
    1752:	b9 f0       	breq	.+46     	; 0x1782 <_ZN7MMA845111getZReadingEv+0x7c>
    data = ((uint16_t) zData.get() << 8) | ((uint16_t) zData.get());
    1754:	e8 81       	ld	r30, Y
    1756:	f9 81       	ldd	r31, Y+1	; 0x01
    1758:	00 84       	ldd	r0, Z+8	; 0x08
    175a:	f1 85       	ldd	r31, Z+9	; 0x09
    175c:	e0 2d       	mov	r30, r0
    175e:	ce 01       	movw	r24, r28
    1760:	19 95       	eicall
    1762:	18 2f       	mov	r17, r24
    1764:	e8 81       	ld	r30, Y
    1766:	f9 81       	ldd	r31, Y+1	; 0x01
    1768:	00 84       	ldd	r0, Z+8	; 0x08
    176a:	f1 85       	ldd	r31, Z+9	; 0x09
    176c:	e0 2d       	mov	r30, r0
    176e:	ce 01       	movw	r24, r28
    1770:	19 95       	eicall
    1772:	21 2f       	mov	r18, r17
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	32 2f       	mov	r19, r18
    1778:	22 27       	eor	r18, r18
    177a:	a9 01       	movw	r20, r18
    177c:	48 2b       	or	r20, r24
    177e:	ca 01       	movw	r24, r20
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <_ZN7MMA845111getZReadingEv+0x80>
uint16_t MMA8451::getZReading()
{
  i2cAgent_->transmit(*activeCommand_);
  i2cAgent_->transmit(*queryZ_);
  Packet & zData = i2cAgent_->receive();
  uint16_t data = 0;
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
  if(zData.validData())
    data = ((uint16_t) zData.get() << 8) | ((uint16_t) zData.get());
  return data;
}
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	1f 91       	pop	r17
    178c:	08 95       	ret

0000178e <_ZN6Packet12resetContentEv>:
#include "Packet.h"

void Packet::resetContent()
{
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
    1792:	ec 01       	movw	r28, r24
  success_ = false;
    1794:	1b 86       	std	Y+11, r1	; 0x0b
  while( not_empty() )
    1796:	e8 81       	ld	r30, Y
    1798:	f9 81       	ldd	r31, Y+1	; 0x01
    179a:	00 8c       	ldd	r0, Z+24	; 0x18
    179c:	f1 8d       	ldd	r31, Z+25	; 0x19
    179e:	e0 2d       	mov	r30, r0
    17a0:	ce 01       	movw	r24, r28
    17a2:	19 95       	eicall
    17a4:	88 23       	and	r24, r24
    17a6:	41 f0       	breq	.+16     	; 0x17b8 <_ZN6Packet12resetContentEv+0x2a>
  {
    get();
    17a8:	e8 81       	ld	r30, Y
    17aa:	f9 81       	ldd	r31, Y+1	; 0x01
    17ac:	00 84       	ldd	r0, Z+8	; 0x08
    17ae:	f1 85       	ldd	r31, Z+9	; 0x09
    17b0:	e0 2d       	mov	r30, r0
    17b2:	ce 01       	movw	r24, r28
    17b4:	19 95       	eicall
#include "Packet.h"

void Packet::resetContent()
{
  success_ = false;
  while( not_empty() )
    17b6:	ef cf       	rjmp	.-34     	; 0x1796 <_ZN6Packet12resetContentEv+0x8>
  {
    get();
  }
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	08 95       	ret

000017be <_ZN11task_sensor3runEv>:
 *  is just following the modern government model of "This is the land of the free...
 *  free to do exactly what you're told." 
 */

void task_sensor::run (void)
{
    17be:	ec 01       	movw	r28, r24
	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
	{
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
    17c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    17c2:	81 11       	cpse	r24, r1
    17c4:	39 c0       	rjmp	.+114    	; 0x1838 <_ZN11task_sensor3runEv+0x7a>
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 0, the motor task is waiting for the user to enter data before 
			// proceeding to its routine.
			case (0):
			  
				*p_serial << "x: " << mma8451_->getXReading() << endl;
    17c6:	8c 89       	ldd	r24, Y+20	; 0x14
    17c8:	9d 89       	ldd	r25, Y+21	; 0x15
    17ca:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <_ZN7MMA845111getXReadingEv>
    17ce:	7c 01       	movw	r14, r24
    17d0:	0e 81       	ldd	r16, Y+6	; 0x06
    17d2:	1f 81       	ldd	r17, Y+7	; 0x07
    17d4:	67 e6       	ldi	r22, 0x67	; 103
    17d6:	71 e2       	ldi	r23, 0x21	; 33
    17d8:	c8 01       	movw	r24, r16
    17da:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    17de:	b7 01       	movw	r22, r14
    17e0:	c8 01       	movw	r24, r16
    17e2:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_ZN8emstreamlsEj>
    17e6:	66 e0       	ldi	r22, 0x06	; 6
    17e8:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
				*p_serial << "y: " << mma8451_->getYReading() << endl;
    17ec:	8c 89       	ldd	r24, Y+20	; 0x14
    17ee:	9d 89       	ldd	r25, Y+21	; 0x15
    17f0:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN7MMA845111getYReadingEv>
    17f4:	7c 01       	movw	r14, r24
    17f6:	0e 81       	ldd	r16, Y+6	; 0x06
    17f8:	1f 81       	ldd	r17, Y+7	; 0x07
    17fa:	6b e6       	ldi	r22, 0x6B	; 107
    17fc:	71 e2       	ldi	r23, 0x21	; 33
    17fe:	c8 01       	movw	r24, r16
    1800:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    1804:	b7 01       	movw	r22, r14
    1806:	c8 01       	movw	r24, r16
    1808:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_ZN8emstreamlsEj>
    180c:	66 e0       	ldi	r22, 0x06	; 6
    180e:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
				*p_serial << "z: " << mma8451_->getZReading() << endl;
    1812:	8c 89       	ldd	r24, Y+20	; 0x14
    1814:	9d 89       	ldd	r25, Y+21	; 0x15
    1816:	0e 94 83 0b 	call	0x1706	; 0x1706 <_ZN7MMA845111getZReadingEv>
    181a:	7c 01       	movw	r14, r24
    181c:	0e 81       	ldd	r16, Y+6	; 0x06
    181e:	1f 81       	ldd	r17, Y+7	; 0x07
    1820:	6f e6       	ldi	r22, 0x6F	; 111
    1822:	71 e2       	ldi	r23, 0x21	; 33
    1824:	c8 01       	movw	r24, r16
    1826:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    182a:	b7 01       	movw	r22, r14
    182c:	c8 01       	movw	r24, r16
    182e:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_ZN8emstreamlsEj>
    1832:	66 e0       	ldi	r22, 0x06	; 6
    1834:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
				// break;
			

		} // End switch state

		runs++;                             // Increment counter for debugging
    1838:	8e 85       	ldd	r24, Y+14	; 0x0e
    183a:	9f 85       	ldd	r25, Y+15	; 0x0f
    183c:	a8 89       	ldd	r26, Y+16	; 0x10
    183e:	b9 89       	ldd	r27, Y+17	; 0x11
    1840:	01 96       	adiw	r24, 0x01	; 1
    1842:	a1 1d       	adc	r26, r1
    1844:	b1 1d       	adc	r27, r1
    1846:	8e 87       	std	Y+14, r24	; 0x0e
    1848:	9f 87       	std	Y+15, r25	; 0x0f
    184a:	a8 8b       	std	Y+16, r26	; 0x10
    184c:	b9 8b       	std	Y+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (1000));
    184e:	68 ee       	ldi	r22, 0xE8	; 232
    1850:	73 e0       	ldi	r23, 0x03	; 3
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <vTaskDelay>
	uint8_t addrs[10];
	

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
    185a:	b2 cf       	rjmp	.-156    	; 0x17c0 <_ZN11task_sensor3runEv+0x2>

0000185c <_ZN11task_sensorC1EPKchjP8emstreamP7MMA8451>:
 *                      (default: configMINIMAL_STACK_SIZE)
 *  @param p_ser_dev Pointer to a serial device (port, radio, SD card, etc.) which can
 *                   be used by this task to communicate (default: NULL)
 */

task_sensor::task_sensor (const char* a_name, 
    185c:	cf 92       	push	r12
    185e:	df 92       	push	r13
    1860:	ef 92       	push	r14
    1862:	ff 92       	push	r15
    1864:	0f 93       	push	r16
    1866:	1f 93       	push	r17
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	ec 01       	movw	r28, r24
    186e:	6b 01       	movw	r12, r22
					  size_t a_stack_size,
					  emstream* p_ser_dev,
					  MMA8451 * mma8451
					 )
	: frt_task (a_name, a_priority, a_stack_size, p_ser_dev), 
		mma8451_(mma8451)
    1870:	0e 94 ff 19 	call	0x33fe	; 0x33fe <_ZN8frt_taskC1EPKchjP8emstream>
    1874:	87 e7       	ldi	r24, 0x77	; 119
    1876:	91 e2       	ldi	r25, 0x21	; 33
    1878:	88 83       	st	Y, r24
    187a:	99 83       	std	Y+1, r25	; 0x01
    187c:	ec 8a       	std	Y+20, r14	; 0x14
    187e:	fd 8a       	std	Y+21, r15	; 0x15
{
	task_name = a_name;
    1880:	ce 8a       	std	Y+22, r12	; 0x16
    1882:	df 8a       	std	Y+23, r13	; 0x17
}
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	1f 91       	pop	r17
    188a:	0f 91       	pop	r16
    188c:	ff 90       	pop	r15
    188e:	ef 90       	pop	r14
    1890:	df 90       	pop	r13
    1892:	cf 90       	pop	r12
    1894:	08 95       	ret

00001896 <_ZN9task_userC1EPKchjP8emstream>:
 *                      (default: configMINIMAL_STACK_SIZE)
 *  @param p_ser_dev Pointer to a serial device (port, radio, SD card, etc.) which can
 *                   be used by this task to communicate (default: NULL)
 */

task_user::task_user (const char* a_name, 
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	ec 01       	movw	r28, r24
					  unsigned portBASE_TYPE a_priority, 
					  size_t a_stack_size,
					  emstream* p_ser_dev
					 )
	: frt_task (a_name, a_priority, a_stack_size, p_ser_dev)
    18a0:	0e 94 ff 19 	call	0x33fe	; 0x33fe <_ZN8frt_taskC1EPKchjP8emstream>
    18a4:	8f e7       	ldi	r24, 0x7F	; 127
    18a6:	91 e2       	ldi	r25, 0x21	; 33
    18a8:	88 83       	st	Y, r24
    18aa:	99 83       	std	Y+1, r25	; 0x01
{
	// Nothing is done in the body of this constructor. All the work is done in the
	// call to the frt_task constructor on the line just above this one
}
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	1f 91       	pop	r17
    18b2:	0f 91       	pop	r16
    18b4:	08 95       	ret

000018b6 <_ZN9task_user18print_help_messageEv>:
//-------------------------------------------------------------------------------------
/** This method prints a simple help message.
 */

void task_user::print_help_message (void)
{
    18b6:	0f 93       	push	r16
    18b8:	1f 93       	push	r17
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	ec 01       	movw	r28, r24
	*p_serial << ATERM_BKG_CYAN << ATERM_TXT_BLACK << clrscr;
    18c0:	6a e0       	ldi	r22, 0x0A	; 10
    18c2:	8e 81       	ldd	r24, Y+6	; 0x06
    18c4:	9f 81       	ldd	r25, Y+7	; 0x07
    18c6:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    18ca:	8c 01       	movw	r16, r24
    18cc:	6d e0       	ldi	r22, 0x0D	; 13
    18ce:	75 e0       	ldi	r23, 0x05	; 5
    18d0:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    18d4:	6a e0       	ldi	r22, 0x0A	; 10
    18d6:	c8 01       	movw	r24, r16
    18d8:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    18dc:	8c 01       	movw	r16, r24
    18de:	67 e0       	ldi	r22, 0x07	; 7
    18e0:	75 e0       	ldi	r23, 0x05	; 5
    18e2:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    18e6:	67 e0       	ldi	r22, 0x07	; 7
    18e8:	c8 01       	movw	r24, r16
    18ea:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PROGRAM_VERSION << PMS (" help") << endl;
    18ee:	6a e0       	ldi	r22, 0x0A	; 10
    18f0:	8e 81       	ldd	r24, Y+6	; 0x06
    18f2:	9f 81       	ldd	r25, Y+7	; 0x07
    18f4:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    18f8:	8c 01       	movw	r16, r24
    18fa:	68 ee       	ldi	r22, 0xE8	; 232
    18fc:	74 e0       	ldi	r23, 0x04	; 4
    18fe:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    1902:	6a e0       	ldi	r22, 0x0A	; 10
    1904:	c8 01       	movw	r24, r16
    1906:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    190a:	8c 01       	movw	r16, r24
    190c:	62 ee       	ldi	r22, 0xE2	; 226
    190e:	74 e0       	ldi	r23, 0x04	; 4
    1910:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    1914:	66 e0       	ldi	r22, 0x06	; 6
    1916:	c8 01       	movw	r24, r16
    1918:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("  Ctl-C: Reset the AVR") << endl;
    191c:	6a e0       	ldi	r22, 0x0A	; 10
    191e:	8e 81       	ldd	r24, Y+6	; 0x06
    1920:	9f 81       	ldd	r25, Y+7	; 0x07
    1922:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    1926:	8c 01       	movw	r16, r24
    1928:	6b ec       	ldi	r22, 0xCB	; 203
    192a:	74 e0       	ldi	r23, 0x04	; 4
    192c:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    1930:	66 e0       	ldi	r22, 0x06	; 6
    1932:	c8 01       	movw	r24, r16
    1934:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("  Ctl-A: Enter command mode") << endl;
    1938:	6a e0       	ldi	r22, 0x0A	; 10
    193a:	8e 81       	ldd	r24, Y+6	; 0x06
    193c:	9f 81       	ldd	r25, Y+7	; 0x07
    193e:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    1942:	8c 01       	movw	r16, r24
    1944:	6f ea       	ldi	r22, 0xAF	; 175
    1946:	74 e0       	ldi	r23, 0x04	; 4
    1948:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    194c:	66 e0       	ldi	r22, 0x06	; 6
    194e:	c8 01       	movw	r24, r16
    1950:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("  In command mode only:") << endl;
    1954:	6a e0       	ldi	r22, 0x0A	; 10
    1956:	8e 81       	ldd	r24, Y+6	; 0x06
    1958:	9f 81       	ldd	r25, Y+7	; 0x07
    195a:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    195e:	8c 01       	movw	r16, r24
    1960:	67 e9       	ldi	r22, 0x97	; 151
    1962:	74 e0       	ldi	r23, 0x04	; 4
    1964:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    1968:	66 e0       	ldi	r22, 0x06	; 6
    196a:	c8 01       	movw	r24, r16
    196c:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    n:   Show the time right now") << endl;
    1970:	6a e0       	ldi	r22, 0x0A	; 10
    1972:	8e 81       	ldd	r24, Y+6	; 0x06
    1974:	9f 81       	ldd	r25, Y+7	; 0x07
    1976:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    197a:	8c 01       	movw	r16, r24
    197c:	66 e7       	ldi	r22, 0x76	; 118
    197e:	74 e0       	ldi	r23, 0x04	; 4
    1980:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    1984:	66 e0       	ldi	r22, 0x06	; 6
    1986:	c8 01       	movw	r24, r16
    1988:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    v:   Version and setup information") << endl;
    198c:	6a e0       	ldi	r22, 0x0A	; 10
    198e:	8e 81       	ldd	r24, Y+6	; 0x06
    1990:	9f 81       	ldd	r25, Y+7	; 0x07
    1992:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    1996:	8c 01       	movw	r16, r24
    1998:	6f e4       	ldi	r22, 0x4F	; 79
    199a:	74 e0       	ldi	r23, 0x04	; 4
    199c:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    19a0:	66 e0       	ldi	r22, 0x06	; 6
    19a2:	c8 01       	movw	r24, r16
    19a4:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    s:   Stack dump for tasks") << endl;
    19a8:	6a e0       	ldi	r22, 0x0A	; 10
    19aa:	8e 81       	ldd	r24, Y+6	; 0x06
    19ac:	9f 81       	ldd	r25, Y+7	; 0x07
    19ae:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    19b2:	8c 01       	movw	r16, r24
    19b4:	61 e3       	ldi	r22, 0x31	; 49
    19b6:	74 e0       	ldi	r23, 0x04	; 4
    19b8:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    19bc:	66 e0       	ldi	r22, 0x06	; 6
    19be:	c8 01       	movw	r24, r16
    19c0:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    e:   Exit command mode") << endl;
    19c4:	6a e0       	ldi	r22, 0x0A	; 10
    19c6:	8e 81       	ldd	r24, Y+6	; 0x06
    19c8:	9f 81       	ldd	r25, Y+7	; 0x07
    19ca:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    19ce:	8c 01       	movw	r16, r24
    19d0:	66 e1       	ldi	r22, 0x16	; 22
    19d2:	74 e0       	ldi	r23, 0x04	; 4
    19d4:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    19d8:	66 e0       	ldi	r22, 0x06	; 6
    19da:	c8 01       	movw	r24, r16
    19dc:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    h:   HALP!") << endl;
    19e0:	6a e0       	ldi	r22, 0x0A	; 10
    19e2:	8e 81       	ldd	r24, Y+6	; 0x06
    19e4:	9f 81       	ldd	r25, Y+7	; 0x07
    19e6:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    19ea:	ec 01       	movw	r28, r24
    19ec:	67 e0       	ldi	r22, 0x07	; 7
    19ee:	74 e0       	ldi	r23, 0x04	; 4
    19f0:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    19f4:	66 e0       	ldi	r22, 0x06	; 6
    19f6:	ce 01       	movw	r24, r28
    19f8:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
}
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	1f 91       	pop	r17
    1a02:	0f 91       	pop	r16
    1a04:	08 95       	ret

00001a06 <_ZN9task_user11show_statusEv>:
 *    \li Processor cycles used by each task
 *    \li Amount of heap space free and setting of RTOS tick timer
 */

void task_user::show_status (void)
{
    1a06:	af 92       	push	r10
    1a08:	bf 92       	push	r11
    1a0a:	cf 92       	push	r12
    1a0c:	df 92       	push	r13
    1a0e:	ef 92       	push	r14
    1a10:	ff 92       	push	r15
    1a12:	0f 93       	push	r16
    1a14:	1f 93       	push	r17
    1a16:	cf 93       	push	r28
    1a18:	df 93       	push	r29
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <_ZN9task_user11show_statusEv+0x16>
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <_ZN9task_user11show_statusEv+0x18>
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	8c 01       	movw	r16, r24
	public:
		/** This constructor creates a time stamp with its time set to zero.
		 */
		time_stamp (void)
		{
			tick_count = 0;
    1a24:	19 82       	std	Y+1, r1	; 0x01
    1a26:	1a 82       	std	Y+2, r1	; 0x02
    1a28:	1b 82       	std	Y+3, r1	; 0x03
    1a2a:	1c 82       	std	Y+4, r1	; 0x04
			hardware_count = 0;
    1a2c:	1d 82       	std	Y+5, r1	; 0x05
    1a2e:	1e 82       	std	Y+6, r1	; 0x06
		 *  means that the number returned is how many bytes are currently unused. 
		 *  @return The approximate number of bytes left for use in the heap
		 */
		size_t heap_left (void)
		{
			return (xPortGetFreeHeapSize ());
    1a30:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <xPortGetFreeHeapSize>
    1a34:	6c 01       	movw	r12, r24
	time_stamp the_time;					// Holds current time for printing

	// Show program vesion, time, and free heap space
	*p_serial << endl << PROGRAM_VERSION << PMS (__DATE__) << endl 
			  << PMS ("Time: ") << the_time.set_to_now ()
    1a36:	ce 01       	movw	r24, r28
    1a38:	01 96       	adiw	r24, 0x01	; 1
    1a3a:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <_ZN10time_stamp10set_to_nowEv>
    1a3e:	5c 01       	movw	r10, r24
void task_user::show_status (void)
{
	time_stamp the_time;					// Holds current time for printing

	// Show program vesion, time, and free heap space
	*p_serial << endl << PROGRAM_VERSION << PMS (__DATE__) << endl 
    1a40:	66 e0       	ldi	r22, 0x06	; 6
    1a42:	f8 01       	movw	r30, r16
    1a44:	86 81       	ldd	r24, Z+6	; 0x06
    1a46:	97 81       	ldd	r25, Z+7	; 0x07
    1a48:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    1a4c:	6a e0       	ldi	r22, 0x0A	; 10
    1a4e:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    1a52:	7c 01       	movw	r14, r24
    1a54:	68 ee       	ldi	r22, 0xE8	; 232
    1a56:	73 e0       	ldi	r23, 0x03	; 3
    1a58:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    1a5c:	6a e0       	ldi	r22, 0x0A	; 10
    1a5e:	c7 01       	movw	r24, r14
    1a60:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    1a64:	7c 01       	movw	r14, r24
    1a66:	6c ed       	ldi	r22, 0xDC	; 220
    1a68:	73 e0       	ldi	r23, 0x03	; 3
    1a6a:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    1a6e:	66 e0       	ldi	r22, 0x06	; 6
    1a70:	c7 01       	movw	r24, r14
    1a72:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
			  << PMS ("Time: ") << the_time.set_to_now ()
    1a76:	6a e0       	ldi	r22, 0x0A	; 10
    1a78:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    1a7c:	7c 01       	movw	r14, r24
    1a7e:	65 ed       	ldi	r22, 0xD5	; 213
    1a80:	73 e0       	ldi	r23, 0x03	; 3
    1a82:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    1a86:	b5 01       	movw	r22, r10
    1a88:	c7 01       	movw	r24, r14
    1a8a:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <_ZlsR8emstreamR10time_stamp>
			  << PMS (", Heap free: ") << heap_left() << PMS ("/") 
    1a8e:	6a e0       	ldi	r22, 0x0A	; 10
    1a90:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    1a94:	7c 01       	movw	r14, r24
    1a96:	67 ec       	ldi	r22, 0xC7	; 199
    1a98:	73 e0       	ldi	r23, 0x03	; 3
    1a9a:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    1a9e:	b6 01       	movw	r22, r12
    1aa0:	c7 01       	movw	r24, r14
    1aa2:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_ZN8emstreamlsEj>
    1aa6:	6a e0       	ldi	r22, 0x0A	; 10
    1aa8:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    1aac:	7c 01       	movw	r14, r24
    1aae:	65 ec       	ldi	r22, 0xC5	; 197
    1ab0:	73 e0       	ldi	r23, 0x03	; 3
    1ab2:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
			  << configTOTAL_HEAP_SIZE;
    1ab6:	4f ef       	ldi	r20, 0xFF	; 255
    1ab8:	5f e0       	ldi	r21, 0x0F	; 15
    1aba:	60 e0       	ldi	r22, 0x00	; 0
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	c7 01       	movw	r24, r14
    1ac0:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <_ZN8emstreamlsEm>

	// Show how the timer/counter is set up to cause RTOS timer ticks
	*p_serial << PMS (", TCC0CCA=") << TCC0.CCA << endl << endl;
    1ac4:	c0 90 28 08 	lds	r12, 0x0828	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1ac8:	d0 90 29 08 	lds	r13, 0x0829	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    1acc:	6a e0       	ldi	r22, 0x0A	; 10
    1ace:	f8 01       	movw	r30, r16
    1ad0:	86 81       	ldd	r24, Z+6	; 0x06
    1ad2:	97 81       	ldd	r25, Z+7	; 0x07
    1ad4:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    1ad8:	7c 01       	movw	r14, r24
    1ada:	6a eb       	ldi	r22, 0xBA	; 186
    1adc:	73 e0       	ldi	r23, 0x03	; 3
    1ade:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    1ae2:	b6 01       	movw	r22, r12
    1ae4:	c7 01       	movw	r24, r14
    1ae6:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_ZN8emstreamlsEj>
    1aea:	66 e0       	ldi	r22, 0x06	; 6
    1aec:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    1af0:	66 e0       	ldi	r22, 0x06	; 6
    1af2:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>

	// Have the tasks print their status
	print_task_list (p_serial);
    1af6:	f8 01       	movw	r30, r16
    1af8:	86 81       	ldd	r24, Z+6	; 0x06
    1afa:	97 81       	ldd	r25, Z+7	; 0x07
    1afc:	0e 94 0d 1c 	call	0x381a	; 0x381a <_Z15print_task_listP8emstream>
}
    1b00:	26 96       	adiw	r28, 0x06	; 6
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	de bf       	out	0x3e, r29	; 62
    1b06:	df 91       	pop	r29
    1b08:	cf 91       	pop	r28
    1b0a:	1f 91       	pop	r17
    1b0c:	0f 91       	pop	r16
    1b0e:	ff 90       	pop	r15
    1b10:	ef 90       	pop	r14
    1b12:	df 90       	pop	r13
    1b14:	cf 90       	pop	r12
    1b16:	bf 90       	pop	r11
    1b18:	af 90       	pop	r10
    1b1a:	08 95       	ret

00001b1c <_ZN9task_user3runEv>:
 *  is just following the modern government model of "This is the land of the free...
 *  free to do exactly what you're told." 
 */

void task_user::run (void)
{
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <_ZN9task_user3runEv+0x6>
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <_ZN9task_user3runEv+0x8>
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	8c 01       	movw	r16, r24
	public:
		/** This constructor creates a time stamp with its time set to zero.
		 */
		time_stamp (void)
		{
			tick_count = 0;
    1b2a:	19 82       	std	Y+1, r1	; 0x01
    1b2c:	1a 82       	std	Y+2, r1	; 0x02
    1b2e:	1b 82       	std	Y+3, r1	; 0x03
    1b30:	1c 82       	std	Y+4, r1	; 0x04
			hardware_count = 0;
    1b32:	1d 82       	std	Y+5, r1	; 0x05
    1b34:	1e 82       	std	Y+6, r1	; 0x06
	char char_in;                           // Character read from serial device
	time_stamp a_time;                      // Holds the time so it can be displayed

	// Tell the user how to get into command mode (state 1), where the user interface
	// task does interesting things such as diagnostic printouts
	*p_serial << PMS ("Press Ctrl-A for command mode") << endl;
    1b36:	6a e0       	ldi	r22, 0x0A	; 10
    1b38:	dc 01       	movw	r26, r24
    1b3a:	16 96       	adiw	r26, 0x06	; 6
    1b3c:	8d 91       	ld	r24, X+
    1b3e:	9c 91       	ld	r25, X
    1b40:	17 97       	sbiw	r26, 0x07	; 7
    1b42:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    1b46:	7c 01       	movw	r14, r24
    1b48:	66 e5       	ldi	r22, 0x56	; 86
    1b4a:	75 e0       	ldi	r23, 0x05	; 5
    1b4c:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    1b50:	66 e0       	ldi	r22, 0x06	; 6
    1b52:	c7 01       	movw	r24, r14
    1b54:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
	{
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
    1b58:	f8 01       	movw	r30, r16
    1b5a:	84 85       	ldd	r24, Z+12	; 0x0c
    1b5c:	88 23       	and	r24, r24
    1b5e:	21 f0       	breq	.+8      	; 0x1b68 <_ZN9task_user3runEv+0x4c>
    1b60:	81 30       	cpi	r24, 0x01	; 1
    1b62:	09 f4       	brne	.+2      	; 0x1b66 <_ZN9task_user3runEv+0x4a>
    1b64:	5d c0       	rjmp	.+186    	; 0x1c20 <_ZN9task_user3runEv+0x104>
    1b66:	d8 c0       	rjmp	.+432    	; 0x1d18 <_ZN9task_user3runEv+0x1fc>
		{
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 0, we transparently relay characters from the radio to the USB 
			// serial port and vice versa but watch for certain control characters
			case (0):
				if (p_serial->check_for_char ())        // If the user typed a
    1b68:	86 81       	ldd	r24, Z+6	; 0x06
    1b6a:	97 81       	ldd	r25, Z+7	; 0x07
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	ed 91       	ld	r30, X+
    1b70:	fc 91       	ld	r31, X
    1b72:	04 80       	ldd	r0, Z+4	; 0x04
    1b74:	f5 81       	ldd	r31, Z+5	; 0x05
    1b76:	e0 2d       	mov	r30, r0
    1b78:	19 95       	eicall
    1b7a:	88 23       	and	r24, r24
    1b7c:	a9 f1       	breq	.+106    	; 0x1be8 <_ZN9task_user3runEv+0xcc>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    1b7e:	f8 01       	movw	r30, r16
    1b80:	86 81       	ldd	r24, Z+6	; 0x06
    1b82:	97 81       	ldd	r25, Z+7	; 0x07
    1b84:	dc 01       	movw	r26, r24
    1b86:	ed 91       	ld	r30, X+
    1b88:	fc 91       	ld	r31, X
    1b8a:	06 80       	ldd	r0, Z+6	; 0x06
    1b8c:	f7 81       	ldd	r31, Z+7	; 0x07
    1b8e:	e0 2d       	mov	r30, r0
    1b90:	19 95       	eicall

					// In this switch statement, we respond to different characters
					switch (char_in)
    1b92:	99 27       	eor	r25, r25
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	91 05       	cpc	r25, r1
    1b98:	f9 f0       	breq	.+62     	; 0x1bd8 <_ZN9task_user3runEv+0xbc>
    1b9a:	03 97       	sbiw	r24, 0x03	; 3
    1b9c:	09 f0       	breq	.+2      	; 0x1ba0 <_ZN9task_user3runEv+0x84>
    1b9e:	d8 c0       	rjmp	.+432    	; 0x1d50 <_ZN9task_user3runEv+0x234>
					{
						// Control-C means reset the AVR computer
						case (3):
							*p_serial << PMS ("Resetting AVR") << endl;
    1ba0:	6a e0       	ldi	r22, 0x0A	; 10
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	86 81       	ldd	r24, Z+6	; 0x06
    1ba6:	97 81       	ldd	r25, Z+7	; 0x07
    1ba8:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    1bac:	8c 01       	movw	r16, r24
    1bae:	68 e4       	ldi	r22, 0x48	; 72
    1bb0:	75 e0       	ldi	r23, 0x05	; 5
    1bb2:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    1bb6:	66 e0       	ldi	r22, 0x06	; 6
    1bb8:	c8 01       	movw	r24, r16
    1bba:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
							wdt_enable (WDTO_120MS);
    1bbe:	93 e0       	ldi	r25, 0x03	; 3
    1bc0:	88 ed       	ldi	r24, 0xD8	; 216
    1bc2:	08 b6       	in	r0, 0x38	; 56
    1bc4:	18 be       	out	0x38, r1	; 56
    1bc6:	84 bf       	out	0x34, r24	; 52
    1bc8:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1bcc:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    1bd0:	81 fd       	sbrc	r24, 1
    1bd2:	fc cf       	rjmp	.-8      	; 0x1bcc <_ZN9task_user3runEv+0xb0>
    1bd4:	08 be       	out	0x38, r0	; 56
    1bd6:	ff cf       	rjmp	.-2      	; 0x1bd6 <_ZN9task_user3runEv+0xba>
							for (;;);
							break;

						// Control-A puts this task in command mode
						case (1):
							print_help_message ();
    1bd8:	c8 01       	movw	r24, r16
    1bda:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_ZN9task_user18print_help_messageEv>
							transition_to (1);
    1bde:	61 e0       	ldi	r22, 0x01	; 1
    1be0:	c8 01       	movw	r24, r16
    1be2:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <_ZN8frt_task13transition_toEh>
							break;
    1be6:	b4 c0       	rjmp	.+360    	; 0x1d50 <_ZN9task_user3runEv+0x234>
					};
				}

				// Check the print queue to see if another task has sent this task 
				// something to be printed
				else if (print_ser_queue.check_for_char ())
    1be8:	82 ef       	ldi	r24, 0xF2	; 242
    1bea:	92 e3       	ldi	r25, 0x32	; 50
    1bec:	0e 94 bc 1c 	call	0x3978	; 0x3978 <_ZN14frt_text_queue14check_for_charEv>
    1bf0:	88 23       	and	r24, r24
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <_ZN9task_user3runEv+0xda>
    1bf4:	ad c0       	rjmp	.+346    	; 0x1d50 <_ZN9task_user3runEv+0x234>
				{
					p_serial->putchar (print_ser_queue.getchar ());
    1bf6:	d8 01       	movw	r26, r16
    1bf8:	16 96       	adiw	r26, 0x06	; 6
    1bfa:	ed 91       	ld	r30, X+
    1bfc:	fc 91       	ld	r31, X
    1bfe:	17 97       	sbiw	r26, 0x07	; 7
    1c00:	01 90       	ld	r0, Z+
    1c02:	f0 81       	ld	r31, Z
    1c04:	e0 2d       	mov	r30, r0
    1c06:	e2 80       	ldd	r14, Z+2	; 0x02
    1c08:	f3 80       	ldd	r15, Z+3	; 0x03
    1c0a:	82 ef       	ldi	r24, 0xF2	; 242
    1c0c:	92 e3       	ldi	r25, 0x32	; 50
    1c0e:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN14frt_text_queue7getcharEv>
    1c12:	68 2f       	mov	r22, r24
    1c14:	f8 01       	movw	r30, r16
    1c16:	86 81       	ldd	r24, Z+6	; 0x06
    1c18:	97 81       	ldd	r25, Z+7	; 0x07
    1c1a:	f7 01       	movw	r30, r14
    1c1c:	19 95       	eicall
    1c1e:	98 c0       	rjmp	.+304    	; 0x1d50 <_ZN9task_user3runEv+0x234>

			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 1, we're in command mode, so when the user types characters, the
			// characters are interpreted as commands to do something
			case (1):
				if (p_serial->check_for_char ())				// If the user typed a
    1c20:	86 81       	ldd	r24, Z+6	; 0x06
    1c22:	97 81       	ldd	r25, Z+7	; 0x07
    1c24:	dc 01       	movw	r26, r24
    1c26:	ed 91       	ld	r30, X+
    1c28:	fc 91       	ld	r31, X
    1c2a:	04 80       	ldd	r0, Z+4	; 0x04
    1c2c:	f5 81       	ldd	r31, Z+5	; 0x05
    1c2e:	e0 2d       	mov	r30, r0
    1c30:	19 95       	eicall
    1c32:	88 23       	and	r24, r24
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <_ZN9task_user3runEv+0x11c>
    1c36:	8c c0       	rjmp	.+280    	; 0x1d50 <_ZN9task_user3runEv+0x234>
				{											// character, read
					char_in = p_serial->getchar ();			// the character
    1c38:	f8 01       	movw	r30, r16
    1c3a:	86 81       	ldd	r24, Z+6	; 0x06
    1c3c:	97 81       	ldd	r25, Z+7	; 0x07
    1c3e:	dc 01       	movw	r26, r24
    1c40:	ed 91       	ld	r30, X+
    1c42:	fc 91       	ld	r31, X
    1c44:	06 80       	ldd	r0, Z+6	; 0x06
    1c46:	f7 81       	ldd	r31, Z+7	; 0x07
    1c48:	e0 2d       	mov	r30, r0
    1c4a:	19 95       	eicall

					// In this switch statement, we respond to different characters as
					// commands typed in by the user
					switch (char_in)
    1c4c:	9c 01       	movw	r18, r24
    1c4e:	33 27       	eor	r19, r19
    1c50:	28 36       	cpi	r18, 0x68	; 104
    1c52:	31 05       	cpc	r19, r1
    1c54:	59 f1       	breq	.+86     	; 0x1cac <_ZN9task_user3runEv+0x190>
    1c56:	3c f4       	brge	.+14     	; 0x1c66 <_ZN9task_user3runEv+0x14a>
    1c58:	2b 31       	cpi	r18, 0x1B	; 27
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	59 f1       	breq	.+86     	; 0x1cb4 <_ZN9task_user3runEv+0x198>
    1c5e:	25 36       	cpi	r18, 0x65	; 101
    1c60:	31 05       	cpc	r19, r1
    1c62:	41 f1       	breq	.+80     	; 0x1cb4 <_ZN9task_user3runEv+0x198>
    1c64:	3b c0       	rjmp	.+118    	; 0x1cdc <_ZN9task_user3runEv+0x1c0>
    1c66:	23 37       	cpi	r18, 0x73	; 115
    1c68:	31 05       	cpc	r19, r1
    1c6a:	c1 f0       	breq	.+48     	; 0x1c9c <_ZN9task_user3runEv+0x180>
    1c6c:	26 37       	cpi	r18, 0x76	; 118
    1c6e:	31 05       	cpc	r19, r1
    1c70:	89 f0       	breq	.+34     	; 0x1c94 <_ZN9task_user3runEv+0x178>
    1c72:	2e 36       	cpi	r18, 0x6E	; 110
    1c74:	31 05       	cpc	r19, r1
    1c76:	91 f5       	brne	.+100    	; 0x1cdc <_ZN9task_user3runEv+0x1c0>
					{
						// The 'n' command asks what time it is right now
						case ('n'):
							*p_serial << (a_time.set_to_now ()) << endl;
    1c78:	ce 01       	movw	r24, r28
    1c7a:	01 96       	adiw	r24, 0x01	; 1
    1c7c:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <_ZN10time_stamp10set_to_nowEv>
    1c80:	bc 01       	movw	r22, r24
    1c82:	f8 01       	movw	r30, r16
    1c84:	86 81       	ldd	r24, Z+6	; 0x06
    1c86:	97 81       	ldd	r25, Z+7	; 0x07
    1c88:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <_ZlsR8emstreamR10time_stamp>
    1c8c:	66 e0       	ldi	r22, 0x06	; 6
    1c8e:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
							break;
    1c92:	5e c0       	rjmp	.+188    	; 0x1d50 <_ZN9task_user3runEv+0x234>

						// The 'v' command asks for version and status information
						case ('v'):
							show_status ();
    1c94:	c8 01       	movw	r24, r16
    1c96:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <_ZN9task_user11show_statusEv>
							break;
    1c9a:	5a c0       	rjmp	.+180    	; 0x1d50 <_ZN9task_user3runEv+0x234>

						// The 's' command has all the tasks dump their stacks
						case ('s'):
							print_task_stacks (p_serial);
    1c9c:	d8 01       	movw	r26, r16
    1c9e:	16 96       	adiw	r26, 0x06	; 6
    1ca0:	8d 91       	ld	r24, X+
    1ca2:	9c 91       	ld	r25, X
    1ca4:	17 97       	sbiw	r26, 0x07	; 7
    1ca6:	0e 94 14 1b 	call	0x3628	; 0x3628 <_Z17print_task_stacksP8emstream>
							break;
    1caa:	52 c0       	rjmp	.+164    	; 0x1d50 <_ZN9task_user3runEv+0x234>

						// The 'h' command is a plea for help
						case ('h'):
							print_help_message ();
    1cac:	c8 01       	movw	r24, r16
    1cae:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_ZN9task_user18print_help_messageEv>
							break;
    1cb2:	4e c0       	rjmp	.+156    	; 0x1d50 <_ZN9task_user3runEv+0x234>

						// The escape key or 'e' key go back to non-command mode
						case (27):
						case ('e'):
							*p_serial << PMS ("Exit command mode") << endl;
    1cb4:	6a e0       	ldi	r22, 0x0A	; 10
    1cb6:	f8 01       	movw	r30, r16
    1cb8:	86 81       	ldd	r24, Z+6	; 0x06
    1cba:	97 81       	ldd	r25, Z+7	; 0x07
    1cbc:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    1cc0:	7c 01       	movw	r14, r24
    1cc2:	66 e3       	ldi	r22, 0x36	; 54
    1cc4:	75 e0       	ldi	r23, 0x05	; 5
    1cc6:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    1cca:	66 e0       	ldi	r22, 0x06	; 6
    1ccc:	c7 01       	movw	r24, r14
    1cce:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
							transition_to (0);
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	c8 01       	movw	r24, r16
    1cd6:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <_ZN8frt_task13transition_toEh>
							break;
    1cda:	3a c0       	rjmp	.+116    	; 0x1d50 <_ZN9task_user3runEv+0x234>

						// If the character isn't recognized, ask: What's That Function?
						default:
							p_serial->putchar (char_in);
    1cdc:	f8 01       	movw	r30, r16
    1cde:	a6 81       	ldd	r26, Z+6	; 0x06
    1ce0:	b7 81       	ldd	r27, Z+7	; 0x07
    1ce2:	ed 91       	ld	r30, X+
    1ce4:	fc 91       	ld	r31, X
    1ce6:	11 97       	sbiw	r26, 0x01	; 1
    1ce8:	02 80       	ldd	r0, Z+2	; 0x02
    1cea:	f3 81       	ldd	r31, Z+3	; 0x03
    1cec:	e0 2d       	mov	r30, r0
    1cee:	68 2f       	mov	r22, r24
    1cf0:	cd 01       	movw	r24, r26
    1cf2:	19 95       	eicall
							*p_serial << PMS (":WTF?") << endl;
    1cf4:	6a e0       	ldi	r22, 0x0A	; 10
    1cf6:	d8 01       	movw	r26, r16
    1cf8:	16 96       	adiw	r26, 0x06	; 6
    1cfa:	8d 91       	ld	r24, X+
    1cfc:	9c 91       	ld	r25, X
    1cfe:	17 97       	sbiw	r26, 0x07	; 7
    1d00:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    1d04:	7c 01       	movw	r14, r24
    1d06:	60 e3       	ldi	r22, 0x30	; 48
    1d08:	75 e0       	ldi	r23, 0x05	; 5
    1d0a:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    1d0e:	66 e0       	ldi	r22, 0x06	; 6
    1d10:	c7 01       	movw	r24, r14
    1d12:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
							break;
    1d16:	1c c0       	rjmp	.+56     	; 0x1d50 <_ZN9task_user3runEv+0x234>
				break; // End of state 1

			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// We should never get to the default state. If we do, complain and restart
			default:
				*p_serial << PMS ("Illegal state! Resetting AVR") << endl;
    1d18:	6a e0       	ldi	r22, 0x0A	; 10
    1d1a:	f8 01       	movw	r30, r16
    1d1c:	86 81       	ldd	r24, Z+6	; 0x06
    1d1e:	97 81       	ldd	r25, Z+7	; 0x07
    1d20:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    1d24:	8c 01       	movw	r16, r24
    1d26:	63 e1       	ldi	r22, 0x13	; 19
    1d28:	75 e0       	ldi	r23, 0x05	; 5
    1d2a:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    1d2e:	66 e0       	ldi	r22, 0x06	; 6
    1d30:	c8 01       	movw	r24, r16
    1d32:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
				wdt_enable (WDTO_120MS);
    1d36:	93 e0       	ldi	r25, 0x03	; 3
    1d38:	88 ed       	ldi	r24, 0xD8	; 216
    1d3a:	08 b6       	in	r0, 0x38	; 56
    1d3c:	18 be       	out	0x38, r1	; 56
    1d3e:	84 bf       	out	0x34, r24	; 52
    1d40:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1d44:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    1d48:	81 fd       	sbrc	r24, 1
    1d4a:	fc cf       	rjmp	.-8      	; 0x1d44 <_ZN9task_user3runEv+0x228>
    1d4c:	08 be       	out	0x38, r0	; 56
    1d4e:	ff cf       	rjmp	.-2      	; 0x1d4e <_ZN9task_user3runEv+0x232>
				for (;;);
				break;

		} // End switch state

		runs++;                             // Increment counter for debugging
    1d50:	f8 01       	movw	r30, r16
    1d52:	86 85       	ldd	r24, Z+14	; 0x0e
    1d54:	97 85       	ldd	r25, Z+15	; 0x0f
    1d56:	a0 89       	ldd	r26, Z+16	; 0x10
    1d58:	b1 89       	ldd	r27, Z+17	; 0x11
    1d5a:	01 96       	adiw	r24, 0x01	; 1
    1d5c:	a1 1d       	adc	r26, r1
    1d5e:	b1 1d       	adc	r27, r1
    1d60:	86 87       	std	Z+14, r24	; 0x0e
    1d62:	97 87       	std	Z+15, r25	; 0x0f
    1d64:	a0 8b       	std	Z+16, r26	; 0x10
    1d66:	b1 8b       	std	Z+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (1000));
    1d68:	68 ee       	ldi	r22, 0xE8	; 232
    1d6a:	73 e0       	ldi	r23, 0x03	; 3
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <vTaskDelay>
	// task does interesting things such as diagnostic printouts
	*p_serial << PMS ("Press Ctrl-A for command mode") << endl;

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
    1d74:	f1 ce       	rjmp	.-542    	; 0x1b58 <_ZN9task_user3runEv+0x3c>

00001d76 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1d76:	0f 93       	push	r16
    1d78:	1f 93       	push	r17
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	ec 01       	movw	r28, r24
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    1d80:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    1d84:	80 91 36 22 	lds	r24, 0x2236	; 0x802236 <__data_end>
    1d88:	81 11       	cpse	r24, r1
    1d8a:	1d c0       	rjmp	.+58     	; 0x1dc6 <pvPortMalloc+0x50>
		{
			prvHeapInit();
    1d8c:	ab e3       	ldi	r26, 0x3B	; 59
    1d8e:	b2 e2       	ldi	r27, 0x22	; 34
    1d90:	ef e3       	ldi	r30, 0x3F	; 63
    1d92:	f2 e2       	ldi	r31, 0x22	; 34
    1d94:	ed 93       	st	X+, r30
    1d96:	fc 93       	st	X, r31
    1d98:	11 97       	sbiw	r26, 0x01	; 1
    1d9a:	12 96       	adiw	r26, 0x02	; 2
    1d9c:	1d 92       	st	X+, r1
    1d9e:	1c 92       	st	X, r1
    1da0:	13 97       	sbiw	r26, 0x03	; 3
    1da2:	a7 e3       	ldi	r26, 0x37	; 55
    1da4:	b2 e2       	ldi	r27, 0x22	; 34
    1da6:	8f ef       	ldi	r24, 0xFF	; 255
    1da8:	9f e0       	ldi	r25, 0x0F	; 15
    1daa:	12 96       	adiw	r26, 0x02	; 2
    1dac:	8d 93       	st	X+, r24
    1dae:	9c 93       	st	X, r25
    1db0:	13 97       	sbiw	r26, 0x03	; 3
    1db2:	1d 92       	st	X+, r1
    1db4:	1c 92       	st	X, r1
    1db6:	11 97       	sbiw	r26, 0x01	; 1
    1db8:	82 83       	std	Z+2, r24	; 0x02
    1dba:	93 83       	std	Z+3, r25	; 0x03
    1dbc:	a0 83       	st	Z, r26
    1dbe:	b1 83       	std	Z+1, r27	; 0x01
			xHeapHasBeenInitialised = pdTRUE;
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	80 93 36 22 	sts	0x2236, r24	; 0x802236 <__data_end>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    1dc6:	20 97       	sbiw	r28, 0x00	; 0
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <pvPortMalloc+0x56>
    1dca:	5f c0       	rjmp	.+190    	; 0x1e8a <pvPortMalloc+0x114>
		{
			xWantedSize += heapSTRUCT_SIZE;
    1dcc:	9e 01       	movw	r18, r28
    1dce:	2b 5f       	subi	r18, 0xFB	; 251
    1dd0:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    1dd2:	24 96       	adiw	r28, 0x04	; 4
    1dd4:	ce 3f       	cpi	r28, 0xFE	; 254
    1dd6:	df 40       	sbci	r29, 0x0F	; 15
    1dd8:	08 f0       	brcs	.+2      	; 0x1ddc <pvPortMalloc+0x66>
    1dda:	5a c0       	rjmp	.+180    	; 0x1e90 <pvPortMalloc+0x11a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    1ddc:	e0 91 3b 22 	lds	r30, 0x223B	; 0x80223b <xStart>
    1de0:	f0 91 3c 22 	lds	r31, 0x223C	; 0x80223c <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    1de4:	ab e3       	ldi	r26, 0x3B	; 59
    1de6:	b2 e2       	ldi	r27, 0x22	; 34
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <pvPortMalloc+0x78>
    1dea:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
    1dec:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    1dee:	82 81       	ldd	r24, Z+2	; 0x02
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	82 17       	cp	r24, r18
    1df4:	93 07       	cpc	r25, r19
    1df6:	20 f4       	brcc	.+8      	; 0x1e00 <pvPortMalloc+0x8a>
    1df8:	80 81       	ld	r24, Z
    1dfa:	91 81       	ldd	r25, Z+1	; 0x01
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	a9 f7       	brne	.-22     	; 0x1dea <pvPortMalloc+0x74>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    1e00:	c2 e2       	ldi	r28, 0x22	; 34
    1e02:	e7 33       	cpi	r30, 0x37	; 55
    1e04:	fc 07       	cpc	r31, r28
    1e06:	09 f4       	brne	.+2      	; 0x1e0a <pvPortMalloc+0x94>
    1e08:	46 c0       	rjmp	.+140    	; 0x1e96 <pvPortMalloc+0x120>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    1e0a:	cd 91       	ld	r28, X+
    1e0c:	dc 91       	ld	r29, X
    1e0e:	11 97       	sbiw	r26, 0x01	; 1
    1e10:	8e 01       	movw	r16, r28
    1e12:	0b 5f       	subi	r16, 0xFB	; 251
    1e14:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1e16:	80 81       	ld	r24, Z
    1e18:	91 81       	ldd	r25, Z+1	; 0x01
    1e1a:	8d 93       	st	X+, r24
    1e1c:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1e1e:	82 81       	ldd	r24, Z+2	; 0x02
    1e20:	93 81       	ldd	r25, Z+3	; 0x03
    1e22:	82 1b       	sub	r24, r18
    1e24:	93 0b       	sbc	r25, r19
    1e26:	8b 30       	cpi	r24, 0x0B	; 11
    1e28:	91 05       	cpc	r25, r1
    1e2a:	10 f1       	brcs	.+68     	; 0x1e70 <pvPortMalloc+0xfa>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    1e2c:	bf 01       	movw	r22, r30
    1e2e:	62 0f       	add	r22, r18
    1e30:	73 1f       	adc	r23, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1e32:	db 01       	movw	r26, r22
    1e34:	12 96       	adiw	r26, 0x02	; 2
    1e36:	8d 93       	st	X+, r24
    1e38:	9c 93       	st	X, r25
    1e3a:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
    1e3c:	22 83       	std	Z+2, r18	; 0x02
    1e3e:	33 83       	std	Z+3, r19	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    1e40:	12 96       	adiw	r26, 0x02	; 2
    1e42:	4d 91       	ld	r20, X+
    1e44:	5c 91       	ld	r21, X
    1e46:	13 97       	sbiw	r26, 0x03	; 3
    1e48:	8b e3       	ldi	r24, 0x3B	; 59
    1e4a:	92 e2       	ldi	r25, 0x22	; 34
    1e4c:	01 c0       	rjmp	.+2      	; 0x1e50 <pvPortMalloc+0xda>
    1e4e:	cd 01       	movw	r24, r26
    1e50:	ec 01       	movw	r28, r24
    1e52:	a8 81       	ld	r26, Y
    1e54:	b9 81       	ldd	r27, Y+1	; 0x01
    1e56:	12 96       	adiw	r26, 0x02	; 2
    1e58:	2d 91       	ld	r18, X+
    1e5a:	3c 91       	ld	r19, X
    1e5c:	13 97       	sbiw	r26, 0x03	; 3
    1e5e:	24 17       	cp	r18, r20
    1e60:	35 07       	cpc	r19, r21
    1e62:	a8 f3       	brcs	.-22     	; 0x1e4e <pvPortMalloc+0xd8>
    1e64:	eb 01       	movw	r28, r22
    1e66:	a8 83       	st	Y, r26
    1e68:	b9 83       	std	Y+1, r27	; 0x01
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	6d 93       	st	X+, r22
    1e6e:	7c 93       	st	X, r23
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    1e70:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    1e74:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    1e78:	22 81       	ldd	r18, Z+2	; 0x02
    1e7a:	33 81       	ldd	r19, Z+3	; 0x03
    1e7c:	82 1b       	sub	r24, r18
    1e7e:	93 0b       	sbc	r25, r19
    1e80:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    1e84:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    1e88:	08 c0       	rjmp	.+16     	; 0x1e9a <pvPortMalloc+0x124>

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    1e8a:	00 e0       	ldi	r16, 0x00	; 0
    1e8c:	10 e0       	ldi	r17, 0x00	; 0
    1e8e:	05 c0       	rjmp	.+10     	; 0x1e9a <pvPortMalloc+0x124>
    1e90:	00 e0       	ldi	r16, 0x00	; 0
    1e92:	10 e0       	ldi	r17, 0x00	; 0
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <pvPortMalloc+0x124>
    1e96:	00 e0       	ldi	r16, 0x00	; 0
    1e98:	10 e0       	ldi	r17, 0x00	; 0
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
    1e9a:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    1e9e:	c8 01       	movw	r24, r16
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	1f 91       	pop	r17
    1ea6:	0f 91       	pop	r16
    1ea8:	08 95       	ret

00001eaa <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1eaa:	0f 93       	push	r16
    1eac:	1f 93       	push	r17
    1eae:	cf 93       	push	r28
    1eb0:	df 93       	push	r29
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv )
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	41 f1       	breq	.+80     	; 0x1f06 <vPortFree+0x5c>
    1eb6:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    1eb8:	8c 01       	movw	r16, r24
    1eba:	05 50       	subi	r16, 0x05	; 5
    1ebc:	11 09       	sbc	r17, r1

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
    1ebe:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    1ec2:	f8 01       	movw	r30, r16
    1ec4:	42 81       	ldd	r20, Z+2	; 0x02
    1ec6:	53 81       	ldd	r21, Z+3	; 0x03
    1ec8:	ab e3       	ldi	r26, 0x3B	; 59
    1eca:	b2 e2       	ldi	r27, 0x22	; 34
    1ecc:	01 c0       	rjmp	.+2      	; 0x1ed0 <vPortFree+0x26>
    1ece:	df 01       	movw	r26, r30
    1ed0:	ed 91       	ld	r30, X+
    1ed2:	fc 91       	ld	r31, X
    1ed4:	11 97       	sbiw	r26, 0x01	; 1
    1ed6:	22 81       	ldd	r18, Z+2	; 0x02
    1ed8:	33 81       	ldd	r19, Z+3	; 0x03
    1eda:	24 17       	cp	r18, r20
    1edc:	35 07       	cpc	r19, r21
    1ede:	b8 f3       	brcs	.-18     	; 0x1ece <vPortFree+0x24>
    1ee0:	25 97       	sbiw	r28, 0x05	; 5
    1ee2:	e8 83       	st	Y, r30
    1ee4:	f9 83       	std	Y+1, r31	; 0x01
    1ee6:	0d 93       	st	X+, r16
    1ee8:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
    1eea:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    1eee:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    1ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef6:	82 0f       	add	r24, r18
    1ef8:	93 1f       	adc	r25, r19
    1efa:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    1efe:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
		}
		xTaskResumeAll();
    1f02:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <xTaskResumeAll>
	}
}
    1f06:	df 91       	pop	r29
    1f08:	cf 91       	pop	r28
    1f0a:	1f 91       	pop	r17
    1f0c:	0f 91       	pop	r16
    1f0e:	08 95       	ret

00001f10 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
    1f10:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    1f14:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    1f18:	08 95       	ret

00001f1a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    1f1a:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    1f1c:	03 96       	adiw	r24, 0x03	; 3
    1f1e:	81 83       	std	Z+1, r24	; 0x01
    1f20:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1f22:	4f ef       	ldi	r20, 0xFF	; 255
    1f24:	5f ef       	ldi	r21, 0xFF	; 255
    1f26:	ba 01       	movw	r22, r20
    1f28:	43 83       	std	Z+3, r20	; 0x03
    1f2a:	54 83       	std	Z+4, r21	; 0x04
    1f2c:	65 83       	std	Z+5, r22	; 0x05
    1f2e:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    1f30:	87 83       	std	Z+7, r24	; 0x07
    1f32:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    1f34:	81 87       	std	Z+9, r24	; 0x09
    1f36:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    1f38:	10 82       	st	Z, r1
    1f3a:	08 95       	ret

00001f3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	12 86       	std	Z+10, r1	; 0x0a
    1f40:	13 86       	std	Z+11, r1	; 0x0b
    1f42:	08 95       	ret

00001f44 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	fc 01       	movw	r30, r24
    1f4a:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    1f4c:	21 81       	ldd	r18, Z+1	; 0x01
    1f4e:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    1f50:	e9 01       	movw	r28, r18
    1f52:	8c 81       	ldd	r24, Y+4	; 0x04
    1f54:	9d 81       	ldd	r25, Y+5	; 0x05
    1f56:	14 96       	adiw	r26, 0x04	; 4
    1f58:	8d 93       	st	X+, r24
    1f5a:	9c 93       	st	X, r25
    1f5c:	15 97       	sbiw	r26, 0x05	; 5
	pxNewListItem->pxPrevious = pxList->pxIndex;
    1f5e:	81 81       	ldd	r24, Z+1	; 0x01
    1f60:	92 81       	ldd	r25, Z+2	; 0x02
    1f62:	16 96       	adiw	r26, 0x06	; 6
    1f64:	8d 93       	st	X+, r24
    1f66:	9c 93       	st	X, r25
    1f68:	17 97       	sbiw	r26, 0x07	; 7
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1f6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6e:	ec 01       	movw	r28, r24
    1f70:	6e 83       	std	Y+6, r22	; 0x06
    1f72:	7f 83       	std	Y+7, r23	; 0x07
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    1f74:	e9 01       	movw	r28, r18
    1f76:	6c 83       	std	Y+4, r22	; 0x04
    1f78:	7d 83       	std	Y+5, r23	; 0x05
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    1f7a:	61 83       	std	Z+1, r22	; 0x01
    1f7c:	72 83       	std	Z+2, r23	; 0x02

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1f7e:	1a 96       	adiw	r26, 0x0a	; 10
    1f80:	ed 93       	st	X+, r30
    1f82:	fc 93       	st	X, r31
    1f84:	1b 97       	sbiw	r26, 0x0b	; 11

	( pxList->uxNumberOfItems )++;
    1f86:	80 81       	ld	r24, Z
    1f88:	8f 5f       	subi	r24, 0xFF	; 255
    1f8a:	80 83       	st	Z, r24
}
    1f8c:	df 91       	pop	r29
    1f8e:	cf 91       	pop	r28
    1f90:	08 95       	ret

00001f92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    1f92:	0f 93       	push	r16
    1f94:	1f 93       	push	r17
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    1f9c:	08 81       	ld	r16, Y
    1f9e:	19 81       	ldd	r17, Y+1	; 0x01
    1fa0:	2a 81       	ldd	r18, Y+2	; 0x02
    1fa2:	3b 81       	ldd	r19, Y+3	; 0x03
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1fa4:	0f 3f       	cpi	r16, 0xFF	; 255
    1fa6:	4f ef       	ldi	r20, 0xFF	; 255
    1fa8:	14 07       	cpc	r17, r20
    1faa:	24 07       	cpc	r18, r20
    1fac:	34 07       	cpc	r19, r20
    1fae:	31 f4       	brne	.+12     	; 0x1fbc <vListInsert+0x2a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	19 96       	adiw	r26, 0x09	; 9
    1fb4:	ed 91       	ld	r30, X+
    1fb6:	fc 91       	ld	r31, X
    1fb8:	1a 97       	sbiw	r26, 0x0a	; 10
    1fba:	1f c0       	rjmp	.+62     	; 0x1ffa <vListInsert+0x68>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	33 96       	adiw	r30, 0x03	; 3
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	17 96       	adiw	r26, 0x07	; 7
    1fc4:	4d 91       	ld	r20, X+
    1fc6:	5c 91       	ld	r21, X
    1fc8:	18 97       	sbiw	r26, 0x08	; 8
    1fca:	da 01       	movw	r26, r20
    1fcc:	4d 91       	ld	r20, X+
    1fce:	5d 91       	ld	r21, X+
    1fd0:	6d 91       	ld	r22, X+
    1fd2:	7c 91       	ld	r23, X
    1fd4:	04 17       	cp	r16, r20
    1fd6:	15 07       	cpc	r17, r21
    1fd8:	26 07       	cpc	r18, r22
    1fda:	37 07       	cpc	r19, r23
    1fdc:	70 f0       	brcs	.+28     	; 0x1ffa <vListInsert+0x68>
    1fde:	04 80       	ldd	r0, Z+4	; 0x04
    1fe0:	f5 81       	ldd	r31, Z+5	; 0x05
    1fe2:	e0 2d       	mov	r30, r0
    1fe4:	a4 81       	ldd	r26, Z+4	; 0x04
    1fe6:	b5 81       	ldd	r27, Z+5	; 0x05
    1fe8:	4d 91       	ld	r20, X+
    1fea:	5d 91       	ld	r21, X+
    1fec:	6d 91       	ld	r22, X+
    1fee:	7c 91       	ld	r23, X
    1ff0:	04 17       	cp	r16, r20
    1ff2:	15 07       	cpc	r17, r21
    1ff4:	26 07       	cpc	r18, r22
    1ff6:	37 07       	cpc	r19, r23
    1ff8:	90 f7       	brcc	.-28     	; 0x1fde <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1ffa:	a4 81       	ldd	r26, Z+4	; 0x04
    1ffc:	b5 81       	ldd	r27, Z+5	; 0x05
    1ffe:	ac 83       	std	Y+4, r26	; 0x04
    2000:	bd 83       	std	Y+5, r27	; 0x05
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2002:	16 96       	adiw	r26, 0x06	; 6
    2004:	cd 93       	st	X+, r28
    2006:	dc 93       	st	X, r29
    2008:	17 97       	sbiw	r26, 0x07	; 7
	pxNewListItem->pxPrevious = pxIterator;
    200a:	ee 83       	std	Y+6, r30	; 0x06
    200c:	ff 83       	std	Y+7, r31	; 0x07
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    200e:	c4 83       	std	Z+4, r28	; 0x04
    2010:	d5 83       	std	Z+5, r29	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2012:	8a 87       	std	Y+10, r24	; 0x0a
    2014:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
    2016:	fc 01       	movw	r30, r24
    2018:	20 81       	ld	r18, Z
    201a:	2f 5f       	subi	r18, 0xFF	; 255
    201c:	20 83       	st	Z, r18
}
    201e:	df 91       	pop	r29
    2020:	cf 91       	pop	r28
    2022:	1f 91       	pop	r17
    2024:	0f 91       	pop	r16
    2026:	08 95       	ret

00002028 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2028:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    202a:	a4 81       	ldd	r26, Z+4	; 0x04
    202c:	b5 81       	ldd	r27, Z+5	; 0x05
    202e:	86 81       	ldd	r24, Z+6	; 0x06
    2030:	97 81       	ldd	r25, Z+7	; 0x07
    2032:	16 96       	adiw	r26, 0x06	; 6
    2034:	8d 93       	st	X+, r24
    2036:	9c 93       	st	X, r25
    2038:	17 97       	sbiw	r26, 0x07	; 7
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    203a:	a6 81       	ldd	r26, Z+6	; 0x06
    203c:	b7 81       	ldd	r27, Z+7	; 0x07
    203e:	84 81       	ldd	r24, Z+4	; 0x04
    2040:	95 81       	ldd	r25, Z+5	; 0x05
    2042:	14 96       	adiw	r26, 0x04	; 4
    2044:	8d 93       	st	X+, r24
    2046:	9c 93       	st	X, r25
    2048:	15 97       	sbiw	r26, 0x05	; 5
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    204a:	a2 85       	ldd	r26, Z+10	; 0x0a
    204c:	b3 85       	ldd	r27, Z+11	; 0x0b

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    204e:	11 96       	adiw	r26, 0x01	; 1
    2050:	8d 91       	ld	r24, X+
    2052:	9c 91       	ld	r25, X
    2054:	12 97       	sbiw	r26, 0x02	; 2
    2056:	e8 17       	cp	r30, r24
    2058:	f9 07       	cpc	r31, r25
    205a:	31 f4       	brne	.+12     	; 0x2068 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    205c:	86 81       	ldd	r24, Z+6	; 0x06
    205e:	97 81       	ldd	r25, Z+7	; 0x07
    2060:	11 96       	adiw	r26, 0x01	; 1
    2062:	8d 93       	st	X+, r24
    2064:	9c 93       	st	X, r25
    2066:	12 97       	sbiw	r26, 0x02	; 2
	}

	pxItemToRemove->pvContainer = NULL;
    2068:	12 86       	std	Z+10, r1	; 0x0a
    206a:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    206c:	8c 91       	ld	r24, X
    206e:	81 50       	subi	r24, 0x01	; 1
    2070:	8c 93       	st	X, r24
    2072:	08 95       	ret

00002074 <pxPortInitialiseStack>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2074:	80 93 02 33 	sts	0x3302, r24	; 0x803302 <portStackTopForTask>
    2078:	90 93 03 33 	sts	0x3303, r25	; 0x803303 <portStackTopForTask+0x1>
    207c:	31 e1       	ldi	r19, 0x11	; 17
    207e:	fc 01       	movw	r30, r24
    2080:	30 83       	st	Z, r19
    2082:	31 97       	sbiw	r30, 0x01	; 1
    2084:	22 e2       	ldi	r18, 0x22	; 34
    2086:	20 83       	st	Z, r18
    2088:	31 97       	sbiw	r30, 0x01	; 1
    208a:	a3 e3       	ldi	r26, 0x33	; 51
    208c:	a0 83       	st	Z, r26
    208e:	31 97       	sbiw	r30, 0x01	; 1
    2090:	60 83       	st	Z, r22
    2092:	31 97       	sbiw	r30, 0x01	; 1
    2094:	70 83       	st	Z, r23
    2096:	31 97       	sbiw	r30, 0x01	; 1
    2098:	10 82       	st	Z, r1
    209a:	31 97       	sbiw	r30, 0x01	; 1
    209c:	10 82       	st	Z, r1
    209e:	31 97       	sbiw	r30, 0x01	; 1
    20a0:	60 e8       	ldi	r22, 0x80	; 128
    20a2:	60 83       	st	Z, r22
    20a4:	31 97       	sbiw	r30, 0x01	; 1
    20a6:	10 82       	st	Z, r1
    20a8:	31 97       	sbiw	r30, 0x01	; 1
    20aa:	10 82       	st	Z, r1
    20ac:	31 97       	sbiw	r30, 0x01	; 1
    20ae:	10 82       	st	Z, r1
    20b0:	31 97       	sbiw	r30, 0x01	; 1
    20b2:	62 e0       	ldi	r22, 0x02	; 2
    20b4:	60 83       	st	Z, r22
    20b6:	31 97       	sbiw	r30, 0x01	; 1
    20b8:	63 e0       	ldi	r22, 0x03	; 3
    20ba:	60 83       	st	Z, r22
    20bc:	31 97       	sbiw	r30, 0x01	; 1
    20be:	64 e0       	ldi	r22, 0x04	; 4
    20c0:	60 83       	st	Z, r22
    20c2:	31 97       	sbiw	r30, 0x01	; 1
    20c4:	65 e0       	ldi	r22, 0x05	; 5
    20c6:	60 83       	st	Z, r22
    20c8:	31 97       	sbiw	r30, 0x01	; 1
    20ca:	66 e0       	ldi	r22, 0x06	; 6
    20cc:	60 83       	st	Z, r22
    20ce:	31 97       	sbiw	r30, 0x01	; 1
    20d0:	67 e0       	ldi	r22, 0x07	; 7
    20d2:	60 83       	st	Z, r22
    20d4:	31 97       	sbiw	r30, 0x01	; 1
    20d6:	68 e0       	ldi	r22, 0x08	; 8
    20d8:	60 83       	st	Z, r22
    20da:	31 97       	sbiw	r30, 0x01	; 1
    20dc:	69 e0       	ldi	r22, 0x09	; 9
    20de:	60 83       	st	Z, r22
    20e0:	31 97       	sbiw	r30, 0x01	; 1
    20e2:	60 e1       	ldi	r22, 0x10	; 16
    20e4:	60 83       	st	Z, r22
    20e6:	31 97       	sbiw	r30, 0x01	; 1
    20e8:	30 83       	st	Z, r19
    20ea:	31 97       	sbiw	r30, 0x01	; 1
    20ec:	32 e1       	ldi	r19, 0x12	; 18
    20ee:	30 83       	st	Z, r19
    20f0:	31 97       	sbiw	r30, 0x01	; 1
    20f2:	33 e1       	ldi	r19, 0x13	; 19
    20f4:	30 83       	st	Z, r19
    20f6:	31 97       	sbiw	r30, 0x01	; 1
    20f8:	34 e1       	ldi	r19, 0x14	; 20
    20fa:	30 83       	st	Z, r19
    20fc:	31 97       	sbiw	r30, 0x01	; 1
    20fe:	35 e1       	ldi	r19, 0x15	; 21
    2100:	30 83       	st	Z, r19
    2102:	31 97       	sbiw	r30, 0x01	; 1
    2104:	36 e1       	ldi	r19, 0x16	; 22
    2106:	30 83       	st	Z, r19
    2108:	31 97       	sbiw	r30, 0x01	; 1
    210a:	37 e1       	ldi	r19, 0x17	; 23
    210c:	30 83       	st	Z, r19
    210e:	31 97       	sbiw	r30, 0x01	; 1
    2110:	38 e1       	ldi	r19, 0x18	; 24
    2112:	30 83       	st	Z, r19
    2114:	31 97       	sbiw	r30, 0x01	; 1
    2116:	39 e1       	ldi	r19, 0x19	; 25
    2118:	30 83       	st	Z, r19
    211a:	31 97       	sbiw	r30, 0x01	; 1
    211c:	30 e2       	ldi	r19, 0x20	; 32
    211e:	30 83       	st	Z, r19
    2120:	31 97       	sbiw	r30, 0x01	; 1
    2122:	31 e2       	ldi	r19, 0x21	; 33
    2124:	30 83       	st	Z, r19
    2126:	31 97       	sbiw	r30, 0x01	; 1
    2128:	20 83       	st	Z, r18
    212a:	31 97       	sbiw	r30, 0x01	; 1
    212c:	23 e2       	ldi	r18, 0x23	; 35
    212e:	20 83       	st	Z, r18
    2130:	31 97       	sbiw	r30, 0x01	; 1
    2132:	40 83       	st	Z, r20
    2134:	31 97       	sbiw	r30, 0x01	; 1
    2136:	50 83       	st	Z, r21
    2138:	31 97       	sbiw	r30, 0x01	; 1
    213a:	26 e2       	ldi	r18, 0x26	; 38
    213c:	20 83       	st	Z, r18
    213e:	31 97       	sbiw	r30, 0x01	; 1
    2140:	27 e2       	ldi	r18, 0x27	; 39
    2142:	20 83       	st	Z, r18
    2144:	31 97       	sbiw	r30, 0x01	; 1
    2146:	28 e2       	ldi	r18, 0x28	; 40
    2148:	20 83       	st	Z, r18
    214a:	31 97       	sbiw	r30, 0x01	; 1
    214c:	29 e2       	ldi	r18, 0x29	; 41
    214e:	20 83       	st	Z, r18
    2150:	31 97       	sbiw	r30, 0x01	; 1
    2152:	20 e3       	ldi	r18, 0x30	; 48
    2154:	20 83       	st	Z, r18
    2156:	31 97       	sbiw	r30, 0x01	; 1
    2158:	21 e3       	ldi	r18, 0x31	; 49
    215a:	20 83       	st	Z, r18
    215c:	89 97       	sbiw	r24, 0x29	; 41
    215e:	08 95       	ret

00002160 <xPortStartScheduler>:
    2160:	8c e7       	ldi	r24, 0x7C	; 124
    2162:	80 93 69 08 	sts	0x0869, r24	; 0x800869 <__TEXT_REGION_LENGTH__+0x700869>
    2166:	8f ef       	ldi	r24, 0xFF	; 255
    2168:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x700868>
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
    2172:	91 e1       	ldi	r25, 0x11	; 17
    2174:	90 93 41 08 	sts	0x0841, r25	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    2178:	80 93 47 08 	sts	0x0847, r24	; 0x800847 <__TEXT_REGION_LENGTH__+0x700847>
    217c:	a0 91 9e 32 	lds	r26, 0x329E	; 0x80329e <pxCurrentTCB>
    2180:	b0 91 9f 32 	lds	r27, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
    2184:	cd 91       	ld	r28, X+
    2186:	cd bf       	out	0x3d, r28	; 61
    2188:	dd 91       	ld	r29, X+
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	ff 91       	pop	r31
    218e:	ef 91       	pop	r30
    2190:	df 91       	pop	r29
    2192:	cf 91       	pop	r28
    2194:	bf 91       	pop	r27
    2196:	af 91       	pop	r26
    2198:	9f 91       	pop	r25
    219a:	8f 91       	pop	r24
    219c:	7f 91       	pop	r23
    219e:	6f 91       	pop	r22
    21a0:	5f 91       	pop	r21
    21a2:	4f 91       	pop	r20
    21a4:	3f 91       	pop	r19
    21a6:	2f 91       	pop	r18
    21a8:	1f 91       	pop	r17
    21aa:	0f 91       	pop	r16
    21ac:	ff 90       	pop	r15
    21ae:	ef 90       	pop	r14
    21b0:	df 90       	pop	r13
    21b2:	cf 90       	pop	r12
    21b4:	bf 90       	pop	r11
    21b6:	af 90       	pop	r10
    21b8:	9f 90       	pop	r9
    21ba:	8f 90       	pop	r8
    21bc:	7f 90       	pop	r7
    21be:	6f 90       	pop	r6
    21c0:	5f 90       	pop	r5
    21c2:	4f 90       	pop	r4
    21c4:	3f 90       	pop	r3
    21c6:	2f 90       	pop	r2
    21c8:	1f 90       	pop	r1
    21ca:	0f 90       	pop	r0
    21cc:	0c be       	out	0x3c, r0	; 60
    21ce:	0f 90       	pop	r0
    21d0:	0b be       	out	0x3b, r0	; 59
    21d2:	0f 90       	pop	r0
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	0f 90       	pop	r0
    21d8:	08 95       	ret
    21da:	08 95       	ret

000021dc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    21dc:	0f 92       	push	r0
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	f8 94       	cli
    21e2:	0f 92       	push	r0
    21e4:	0b b6       	in	r0, 0x3b	; 59
    21e6:	0f 92       	push	r0
    21e8:	0c b6       	in	r0, 0x3c	; 60
    21ea:	0f 92       	push	r0
    21ec:	1f 92       	push	r1
    21ee:	11 24       	eor	r1, r1
    21f0:	2f 92       	push	r2
    21f2:	3f 92       	push	r3
    21f4:	4f 92       	push	r4
    21f6:	5f 92       	push	r5
    21f8:	6f 92       	push	r6
    21fa:	7f 92       	push	r7
    21fc:	8f 92       	push	r8
    21fe:	9f 92       	push	r9
    2200:	af 92       	push	r10
    2202:	bf 92       	push	r11
    2204:	cf 92       	push	r12
    2206:	df 92       	push	r13
    2208:	ef 92       	push	r14
    220a:	ff 92       	push	r15
    220c:	0f 93       	push	r16
    220e:	1f 93       	push	r17
    2210:	2f 93       	push	r18
    2212:	3f 93       	push	r19
    2214:	4f 93       	push	r20
    2216:	5f 93       	push	r21
    2218:	6f 93       	push	r22
    221a:	7f 93       	push	r23
    221c:	8f 93       	push	r24
    221e:	9f 93       	push	r25
    2220:	af 93       	push	r26
    2222:	bf 93       	push	r27
    2224:	cf 93       	push	r28
    2226:	df 93       	push	r29
    2228:	ef 93       	push	r30
    222a:	ff 93       	push	r31
    222c:	a0 91 9e 32 	lds	r26, 0x329E	; 0x80329e <pxCurrentTCB>
    2230:	b0 91 9f 32 	lds	r27, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
    2234:	0d b6       	in	r0, 0x3d	; 61
    2236:	0d 92       	st	X+, r0
    2238:	0e b6       	in	r0, 0x3e	; 62
    223a:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    223c:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2240:	a0 91 9e 32 	lds	r26, 0x329E	; 0x80329e <pxCurrentTCB>
    2244:	b0 91 9f 32 	lds	r27, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
    2248:	cd 91       	ld	r28, X+
    224a:	cd bf       	out	0x3d, r28	; 61
    224c:	dd 91       	ld	r29, X+
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	ff 91       	pop	r31
    2252:	ef 91       	pop	r30
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	bf 91       	pop	r27
    225a:	af 91       	pop	r26
    225c:	9f 91       	pop	r25
    225e:	8f 91       	pop	r24
    2260:	7f 91       	pop	r23
    2262:	6f 91       	pop	r22
    2264:	5f 91       	pop	r21
    2266:	4f 91       	pop	r20
    2268:	3f 91       	pop	r19
    226a:	2f 91       	pop	r18
    226c:	1f 91       	pop	r17
    226e:	0f 91       	pop	r16
    2270:	ff 90       	pop	r15
    2272:	ef 90       	pop	r14
    2274:	df 90       	pop	r13
    2276:	cf 90       	pop	r12
    2278:	bf 90       	pop	r11
    227a:	af 90       	pop	r10
    227c:	9f 90       	pop	r9
    227e:	8f 90       	pop	r8
    2280:	7f 90       	pop	r7
    2282:	6f 90       	pop	r6
    2284:	5f 90       	pop	r5
    2286:	4f 90       	pop	r4
    2288:	3f 90       	pop	r3
    228a:	2f 90       	pop	r2
    228c:	1f 90       	pop	r1
    228e:	0f 90       	pop	r0
    2290:	0c be       	out	0x3c, r0	; 60
    2292:	0f 90       	pop	r0
    2294:	0b be       	out	0x3b, r0	; 59
    2296:	0f 90       	pop	r0
    2298:	0f be       	out	0x3f, r0	; 63
    229a:	0f 90       	pop	r0

	asm volatile ( "ret" );
    229c:	08 95       	ret

0000229e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    229e:	0f 92       	push	r0
    22a0:	0f b6       	in	r0, 0x3f	; 63
    22a2:	f8 94       	cli
    22a4:	0f 92       	push	r0
    22a6:	0b b6       	in	r0, 0x3b	; 59
    22a8:	0f 92       	push	r0
    22aa:	0c b6       	in	r0, 0x3c	; 60
    22ac:	0f 92       	push	r0
    22ae:	1f 92       	push	r1
    22b0:	11 24       	eor	r1, r1
    22b2:	2f 92       	push	r2
    22b4:	3f 92       	push	r3
    22b6:	4f 92       	push	r4
    22b8:	5f 92       	push	r5
    22ba:	6f 92       	push	r6
    22bc:	7f 92       	push	r7
    22be:	8f 92       	push	r8
    22c0:	9f 92       	push	r9
    22c2:	af 92       	push	r10
    22c4:	bf 92       	push	r11
    22c6:	cf 92       	push	r12
    22c8:	df 92       	push	r13
    22ca:	ef 92       	push	r14
    22cc:	ff 92       	push	r15
    22ce:	0f 93       	push	r16
    22d0:	1f 93       	push	r17
    22d2:	2f 93       	push	r18
    22d4:	3f 93       	push	r19
    22d6:	4f 93       	push	r20
    22d8:	5f 93       	push	r21
    22da:	6f 93       	push	r22
    22dc:	7f 93       	push	r23
    22de:	8f 93       	push	r24
    22e0:	9f 93       	push	r25
    22e2:	af 93       	push	r26
    22e4:	bf 93       	push	r27
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	ef 93       	push	r30
    22ec:	ff 93       	push	r31
    22ee:	a0 91 9e 32 	lds	r26, 0x329E	; 0x80329e <pxCurrentTCB>
    22f2:	b0 91 9f 32 	lds	r27, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
    22f6:	0d b6       	in	r0, 0x3d	; 61
    22f8:	0d 92       	st	X+, r0
    22fa:	0e b6       	in	r0, 0x3e	; 62
    22fc:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    22fe:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <vTaskIncrementTick>
	vTaskSwitchContext();
    2302:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2306:	a0 91 9e 32 	lds	r26, 0x329E	; 0x80329e <pxCurrentTCB>
    230a:	b0 91 9f 32 	lds	r27, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
    230e:	cd 91       	ld	r28, X+
    2310:	cd bf       	out	0x3d, r28	; 61
    2312:	dd 91       	ld	r29, X+
    2314:	de bf       	out	0x3e, r29	; 62
    2316:	ff 91       	pop	r31
    2318:	ef 91       	pop	r30
    231a:	df 91       	pop	r29
    231c:	cf 91       	pop	r28
    231e:	bf 91       	pop	r27
    2320:	af 91       	pop	r26
    2322:	9f 91       	pop	r25
    2324:	8f 91       	pop	r24
    2326:	7f 91       	pop	r23
    2328:	6f 91       	pop	r22
    232a:	5f 91       	pop	r21
    232c:	4f 91       	pop	r20
    232e:	3f 91       	pop	r19
    2330:	2f 91       	pop	r18
    2332:	1f 91       	pop	r17
    2334:	0f 91       	pop	r16
    2336:	ff 90       	pop	r15
    2338:	ef 90       	pop	r14
    233a:	df 90       	pop	r13
    233c:	cf 90       	pop	r12
    233e:	bf 90       	pop	r11
    2340:	af 90       	pop	r10
    2342:	9f 90       	pop	r9
    2344:	8f 90       	pop	r8
    2346:	7f 90       	pop	r7
    2348:	6f 90       	pop	r6
    234a:	5f 90       	pop	r5
    234c:	4f 90       	pop	r4
    234e:	3f 90       	pop	r3
    2350:	2f 90       	pop	r2
    2352:	1f 90       	pop	r1
    2354:	0f 90       	pop	r0
    2356:	0c be       	out	0x3c, r0	; 60
    2358:	0f 90       	pop	r0
    235a:	0b be       	out	0x3b, r0	; 59
    235c:	0f 90       	pop	r0
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2362:	08 95       	ret

00002364 <__vector_22>:
void RT_VECT (void) __attribute__ ((signal, naked));
void RT_VECT (void)
{
	// For the preemptive scheduler, enable a context switch
	#if configUSE_PREEMPTION == 1
		vPortYieldFromTick ();
    2364:	0e 94 4f 11 	call	0x229e	; 0x229e <vPortYieldFromTick>
		asm volatile ( "reti" );
    2368:	18 95       	reti

0000236a <prvCopyDataToQueue>:
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
    236e:	ec 01       	movw	r28, r24
    2370:	88 a1       	ldd	r24, Y+32	; 0x20
    2372:	81 11       	cpse	r24, r1
    2374:	0b c0       	rjmp	.+22     	; 0x238c <prvCopyDataToQueue+0x22>
    2376:	88 81       	ld	r24, Y
    2378:	99 81       	ldd	r25, Y+1	; 0x01
    237a:	89 2b       	or	r24, r25
    237c:	e1 f5       	brne	.+120    	; 0x23f6 <prvCopyDataToQueue+0x8c>
    237e:	8a 81       	ldd	r24, Y+2	; 0x02
    2380:	9b 81       	ldd	r25, Y+3	; 0x03
    2382:	0e 94 b8 19 	call	0x3370	; 0x3370 <vTaskPriorityDisinherit>
    2386:	1a 82       	std	Y+2, r1	; 0x02
    2388:	1b 82       	std	Y+3, r1	; 0x03
    238a:	35 c0       	rjmp	.+106    	; 0x23f6 <prvCopyDataToQueue+0x8c>
    238c:	41 11       	cpse	r20, r1
    238e:	17 c0       	rjmp	.+46     	; 0x23be <prvCopyDataToQueue+0x54>
    2390:	48 2f       	mov	r20, r24
    2392:	50 e0       	ldi	r21, 0x00	; 0
    2394:	8c 81       	ldd	r24, Y+4	; 0x04
    2396:	9d 81       	ldd	r25, Y+5	; 0x05
    2398:	0e 94 f7 26 	call	0x4dee	; 0x4dee <memcpy>
    239c:	28 a1       	ldd	r18, Y+32	; 0x20
    239e:	8c 81       	ldd	r24, Y+4	; 0x04
    23a0:	9d 81       	ldd	r25, Y+5	; 0x05
    23a2:	82 0f       	add	r24, r18
    23a4:	91 1d       	adc	r25, r1
    23a6:	8c 83       	std	Y+4, r24	; 0x04
    23a8:	9d 83       	std	Y+5, r25	; 0x05
    23aa:	2a 81       	ldd	r18, Y+2	; 0x02
    23ac:	3b 81       	ldd	r19, Y+3	; 0x03
    23ae:	82 17       	cp	r24, r18
    23b0:	93 07       	cpc	r25, r19
    23b2:	08 f1       	brcs	.+66     	; 0x23f6 <prvCopyDataToQueue+0x8c>
    23b4:	88 81       	ld	r24, Y
    23b6:	99 81       	ldd	r25, Y+1	; 0x01
    23b8:	8c 83       	std	Y+4, r24	; 0x04
    23ba:	9d 83       	std	Y+5, r25	; 0x05
    23bc:	1c c0       	rjmp	.+56     	; 0x23f6 <prvCopyDataToQueue+0x8c>
    23be:	48 2f       	mov	r20, r24
    23c0:	50 e0       	ldi	r21, 0x00	; 0
    23c2:	8e 81       	ldd	r24, Y+6	; 0x06
    23c4:	9f 81       	ldd	r25, Y+7	; 0x07
    23c6:	0e 94 f7 26 	call	0x4dee	; 0x4dee <memcpy>
    23ca:	88 a1       	ldd	r24, Y+32	; 0x20
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	91 95       	neg	r25
    23d0:	81 95       	neg	r24
    23d2:	91 09       	sbc	r25, r1
    23d4:	2e 81       	ldd	r18, Y+6	; 0x06
    23d6:	3f 81       	ldd	r19, Y+7	; 0x07
    23d8:	28 0f       	add	r18, r24
    23da:	39 1f       	adc	r19, r25
    23dc:	2e 83       	std	Y+6, r18	; 0x06
    23de:	3f 83       	std	Y+7, r19	; 0x07
    23e0:	48 81       	ld	r20, Y
    23e2:	59 81       	ldd	r21, Y+1	; 0x01
    23e4:	24 17       	cp	r18, r20
    23e6:	35 07       	cpc	r19, r21
    23e8:	30 f4       	brcc	.+12     	; 0x23f6 <prvCopyDataToQueue+0x8c>
    23ea:	2a 81       	ldd	r18, Y+2	; 0x02
    23ec:	3b 81       	ldd	r19, Y+3	; 0x03
    23ee:	82 0f       	add	r24, r18
    23f0:	93 1f       	adc	r25, r19
    23f2:	8e 83       	std	Y+6, r24	; 0x06
    23f4:	9f 83       	std	Y+7, r25	; 0x07
    23f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23f8:	8f 5f       	subi	r24, 0xFF	; 255
    23fa:	8e 8f       	std	Y+30, r24	; 0x1e
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	08 95       	ret

00002402 <prvCopyDataFromQueue>:
    2402:	fc 01       	movw	r30, r24
    2404:	80 81       	ld	r24, Z
    2406:	91 81       	ldd	r25, Z+1	; 0x01
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	a1 f0       	breq	.+40     	; 0x2434 <prvCopyDataFromQueue+0x32>
    240c:	40 a1       	ldd	r20, Z+32	; 0x20
    240e:	50 e0       	ldi	r21, 0x00	; 0
    2410:	26 81       	ldd	r18, Z+6	; 0x06
    2412:	37 81       	ldd	r19, Z+7	; 0x07
    2414:	24 0f       	add	r18, r20
    2416:	35 1f       	adc	r19, r21
    2418:	26 83       	std	Z+6, r18	; 0x06
    241a:	37 83       	std	Z+7, r19	; 0x07
    241c:	a2 81       	ldd	r26, Z+2	; 0x02
    241e:	b3 81       	ldd	r27, Z+3	; 0x03
    2420:	2a 17       	cp	r18, r26
    2422:	3b 07       	cpc	r19, r27
    2424:	10 f0       	brcs	.+4      	; 0x242a <prvCopyDataFromQueue+0x28>
    2426:	86 83       	std	Z+6, r24	; 0x06
    2428:	97 83       	std	Z+7, r25	; 0x07
    242a:	cb 01       	movw	r24, r22
    242c:	66 81       	ldd	r22, Z+6	; 0x06
    242e:	77 81       	ldd	r23, Z+7	; 0x07
    2430:	0e 94 f7 26 	call	0x4dee	; 0x4dee <memcpy>
    2434:	08 95       	ret

00002436 <prvUnlockQueue>:
    2436:	0f 93       	push	r16
    2438:	1f 93       	push	r17
    243a:	cf 93       	push	r28
    243c:	df 93       	push	r29
    243e:	ec 01       	movw	r28, r24
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	f8 94       	cli
    2444:	0f 92       	push	r0
    2446:	8a a1       	ldd	r24, Y+34	; 0x22
    2448:	18 16       	cp	r1, r24
    244a:	b4 f4       	brge	.+44     	; 0x2478 <prvUnlockQueue+0x42>
    244c:	8b 89       	ldd	r24, Y+19	; 0x13
    244e:	81 11       	cpse	r24, r1
    2450:	05 c0       	rjmp	.+10     	; 0x245c <prvUnlockQueue+0x26>
    2452:	12 c0       	rjmp	.+36     	; 0x2478 <prvUnlockQueue+0x42>
    2454:	8b 89       	ldd	r24, Y+19	; 0x13
    2456:	81 11       	cpse	r24, r1
    2458:	04 c0       	rjmp	.+8      	; 0x2462 <prvUnlockQueue+0x2c>
    245a:	0e c0       	rjmp	.+28     	; 0x2478 <prvUnlockQueue+0x42>
    245c:	8e 01       	movw	r16, r28
    245e:	0d 5e       	subi	r16, 0xED	; 237
    2460:	1f 4f       	sbci	r17, 0xFF	; 255
    2462:	c8 01       	movw	r24, r16
    2464:	0e 94 84 18 	call	0x3108	; 0x3108 <xTaskRemoveFromEventList>
    2468:	81 11       	cpse	r24, r1
    246a:	0e 94 41 19 	call	0x3282	; 0x3282 <vTaskMissedYield>
    246e:	8a a1       	ldd	r24, Y+34	; 0x22
    2470:	81 50       	subi	r24, 0x01	; 1
    2472:	8a a3       	std	Y+34, r24	; 0x22
    2474:	18 16       	cp	r1, r24
    2476:	74 f3       	brlt	.-36     	; 0x2454 <prvUnlockQueue+0x1e>
    2478:	8f ef       	ldi	r24, 0xFF	; 255
    247a:	8a a3       	std	Y+34, r24	; 0x22
    247c:	0f 90       	pop	r0
    247e:	0f be       	out	0x3f, r0	; 63
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	f8 94       	cli
    2484:	0f 92       	push	r0
    2486:	89 a1       	ldd	r24, Y+33	; 0x21
    2488:	18 16       	cp	r1, r24
    248a:	b4 f4       	brge	.+44     	; 0x24b8 <prvUnlockQueue+0x82>
    248c:	88 85       	ldd	r24, Y+8	; 0x08
    248e:	81 11       	cpse	r24, r1
    2490:	05 c0       	rjmp	.+10     	; 0x249c <prvUnlockQueue+0x66>
    2492:	12 c0       	rjmp	.+36     	; 0x24b8 <prvUnlockQueue+0x82>
    2494:	88 85       	ldd	r24, Y+8	; 0x08
    2496:	81 11       	cpse	r24, r1
    2498:	04 c0       	rjmp	.+8      	; 0x24a2 <prvUnlockQueue+0x6c>
    249a:	0e c0       	rjmp	.+28     	; 0x24b8 <prvUnlockQueue+0x82>
    249c:	8e 01       	movw	r16, r28
    249e:	08 5f       	subi	r16, 0xF8	; 248
    24a0:	1f 4f       	sbci	r17, 0xFF	; 255
    24a2:	c8 01       	movw	r24, r16
    24a4:	0e 94 84 18 	call	0x3108	; 0x3108 <xTaskRemoveFromEventList>
    24a8:	81 11       	cpse	r24, r1
    24aa:	0e 94 41 19 	call	0x3282	; 0x3282 <vTaskMissedYield>
    24ae:	89 a1       	ldd	r24, Y+33	; 0x21
    24b0:	81 50       	subi	r24, 0x01	; 1
    24b2:	89 a3       	std	Y+33, r24	; 0x21
    24b4:	18 16       	cp	r1, r24
    24b6:	74 f3       	brlt	.-36     	; 0x2494 <prvUnlockQueue+0x5e>
    24b8:	8f ef       	ldi	r24, 0xFF	; 255
    24ba:	89 a3       	std	Y+33, r24	; 0x21
    24bc:	0f 90       	pop	r0
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	df 91       	pop	r29
    24c2:	cf 91       	pop	r28
    24c4:	1f 91       	pop	r17
    24c6:	0f 91       	pop	r16
    24c8:	08 95       	ret

000024ca <xQueueGenericReset>:
    24ca:	1f 93       	push	r17
    24cc:	cf 93       	push	r28
    24ce:	df 93       	push	r29
    24d0:	61 30       	cpi	r22, 0x01	; 1
    24d2:	59 f0       	breq	.+22     	; 0x24ea <xQueueGenericReset+0x20>
    24d4:	fc 01       	movw	r30, r24
    24d6:	23 89       	ldd	r18, Z+19	; 0x13
    24d8:	30 85       	ldd	r19, Z+8	; 0x08
    24da:	31 11       	cpse	r19, r1
    24dc:	2c c0       	rjmp	.+88     	; 0x2536 <xQueueGenericReset+0x6c>
    24de:	11 e0       	ldi	r17, 0x01	; 1
    24e0:	21 11       	cpse	r18, r1
    24e2:	10 e0       	ldi	r17, 0x00	; 0
    24e4:	21 11       	cpse	r18, r1
    24e6:	28 c0       	rjmp	.+80     	; 0x2538 <xQueueGenericReset+0x6e>
    24e8:	01 c0       	rjmp	.+2      	; 0x24ec <xQueueGenericReset+0x22>
    24ea:	11 e0       	ldi	r17, 0x01	; 1
    24ec:	ec 01       	movw	r28, r24
    24ee:	48 81       	ld	r20, Y
    24f0:	59 81       	ldd	r21, Y+1	; 0x01
    24f2:	28 a1       	ldd	r18, Y+32	; 0x20
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    24f8:	62 9f       	mul	r22, r18
    24fa:	c0 01       	movw	r24, r0
    24fc:	63 9f       	mul	r22, r19
    24fe:	90 0d       	add	r25, r0
    2500:	11 24       	eor	r1, r1
    2502:	ba 01       	movw	r22, r20
    2504:	68 0f       	add	r22, r24
    2506:	79 1f       	adc	r23, r25
    2508:	6a 83       	std	Y+2, r22	; 0x02
    250a:	7b 83       	std	Y+3, r23	; 0x03
    250c:	1e 8e       	std	Y+30, r1	; 0x1e
    250e:	4c 83       	std	Y+4, r20	; 0x04
    2510:	5d 83       	std	Y+5, r21	; 0x05
    2512:	82 1b       	sub	r24, r18
    2514:	93 0b       	sbc	r25, r19
    2516:	84 0f       	add	r24, r20
    2518:	95 1f       	adc	r25, r21
    251a:	8e 83       	std	Y+6, r24	; 0x06
    251c:	9f 83       	std	Y+7, r25	; 0x07
    251e:	8f ef       	ldi	r24, 0xFF	; 255
    2520:	89 a3       	std	Y+33, r24	; 0x21
    2522:	8a a3       	std	Y+34, r24	; 0x22
    2524:	ce 01       	movw	r24, r28
    2526:	08 96       	adiw	r24, 0x08	; 8
    2528:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <vListInitialise>
    252c:	ce 01       	movw	r24, r28
    252e:	43 96       	adiw	r24, 0x13	; 19
    2530:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <vListInitialise>
    2534:	01 c0       	rjmp	.+2      	; 0x2538 <xQueueGenericReset+0x6e>
    2536:	10 e0       	ldi	r17, 0x00	; 0
    2538:	81 2f       	mov	r24, r17
    253a:	df 91       	pop	r29
    253c:	cf 91       	pop	r28
    253e:	1f 91       	pop	r17
    2540:	08 95       	ret

00002542 <xQueueGenericCreate>:
    2542:	0f 93       	push	r16
    2544:	1f 93       	push	r17
    2546:	cf 93       	push	r28
    2548:	df 93       	push	r29
    254a:	88 23       	and	r24, r24
    254c:	01 f1       	breq	.+64     	; 0x258e <xQueueGenericCreate+0x4c>
    254e:	06 2f       	mov	r16, r22
    2550:	18 2f       	mov	r17, r24
    2552:	83 e2       	ldi	r24, 0x23	; 35
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <pvPortMalloc>
    255a:	ec 01       	movw	r28, r24
    255c:	89 2b       	or	r24, r25
    255e:	c9 f0       	breq	.+50     	; 0x2592 <xQueueGenericCreate+0x50>
    2560:	10 9f       	mul	r17, r16
    2562:	c0 01       	movw	r24, r0
    2564:	11 24       	eor	r1, r1
    2566:	01 96       	adiw	r24, 0x01	; 1
    2568:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <pvPortMalloc>
    256c:	88 83       	st	Y, r24
    256e:	99 83       	std	Y+1, r25	; 0x01
    2570:	89 2b       	or	r24, r25
    2572:	39 f0       	breq	.+14     	; 0x2582 <xQueueGenericCreate+0x40>
    2574:	1f 8f       	std	Y+31, r17	; 0x1f
    2576:	08 a3       	std	Y+32, r16	; 0x20
    2578:	61 e0       	ldi	r22, 0x01	; 1
    257a:	ce 01       	movw	r24, r28
    257c:	0e 94 65 12 	call	0x24ca	; 0x24ca <xQueueGenericReset>
    2580:	08 c0       	rjmp	.+16     	; 0x2592 <xQueueGenericCreate+0x50>
    2582:	ce 01       	movw	r24, r28
    2584:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <vPortFree>
    2588:	c0 e0       	ldi	r28, 0x00	; 0
    258a:	d0 e0       	ldi	r29, 0x00	; 0
    258c:	02 c0       	rjmp	.+4      	; 0x2592 <xQueueGenericCreate+0x50>
    258e:	c0 e0       	ldi	r28, 0x00	; 0
    2590:	d0 e0       	ldi	r29, 0x00	; 0
    2592:	ce 01       	movw	r24, r28
    2594:	df 91       	pop	r29
    2596:	cf 91       	pop	r28
    2598:	1f 91       	pop	r17
    259a:	0f 91       	pop	r16
    259c:	08 95       	ret

0000259e <xQueueGenericSend>:
    259e:	af 92       	push	r10
    25a0:	bf 92       	push	r11
    25a2:	cf 92       	push	r12
    25a4:	df 92       	push	r13
    25a6:	ef 92       	push	r14
    25a8:	ff 92       	push	r15
    25aa:	0f 93       	push	r16
    25ac:	1f 93       	push	r17
    25ae:	cf 93       	push	r28
    25b0:	df 93       	push	r29
    25b2:	cd b7       	in	r28, 0x3d	; 61
    25b4:	de b7       	in	r29, 0x3e	; 62
    25b6:	29 97       	sbiw	r28, 0x09	; 9
    25b8:	cd bf       	out	0x3d, r28	; 61
    25ba:	de bf       	out	0x3e, r29	; 62
    25bc:	7c 01       	movw	r14, r24
    25be:	5b 01       	movw	r10, r22
    25c0:	2e 83       	std	Y+6, r18	; 0x06
    25c2:	3f 83       	std	Y+7, r19	; 0x07
    25c4:	48 87       	std	Y+8, r20	; 0x08
    25c6:	59 87       	std	Y+9, r21	; 0x09
    25c8:	10 e0       	ldi	r17, 0x00	; 0
    25ca:	6c 01       	movw	r12, r24
    25cc:	88 e0       	ldi	r24, 0x08	; 8
    25ce:	c8 0e       	add	r12, r24
    25d0:	d1 1c       	adc	r13, r1
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	0f 92       	push	r0
    25d8:	f7 01       	movw	r30, r14
    25da:	96 8d       	ldd	r25, Z+30	; 0x1e
    25dc:	87 8d       	ldd	r24, Z+31	; 0x1f
    25de:	98 17       	cp	r25, r24
    25e0:	a8 f4       	brcc	.+42     	; 0x260c <xQueueGenericSend+0x6e>
    25e2:	40 2f       	mov	r20, r16
    25e4:	b5 01       	movw	r22, r10
    25e6:	c7 01       	movw	r24, r14
    25e8:	0e 94 b5 11 	call	0x236a	; 0x236a <prvCopyDataToQueue>
    25ec:	f7 01       	movw	r30, r14
    25ee:	83 89       	ldd	r24, Z+19	; 0x13
    25f0:	88 23       	and	r24, r24
    25f2:	41 f0       	breq	.+16     	; 0x2604 <xQueueGenericSend+0x66>
    25f4:	c7 01       	movw	r24, r14
    25f6:	43 96       	adiw	r24, 0x13	; 19
    25f8:	0e 94 84 18 	call	0x3108	; 0x3108 <xTaskRemoveFromEventList>
    25fc:	81 30       	cpi	r24, 0x01	; 1
    25fe:	11 f4       	brne	.+4      	; 0x2604 <xQueueGenericSend+0x66>
    2600:	0e 94 ee 10 	call	0x21dc	; 0x21dc <vPortYield>
    2604:	0f 90       	pop	r0
    2606:	0f be       	out	0x3f, r0	; 63
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	56 c0       	rjmp	.+172    	; 0x26b8 <xQueueGenericSend+0x11a>
    260c:	8e 81       	ldd	r24, Y+6	; 0x06
    260e:	9f 81       	ldd	r25, Y+7	; 0x07
    2610:	a8 85       	ldd	r26, Y+8	; 0x08
    2612:	b9 85       	ldd	r27, Y+9	; 0x09
    2614:	89 2b       	or	r24, r25
    2616:	8a 2b       	or	r24, r26
    2618:	8b 2b       	or	r24, r27
    261a:	21 f4       	brne	.+8      	; 0x2624 <xQueueGenericSend+0x86>
    261c:	0f 90       	pop	r0
    261e:	0f be       	out	0x3f, r0	; 63
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	4a c0       	rjmp	.+148    	; 0x26b8 <xQueueGenericSend+0x11a>
    2624:	11 11       	cpse	r17, r1
    2626:	05 c0       	rjmp	.+10     	; 0x2632 <xQueueGenericSend+0x94>
    2628:	ce 01       	movw	r24, r28
    262a:	01 96       	adiw	r24, 0x01	; 1
    262c:	0e 94 c3 18 	call	0x3186	; 0x3186 <vTaskSetTimeOutState>
    2630:	11 e0       	ldi	r17, 0x01	; 1
    2632:	0f 90       	pop	r0
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <vTaskSuspendAll>
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	f8 94       	cli
    263e:	0f 92       	push	r0
    2640:	f7 01       	movw	r30, r14
    2642:	81 a1       	ldd	r24, Z+33	; 0x21
    2644:	8f 3f       	cpi	r24, 0xFF	; 255
    2646:	09 f4       	brne	.+2      	; 0x264a <xQueueGenericSend+0xac>
    2648:	11 a2       	std	Z+33, r1	; 0x21
    264a:	f7 01       	movw	r30, r14
    264c:	82 a1       	ldd	r24, Z+34	; 0x22
    264e:	8f 3f       	cpi	r24, 0xFF	; 255
    2650:	09 f4       	brne	.+2      	; 0x2654 <xQueueGenericSend+0xb6>
    2652:	12 a2       	std	Z+34, r1	; 0x22
    2654:	0f 90       	pop	r0
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	be 01       	movw	r22, r28
    265a:	6a 5f       	subi	r22, 0xFA	; 250
    265c:	7f 4f       	sbci	r23, 0xFF	; 255
    265e:	ce 01       	movw	r24, r28
    2660:	01 96       	adiw	r24, 0x01	; 1
    2662:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <xTaskCheckForTimeOut>
    2666:	81 11       	cpse	r24, r1
    2668:	21 c0       	rjmp	.+66     	; 0x26ac <xQueueGenericSend+0x10e>
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	0f 92       	push	r0
    2670:	f7 01       	movw	r30, r14
    2672:	96 8d       	ldd	r25, Z+30	; 0x1e
    2674:	0f 90       	pop	r0
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	87 8d       	ldd	r24, Z+31	; 0x1f
    267a:	98 13       	cpse	r25, r24
    267c:	11 c0       	rjmp	.+34     	; 0x26a0 <xQueueGenericSend+0x102>
    267e:	4e 81       	ldd	r20, Y+6	; 0x06
    2680:	5f 81       	ldd	r21, Y+7	; 0x07
    2682:	68 85       	ldd	r22, Y+8	; 0x08
    2684:	79 85       	ldd	r23, Y+9	; 0x09
    2686:	c6 01       	movw	r24, r12
    2688:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <vTaskPlaceOnEventList>
    268c:	c7 01       	movw	r24, r14
    268e:	0e 94 1b 12 	call	0x2436	; 0x2436 <prvUnlockQueue>
    2692:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <xTaskResumeAll>
    2696:	81 11       	cpse	r24, r1
    2698:	9c cf       	rjmp	.-200    	; 0x25d2 <xQueueGenericSend+0x34>
    269a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <vPortYield>
    269e:	99 cf       	rjmp	.-206    	; 0x25d2 <xQueueGenericSend+0x34>
    26a0:	c7 01       	movw	r24, r14
    26a2:	0e 94 1b 12 	call	0x2436	; 0x2436 <prvUnlockQueue>
    26a6:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <xTaskResumeAll>
    26aa:	93 cf       	rjmp	.-218    	; 0x25d2 <xQueueGenericSend+0x34>
    26ac:	c7 01       	movw	r24, r14
    26ae:	0e 94 1b 12 	call	0x2436	; 0x2436 <prvUnlockQueue>
    26b2:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <xTaskResumeAll>
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	29 96       	adiw	r28, 0x09	; 9
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	de bf       	out	0x3e, r29	; 62
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	1f 91       	pop	r17
    26c4:	0f 91       	pop	r16
    26c6:	ff 90       	pop	r15
    26c8:	ef 90       	pop	r14
    26ca:	df 90       	pop	r13
    26cc:	cf 90       	pop	r12
    26ce:	bf 90       	pop	r11
    26d0:	af 90       	pop	r10
    26d2:	08 95       	ret

000026d4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    26d4:	0f 93       	push	r16
    26d6:	1f 93       	push	r17
    26d8:	cf 93       	push	r28
    26da:	df 93       	push	r29
    26dc:	8a 01       	movw	r16, r20
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    26de:	fc 01       	movw	r30, r24
    26e0:	56 8d       	ldd	r21, Z+30	; 0x1e
    26e2:	37 8d       	ldd	r19, Z+31	; 0x1f
    26e4:	53 17       	cp	r21, r19
    26e6:	c0 f4       	brcc	.+48     	; 0x2718 <xQueueGenericSendFromISR+0x44>
    26e8:	42 2f       	mov	r20, r18
    26ea:	ec 01       	movw	r28, r24
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    26ec:	0e 94 b5 11 	call	0x236a	; 0x236a <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    26f0:	8a a1       	ldd	r24, Y+34	; 0x22
    26f2:	8f 3f       	cpi	r24, 0xFF	; 255
    26f4:	69 f4       	brne	.+26     	; 0x2710 <xQueueGenericSendFromISR+0x3c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    26f6:	8b 89       	ldd	r24, Y+19	; 0x13
    26f8:	88 23       	and	r24, r24
    26fa:	81 f0       	breq	.+32     	; 0x271c <xQueueGenericSendFromISR+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    26fc:	ce 01       	movw	r24, r28
    26fe:	43 96       	adiw	r24, 0x13	; 19
    2700:	0e 94 84 18 	call	0x3108	; 0x3108 <xTaskRemoveFromEventList>
    2704:	88 23       	and	r24, r24
    2706:	61 f0       	breq	.+24     	; 0x2720 <xQueueGenericSendFromISR+0x4c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	f8 01       	movw	r30, r16
    270c:	80 83       	st	Z, r24
    270e:	09 c0       	rjmp	.+18     	; 0x2722 <xQueueGenericSendFromISR+0x4e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2710:	8f 5f       	subi	r24, 0xFF	; 255
    2712:	8a a3       	std	Y+34, r24	; 0x22
			}

			xReturn = pdPASS;
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	05 c0       	rjmp	.+10     	; 0x2722 <xQueueGenericSendFromISR+0x4e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	03 c0       	rjmp	.+6      	; 0x2722 <xQueueGenericSendFromISR+0x4e>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	01 c0       	rjmp	.+2      	; 0x2722 <xQueueGenericSendFromISR+0x4e>
    2720:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    2722:	df 91       	pop	r29
    2724:	cf 91       	pop	r28
    2726:	1f 91       	pop	r17
    2728:	0f 91       	pop	r16
    272a:	08 95       	ret

0000272c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    272c:	af 92       	push	r10
    272e:	bf 92       	push	r11
    2730:	cf 92       	push	r12
    2732:	df 92       	push	r13
    2734:	ef 92       	push	r14
    2736:	ff 92       	push	r15
    2738:	0f 93       	push	r16
    273a:	1f 93       	push	r17
    273c:	cf 93       	push	r28
    273e:	df 93       	push	r29
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	29 97       	sbiw	r28, 0x09	; 9
    2746:	cd bf       	out	0x3d, r28	; 61
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	7c 01       	movw	r14, r24
    274c:	5b 01       	movw	r10, r22
    274e:	2e 83       	std	Y+6, r18	; 0x06
    2750:	3f 83       	std	Y+7, r19	; 0x07
    2752:	48 87       	std	Y+8, r20	; 0x08
    2754:	59 87       	std	Y+9, r21	; 0x09
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2756:	10 e0       	ldi	r17, 0x00	; 0
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2758:	6c 01       	movw	r12, r24
    275a:	83 e1       	ldi	r24, 0x13	; 19
    275c:	c8 0e       	add	r12, r24
    275e:	d1 1c       	adc	r13, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2760:	0f b6       	in	r0, 0x3f	; 63
    2762:	f8 94       	cli
    2764:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2766:	f7 01       	movw	r30, r14
    2768:	86 8d       	ldd	r24, Z+30	; 0x1e
    276a:	88 23       	and	r24, r24
    276c:	99 f1       	breq	.+102    	; 0x27d4 <xQueueGenericReceive+0xa8>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    276e:	c6 80       	ldd	r12, Z+6	; 0x06
    2770:	d7 80       	ldd	r13, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2772:	b5 01       	movw	r22, r10
    2774:	c7 01       	movw	r24, r14
    2776:	0e 94 01 12 	call	0x2402	; 0x2402 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    277a:	01 11       	cpse	r16, r1
    277c:	1a c0       	rjmp	.+52     	; 0x27b2 <xQueueGenericReceive+0x86>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    277e:	f7 01       	movw	r30, r14
    2780:	86 8d       	ldd	r24, Z+30	; 0x1e
    2782:	81 50       	subi	r24, 0x01	; 1
    2784:	86 8f       	std	Z+30, r24	; 0x1e

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2786:	80 81       	ld	r24, Z
    2788:	91 81       	ldd	r25, Z+1	; 0x01
    278a:	89 2b       	or	r24, r25
    278c:	29 f4       	brne	.+10     	; 0x2798 <xQueueGenericReceive+0x6c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    278e:	0e 94 5e 19 	call	0x32bc	; 0x32bc <xTaskGetCurrentTaskHandle>
    2792:	f7 01       	movw	r30, r14
    2794:	82 83       	std	Z+2, r24	; 0x02
    2796:	93 83       	std	Z+3, r25	; 0x03
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2798:	f7 01       	movw	r30, r14
    279a:	80 85       	ldd	r24, Z+8	; 0x08
    279c:	88 23       	and	r24, r24
    279e:	b1 f0       	breq	.+44     	; 0x27cc <xQueueGenericReceive+0xa0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    27a0:	c7 01       	movw	r24, r14
    27a2:	08 96       	adiw	r24, 0x08	; 8
    27a4:	0e 94 84 18 	call	0x3108	; 0x3108 <xTaskRemoveFromEventList>
    27a8:	81 30       	cpi	r24, 0x01	; 1
    27aa:	81 f4       	brne	.+32     	; 0x27cc <xQueueGenericReceive+0xa0>
						{
							portYIELD_WITHIN_API();
    27ac:	0e 94 ee 10 	call	0x21dc	; 0x21dc <vPortYield>
    27b0:	0d c0       	rjmp	.+26     	; 0x27cc <xQueueGenericReceive+0xa0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    27b2:	f7 01       	movw	r30, r14
    27b4:	c6 82       	std	Z+6, r12	; 0x06
    27b6:	d7 82       	std	Z+7, r13	; 0x07

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    27b8:	83 89       	ldd	r24, Z+19	; 0x13
    27ba:	88 23       	and	r24, r24
    27bc:	39 f0       	breq	.+14     	; 0x27cc <xQueueGenericReceive+0xa0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    27be:	c7 01       	movw	r24, r14
    27c0:	43 96       	adiw	r24, 0x13	; 19
    27c2:	0e 94 84 18 	call	0x3108	; 0x3108 <xTaskRemoveFromEventList>
    27c6:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    27c8:	0e 94 ee 10 	call	0x21dc	; 0x21dc <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    27cc:	0f 90       	pop	r0
    27ce:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	62 c0       	rjmp	.+196    	; 0x2898 <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    27d4:	8e 81       	ldd	r24, Y+6	; 0x06
    27d6:	9f 81       	ldd	r25, Y+7	; 0x07
    27d8:	a8 85       	ldd	r26, Y+8	; 0x08
    27da:	b9 85       	ldd	r27, Y+9	; 0x09
    27dc:	89 2b       	or	r24, r25
    27de:	8a 2b       	or	r24, r26
    27e0:	8b 2b       	or	r24, r27
    27e2:	21 f4       	brne	.+8      	; 0x27ec <xQueueGenericReceive+0xc0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    27e4:	0f 90       	pop	r0
    27e6:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	56 c0       	rjmp	.+172    	; 0x2898 <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    27ec:	11 11       	cpse	r17, r1
    27ee:	05 c0       	rjmp	.+10     	; 0x27fa <xQueueGenericReceive+0xce>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    27f0:	ce 01       	movw	r24, r28
    27f2:	01 96       	adiw	r24, 0x01	; 1
    27f4:	0e 94 c3 18 	call	0x3186	; 0x3186 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    27f8:	11 e0       	ldi	r17, 0x01	; 1
				}
			}
		}
		taskEXIT_CRITICAL();
    27fa:	0f 90       	pop	r0
    27fc:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    27fe:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	0f 92       	push	r0
    2808:	f7 01       	movw	r30, r14
    280a:	81 a1       	ldd	r24, Z+33	; 0x21
    280c:	8f 3f       	cpi	r24, 0xFF	; 255
    280e:	09 f4       	brne	.+2      	; 0x2812 <xQueueGenericReceive+0xe6>
    2810:	11 a2       	std	Z+33, r1	; 0x21
    2812:	f7 01       	movw	r30, r14
    2814:	82 a1       	ldd	r24, Z+34	; 0x22
    2816:	8f 3f       	cpi	r24, 0xFF	; 255
    2818:	09 f4       	brne	.+2      	; 0x281c <xQueueGenericReceive+0xf0>
    281a:	12 a2       	std	Z+34, r1	; 0x22
    281c:	0f 90       	pop	r0
    281e:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2820:	be 01       	movw	r22, r28
    2822:	6a 5f       	subi	r22, 0xFA	; 250
    2824:	7f 4f       	sbci	r23, 0xFF	; 255
    2826:	ce 01       	movw	r24, r28
    2828:	01 96       	adiw	r24, 0x01	; 1
    282a:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <xTaskCheckForTimeOut>
    282e:	81 11       	cpse	r24, r1
    2830:	2d c0       	rjmp	.+90     	; 0x288c <xQueueGenericReceive+0x160>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    2832:	0f b6       	in	r0, 0x3f	; 63
    2834:	f8 94       	cli
    2836:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    2838:	f7 01       	movw	r30, r14
    283a:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    283c:	0f 90       	pop	r0
    283e:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2840:	81 11       	cpse	r24, r1
    2842:	1e c0       	rjmp	.+60     	; 0x2880 <xQueueGenericReceive+0x154>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2844:	80 81       	ld	r24, Z
    2846:	91 81       	ldd	r25, Z+1	; 0x01
    2848:	89 2b       	or	r24, r25
    284a:	49 f4       	brne	.+18     	; 0x285e <xQueueGenericReceive+0x132>
					{
						portENTER_CRITICAL();
    284c:	0f b6       	in	r0, 0x3f	; 63
    284e:	f8 94       	cli
    2850:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2852:	82 81       	ldd	r24, Z+2	; 0x02
    2854:	93 81       	ldd	r25, Z+3	; 0x03
    2856:	0e 94 63 19 	call	0x32c6	; 0x32c6 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    285a:	0f 90       	pop	r0
    285c:	0f be       	out	0x3f, r0	; 63
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    285e:	4e 81       	ldd	r20, Y+6	; 0x06
    2860:	5f 81       	ldd	r21, Y+7	; 0x07
    2862:	68 85       	ldd	r22, Y+8	; 0x08
    2864:	79 85       	ldd	r23, Y+9	; 0x09
    2866:	c6 01       	movw	r24, r12
    2868:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    286c:	c7 01       	movw	r24, r14
    286e:	0e 94 1b 12 	call	0x2436	; 0x2436 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2872:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <xTaskResumeAll>
    2876:	81 11       	cpse	r24, r1
    2878:	73 cf       	rjmp	.-282    	; 0x2760 <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
    287a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <vPortYield>
    287e:	70 cf       	rjmp	.-288    	; 0x2760 <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2880:	c7 01       	movw	r24, r14
    2882:	0e 94 1b 12 	call	0x2436	; 0x2436 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2886:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <xTaskResumeAll>
    288a:	6a cf       	rjmp	.-300    	; 0x2760 <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    288c:	c7 01       	movw	r24, r14
    288e:	0e 94 1b 12 	call	0x2436	; 0x2436 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2892:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2896:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    2898:	29 96       	adiw	r28, 0x09	; 9
    289a:	cd bf       	out	0x3d, r28	; 61
    289c:	de bf       	out	0x3e, r29	; 62
    289e:	df 91       	pop	r29
    28a0:	cf 91       	pop	r28
    28a2:	1f 91       	pop	r17
    28a4:	0f 91       	pop	r16
    28a6:	ff 90       	pop	r15
    28a8:	ef 90       	pop	r14
    28aa:	df 90       	pop	r13
    28ac:	cf 90       	pop	r12
    28ae:	bf 90       	pop	r11
    28b0:	af 90       	pop	r10
    28b2:	08 95       	ret

000028b4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    28b4:	0f 93       	push	r16
    28b6:	1f 93       	push	r17
    28b8:	cf 93       	push	r28
    28ba:	df 93       	push	r29
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    28bc:	fc 01       	movw	r30, r24
    28be:	26 8d       	ldd	r18, Z+30	; 0x1e
    28c0:	22 23       	and	r18, r18
    28c2:	d9 f0       	breq	.+54     	; 0x28fa <xQueueReceiveFromISR+0x46>
    28c4:	8a 01       	movw	r16, r20
    28c6:	ec 01       	movw	r28, r24
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    28c8:	0e 94 01 12 	call	0x2402	; 0x2402 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    28cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28ce:	81 50       	subi	r24, 0x01	; 1
    28d0:	8e 8f       	std	Y+30, r24	; 0x1e

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    28d2:	89 a1       	ldd	r24, Y+33	; 0x21
    28d4:	8f 3f       	cpi	r24, 0xFF	; 255
    28d6:	69 f4       	brne	.+26     	; 0x28f2 <xQueueReceiveFromISR+0x3e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    28d8:	88 85       	ldd	r24, Y+8	; 0x08
    28da:	88 23       	and	r24, r24
    28dc:	81 f0       	breq	.+32     	; 0x28fe <xQueueReceiveFromISR+0x4a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    28de:	ce 01       	movw	r24, r28
    28e0:	08 96       	adiw	r24, 0x08	; 8
    28e2:	0e 94 84 18 	call	0x3108	; 0x3108 <xTaskRemoveFromEventList>
    28e6:	88 23       	and	r24, r24
    28e8:	61 f0       	breq	.+24     	; 0x2902 <xQueueReceiveFromISR+0x4e>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	f8 01       	movw	r30, r16
    28ee:	80 83       	st	Z, r24
    28f0:	09 c0       	rjmp	.+18     	; 0x2904 <xQueueReceiveFromISR+0x50>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    28f2:	8f 5f       	subi	r24, 0xFF	; 255
    28f4:	89 a3       	std	Y+33, r24	; 0x21
			}

			xReturn = pdPASS;
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	05 c0       	rjmp	.+10     	; 0x2904 <xQueueReceiveFromISR+0x50>
		}
		else
		{
			xReturn = pdFAIL;
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	03 c0       	rjmp	.+6      	; 0x2904 <xQueueReceiveFromISR+0x50>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
			}

			xReturn = pdPASS;
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	01 c0       	rjmp	.+2      	; 0x2904 <xQueueReceiveFromISR+0x50>
    2902:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    2904:	df 91       	pop	r29
    2906:	cf 91       	pop	r28
    2908:	1f 91       	pop	r17
    290a:	0f 91       	pop	r16
    290c:	08 95       	ret

0000290e <uxQueueMessagesWaiting>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    2914:	fc 01       	movw	r30, r24
    2916:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    2918:	0f 90       	pop	r0
    291a:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    291c:	08 95       	ret

0000291e <uxQueueMessagesWaitingFromISR>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    291e:	fc 01       	movw	r30, r24
    2920:	86 8d       	ldd	r24, Z+30	; 0x1e

	return uxReturn;
}
    2922:	08 95       	ret

00002924 <prvIdleTask>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    2924:	c2 e7       	ldi	r28, 0x72	; 114
    2926:	d2 e3       	ldi	r29, 0x32	; 50
    2928:	88 81       	ld	r24, Y
    292a:	82 30       	cpi	r24, 0x02	; 2
    292c:	e8 f3       	brcs	.-6      	; 0x2928 <prvIdleTask+0x4>
    292e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <vPortYield>
    2932:	fa cf       	rjmp	.-12     	; 0x2928 <prvIdleTask+0x4>

00002934 <prvAddCurrentTaskToDelayedList>:
    2934:	cf 92       	push	r12
    2936:	df 92       	push	r13
    2938:	ef 92       	push	r14
    293a:	ff 92       	push	r15
    293c:	6b 01       	movw	r12, r22
    293e:	7c 01       	movw	r14, r24
    2940:	e0 91 9e 32 	lds	r30, 0x329E	; 0x80329e <pxCurrentTCB>
    2944:	f0 91 9f 32 	lds	r31, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
    2948:	62 83       	std	Z+2, r22	; 0x02
    294a:	73 83       	std	Z+3, r23	; 0x03
    294c:	84 83       	std	Z+4, r24	; 0x04
    294e:	95 83       	std	Z+5, r25	; 0x05
    2950:	80 91 46 32 	lds	r24, 0x3246	; 0x803246 <xTickCount>
    2954:	90 91 47 32 	lds	r25, 0x3247	; 0x803247 <xTickCount+0x1>
    2958:	a0 91 48 32 	lds	r26, 0x3248	; 0x803248 <xTickCount+0x2>
    295c:	b0 91 49 32 	lds	r27, 0x3249	; 0x803249 <xTickCount+0x3>
    2960:	c8 16       	cp	r12, r24
    2962:	d9 06       	cpc	r13, r25
    2964:	ea 06       	cpc	r14, r26
    2966:	fb 06       	cpc	r15, r27
    2968:	68 f4       	brcc	.+26     	; 0x2984 <prvAddCurrentTaskToDelayedList+0x50>
    296a:	60 91 9e 32 	lds	r22, 0x329E	; 0x80329e <pxCurrentTCB>
    296e:	70 91 9f 32 	lds	r23, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
    2972:	80 91 58 32 	lds	r24, 0x3258	; 0x803258 <pxOverflowDelayedTaskList>
    2976:	90 91 59 32 	lds	r25, 0x3259	; 0x803259 <pxOverflowDelayedTaskList+0x1>
    297a:	6e 5f       	subi	r22, 0xFE	; 254
    297c:	7f 4f       	sbci	r23, 0xFF	; 255
    297e:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <vListInsert>
    2982:	21 c0       	rjmp	.+66     	; 0x29c6 <prvAddCurrentTaskToDelayedList+0x92>
    2984:	60 91 9e 32 	lds	r22, 0x329E	; 0x80329e <pxCurrentTCB>
    2988:	70 91 9f 32 	lds	r23, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
    298c:	80 91 5a 32 	lds	r24, 0x325A	; 0x80325a <pxDelayedTaskList>
    2990:	90 91 5b 32 	lds	r25, 0x325B	; 0x80325b <pxDelayedTaskList+0x1>
    2994:	6e 5f       	subi	r22, 0xFE	; 254
    2996:	7f 4f       	sbci	r23, 0xFF	; 255
    2998:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <vListInsert>
    299c:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    29a0:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    29a4:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    29a8:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    29ac:	c8 16       	cp	r12, r24
    29ae:	d9 06       	cpc	r13, r25
    29b0:	ea 06       	cpc	r14, r26
    29b2:	fb 06       	cpc	r15, r27
    29b4:	40 f4       	brcc	.+16     	; 0x29c6 <prvAddCurrentTaskToDelayedList+0x92>
    29b6:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    29ba:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    29be:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    29c2:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    29c6:	ff 90       	pop	r15
    29c8:	ef 90       	pop	r14
    29ca:	df 90       	pop	r13
    29cc:	cf 90       	pop	r12
    29ce:	08 95       	ret

000029d0 <xTaskGenericCreate>:
    29d0:	4f 92       	push	r4
    29d2:	5f 92       	push	r5
    29d4:	6f 92       	push	r6
    29d6:	7f 92       	push	r7
    29d8:	8f 92       	push	r8
    29da:	9f 92       	push	r9
    29dc:	af 92       	push	r10
    29de:	bf 92       	push	r11
    29e0:	cf 92       	push	r12
    29e2:	df 92       	push	r13
    29e4:	ef 92       	push	r14
    29e6:	ff 92       	push	r15
    29e8:	0f 93       	push	r16
    29ea:	1f 93       	push	r17
    29ec:	cf 93       	push	r28
    29ee:	df 93       	push	r29
    29f0:	5c 01       	movw	r10, r24
    29f2:	4b 01       	movw	r8, r22
    29f4:	3a 01       	movw	r6, r20
    29f6:	29 01       	movw	r4, r18
    29f8:	88 e2       	ldi	r24, 0x28	; 40
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <pvPortMalloc>
    2a00:	ec 01       	movw	r28, r24
    2a02:	89 2b       	or	r24, r25
    2a04:	09 f4       	brne	.+2      	; 0x2a08 <xTaskGenericCreate+0x38>
    2a06:	d4 c0       	rjmp	.+424    	; 0x2bb0 <xTaskGenericCreate+0x1e0>
    2a08:	c1 14       	cp	r12, r1
    2a0a:	d1 04       	cpc	r13, r1
    2a0c:	09 f0       	breq	.+2      	; 0x2a10 <xTaskGenericCreate+0x40>
    2a0e:	cc c0       	rjmp	.+408    	; 0x2ba8 <xTaskGenericCreate+0x1d8>
    2a10:	c3 01       	movw	r24, r6
    2a12:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <pvPortMalloc>
    2a16:	8b 8f       	std	Y+27, r24	; 0x1b
    2a18:	9c 8f       	std	Y+28, r25	; 0x1c
    2a1a:	00 97       	sbiw	r24, 0x00	; 0
    2a1c:	21 f4       	brne	.+8      	; 0x2a26 <xTaskGenericCreate+0x56>
    2a1e:	ce 01       	movw	r24, r28
    2a20:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <vPortFree>
    2a24:	c5 c0       	rjmp	.+394    	; 0x2bb0 <xTaskGenericCreate+0x1e0>
    2a26:	a3 01       	movw	r20, r6
    2a28:	61 e1       	ldi	r22, 0x11	; 17
    2a2a:	70 e0       	ldi	r23, 0x00	; 0
    2a2c:	0e 94 00 27 	call	0x4e00	; 0x4e00 <memset>
    2a30:	93 01       	movw	r18, r6
    2a32:	21 50       	subi	r18, 0x01	; 1
    2a34:	31 09       	sbc	r19, r1
    2a36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a3a:	3c 01       	movw	r6, r24
    2a3c:	62 0e       	add	r6, r18
    2a3e:	73 1e       	adc	r7, r19
    2a40:	4a e0       	ldi	r20, 0x0A	; 10
    2a42:	50 e0       	ldi	r21, 0x00	; 0
    2a44:	b4 01       	movw	r22, r8
    2a46:	ce 01       	movw	r24, r28
    2a48:	4d 96       	adiw	r24, 0x1d	; 29
    2a4a:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <strncpy>
    2a4e:	1e a2       	std	Y+38, r1	; 0x26
    2a50:	10 2f       	mov	r17, r16
    2a52:	04 30       	cpi	r16, 0x04	; 4
    2a54:	08 f0       	brcs	.+2      	; 0x2a58 <xTaskGenericCreate+0x88>
    2a56:	13 e0       	ldi	r17, 0x03	; 3
    2a58:	1a 8f       	std	Y+26, r17	; 0x1a
    2a5a:	1f a3       	std	Y+39, r17	; 0x27
    2a5c:	6e 01       	movw	r12, r28
    2a5e:	22 e0       	ldi	r18, 0x02	; 2
    2a60:	c2 0e       	add	r12, r18
    2a62:	d1 1c       	adc	r13, r1
    2a64:	c6 01       	movw	r24, r12
    2a66:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <vListInitialiseItem>
    2a6a:	ce 01       	movw	r24, r28
    2a6c:	0e 96       	adiw	r24, 0x0e	; 14
    2a6e:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <vListInitialiseItem>
    2a72:	ca 87       	std	Y+10, r28	; 0x0a
    2a74:	db 87       	std	Y+11, r29	; 0x0b
    2a76:	84 e0       	ldi	r24, 0x04	; 4
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	a0 e0       	ldi	r26, 0x00	; 0
    2a7c:	b0 e0       	ldi	r27, 0x00	; 0
    2a7e:	81 1b       	sub	r24, r17
    2a80:	91 09       	sbc	r25, r1
    2a82:	a1 09       	sbc	r26, r1
    2a84:	b1 09       	sbc	r27, r1
    2a86:	8e 87       	std	Y+14, r24	; 0x0e
    2a88:	9f 87       	std	Y+15, r25	; 0x0f
    2a8a:	a8 8b       	std	Y+16, r26	; 0x10
    2a8c:	b9 8b       	std	Y+17, r27	; 0x11
    2a8e:	ce 8b       	std	Y+22, r28	; 0x16
    2a90:	df 8b       	std	Y+23, r29	; 0x17
    2a92:	a2 01       	movw	r20, r4
    2a94:	b5 01       	movw	r22, r10
    2a96:	c3 01       	movw	r24, r6
    2a98:	0e 94 3a 10 	call	0x2074	; 0x2074 <pxPortInitialiseStack>
    2a9c:	88 83       	st	Y, r24
    2a9e:	99 83       	std	Y+1, r25	; 0x01
    2aa0:	e1 14       	cp	r14, r1
    2aa2:	f1 04       	cpc	r15, r1
    2aa4:	19 f0       	breq	.+6      	; 0x2aac <xTaskGenericCreate+0xdc>
    2aa6:	f7 01       	movw	r30, r14
    2aa8:	c0 83       	st	Z, r28
    2aaa:	d1 83       	std	Z+1, r29	; 0x01
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	f8 94       	cli
    2ab0:	0f 92       	push	r0
    2ab2:	80 91 4a 32 	lds	r24, 0x324A	; 0x80324a <uxCurrentNumberOfTasks>
    2ab6:	8f 5f       	subi	r24, 0xFF	; 255
    2ab8:	80 93 4a 32 	sts	0x324A, r24	; 0x80324a <uxCurrentNumberOfTasks>
    2abc:	80 91 9e 32 	lds	r24, 0x329E	; 0x80329e <pxCurrentTCB>
    2ac0:	90 91 9f 32 	lds	r25, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
    2ac4:	89 2b       	or	r24, r25
    2ac6:	89 f5       	brne	.+98     	; 0x2b2a <xTaskGenericCreate+0x15a>
    2ac8:	c0 93 9e 32 	sts	0x329E, r28	; 0x80329e <pxCurrentTCB>
    2acc:	d0 93 9f 32 	sts	0x329F, r29	; 0x80329f <pxCurrentTCB+0x1>
    2ad0:	80 91 4a 32 	lds	r24, 0x324A	; 0x80324a <uxCurrentNumberOfTasks>
    2ad4:	81 30       	cpi	r24, 0x01	; 1
    2ad6:	c1 f5       	brne	.+112    	; 0x2b48 <xTaskGenericCreate+0x178>
    2ad8:	82 e7       	ldi	r24, 0x72	; 114
    2ada:	92 e3       	ldi	r25, 0x32	; 50
    2adc:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <vListInitialise>
    2ae0:	8d e7       	ldi	r24, 0x7D	; 125
    2ae2:	92 e3       	ldi	r25, 0x32	; 50
    2ae4:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <vListInitialise>
    2ae8:	88 e8       	ldi	r24, 0x88	; 136
    2aea:	92 e3       	ldi	r25, 0x32	; 50
    2aec:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <vListInitialise>
    2af0:	83 e9       	ldi	r24, 0x93	; 147
    2af2:	92 e3       	ldi	r25, 0x32	; 50
    2af4:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <vListInitialise>
    2af8:	87 e6       	ldi	r24, 0x67	; 103
    2afa:	92 e3       	ldi	r25, 0x32	; 50
    2afc:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <vListInitialise>
    2b00:	8c e5       	ldi	r24, 0x5C	; 92
    2b02:	92 e3       	ldi	r25, 0x32	; 50
    2b04:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <vListInitialise>
    2b08:	8d e4       	ldi	r24, 0x4D	; 77
    2b0a:	92 e3       	ldi	r25, 0x32	; 50
    2b0c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <vListInitialise>
    2b10:	87 e6       	ldi	r24, 0x67	; 103
    2b12:	92 e3       	ldi	r25, 0x32	; 50
    2b14:	80 93 5a 32 	sts	0x325A, r24	; 0x80325a <pxDelayedTaskList>
    2b18:	90 93 5b 32 	sts	0x325B, r25	; 0x80325b <pxDelayedTaskList+0x1>
    2b1c:	8c e5       	ldi	r24, 0x5C	; 92
    2b1e:	92 e3       	ldi	r25, 0x32	; 50
    2b20:	80 93 58 32 	sts	0x3258, r24	; 0x803258 <pxOverflowDelayedTaskList>
    2b24:	90 93 59 32 	sts	0x3259, r25	; 0x803259 <pxOverflowDelayedTaskList+0x1>
    2b28:	0f c0       	rjmp	.+30     	; 0x2b48 <xTaskGenericCreate+0x178>
    2b2a:	80 91 43 32 	lds	r24, 0x3243	; 0x803243 <xSchedulerRunning>
    2b2e:	81 11       	cpse	r24, r1
    2b30:	0b c0       	rjmp	.+22     	; 0x2b48 <xTaskGenericCreate+0x178>
    2b32:	e0 91 9e 32 	lds	r30, 0x329E	; 0x80329e <pxCurrentTCB>
    2b36:	f0 91 9f 32 	lds	r31, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
    2b3a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b3c:	08 17       	cp	r16, r24
    2b3e:	20 f0       	brcs	.+8      	; 0x2b48 <xTaskGenericCreate+0x178>
    2b40:	c0 93 9e 32 	sts	0x329E, r28	; 0x80329e <pxCurrentTCB>
    2b44:	d0 93 9f 32 	sts	0x329F, r29	; 0x80329f <pxCurrentTCB+0x1>
    2b48:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b4a:	90 91 45 32 	lds	r25, 0x3245	; 0x803245 <uxTopUsedPriority>
    2b4e:	98 17       	cp	r25, r24
    2b50:	10 f4       	brcc	.+4      	; 0x2b56 <xTaskGenericCreate+0x186>
    2b52:	80 93 45 32 	sts	0x3245, r24	; 0x803245 <uxTopUsedPriority>
    2b56:	90 91 3e 32 	lds	r25, 0x323E	; 0x80323e <uxTaskNumber>
    2b5a:	9f 5f       	subi	r25, 0xFF	; 255
    2b5c:	90 93 3e 32 	sts	0x323E, r25	; 0x80323e <uxTaskNumber>
    2b60:	90 91 44 32 	lds	r25, 0x3244	; 0x803244 <uxTopReadyPriority>
    2b64:	98 17       	cp	r25, r24
    2b66:	10 f4       	brcc	.+4      	; 0x2b6c <xTaskGenericCreate+0x19c>
    2b68:	80 93 44 32 	sts	0x3244, r24	; 0x803244 <uxTopReadyPriority>
    2b6c:	fb e0       	ldi	r31, 0x0B	; 11
    2b6e:	8f 9f       	mul	r24, r31
    2b70:	c0 01       	movw	r24, r0
    2b72:	11 24       	eor	r1, r1
    2b74:	b6 01       	movw	r22, r12
    2b76:	8e 58       	subi	r24, 0x8E	; 142
    2b78:	9d 4c       	sbci	r25, 0xCD	; 205
    2b7a:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vListInsertEnd>
    2b7e:	0f 90       	pop	r0
    2b80:	0f be       	out	0x3f, r0	; 63
    2b82:	80 91 43 32 	lds	r24, 0x3243	; 0x803243 <xSchedulerRunning>
    2b86:	88 23       	and	r24, r24
    2b88:	59 f0       	breq	.+22     	; 0x2ba0 <xTaskGenericCreate+0x1d0>
    2b8a:	e0 91 9e 32 	lds	r30, 0x329E	; 0x80329e <pxCurrentTCB>
    2b8e:	f0 91 9f 32 	lds	r31, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
    2b92:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b94:	80 17       	cp	r24, r16
    2b96:	30 f4       	brcc	.+12     	; 0x2ba4 <xTaskGenericCreate+0x1d4>
    2b98:	0e 94 ee 10 	call	0x21dc	; 0x21dc <vPortYield>
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	09 c0       	rjmp	.+18     	; 0x2bb2 <xTaskGenericCreate+0x1e2>
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	07 c0       	rjmp	.+14     	; 0x2bb2 <xTaskGenericCreate+0x1e2>
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	05 c0       	rjmp	.+10     	; 0x2bb2 <xTaskGenericCreate+0x1e2>
    2ba8:	cb 8e       	std	Y+27, r12	; 0x1b
    2baa:	dc 8e       	std	Y+28, r13	; 0x1c
    2bac:	c6 01       	movw	r24, r12
    2bae:	3b cf       	rjmp	.-394    	; 0x2a26 <xTaskGenericCreate+0x56>
    2bb0:	8f ef       	ldi	r24, 0xFF	; 255
    2bb2:	df 91       	pop	r29
    2bb4:	cf 91       	pop	r28
    2bb6:	1f 91       	pop	r17
    2bb8:	0f 91       	pop	r16
    2bba:	ff 90       	pop	r15
    2bbc:	ef 90       	pop	r14
    2bbe:	df 90       	pop	r13
    2bc0:	cf 90       	pop	r12
    2bc2:	bf 90       	pop	r11
    2bc4:	af 90       	pop	r10
    2bc6:	9f 90       	pop	r9
    2bc8:	8f 90       	pop	r8
    2bca:	7f 90       	pop	r7
    2bcc:	6f 90       	pop	r6
    2bce:	5f 90       	pop	r5
    2bd0:	4f 90       	pop	r4
    2bd2:	08 95       	ret

00002bd4 <uxTaskPriorityGet>:
    2bd4:	0f b6       	in	r0, 0x3f	; 63
    2bd6:	f8 94       	cli
    2bd8:	0f 92       	push	r0
    2bda:	00 97       	sbiw	r24, 0x00	; 0
    2bdc:	21 f4       	brne	.+8      	; 0x2be6 <uxTaskPriorityGet+0x12>
    2bde:	80 91 9e 32 	lds	r24, 0x329E	; 0x80329e <pxCurrentTCB>
    2be2:	90 91 9f 32 	lds	r25, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
    2be6:	0f 90       	pop	r0
    2be8:	0f be       	out	0x3f, r0	; 63
    2bea:	fc 01       	movw	r30, r24
    2bec:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bee:	08 95       	ret

00002bf0 <vTaskStartScheduler>:
    2bf0:	af 92       	push	r10
    2bf2:	bf 92       	push	r11
    2bf4:	cf 92       	push	r12
    2bf6:	df 92       	push	r13
    2bf8:	ef 92       	push	r14
    2bfa:	ff 92       	push	r15
    2bfc:	0f 93       	push	r16
    2bfe:	a1 2c       	mov	r10, r1
    2c00:	b1 2c       	mov	r11, r1
    2c02:	c1 2c       	mov	r12, r1
    2c04:	d1 2c       	mov	r13, r1
    2c06:	0f 2e       	mov	r0, r31
    2c08:	fb e4       	ldi	r31, 0x4B	; 75
    2c0a:	ef 2e       	mov	r14, r31
    2c0c:	f2 e3       	ldi	r31, 0x32	; 50
    2c0e:	ff 2e       	mov	r15, r31
    2c10:	f0 2d       	mov	r31, r0
    2c12:	00 e0       	ldi	r16, 0x00	; 0
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	44 e6       	ldi	r20, 0x64	; 100
    2c1a:	50 e0       	ldi	r21, 0x00	; 0
    2c1c:	63 e8       	ldi	r22, 0x83	; 131
    2c1e:	71 e2       	ldi	r23, 0x21	; 33
    2c20:	82 e9       	ldi	r24, 0x92	; 146
    2c22:	94 e1       	ldi	r25, 0x14	; 20
    2c24:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <xTaskGenericCreate>
    2c28:	81 30       	cpi	r24, 0x01	; 1
    2c2a:	69 f4       	brne	.+26     	; 0x2c46 <vTaskStartScheduler+0x56>
    2c2c:	f8 94       	cli
    2c2e:	80 93 43 32 	sts	0x3243, r24	; 0x803243 <xSchedulerRunning>
    2c32:	10 92 46 32 	sts	0x3246, r1	; 0x803246 <xTickCount>
    2c36:	10 92 47 32 	sts	0x3247, r1	; 0x803247 <xTickCount+0x1>
    2c3a:	10 92 48 32 	sts	0x3248, r1	; 0x803248 <xTickCount+0x2>
    2c3e:	10 92 49 32 	sts	0x3249, r1	; 0x803249 <xTickCount+0x3>
    2c42:	0e 94 b0 10 	call	0x2160	; 0x2160 <xPortStartScheduler>
    2c46:	0f 91       	pop	r16
    2c48:	ff 90       	pop	r15
    2c4a:	ef 90       	pop	r14
    2c4c:	df 90       	pop	r13
    2c4e:	cf 90       	pop	r12
    2c50:	bf 90       	pop	r11
    2c52:	af 90       	pop	r10
    2c54:	08 95       	ret

00002c56 <vTaskSuspendAll>:
    2c56:	80 91 42 32 	lds	r24, 0x3242	; 0x803242 <uxSchedulerSuspended>
    2c5a:	8f 5f       	subi	r24, 0xFF	; 255
    2c5c:	80 93 42 32 	sts	0x3242, r24	; 0x803242 <uxSchedulerSuspended>
    2c60:	08 95       	ret

00002c62 <xTaskGetTickCount>:
    2c62:	0f b6       	in	r0, 0x3f	; 63
    2c64:	f8 94       	cli
    2c66:	0f 92       	push	r0
    2c68:	60 91 46 32 	lds	r22, 0x3246	; 0x803246 <xTickCount>
    2c6c:	70 91 47 32 	lds	r23, 0x3247	; 0x803247 <xTickCount+0x1>
    2c70:	80 91 48 32 	lds	r24, 0x3248	; 0x803248 <xTickCount+0x2>
    2c74:	90 91 49 32 	lds	r25, 0x3249	; 0x803249 <xTickCount+0x3>
    2c78:	0f 90       	pop	r0
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	08 95       	ret

00002c7e <pcTaskGetTaskName>:
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	21 f4       	brne	.+8      	; 0x2c8a <pcTaskGetTaskName+0xc>
    2c82:	80 91 9e 32 	lds	r24, 0x329E	; 0x80329e <pxCurrentTCB>
    2c86:	90 91 9f 32 	lds	r25, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
    2c8a:	4d 96       	adiw	r24, 0x1d	; 29
    2c8c:	08 95       	ret

00002c8e <xTaskGetIdleTaskHandle>:
    2c8e:	80 91 4b 32 	lds	r24, 0x324B	; 0x80324b <xIdleTaskHandle>
    2c92:	90 91 4c 32 	lds	r25, 0x324C	; 0x80324c <xIdleTaskHandle+0x1>
    2c96:	08 95       	ret

00002c98 <vTaskIncrementTick>:
    2c98:	ff 92       	push	r15
    2c9a:	0f 93       	push	r16
    2c9c:	1f 93       	push	r17
    2c9e:	cf 93       	push	r28
    2ca0:	df 93       	push	r29
    2ca2:	80 91 42 32 	lds	r24, 0x3242	; 0x803242 <uxSchedulerSuspended>
    2ca6:	81 11       	cpse	r24, r1
    2ca8:	ed c0       	rjmp	.+474    	; 0x2e84 <vTaskIncrementTick+0x1ec>
    2caa:	80 91 46 32 	lds	r24, 0x3246	; 0x803246 <xTickCount>
    2cae:	90 91 47 32 	lds	r25, 0x3247	; 0x803247 <xTickCount+0x1>
    2cb2:	a0 91 48 32 	lds	r26, 0x3248	; 0x803248 <xTickCount+0x2>
    2cb6:	b0 91 49 32 	lds	r27, 0x3249	; 0x803249 <xTickCount+0x3>
    2cba:	01 96       	adiw	r24, 0x01	; 1
    2cbc:	a1 1d       	adc	r26, r1
    2cbe:	b1 1d       	adc	r27, r1
    2cc0:	80 93 46 32 	sts	0x3246, r24	; 0x803246 <xTickCount>
    2cc4:	90 93 47 32 	sts	0x3247, r25	; 0x803247 <xTickCount+0x1>
    2cc8:	a0 93 48 32 	sts	0x3248, r26	; 0x803248 <xTickCount+0x2>
    2ccc:	b0 93 49 32 	sts	0x3249, r27	; 0x803249 <xTickCount+0x3>
    2cd0:	80 91 46 32 	lds	r24, 0x3246	; 0x803246 <xTickCount>
    2cd4:	90 91 47 32 	lds	r25, 0x3247	; 0x803247 <xTickCount+0x1>
    2cd8:	a0 91 48 32 	lds	r26, 0x3248	; 0x803248 <xTickCount+0x2>
    2cdc:	b0 91 49 32 	lds	r27, 0x3249	; 0x803249 <xTickCount+0x3>
    2ce0:	89 2b       	or	r24, r25
    2ce2:	8a 2b       	or	r24, r26
    2ce4:	8b 2b       	or	r24, r27
    2ce6:	f1 f5       	brne	.+124    	; 0x2d64 <vTaskIncrementTick+0xcc>
    2ce8:	80 91 5a 32 	lds	r24, 0x325A	; 0x80325a <pxDelayedTaskList>
    2cec:	90 91 5b 32 	lds	r25, 0x325B	; 0x80325b <pxDelayedTaskList+0x1>
    2cf0:	20 91 58 32 	lds	r18, 0x3258	; 0x803258 <pxOverflowDelayedTaskList>
    2cf4:	30 91 59 32 	lds	r19, 0x3259	; 0x803259 <pxOverflowDelayedTaskList+0x1>
    2cf8:	20 93 5a 32 	sts	0x325A, r18	; 0x80325a <pxDelayedTaskList>
    2cfc:	30 93 5b 32 	sts	0x325B, r19	; 0x80325b <pxDelayedTaskList+0x1>
    2d00:	80 93 58 32 	sts	0x3258, r24	; 0x803258 <pxOverflowDelayedTaskList>
    2d04:	90 93 59 32 	sts	0x3259, r25	; 0x803259 <pxOverflowDelayedTaskList+0x1>
    2d08:	80 91 3f 32 	lds	r24, 0x323F	; 0x80323f <xNumOfOverflows>
    2d0c:	8f 5f       	subi	r24, 0xFF	; 255
    2d0e:	80 93 3f 32 	sts	0x323F, r24	; 0x80323f <xNumOfOverflows>
    2d12:	e0 91 5a 32 	lds	r30, 0x325A	; 0x80325a <pxDelayedTaskList>
    2d16:	f0 91 5b 32 	lds	r31, 0x325B	; 0x80325b <pxDelayedTaskList+0x1>
    2d1a:	80 81       	ld	r24, Z
    2d1c:	81 11       	cpse	r24, r1
    2d1e:	0c c0       	rjmp	.+24     	; 0x2d38 <vTaskIncrementTick+0xa0>
    2d20:	8f ef       	ldi	r24, 0xFF	; 255
    2d22:	9f ef       	ldi	r25, 0xFF	; 255
    2d24:	dc 01       	movw	r26, r24
    2d26:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2d2a:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2d2e:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2d32:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    2d36:	16 c0       	rjmp	.+44     	; 0x2d64 <vTaskIncrementTick+0xcc>
    2d38:	e0 91 5a 32 	lds	r30, 0x325A	; 0x80325a <pxDelayedTaskList>
    2d3c:	f0 91 5b 32 	lds	r31, 0x325B	; 0x80325b <pxDelayedTaskList+0x1>
    2d40:	07 80       	ldd	r0, Z+7	; 0x07
    2d42:	f0 85       	ldd	r31, Z+8	; 0x08
    2d44:	e0 2d       	mov	r30, r0
    2d46:	00 84       	ldd	r0, Z+8	; 0x08
    2d48:	f1 85       	ldd	r31, Z+9	; 0x09
    2d4a:	e0 2d       	mov	r30, r0
    2d4c:	82 81       	ldd	r24, Z+2	; 0x02
    2d4e:	93 81       	ldd	r25, Z+3	; 0x03
    2d50:	a4 81       	ldd	r26, Z+4	; 0x04
    2d52:	b5 81       	ldd	r27, Z+5	; 0x05
    2d54:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2d58:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2d5c:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2d60:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    2d64:	40 91 46 32 	lds	r20, 0x3246	; 0x803246 <xTickCount>
    2d68:	50 91 47 32 	lds	r21, 0x3247	; 0x803247 <xTickCount+0x1>
    2d6c:	60 91 48 32 	lds	r22, 0x3248	; 0x803248 <xTickCount+0x2>
    2d70:	70 91 49 32 	lds	r23, 0x3249	; 0x803249 <xTickCount+0x3>
    2d74:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    2d78:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    2d7c:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    2d80:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    2d84:	48 17       	cp	r20, r24
    2d86:	59 07       	cpc	r21, r25
    2d88:	6a 07       	cpc	r22, r26
    2d8a:	7b 07       	cpc	r23, r27
    2d8c:	08 f4       	brcc	.+2      	; 0x2d90 <vTaskIncrementTick+0xf8>
    2d8e:	7f c0       	rjmp	.+254    	; 0x2e8e <vTaskIncrementTick+0x1f6>
    2d90:	e0 91 5a 32 	lds	r30, 0x325A	; 0x80325a <pxDelayedTaskList>
    2d94:	f0 91 5b 32 	lds	r31, 0x325B	; 0x80325b <pxDelayedTaskList+0x1>
    2d98:	80 81       	ld	r24, Z
    2d9a:	88 23       	and	r24, r24
    2d9c:	f9 f0       	breq	.+62     	; 0x2ddc <vTaskIncrementTick+0x144>
    2d9e:	e0 91 5a 32 	lds	r30, 0x325A	; 0x80325a <pxDelayedTaskList>
    2da2:	f0 91 5b 32 	lds	r31, 0x325B	; 0x80325b <pxDelayedTaskList+0x1>
    2da6:	07 80       	ldd	r0, Z+7	; 0x07
    2da8:	f0 85       	ldd	r31, Z+8	; 0x08
    2daa:	e0 2d       	mov	r30, r0
    2dac:	c0 85       	ldd	r28, Z+8	; 0x08
    2dae:	d1 85       	ldd	r29, Z+9	; 0x09
    2db0:	8a 81       	ldd	r24, Y+2	; 0x02
    2db2:	9b 81       	ldd	r25, Y+3	; 0x03
    2db4:	ac 81       	ldd	r26, Y+4	; 0x04
    2db6:	bd 81       	ldd	r27, Y+5	; 0x05
    2db8:	40 91 46 32 	lds	r20, 0x3246	; 0x803246 <xTickCount>
    2dbc:	50 91 47 32 	lds	r21, 0x3247	; 0x803247 <xTickCount+0x1>
    2dc0:	60 91 48 32 	lds	r22, 0x3248	; 0x803248 <xTickCount+0x2>
    2dc4:	70 91 49 32 	lds	r23, 0x3249	; 0x803249 <xTickCount+0x3>
    2dc8:	48 17       	cp	r20, r24
    2dca:	59 07       	cpc	r21, r25
    2dcc:	6a 07       	cpc	r22, r26
    2dce:	7b 07       	cpc	r23, r27
    2dd0:	58 f1       	brcs	.+86     	; 0x2e28 <vTaskIncrementTick+0x190>
    2dd2:	0f 2e       	mov	r0, r31
    2dd4:	fb e0       	ldi	r31, 0x0B	; 11
    2dd6:	ff 2e       	mov	r15, r31
    2dd8:	f0 2d       	mov	r31, r0
    2dda:	2f c0       	rjmp	.+94     	; 0x2e3a <vTaskIncrementTick+0x1a2>
    2ddc:	8f ef       	ldi	r24, 0xFF	; 255
    2dde:	9f ef       	ldi	r25, 0xFF	; 255
    2de0:	dc 01       	movw	r26, r24
    2de2:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2de6:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2dea:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2dee:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    2df2:	4d c0       	rjmp	.+154    	; 0x2e8e <vTaskIncrementTick+0x1f6>
    2df4:	e0 91 5a 32 	lds	r30, 0x325A	; 0x80325a <pxDelayedTaskList>
    2df8:	f0 91 5b 32 	lds	r31, 0x325B	; 0x80325b <pxDelayedTaskList+0x1>
    2dfc:	07 80       	ldd	r0, Z+7	; 0x07
    2dfe:	f0 85       	ldd	r31, Z+8	; 0x08
    2e00:	e0 2d       	mov	r30, r0
    2e02:	c0 85       	ldd	r28, Z+8	; 0x08
    2e04:	d1 85       	ldd	r29, Z+9	; 0x09
    2e06:	8a 81       	ldd	r24, Y+2	; 0x02
    2e08:	9b 81       	ldd	r25, Y+3	; 0x03
    2e0a:	ac 81       	ldd	r26, Y+4	; 0x04
    2e0c:	bd 81       	ldd	r27, Y+5	; 0x05
    2e0e:	40 91 46 32 	lds	r20, 0x3246	; 0x803246 <xTickCount>
    2e12:	50 91 47 32 	lds	r21, 0x3247	; 0x803247 <xTickCount+0x1>
    2e16:	60 91 48 32 	lds	r22, 0x3248	; 0x803248 <xTickCount+0x2>
    2e1a:	70 91 49 32 	lds	r23, 0x3249	; 0x803249 <xTickCount+0x3>
    2e1e:	48 17       	cp	r20, r24
    2e20:	59 07       	cpc	r21, r25
    2e22:	6a 07       	cpc	r22, r26
    2e24:	7b 07       	cpc	r23, r27
    2e26:	48 f4       	brcc	.+18     	; 0x2e3a <vTaskIncrementTick+0x1a2>
    2e28:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2e2c:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2e30:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2e34:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    2e38:	2a c0       	rjmp	.+84     	; 0x2e8e <vTaskIncrementTick+0x1f6>
    2e3a:	8e 01       	movw	r16, r28
    2e3c:	0e 5f       	subi	r16, 0xFE	; 254
    2e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e40:	c8 01       	movw	r24, r16
    2e42:	0e 94 14 10 	call	0x2028	; 0x2028 <vListRemove>
    2e46:	88 8d       	ldd	r24, Y+24	; 0x18
    2e48:	99 8d       	ldd	r25, Y+25	; 0x19
    2e4a:	89 2b       	or	r24, r25
    2e4c:	21 f0       	breq	.+8      	; 0x2e56 <vTaskIncrementTick+0x1be>
    2e4e:	ce 01       	movw	r24, r28
    2e50:	0e 96       	adiw	r24, 0x0e	; 14
    2e52:	0e 94 14 10 	call	0x2028	; 0x2028 <vListRemove>
    2e56:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e58:	90 91 44 32 	lds	r25, 0x3244	; 0x803244 <uxTopReadyPriority>
    2e5c:	98 17       	cp	r25, r24
    2e5e:	10 f4       	brcc	.+4      	; 0x2e64 <vTaskIncrementTick+0x1cc>
    2e60:	80 93 44 32 	sts	0x3244, r24	; 0x803244 <uxTopReadyPriority>
    2e64:	f8 9e       	mul	r15, r24
    2e66:	c0 01       	movw	r24, r0
    2e68:	11 24       	eor	r1, r1
    2e6a:	b8 01       	movw	r22, r16
    2e6c:	8e 58       	subi	r24, 0x8E	; 142
    2e6e:	9d 4c       	sbci	r25, 0xCD	; 205
    2e70:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vListInsertEnd>
    2e74:	e0 91 5a 32 	lds	r30, 0x325A	; 0x80325a <pxDelayedTaskList>
    2e78:	f0 91 5b 32 	lds	r31, 0x325B	; 0x80325b <pxDelayedTaskList+0x1>
    2e7c:	80 81       	ld	r24, Z
    2e7e:	81 11       	cpse	r24, r1
    2e80:	b9 cf       	rjmp	.-142    	; 0x2df4 <vTaskIncrementTick+0x15c>
    2e82:	ac cf       	rjmp	.-168    	; 0x2ddc <vTaskIncrementTick+0x144>
    2e84:	80 91 41 32 	lds	r24, 0x3241	; 0x803241 <uxMissedTicks>
    2e88:	8f 5f       	subi	r24, 0xFF	; 255
    2e8a:	80 93 41 32 	sts	0x3241, r24	; 0x803241 <uxMissedTicks>
    2e8e:	df 91       	pop	r29
    2e90:	cf 91       	pop	r28
    2e92:	1f 91       	pop	r17
    2e94:	0f 91       	pop	r16
    2e96:	ff 90       	pop	r15
    2e98:	08 95       	ret

00002e9a <xTaskResumeAll>:
    2e9a:	cf 92       	push	r12
    2e9c:	df 92       	push	r13
    2e9e:	ef 92       	push	r14
    2ea0:	ff 92       	push	r15
    2ea2:	0f 93       	push	r16
    2ea4:	1f 93       	push	r17
    2ea6:	cf 93       	push	r28
    2ea8:	df 93       	push	r29
    2eaa:	0f b6       	in	r0, 0x3f	; 63
    2eac:	f8 94       	cli
    2eae:	0f 92       	push	r0
    2eb0:	80 91 42 32 	lds	r24, 0x3242	; 0x803242 <uxSchedulerSuspended>
    2eb4:	81 50       	subi	r24, 0x01	; 1
    2eb6:	80 93 42 32 	sts	0x3242, r24	; 0x803242 <uxSchedulerSuspended>
    2eba:	80 91 42 32 	lds	r24, 0x3242	; 0x803242 <uxSchedulerSuspended>
    2ebe:	81 11       	cpse	r24, r1
    2ec0:	60 c0       	rjmp	.+192    	; 0x2f82 <xTaskResumeAll+0xe8>
    2ec2:	80 91 4a 32 	lds	r24, 0x324A	; 0x80324a <uxCurrentNumberOfTasks>
    2ec6:	81 11       	cpse	r24, r1
    2ec8:	2c c0       	rjmp	.+88     	; 0x2f22 <xTaskResumeAll+0x88>
    2eca:	5e c0       	rjmp	.+188    	; 0x2f88 <xTaskResumeAll+0xee>
    2ecc:	d7 01       	movw	r26, r14
    2ece:	17 96       	adiw	r26, 0x07	; 7
    2ed0:	ed 91       	ld	r30, X+
    2ed2:	fc 91       	ld	r31, X
    2ed4:	18 97       	sbiw	r26, 0x08	; 8
    2ed6:	c0 85       	ldd	r28, Z+8	; 0x08
    2ed8:	d1 85       	ldd	r29, Z+9	; 0x09
    2eda:	ce 01       	movw	r24, r28
    2edc:	0e 96       	adiw	r24, 0x0e	; 14
    2ede:	0e 94 14 10 	call	0x2028	; 0x2028 <vListRemove>
    2ee2:	8e 01       	movw	r16, r28
    2ee4:	0e 5f       	subi	r16, 0xFE	; 254
    2ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee8:	c8 01       	movw	r24, r16
    2eea:	0e 94 14 10 	call	0x2028	; 0x2028 <vListRemove>
    2eee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ef0:	90 91 44 32 	lds	r25, 0x3244	; 0x803244 <uxTopReadyPriority>
    2ef4:	98 17       	cp	r25, r24
    2ef6:	10 f4       	brcc	.+4      	; 0x2efc <xTaskResumeAll+0x62>
    2ef8:	80 93 44 32 	sts	0x3244, r24	; 0x803244 <uxTopReadyPriority>
    2efc:	d8 9e       	mul	r13, r24
    2efe:	c0 01       	movw	r24, r0
    2f00:	11 24       	eor	r1, r1
    2f02:	b8 01       	movw	r22, r16
    2f04:	8e 58       	subi	r24, 0x8E	; 142
    2f06:	9d 4c       	sbci	r25, 0xCD	; 205
    2f08:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vListInsertEnd>
    2f0c:	e0 91 9e 32 	lds	r30, 0x329E	; 0x80329e <pxCurrentTCB>
    2f10:	f0 91 9f 32 	lds	r31, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
    2f14:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f16:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f18:	98 17       	cp	r25, r24
    2f1a:	70 f0       	brcs	.+28     	; 0x2f38 <xTaskResumeAll+0x9e>
    2f1c:	cc 24       	eor	r12, r12
    2f1e:	c3 94       	inc	r12
    2f20:	0b c0       	rjmp	.+22     	; 0x2f38 <xTaskResumeAll+0x9e>
    2f22:	c1 2c       	mov	r12, r1
    2f24:	0f 2e       	mov	r0, r31
    2f26:	fd e4       	ldi	r31, 0x4D	; 77
    2f28:	ef 2e       	mov	r14, r31
    2f2a:	f2 e3       	ldi	r31, 0x32	; 50
    2f2c:	ff 2e       	mov	r15, r31
    2f2e:	f0 2d       	mov	r31, r0
    2f30:	0f 2e       	mov	r0, r31
    2f32:	fb e0       	ldi	r31, 0x0B	; 11
    2f34:	df 2e       	mov	r13, r31
    2f36:	f0 2d       	mov	r31, r0
    2f38:	f7 01       	movw	r30, r14
    2f3a:	80 81       	ld	r24, Z
    2f3c:	81 11       	cpse	r24, r1
    2f3e:	c6 cf       	rjmp	.-116    	; 0x2ecc <xTaskResumeAll+0x32>
    2f40:	80 91 41 32 	lds	r24, 0x3241	; 0x803241 <uxMissedTicks>
    2f44:	88 23       	and	r24, r24
    2f46:	81 f0       	breq	.+32     	; 0x2f68 <xTaskResumeAll+0xce>
    2f48:	80 91 41 32 	lds	r24, 0x3241	; 0x803241 <uxMissedTicks>
    2f4c:	88 23       	and	r24, r24
    2f4e:	99 f0       	breq	.+38     	; 0x2f76 <xTaskResumeAll+0xdc>
    2f50:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <vTaskIncrementTick>
    2f54:	80 91 41 32 	lds	r24, 0x3241	; 0x803241 <uxMissedTicks>
    2f58:	81 50       	subi	r24, 0x01	; 1
    2f5a:	80 93 41 32 	sts	0x3241, r24	; 0x803241 <uxMissedTicks>
    2f5e:	80 91 41 32 	lds	r24, 0x3241	; 0x803241 <uxMissedTicks>
    2f62:	81 11       	cpse	r24, r1
    2f64:	f5 cf       	rjmp	.-22     	; 0x2f50 <xTaskResumeAll+0xb6>
    2f66:	07 c0       	rjmp	.+14     	; 0x2f76 <xTaskResumeAll+0xdc>
    2f68:	f1 e0       	ldi	r31, 0x01	; 1
    2f6a:	cf 16       	cp	r12, r31
    2f6c:	21 f0       	breq	.+8      	; 0x2f76 <xTaskResumeAll+0xdc>
    2f6e:	80 91 40 32 	lds	r24, 0x3240	; 0x803240 <xMissedYield>
    2f72:	81 30       	cpi	r24, 0x01	; 1
    2f74:	41 f4       	brne	.+16     	; 0x2f86 <xTaskResumeAll+0xec>
    2f76:	10 92 40 32 	sts	0x3240, r1	; 0x803240 <xMissedYield>
    2f7a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <vPortYield>
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	03 c0       	rjmp	.+6      	; 0x2f88 <xTaskResumeAll+0xee>
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	01 c0       	rjmp	.+2      	; 0x2f88 <xTaskResumeAll+0xee>
    2f86:	80 e0       	ldi	r24, 0x00	; 0
    2f88:	0f 90       	pop	r0
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	df 91       	pop	r29
    2f8e:	cf 91       	pop	r28
    2f90:	1f 91       	pop	r17
    2f92:	0f 91       	pop	r16
    2f94:	ff 90       	pop	r15
    2f96:	ef 90       	pop	r14
    2f98:	df 90       	pop	r13
    2f9a:	cf 90       	pop	r12
    2f9c:	08 95       	ret

00002f9e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    2f9e:	cf 92       	push	r12
    2fa0:	df 92       	push	r13
    2fa2:	ef 92       	push	r14
    2fa4:	ff 92       	push	r15
    2fa6:	6b 01       	movw	r12, r22
    2fa8:	7c 01       	movw	r14, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    2faa:	67 2b       	or	r22, r23
    2fac:	68 2b       	or	r22, r24
    2fae:	69 2b       	or	r22, r25
    2fb0:	e9 f0       	breq	.+58     	; 0x2fec <vTaskDelay+0x4e>
		{
			vTaskSuspendAll();
    2fb2:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2fb6:	80 91 46 32 	lds	r24, 0x3246	; 0x803246 <xTickCount>
    2fba:	90 91 47 32 	lds	r25, 0x3247	; 0x803247 <xTickCount+0x1>
    2fbe:	a0 91 48 32 	lds	r26, 0x3248	; 0x803248 <xTickCount+0x2>
    2fc2:	b0 91 49 32 	lds	r27, 0x3249	; 0x803249 <xTickCount+0x3>
    2fc6:	c8 0e       	add	r12, r24
    2fc8:	d9 1e       	adc	r13, r25
    2fca:	ea 1e       	adc	r14, r26
    2fcc:	fb 1e       	adc	r15, r27

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2fce:	80 91 9e 32 	lds	r24, 0x329E	; 0x80329e <pxCurrentTCB>
    2fd2:	90 91 9f 32 	lds	r25, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
    2fd6:	02 96       	adiw	r24, 0x02	; 2
    2fd8:	0e 94 14 10 	call	0x2028	; 0x2028 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2fdc:	c7 01       	movw	r24, r14
    2fde:	b6 01       	movw	r22, r12
    2fe0:	0e 94 9a 14 	call	0x2934	; 0x2934 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    2fe4:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2fe8:	81 11       	cpse	r24, r1
    2fea:	02 c0       	rjmp	.+4      	; 0x2ff0 <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    2fec:	0e 94 ee 10 	call	0x21dc	; 0x21dc <vPortYield>
		}
	}
    2ff0:	ff 90       	pop	r15
    2ff2:	ef 90       	pop	r14
    2ff4:	df 90       	pop	r13
    2ff6:	cf 90       	pop	r12
    2ff8:	08 95       	ret

00002ffa <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    2ffa:	80 91 42 32 	lds	r24, 0x3242	; 0x803242 <uxSchedulerSuspended>
    2ffe:	81 11       	cpse	r24, r1
    3000:	0c c0       	rjmp	.+24     	; 0x301a <vTaskSwitchContext+0x20>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3002:	e0 91 44 32 	lds	r30, 0x3244	; 0x803244 <uxTopReadyPriority>
    3006:	4b e0       	ldi	r20, 0x0B	; 11
    3008:	e4 9f       	mul	r30, r20
    300a:	f0 01       	movw	r30, r0
    300c:	11 24       	eor	r1, r1
    300e:	ee 58       	subi	r30, 0x8E	; 142
    3010:	fd 4c       	sbci	r31, 0xCD	; 205
    3012:	80 81       	ld	r24, Z
    3014:	88 23       	and	r24, r24
    3016:	29 f0       	breq	.+10     	; 0x3022 <vTaskSwitchContext+0x28>
    3018:	14 c0       	rjmp	.+40     	; 0x3042 <vTaskSwitchContext+0x48>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	80 93 40 32 	sts	0x3240, r24	; 0x803240 <xMissedYield>
    3020:	08 95       	ret
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3022:	9b e0       	ldi	r25, 0x0B	; 11
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    3024:	80 91 44 32 	lds	r24, 0x3244	; 0x803244 <uxTopReadyPriority>
    3028:	81 50       	subi	r24, 0x01	; 1
    302a:	80 93 44 32 	sts	0x3244, r24	; 0x803244 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    302e:	e0 91 44 32 	lds	r30, 0x3244	; 0x803244 <uxTopReadyPriority>
    3032:	9e 9f       	mul	r25, r30
    3034:	f0 01       	movw	r30, r0
    3036:	11 24       	eor	r1, r1
    3038:	ee 58       	subi	r30, 0x8E	; 142
    303a:	fd 4c       	sbci	r31, 0xCD	; 205
    303c:	80 81       	ld	r24, Z
    303e:	88 23       	and	r24, r24
    3040:	89 f3       	breq	.-30     	; 0x3024 <vTaskSwitchContext+0x2a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3042:	80 91 44 32 	lds	r24, 0x3244	; 0x803244 <uxTopReadyPriority>
    3046:	28 2f       	mov	r18, r24
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	4b e0       	ldi	r20, 0x0B	; 11
    304c:	84 9f       	mul	r24, r20
    304e:	c0 01       	movw	r24, r0
    3050:	11 24       	eor	r1, r1
    3052:	dc 01       	movw	r26, r24
    3054:	ae 58       	subi	r26, 0x8E	; 142
    3056:	bd 4c       	sbci	r27, 0xCD	; 205
    3058:	11 96       	adiw	r26, 0x01	; 1
    305a:	ed 91       	ld	r30, X+
    305c:	fc 91       	ld	r31, X
    305e:	12 97       	sbiw	r26, 0x02	; 2
    3060:	04 80       	ldd	r0, Z+4	; 0x04
    3062:	f5 81       	ldd	r31, Z+5	; 0x05
    3064:	e0 2d       	mov	r30, r0
    3066:	11 96       	adiw	r26, 0x01	; 1
    3068:	ed 93       	st	X+, r30
    306a:	fc 93       	st	X, r31
    306c:	12 97       	sbiw	r26, 0x02	; 2
    306e:	8b 58       	subi	r24, 0x8B	; 139
    3070:	9d 4c       	sbci	r25, 0xCD	; 205
    3072:	e8 17       	cp	r30, r24
    3074:	f9 07       	cpc	r31, r25
    3076:	61 f4       	brne	.+24     	; 0x3090 <vTaskSwitchContext+0x96>
    3078:	84 81       	ldd	r24, Z+4	; 0x04
    307a:	95 81       	ldd	r25, Z+5	; 0x05
    307c:	4b e0       	ldi	r20, 0x0B	; 11
    307e:	42 9f       	mul	r20, r18
    3080:	f0 01       	movw	r30, r0
    3082:	43 9f       	mul	r20, r19
    3084:	f0 0d       	add	r31, r0
    3086:	11 24       	eor	r1, r1
    3088:	ee 58       	subi	r30, 0x8E	; 142
    308a:	fd 4c       	sbci	r31, 0xCD	; 205
    308c:	81 83       	std	Z+1, r24	; 0x01
    308e:	92 83       	std	Z+2, r25	; 0x02
    3090:	8b e0       	ldi	r24, 0x0B	; 11
    3092:	82 9f       	mul	r24, r18
    3094:	f0 01       	movw	r30, r0
    3096:	83 9f       	mul	r24, r19
    3098:	f0 0d       	add	r31, r0
    309a:	11 24       	eor	r1, r1
    309c:	ee 58       	subi	r30, 0x8E	; 142
    309e:	fd 4c       	sbci	r31, 0xCD	; 205
    30a0:	01 80       	ldd	r0, Z+1	; 0x01
    30a2:	f2 81       	ldd	r31, Z+2	; 0x02
    30a4:	e0 2d       	mov	r30, r0
    30a6:	80 85       	ldd	r24, Z+8	; 0x08
    30a8:	91 85       	ldd	r25, Z+9	; 0x09
    30aa:	80 93 9e 32 	sts	0x329E, r24	; 0x80329e <pxCurrentTCB>
    30ae:	90 93 9f 32 	sts	0x329F, r25	; 0x80329f <pxCurrentTCB+0x1>
    30b2:	08 95       	ret

000030b4 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    30b4:	cf 92       	push	r12
    30b6:	df 92       	push	r13
    30b8:	ef 92       	push	r14
    30ba:	ff 92       	push	r15
    30bc:	6a 01       	movw	r12, r20
    30be:	7b 01       	movw	r14, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    30c0:	60 91 9e 32 	lds	r22, 0x329E	; 0x80329e <pxCurrentTCB>
    30c4:	70 91 9f 32 	lds	r23, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
    30c8:	62 5f       	subi	r22, 0xF2	; 242
    30ca:	7f 4f       	sbci	r23, 0xFF	; 255
    30cc:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    30d0:	80 91 9e 32 	lds	r24, 0x329E	; 0x80329e <pxCurrentTCB>
    30d4:	90 91 9f 32 	lds	r25, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
    30d8:	02 96       	adiw	r24, 0x02	; 2
    30da:	0e 94 14 10 	call	0x2028	; 0x2028 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    30de:	80 91 46 32 	lds	r24, 0x3246	; 0x803246 <xTickCount>
    30e2:	90 91 47 32 	lds	r25, 0x3247	; 0x803247 <xTickCount+0x1>
    30e6:	a0 91 48 32 	lds	r26, 0x3248	; 0x803248 <xTickCount+0x2>
    30ea:	b0 91 49 32 	lds	r27, 0x3249	; 0x803249 <xTickCount+0x3>
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    30ee:	bc 01       	movw	r22, r24
    30f0:	cd 01       	movw	r24, r26
    30f2:	6c 0d       	add	r22, r12
    30f4:	7d 1d       	adc	r23, r13
    30f6:	8e 1d       	adc	r24, r14
    30f8:	9f 1d       	adc	r25, r15
    30fa:	0e 94 9a 14 	call	0x2934	; 0x2934 <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    30fe:	ff 90       	pop	r15
    3100:	ef 90       	pop	r14
    3102:	df 90       	pop	r13
    3104:	cf 90       	pop	r12
    3106:	08 95       	ret

00003108 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3108:	0f 93       	push	r16
    310a:	1f 93       	push	r17
    310c:	cf 93       	push	r28
    310e:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3110:	dc 01       	movw	r26, r24
    3112:	17 96       	adiw	r26, 0x07	; 7
    3114:	ed 91       	ld	r30, X+
    3116:	fc 91       	ld	r31, X
    3118:	18 97       	sbiw	r26, 0x08	; 8
    311a:	c0 85       	ldd	r28, Z+8	; 0x08
    311c:	d1 85       	ldd	r29, Z+9	; 0x09
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    311e:	8e 01       	movw	r16, r28
    3120:	02 5f       	subi	r16, 0xF2	; 242
    3122:	1f 4f       	sbci	r17, 0xFF	; 255
    3124:	c8 01       	movw	r24, r16
    3126:	0e 94 14 10 	call	0x2028	; 0x2028 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    312a:	80 91 42 32 	lds	r24, 0x3242	; 0x803242 <uxSchedulerSuspended>
    312e:	81 11       	cpse	r24, r1
    3130:	16 c0       	rjmp	.+44     	; 0x315e <xTaskRemoveFromEventList+0x56>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3132:	0c 50       	subi	r16, 0x0C	; 12
    3134:	11 09       	sbc	r17, r1
    3136:	c8 01       	movw	r24, r16
    3138:	0e 94 14 10 	call	0x2028	; 0x2028 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    313c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    313e:	90 91 44 32 	lds	r25, 0x3244	; 0x803244 <uxTopReadyPriority>
    3142:	98 17       	cp	r25, r24
    3144:	10 f4       	brcc	.+4      	; 0x314a <xTaskRemoveFromEventList+0x42>
    3146:	80 93 44 32 	sts	0x3244, r24	; 0x803244 <uxTopReadyPriority>
    314a:	bb e0       	ldi	r27, 0x0B	; 11
    314c:	8b 9f       	mul	r24, r27
    314e:	c0 01       	movw	r24, r0
    3150:	11 24       	eor	r1, r1
    3152:	b8 01       	movw	r22, r16
    3154:	8e 58       	subi	r24, 0x8E	; 142
    3156:	9d 4c       	sbci	r25, 0xCD	; 205
    3158:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vListInsertEnd>
    315c:	05 c0       	rjmp	.+10     	; 0x3168 <xTaskRemoveFromEventList+0x60>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    315e:	b8 01       	movw	r22, r16
    3160:	8d e4       	ldi	r24, 0x4D	; 77
    3162:	92 e3       	ldi	r25, 0x32	; 50
    3164:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3168:	e0 91 9e 32 	lds	r30, 0x329E	; 0x80329e <pxCurrentTCB>
    316c:	f0 91 9f 32 	lds	r31, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	2a 8d       	ldd	r18, Y+26	; 0x1a
    3174:	92 8d       	ldd	r25, Z+26	; 0x1a
    3176:	29 17       	cp	r18, r25
    3178:	08 f4       	brcc	.+2      	; 0x317c <xTaskRemoveFromEventList+0x74>
    317a:	80 e0       	ldi	r24, 0x00	; 0
}
    317c:	df 91       	pop	r29
    317e:	cf 91       	pop	r28
    3180:	1f 91       	pop	r17
    3182:	0f 91       	pop	r16
    3184:	08 95       	ret

00003186 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3186:	20 91 3f 32 	lds	r18, 0x323F	; 0x80323f <xNumOfOverflows>
    318a:	fc 01       	movw	r30, r24
    318c:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    318e:	40 91 46 32 	lds	r20, 0x3246	; 0x803246 <xTickCount>
    3192:	50 91 47 32 	lds	r21, 0x3247	; 0x803247 <xTickCount+0x1>
    3196:	60 91 48 32 	lds	r22, 0x3248	; 0x803248 <xTickCount+0x2>
    319a:	70 91 49 32 	lds	r23, 0x3249	; 0x803249 <xTickCount+0x3>
    319e:	41 83       	std	Z+1, r20	; 0x01
    31a0:	52 83       	std	Z+2, r21	; 0x02
    31a2:	63 83       	std	Z+3, r22	; 0x03
    31a4:	74 83       	std	Z+4, r23	; 0x04
    31a6:	08 95       	ret

000031a8 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    31a8:	8f 92       	push	r8
    31aa:	9f 92       	push	r9
    31ac:	af 92       	push	r10
    31ae:	bf 92       	push	r11
    31b0:	cf 92       	push	r12
    31b2:	df 92       	push	r13
    31b4:	ef 92       	push	r14
    31b6:	ff 92       	push	r15
    31b8:	0f 93       	push	r16
    31ba:	1f 93       	push	r17
    31bc:	cf 93       	push	r28
    31be:	df 93       	push	r29
    31c0:	fc 01       	movw	r30, r24
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    31c2:	0f b6       	in	r0, 0x3f	; 63
    31c4:	f8 94       	cli
    31c6:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    31c8:	80 91 3f 32 	lds	r24, 0x323F	; 0x80323f <xNumOfOverflows>
    31cc:	90 81       	ld	r25, Z
    31ce:	98 17       	cp	r25, r24
    31d0:	89 f0       	breq	.+34     	; 0x31f4 <xTaskCheckForTimeOut+0x4c>
    31d2:	80 91 46 32 	lds	r24, 0x3246	; 0x803246 <xTickCount>
    31d6:	90 91 47 32 	lds	r25, 0x3247	; 0x803247 <xTickCount+0x1>
    31da:	a0 91 48 32 	lds	r26, 0x3248	; 0x803248 <xTickCount+0x2>
    31de:	b0 91 49 32 	lds	r27, 0x3249	; 0x803249 <xTickCount+0x3>
    31e2:	01 81       	ldd	r16, Z+1	; 0x01
    31e4:	12 81       	ldd	r17, Z+2	; 0x02
    31e6:	23 81       	ldd	r18, Z+3	; 0x03
    31e8:	34 81       	ldd	r19, Z+4	; 0x04
    31ea:	80 17       	cp	r24, r16
    31ec:	91 07       	cpc	r25, r17
    31ee:	a2 07       	cpc	r26, r18
    31f0:	b3 07       	cpc	r27, r19
    31f2:	a8 f5       	brcc	.+106    	; 0x325e <xTaskCheckForTimeOut+0xb6>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    31f4:	80 91 46 32 	lds	r24, 0x3246	; 0x803246 <xTickCount>
    31f8:	90 91 47 32 	lds	r25, 0x3247	; 0x803247 <xTickCount+0x1>
    31fc:	a0 91 48 32 	lds	r26, 0x3248	; 0x803248 <xTickCount+0x2>
    3200:	b0 91 49 32 	lds	r27, 0x3249	; 0x803249 <xTickCount+0x3>
    3204:	c1 80       	ldd	r12, Z+1	; 0x01
    3206:	d2 80       	ldd	r13, Z+2	; 0x02
    3208:	e3 80       	ldd	r14, Z+3	; 0x03
    320a:	f4 80       	ldd	r15, Z+4	; 0x04
    320c:	eb 01       	movw	r28, r22
    320e:	08 81       	ld	r16, Y
    3210:	19 81       	ldd	r17, Y+1	; 0x01
    3212:	2a 81       	ldd	r18, Y+2	; 0x02
    3214:	3b 81       	ldd	r19, Y+3	; 0x03
    3216:	8c 19       	sub	r24, r12
    3218:	9d 09       	sbc	r25, r13
    321a:	ae 09       	sbc	r26, r14
    321c:	bf 09       	sbc	r27, r15
    321e:	80 17       	cp	r24, r16
    3220:	91 07       	cpc	r25, r17
    3222:	a2 07       	cpc	r26, r18
    3224:	b3 07       	cpc	r27, r19
    3226:	e8 f4       	brcc	.+58     	; 0x3262 <xTaskCheckForTimeOut+0xba>
    3228:	cf 01       	movw	r24, r30
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    322a:	80 90 46 32 	lds	r8, 0x3246	; 0x803246 <xTickCount>
    322e:	90 90 47 32 	lds	r9, 0x3247	; 0x803247 <xTickCount+0x1>
    3232:	a0 90 48 32 	lds	r10, 0x3248	; 0x803248 <xTickCount+0x2>
    3236:	b0 90 49 32 	lds	r11, 0x3249	; 0x803249 <xTickCount+0x3>
    323a:	b5 01       	movw	r22, r10
    323c:	a4 01       	movw	r20, r8
    323e:	4c 19       	sub	r20, r12
    3240:	5d 09       	sbc	r21, r13
    3242:	6e 09       	sbc	r22, r14
    3244:	7f 09       	sbc	r23, r15
    3246:	04 1b       	sub	r16, r20
    3248:	15 0b       	sbc	r17, r21
    324a:	26 0b       	sbc	r18, r22
    324c:	37 0b       	sbc	r19, r23
    324e:	08 83       	st	Y, r16
    3250:	19 83       	std	Y+1, r17	; 0x01
    3252:	2a 83       	std	Y+2, r18	; 0x02
    3254:	3b 83       	std	Y+3, r19	; 0x03
			vTaskSetTimeOutState( pxTimeOut );
    3256:	0e 94 c3 18 	call	0x3186	; 0x3186 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	03 c0       	rjmp	.+6      	; 0x3264 <xTaskCheckForTimeOut+0xbc>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	01 c0       	rjmp	.+2      	; 0x3264 <xTaskCheckForTimeOut+0xbc>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    3262:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    3264:	0f 90       	pop	r0
    3266:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    3268:	df 91       	pop	r29
    326a:	cf 91       	pop	r28
    326c:	1f 91       	pop	r17
    326e:	0f 91       	pop	r16
    3270:	ff 90       	pop	r15
    3272:	ef 90       	pop	r14
    3274:	df 90       	pop	r13
    3276:	cf 90       	pop	r12
    3278:	bf 90       	pop	r11
    327a:	af 90       	pop	r10
    327c:	9f 90       	pop	r9
    327e:	8f 90       	pop	r8
    3280:	08 95       	ret

00003282 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	80 93 40 32 	sts	0x3240, r24	; 0x803240 <xMissedYield>
    3288:	08 95       	ret

0000328a <uxTaskGetStackHighWaterMark>:
	{
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    328a:	00 97       	sbiw	r24, 0x00	; 0
    328c:	21 f4       	brne	.+8      	; 0x3296 <uxTaskGetStackHighWaterMark+0xc>
    328e:	80 91 9e 32 	lds	r24, 0x329E	; 0x80329e <pxCurrentTCB>
    3292:	90 91 9f 32 	lds	r25, 0x329F	; 0x80329f <pxCurrentTCB+0x1>

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    3296:	dc 01       	movw	r26, r24
    3298:	5b 96       	adiw	r26, 0x1b	; 27
    329a:	ed 91       	ld	r30, X+
    329c:	fc 91       	ld	r31, X
    329e:	5c 97       	sbiw	r26, 0x1c	; 28

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    32a0:	80 81       	ld	r24, Z
    32a2:	81 31       	cpi	r24, 0x11	; 17
    32a4:	41 f4       	brne	.+16     	; 0x32b6 <uxTaskGetStackHighWaterMark+0x2c>
    32a6:	31 96       	adiw	r30, 0x01	; 1
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	90 e0       	ldi	r25, 0x00	; 0
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
    32ac:	01 96       	adiw	r24, 0x01	; 1

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    32ae:	21 91       	ld	r18, Z+
    32b0:	21 31       	cpi	r18, 0x11	; 17
    32b2:	e1 f3       	breq	.-8      	; 0x32ac <uxTaskGetStackHighWaterMark+0x22>
    32b4:	08 95       	ret

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
    32b6:	80 e0       	ldi	r24, 0x00	; 0
    32b8:	90 e0       	ldi	r25, 0x00	; 0
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    32ba:	08 95       	ret

000032bc <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    32bc:	80 91 9e 32 	lds	r24, 0x329E	; 0x80329e <pxCurrentTCB>
    32c0:	90 91 9f 32 	lds	r25, 0x329F	; 0x80329f <pxCurrentTCB+0x1>

		return xReturn;
	}
    32c4:	08 95       	ret

000032c6 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    32c6:	0f 93       	push	r16
    32c8:	1f 93       	push	r17
    32ca:	cf 93       	push	r28
    32cc:	df 93       	push	r29
    32ce:	fc 01       	movw	r30, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    32d0:	22 8d       	ldd	r18, Z+26	; 0x1a
    32d2:	a0 91 9e 32 	lds	r26, 0x329E	; 0x80329e <pxCurrentTCB>
    32d6:	b0 91 9f 32 	lds	r27, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
    32da:	5a 96       	adiw	r26, 0x1a	; 26
    32dc:	8c 91       	ld	r24, X
    32de:	28 17       	cp	r18, r24
    32e0:	08 f0       	brcs	.+2      	; 0x32e4 <vTaskPriorityInherit+0x1e>
    32e2:	41 c0       	rjmp	.+130    	; 0x3366 <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    32e4:	a0 91 9e 32 	lds	r26, 0x329E	; 0x80329e <pxCurrentTCB>
    32e8:	b0 91 9f 32 	lds	r27, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
    32ec:	5a 96       	adiw	r26, 0x1a	; 26
    32ee:	3c 91       	ld	r19, X
    32f0:	84 e0       	ldi	r24, 0x04	; 4
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	a0 e0       	ldi	r26, 0x00	; 0
    32f6:	b0 e0       	ldi	r27, 0x00	; 0
    32f8:	83 1b       	sub	r24, r19
    32fa:	91 09       	sbc	r25, r1
    32fc:	a1 09       	sbc	r26, r1
    32fe:	b1 09       	sbc	r27, r1
    3300:	86 87       	std	Z+14, r24	; 0x0e
    3302:	97 87       	std	Z+15, r25	; 0x0f
    3304:	a0 8b       	std	Z+16, r26	; 0x10
    3306:	b1 8b       	std	Z+17, r27	; 0x11

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3308:	8b e0       	ldi	r24, 0x0B	; 11
    330a:	28 9f       	mul	r18, r24
    330c:	90 01       	movw	r18, r0
    330e:	11 24       	eor	r1, r1
    3310:	2e 58       	subi	r18, 0x8E	; 142
    3312:	3d 4c       	sbci	r19, 0xCD	; 205
    3314:	84 85       	ldd	r24, Z+12	; 0x0c
    3316:	95 85       	ldd	r25, Z+13	; 0x0d
    3318:	82 17       	cp	r24, r18
    331a:	93 07       	cpc	r25, r19
    331c:	e9 f4       	brne	.+58     	; 0x3358 <vTaskPriorityInherit+0x92>
    331e:	8f 01       	movw	r16, r30
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    3320:	ef 01       	movw	r28, r30
    3322:	22 96       	adiw	r28, 0x02	; 2
    3324:	ce 01       	movw	r24, r28
    3326:	0e 94 14 10 	call	0x2028	; 0x2028 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    332a:	e0 91 9e 32 	lds	r30, 0x329E	; 0x80329e <pxCurrentTCB>
    332e:	f0 91 9f 32 	lds	r31, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
    3332:	82 8d       	ldd	r24, Z+26	; 0x1a
    3334:	f8 01       	movw	r30, r16
    3336:	82 8f       	std	Z+26, r24	; 0x1a
				prvAddTaskToReadyQueue( pxTCB );
    3338:	90 91 44 32 	lds	r25, 0x3244	; 0x803244 <uxTopReadyPriority>
    333c:	98 17       	cp	r25, r24
    333e:	10 f4       	brcc	.+4      	; 0x3344 <vTaskPriorityInherit+0x7e>
    3340:	80 93 44 32 	sts	0x3244, r24	; 0x803244 <uxTopReadyPriority>
    3344:	fb e0       	ldi	r31, 0x0B	; 11
    3346:	8f 9f       	mul	r24, r31
    3348:	c0 01       	movw	r24, r0
    334a:	11 24       	eor	r1, r1
    334c:	be 01       	movw	r22, r28
    334e:	8e 58       	subi	r24, 0x8E	; 142
    3350:	9d 4c       	sbci	r25, 0xCD	; 205
    3352:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vListInsertEnd>
    3356:	07 c0       	rjmp	.+14     	; 0x3366 <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3358:	a0 91 9e 32 	lds	r26, 0x329E	; 0x80329e <pxCurrentTCB>
    335c:	b0 91 9f 32 	lds	r27, 0x329F	; 0x80329f <pxCurrentTCB+0x1>
    3360:	5a 96       	adiw	r26, 0x1a	; 26
    3362:	8c 91       	ld	r24, X
    3364:	82 8f       	std	Z+26, r24	; 0x1a
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    3366:	df 91       	pop	r29
    3368:	cf 91       	pop	r28
    336a:	1f 91       	pop	r17
    336c:	0f 91       	pop	r16
    336e:	08 95       	ret

00003370 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    3370:	0f 93       	push	r16
    3372:	1f 93       	push	r17
    3374:	cf 93       	push	r28
    3376:	df 93       	push	r29
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    3378:	00 97       	sbiw	r24, 0x00	; 0
    337a:	49 f1       	breq	.+82     	; 0x33ce <vTaskPriorityDisinherit+0x5e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    337c:	fc 01       	movw	r30, r24
    337e:	32 8d       	ldd	r19, Z+26	; 0x1a
    3380:	27 a1       	ldd	r18, Z+39	; 0x27
    3382:	32 17       	cp	r19, r18
    3384:	21 f1       	breq	.+72     	; 0x33ce <vTaskPriorityDisinherit+0x5e>
    3386:	ec 01       	movw	r28, r24
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    3388:	8c 01       	movw	r16, r24
    338a:	0e 5f       	subi	r16, 0xFE	; 254
    338c:	1f 4f       	sbci	r17, 0xFF	; 255
    338e:	c8 01       	movw	r24, r16
    3390:	0e 94 14 10 	call	0x2028	; 0x2028 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    3394:	8f a1       	ldd	r24, Y+39	; 0x27
    3396:	8a 8f       	std	Y+26, r24	; 0x1a
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    3398:	44 e0       	ldi	r20, 0x04	; 4
    339a:	50 e0       	ldi	r21, 0x00	; 0
    339c:	60 e0       	ldi	r22, 0x00	; 0
    339e:	70 e0       	ldi	r23, 0x00	; 0
    33a0:	48 1b       	sub	r20, r24
    33a2:	51 09       	sbc	r21, r1
    33a4:	61 09       	sbc	r22, r1
    33a6:	71 09       	sbc	r23, r1
    33a8:	4e 87       	std	Y+14, r20	; 0x0e
    33aa:	5f 87       	std	Y+15, r21	; 0x0f
    33ac:	68 8b       	std	Y+16, r22	; 0x10
    33ae:	79 8b       	std	Y+17, r23	; 0x11
				prvAddTaskToReadyQueue( pxTCB );
    33b0:	90 91 44 32 	lds	r25, 0x3244	; 0x803244 <uxTopReadyPriority>
    33b4:	98 17       	cp	r25, r24
    33b6:	10 f4       	brcc	.+4      	; 0x33bc <vTaskPriorityDisinherit+0x4c>
    33b8:	80 93 44 32 	sts	0x3244, r24	; 0x803244 <uxTopReadyPriority>
    33bc:	fb e0       	ldi	r31, 0x0B	; 11
    33be:	8f 9f       	mul	r24, r31
    33c0:	c0 01       	movw	r24, r0
    33c2:	11 24       	eor	r1, r1
    33c4:	b8 01       	movw	r22, r16
    33c6:	8e 58       	subi	r24, 0x8E	; 142
    33c8:	9d 4c       	sbci	r25, 0xCD	; 205
    33ca:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vListInsertEnd>
			}
		}
	}
    33ce:	df 91       	pop	r29
    33d0:	cf 91       	pop	r28
    33d2:	1f 91       	pop	r17
    33d4:	0f 91       	pop	r16
    33d6:	08 95       	ret

000033d8 <_ZN8frt_task22_call_users_run_methodEPS_>:
 *  the scheduler.
 *  @param p_task A pointer to the task (this task) whose run method is to be called
 */

void frt_task::_call_users_run_method (frt_task* p_task)
{
    33d8:	ec 01       	movw	r28, r24
	// If we're not using setup() and loop(), call the user's run() function instead.
	// This version is more similar to the typical RTOS implementation but not quite
	// as easy to use for execution time profiling
	#else
		// This is where the user's run() method is actually called
		p_task->run ();
    33da:	e8 81       	ld	r30, Y
    33dc:	f9 81       	ldd	r31, Y+1	; 0x01
    33de:	01 90       	ld	r0, Z+
    33e0:	f0 81       	ld	r31, Z
    33e2:	e0 2d       	mov	r30, r0
    33e4:	19 95       	eicall
		void* temp_handle = p_task->handle;
		p_task->handle = 0;
		vTaskDelete (temp_handle);
	// If task deletion is disabled, set this task's handle to 0 but don't delete task
	#else
		p_task->handle = 0;
    33e6:	1a 82       	std	Y+2, r1	; 0x02
    33e8:	1b 82       	std	Y+3, r1	; 0x03

	// If task deletion is not enabled, we get here if the task run method has exited 
	// (which it shouldn't have, though). 
	for (;;)
	{
		vTaskDelay (portMAX_DELAY);
    33ea:	6f ef       	ldi	r22, 0xFF	; 255
    33ec:	7f ef       	ldi	r23, 0xFF	; 255
    33ee:	cb 01       	movw	r24, r22
    33f0:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <vTaskDelay>
    33f4:	fa cf       	rjmp	.-12     	; 0x33ea <_ZN8frt_task22_call_users_run_methodEPS_+0x12>

000033f6 <_ZN8frt_task13transition_toEh>:
 *  help with debugging.
 *  @param new_state The state to which we will transition
 */
void frt_task::transition_to (uint8_t new_state)
{
	state = new_state;
    33f6:	fc 01       	movw	r30, r24
    33f8:	64 87       	std	Z+12, r22	; 0x0c
			*p_serial << tick_res_time () << ":" << (char*)(pcTaskGetTaskName (handle))
					<< ":" << previous_state << PMS ("->") << state << endl;
		}
	#endif // TRANSITION_TRACE

	previous_state = state;
    33fa:	65 87       	std	Z+13, r22	; 0x0d
    33fc:	08 95       	ret

000033fe <_ZN8frt_taskC1EPKchjP8emstream>:
 *                      (default: configMINIMAL_STACK_SIZE)
 *  @param p_ser_dev Pointer to a serial device (port, radio, SD card, etc.) which can
 *                   be used by this task to communicate (default: NULL)
 */

frt_task::frt_task (const char* a_name, 
    33fe:	4f 92       	push	r4
    3400:	5f 92       	push	r5
    3402:	6f 92       	push	r6
    3404:	7f 92       	push	r7
    3406:	8f 92       	push	r8
    3408:	9f 92       	push	r9
    340a:	af 92       	push	r10
    340c:	bf 92       	push	r11
    340e:	cf 92       	push	r12
    3410:	df 92       	push	r13
    3412:	ef 92       	push	r14
    3414:	ff 92       	push	r15
    3416:	0f 93       	push	r16
    3418:	1f 93       	push	r17
    341a:	cf 93       	push	r28
    341c:	df 93       	push	r29
    341e:	cd b7       	in	r28, 0x3d	; 61
    3420:	de b7       	in	r29, 0x3e	; 62
    3422:	2a 97       	sbiw	r28, 0x0a	; 10
    3424:	cd bf       	out	0x3d, r28	; 61
    3426:	de bf       	out	0x3e, r29	; 62
    3428:	4c 01       	movw	r8, r24
    342a:	29 01       	movw	r4, r18
    342c:	38 01       	movw	r6, r16
					unsigned portBASE_TYPE a_priority, 
					size_t a_stack_size,
					emstream* p_ser_dev
					)
    342e:	8c e8       	ldi	r24, 0x8C	; 140
    3430:	91 e2       	ldi	r25, 0x21	; 33
    3432:	f4 01       	movw	r30, r8
    3434:	80 83       	st	Z, r24
    3436:	91 83       	std	Z+1, r25	; 0x01
	// Make sure the user doesn't send an excessively long task name to xTaskCreate()
	// by copying at most (configMAX_TASK_NAME_LEN - 1) characters and putting the
	// terminating null character at the end of the string
	char temp_name[configMAX_TASK_NAME_LEN];
	uint8_t index = 0;
	while (*a_name && index < (configMAX_TASK_NAME_LEN - 1))
    3438:	fb 01       	movw	r30, r22
    343a:	80 81       	ld	r24, Z
    343c:	88 23       	and	r24, r24
    343e:	69 f0       	breq	.+26     	; 0x345a <_ZN8frt_taskC1EPKchjP8emstream+0x5c>
    3440:	de 01       	movw	r26, r28
    3442:	11 96       	adiw	r26, 0x01	; 1
    3444:	31 96       	adiw	r30, 0x01	; 1
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	02 c0       	rjmp	.+4      	; 0x344e <_ZN8frt_taskC1EPKchjP8emstream+0x50>
    344a:	99 30       	cpi	r25, 0x09	; 9
    344c:	39 f0       	breq	.+14     	; 0x345c <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
	{
		temp_name[index++] = *a_name++;
    344e:	9f 5f       	subi	r25, 0xFF	; 255
    3450:	8d 93       	st	X+, r24
	// Make sure the user doesn't send an excessively long task name to xTaskCreate()
	// by copying at most (configMAX_TASK_NAME_LEN - 1) characters and putting the
	// terminating null character at the end of the string
	char temp_name[configMAX_TASK_NAME_LEN];
	uint8_t index = 0;
	while (*a_name && index < (configMAX_TASK_NAME_LEN - 1))
    3452:	81 91       	ld	r24, Z+
    3454:	81 11       	cpse	r24, r1
    3456:	f9 cf       	rjmp	.-14     	; 0x344a <_ZN8frt_taskC1EPKchjP8emstream+0x4c>
    3458:	01 c0       	rjmp	.+2      	; 0x345c <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
{
	// Make sure the user doesn't send an excessively long task name to xTaskCreate()
	// by copying at most (configMAX_TASK_NAME_LEN - 1) characters and putting the
	// terminating null character at the end of the string
	char temp_name[configMAX_TASK_NAME_LEN];
	uint8_t index = 0;
    345a:	90 e0       	ldi	r25, 0x00	; 0
	while (*a_name && index < (configMAX_TASK_NAME_LEN - 1))
	{
		temp_name[index++] = *a_name++;
	}
	temp_name[index] = '\0';
    345c:	e1 e0       	ldi	r30, 0x01	; 1
    345e:	f0 e0       	ldi	r31, 0x00	; 0
    3460:	ec 0f       	add	r30, r28
    3462:	fd 1f       	adc	r31, r29
    3464:	e9 0f       	add	r30, r25
    3466:	f1 1d       	adc	r31, r1
    3468:	10 82       	st	Z, r1

	// Create the task with a call to the RTOS task creation function
	portBASE_TYPE task_status = xTaskCreate
    346a:	74 01       	movw	r14, r8
    346c:	f2 e0       	ldi	r31, 0x02	; 2
    346e:	ef 0e       	add	r14, r31
    3470:	f1 1c       	adc	r15, r1
    3472:	a1 2c       	mov	r10, r1
    3474:	b1 2c       	mov	r11, r1
    3476:	c1 2c       	mov	r12, r1
    3478:	d1 2c       	mov	r13, r1
    347a:	04 2f       	mov	r16, r20
    347c:	94 01       	movw	r18, r8
    347e:	a2 01       	movw	r20, r4
    3480:	be 01       	movw	r22, r28
    3482:	6f 5f       	subi	r22, 0xFF	; 255
    3484:	7f 4f       	sbci	r23, 0xFF	; 255
    3486:	86 e3       	ldi	r24, 0x36	; 54
    3488:	93 e0       	ldi	r25, 0x03	; 3
    348a:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <xTaskGenericCreate>
		 a_priority,                                 // Priority for the new task
		 &handle                                     // The new task's handle
		);

	// Save the serial port pointer and the total stack size
	p_serial = p_ser_dev;
    348e:	f4 01       	movw	r30, r8
    3490:	66 82       	std	Z+6, r6	; 0x06
    3492:	77 82       	std	Z+7, r7	; 0x07
	total_stack = a_stack_size;
    3494:	40 86       	std	Z+8, r4	; 0x08
    3496:	51 86       	std	Z+9, r5	; 0x09

	// Set the handles to the previously and last created tasks
	prev_task_pointer = last_created_task_pointer;
    3498:	20 91 a0 32 	lds	r18, 0x32A0	; 0x8032a0 <last_created_task_pointer>
    349c:	30 91 a1 32 	lds	r19, 0x32A1	; 0x8032a1 <last_created_task_pointer+0x1>
    34a0:	24 83       	std	Z+4, r18	; 0x04
    34a2:	35 83       	std	Z+5, r19	; 0x05
	last_created_task_pointer = this;
    34a4:	80 92 a0 32 	sts	0x32A0, r8	; 0x8032a0 <last_created_task_pointer>
    34a8:	90 92 a1 32 	sts	0x32A1, r9	; 0x8032a1 <last_created_task_pointer+0x1>

	// Initialize the finite state machine and its transition logger
	state = 0;
    34ac:	14 86       	std	Z+12, r1	; 0x0c
	previous_state = 0;
    34ae:	15 86       	std	Z+13, r1	; 0x0d

	// If stack tracing is being used, save the address of the top of the stack
	top_of_stack = ++portStackTopForTask;
    34b0:	40 90 02 33 	lds	r4, 0x3302	; 0x803302 <portStackTopForTask>
    34b4:	50 90 03 33 	lds	r5, 0x3303	; 0x803303 <portStackTopForTask+0x1>
    34b8:	ff ef       	ldi	r31, 0xFF	; 255
    34ba:	4f 1a       	sub	r4, r31
    34bc:	5f 0a       	sbc	r5, r31
    34be:	40 92 02 33 	sts	0x3302, r4	; 0x803302 <portStackTopForTask>
    34c2:	50 92 03 33 	sts	0x3303, r5	; 0x803303 <portStackTopForTask+0x1>
    34c6:	f4 01       	movw	r30, r8
    34c8:	42 86       	std	Z+10, r4	; 0x0a
    34ca:	53 86       	std	Z+11, r5	; 0x0b

	// Initialize the run counter
	runs = 0;
    34cc:	16 86       	std	Z+14, r1	; 0x0e
    34ce:	17 86       	std	Z+15, r1	; 0x0f
    34d0:	10 8a       	std	Z+16, r1	; 0x10
    34d2:	11 8a       	std	Z+17, r1	; 0x11

	// If the serial port is being used, let the user know if the task was created
	// successfully
	if (p_serial != NULL)
    34d4:	61 14       	cp	r6, r1
    34d6:	71 04       	cpc	r7, r1
    34d8:	09 f4       	brne	.+2      	; 0x34dc <_ZN8frt_taskC1EPKchjP8emstream+0xde>
    34da:	44 c0       	rjmp	.+136    	; 0x3564 <_ZN8frt_taskC1EPKchjP8emstream+0x166>
	{
		if (task_status == pdPASS)
    34dc:	81 30       	cpi	r24, 0x01	; 1
    34de:	79 f5       	brne	.+94     	; 0x353e <_ZN8frt_taskC1EPKchjP8emstream+0x140>
		{
			*p_serial << PMS ("Task ") << temp_name << PMS (" created")
    34e0:	6a e0       	ldi	r22, 0x0A	; 10
    34e2:	c3 01       	movw	r24, r6
    34e4:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    34e8:	7c 01       	movw	r14, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    34ea:	69 eb       	ldi	r22, 0xB9	; 185
    34ec:	75 e0       	ldi	r23, 0x05	; 5
    34ee:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    34f2:	be 01       	movw	r22, r28
    34f4:	6f 5f       	subi	r22, 0xFF	; 255
    34f6:	7f 4f       	sbci	r23, 0xFF	; 255
    34f8:	c7 01       	movw	r24, r14
    34fa:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    34fe:	6a e0       	ldi	r22, 0x0A	; 10
    3500:	c7 01       	movw	r24, r14
    3502:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    3506:	7c 01       	movw	r14, r24
    3508:	60 eb       	ldi	r22, 0xB0	; 176
    350a:	75 e0       	ldi	r23, 0x05	; 5
    350c:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
				<< PMS (", stack at 0x") << hex << top_of_stack << dec << endl;
    3510:	6a e0       	ldi	r22, 0x0A	; 10
    3512:	c7 01       	movw	r24, r14
    3514:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    3518:	7c 01       	movw	r14, r24
    351a:	62 ea       	ldi	r22, 0xA2	; 162
    351c:	75 e0       	ldi	r23, 0x05	; 5
    351e:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    3522:	63 e0       	ldi	r22, 0x03	; 3
    3524:	c7 01       	movw	r24, r14
    3526:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    352a:	b2 01       	movw	r22, r4
    352c:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_ZN8emstreamlsEj>
    3530:	62 e0       	ldi	r22, 0x02	; 2
    3532:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    3536:	66 e0       	ldi	r22, 0x06	; 6
    3538:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    353c:	13 c0       	rjmp	.+38     	; 0x3564 <_ZN8frt_taskC1EPKchjP8emstream+0x166>
		}
		else
		{
			*p_serial << PMS ("ERROR creating task ") << temp_name << endl;
    353e:	6a e0       	ldi	r22, 0x0A	; 10
    3540:	c3 01       	movw	r24, r6
    3542:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    3546:	4c 01       	movw	r8, r24
    3548:	6d e8       	ldi	r22, 0x8D	; 141
    354a:	75 e0       	ldi	r23, 0x05	; 5
    354c:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    3550:	be 01       	movw	r22, r28
    3552:	6f 5f       	subi	r22, 0xFF	; 255
    3554:	7f 4f       	sbci	r23, 0xFF	; 255
    3556:	c4 01       	movw	r24, r8
    3558:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    355c:	66 e0       	ldi	r22, 0x06	; 6
    355e:	c4 01       	movw	r24, r8
    3560:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
		}
	}
}
    3564:	2a 96       	adiw	r28, 0x0a	; 10
    3566:	cd bf       	out	0x3d, r28	; 61
    3568:	de bf       	out	0x3e, r29	; 62
    356a:	df 91       	pop	r29
    356c:	cf 91       	pop	r28
    356e:	1f 91       	pop	r17
    3570:	0f 91       	pop	r16
    3572:	ff 90       	pop	r15
    3574:	ef 90       	pop	r14
    3576:	df 90       	pop	r13
    3578:	cf 90       	pop	r12
    357a:	bf 90       	pop	r11
    357c:	af 90       	pop	r10
    357e:	9f 90       	pop	r9
    3580:	8f 90       	pop	r8
    3582:	7f 90       	pop	r7
    3584:	6f 90       	pop	r6
    3586:	5f 90       	pop	r5
    3588:	4f 90       	pop	r4
    358a:	08 95       	ret

0000358c <_ZN8frt_task19print_stack_in_listEP8emstream>:
 *  stacks. The idle task's stack is printed separately afterwards. 
 *  @param ser_device The serial device to which each task prints its stack
 */

void frt_task::print_stack_in_list (emstream* ser_device)
{
    358c:	cf 92       	push	r12
    358e:	df 92       	push	r13
    3590:	ef 92       	push	r14
    3592:	ff 92       	push	r15
    3594:	0f 93       	push	r16
    3596:	1f 93       	push	r17
    3598:	cf 93       	push	r28
    359a:	df 93       	push	r29
    359c:	ec 01       	movw	r28, r24
    359e:	7b 01       	movw	r14, r22
	*ser_device << ATERM_BOLD << PMS ("Task: ") 
				<< (const char*)(pcTaskGetTaskName (handle)) 
    35a0:	8a 81       	ldd	r24, Y+2	; 0x02
    35a2:	9b 81       	ldd	r25, Y+3	; 0x03
    35a4:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <pcTaskGetTaskName>
    35a8:	6c 01       	movw	r12, r24
 *  @param ser_device The serial device to which each task prints its stack
 */

void frt_task::print_stack_in_list (emstream* ser_device)
{
	*ser_device << ATERM_BOLD << PMS ("Task: ") 
    35aa:	6a e0       	ldi	r22, 0x0A	; 10
    35ac:	c7 01       	movw	r24, r14
    35ae:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    35b2:	8c 01       	movw	r16, r24
    35b4:	6c ec       	ldi	r22, 0xCC	; 204
    35b6:	75 e0       	ldi	r23, 0x05	; 5
    35b8:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    35bc:	6a e0       	ldi	r22, 0x0A	; 10
    35be:	c8 01       	movw	r24, r16
    35c0:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    35c4:	8c 01       	movw	r16, r24
    35c6:	65 ec       	ldi	r22, 0xC5	; 197
    35c8:	75 e0       	ldi	r23, 0x05	; 5
    35ca:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    35ce:	b6 01       	movw	r22, r12
    35d0:	c8 01       	movw	r24, r16
    35d2:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
				<< (const char*)(pcTaskGetTaskName (handle)) 
				<< ATERM_NORM_INT << endl;
    35d6:	6a e0       	ldi	r22, 0x0A	; 10
    35d8:	c8 01       	movw	r24, r16
    35da:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    35de:	8c 01       	movw	r16, r24
    35e0:	6f eb       	ldi	r22, 0xBF	; 191
    35e2:	75 e0       	ldi	r23, 0x05	; 5
    35e4:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    35e8:	66 e0       	ldi	r22, 0x06	; 6
    35ea:	c8 01       	movw	r24, r16
    35ec:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
		 *  @param p_ser_d The serial device to which the stack will be printed
		 */
		void dump_stack (emstream* p_ser_d)
		{
			hex_dump_memory ((uint8_t*)(top_of_stack - total_stack), 
								(uint8_t*)(top_of_stack), p_ser_d, true, 0x11);
    35f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    35f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    35f4:	e8 85       	ldd	r30, Y+8	; 0x08
    35f6:	f9 85       	ldd	r31, Y+9	; 0x09
    35f8:	01 e1       	ldi	r16, 0x11	; 17
    35fa:	21 e0       	ldi	r18, 0x01	; 1
    35fc:	a7 01       	movw	r20, r14
    35fe:	bc 01       	movw	r22, r24
    3600:	8e 1b       	sub	r24, r30
    3602:	9f 0b       	sbc	r25, r31
    3604:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <_Z15hex_dump_memoryPhS_P8emstreambh>

	dump_stack (ser_device);

	if (prev_task_pointer != NULL)
    3608:	8c 81       	ldd	r24, Y+4	; 0x04
    360a:	9d 81       	ldd	r25, Y+5	; 0x05
    360c:	00 97       	sbiw	r24, 0x00	; 0
    360e:	19 f0       	breq	.+6      	; 0x3616 <_ZN8frt_task19print_stack_in_listEP8emstream+0x8a>
	{
		prev_task_pointer->print_stack_in_list (ser_device);
    3610:	b7 01       	movw	r22, r14
    3612:	0e 94 c6 1a 	call	0x358c	; 0x358c <_ZN8frt_task19print_stack_in_listEP8emstream>
	}
}
    3616:	df 91       	pop	r29
    3618:	cf 91       	pop	r28
    361a:	1f 91       	pop	r17
    361c:	0f 91       	pop	r16
    361e:	ff 90       	pop	r15
    3620:	ef 90       	pop	r14
    3622:	df 90       	pop	r13
    3624:	cf 90       	pop	r12
    3626:	08 95       	ret

00003628 <_Z17print_task_stacksP8emstream>:
/** This function has all the tasks in the task list do a "stack dump", printing their
 *  stacks in hex dump format. The idle task's stack is printed afterwards. 
 *  @param ser_dev Pointer to a serial device on which the information will be printed
 */
void print_task_stacks (emstream* ser_dev)
{
    3628:	0f 93       	push	r16
    362a:	1f 93       	push	r17
    362c:	cf 93       	push	r28
    362e:	df 93       	push	r29
    3630:	ec 01       	movw	r28, r24
	// Tell the most recently created task to print its stack and keep the process
	// going by telling the next most recently created task to print its stack, etc.
	if (last_created_task_pointer != NULL)
    3632:	80 91 a0 32 	lds	r24, 0x32A0	; 0x8032a0 <last_created_task_pointer>
    3636:	90 91 a1 32 	lds	r25, 0x32A1	; 0x8032a1 <last_created_task_pointer+0x1>
    363a:	00 97       	sbiw	r24, 0x00	; 0
    363c:	19 f0       	breq	.+6      	; 0x3644 <_Z17print_task_stacksP8emstream+0x1c>
	{
		last_created_task_pointer->print_stack_in_list (ser_dev);
    363e:	be 01       	movw	r22, r28
    3640:	0e 94 c6 1a 	call	0x358c	; 0x358c <_ZN8frt_task19print_stack_in_listEP8emstream>
	}

	// Now print the stack for the idle task, which isn't user created and so isn't
	// in the regular task list
	*ser_dev << ATERM_BOLD << PMS ("Task: IDLE") << ATERM_NORM_INT << endl;
    3644:	6a e0       	ldi	r22, 0x0A	; 10
    3646:	ce 01       	movw	r24, r28
    3648:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    364c:	8c 01       	movw	r16, r24
    364e:	62 ee       	ldi	r22, 0xE2	; 226
    3650:	75 e0       	ldi	r23, 0x05	; 5
    3652:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    3656:	6a e0       	ldi	r22, 0x0A	; 10
    3658:	c8 01       	movw	r24, r16
    365a:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    365e:	8c 01       	movw	r16, r24
    3660:	67 ed       	ldi	r22, 0xD7	; 215
    3662:	75 e0       	ldi	r23, 0x05	; 5
    3664:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    3668:	6a e0       	ldi	r22, 0x0A	; 10
    366a:	c8 01       	movw	r24, r16
    366c:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    3670:	8c 01       	movw	r16, r24
    3672:	61 ed       	ldi	r22, 0xD1	; 209
    3674:	75 e0       	ldi	r23, 0x05	; 5
    3676:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    367a:	66 e0       	ldi	r22, 0x06	; 6
    367c:	c8 01       	movw	r24, r16
    367e:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
	hex_dump_memory ((uint8_t*)(portStackTopForTask - configMINIMAL_STACK_SIZE + 1), 
							(uint8_t*)(portStackTopForTask + 1), ser_dev, true, 0x11);
    3682:	80 91 02 33 	lds	r24, 0x3302	; 0x803302 <portStackTopForTask>
    3686:	90 91 03 33 	lds	r25, 0x3303	; 0x803303 <portStackTopForTask+0x1>
    368a:	bc 01       	movw	r22, r24
    368c:	6f 5f       	subi	r22, 0xFF	; 255
    368e:	7f 4f       	sbci	r23, 0xFF	; 255
    3690:	01 e1       	ldi	r16, 0x11	; 17
    3692:	21 e0       	ldi	r18, 0x01	; 1
    3694:	ae 01       	movw	r20, r28
    3696:	83 56       	subi	r24, 0x63	; 99
    3698:	91 09       	sbc	r25, r1
    369a:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <_Z15hex_dump_memoryPhS_P8emstreambh>
}
    369e:	df 91       	pop	r29
    36a0:	cf 91       	pop	r28
    36a2:	1f 91       	pop	r17
    36a4:	0f 91       	pop	r16
    36a6:	08 95       	ret

000036a8 <_ZN8frt_task12print_statusER8emstream>:
 *  information. 
 *  @param ser_dev A reference to the serial device to which to print the task status
 */

void frt_task::print_status (emstream& ser_dev)
{
    36a8:	8f 92       	push	r8
    36aa:	9f 92       	push	r9
    36ac:	af 92       	push	r10
    36ae:	bf 92       	push	r11
    36b0:	cf 92       	push	r12
    36b2:	df 92       	push	r13
    36b4:	ef 92       	push	r14
    36b6:	ff 92       	push	r15
    36b8:	0f 93       	push	r16
    36ba:	1f 93       	push	r17
    36bc:	cf 93       	push	r28
    36be:	df 93       	push	r29
    36c0:	ec 01       	movw	r28, r24
    36c2:	8b 01       	movw	r16, r22
	ser_dev << (const char*)(pcTaskGetTaskName (handle));
    36c4:	8a 81       	ldd	r24, Y+2	; 0x02
    36c6:	9b 81       	ldd	r25, Y+3	; 0x03
    36c8:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <pcTaskGetTaskName>
    36cc:	bc 01       	movw	r22, r24
    36ce:	c8 01       	movw	r24, r16
    36d0:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
	ser_dev.putchar ('\t');
    36d4:	d8 01       	movw	r26, r16
    36d6:	ed 91       	ld	r30, X+
    36d8:	fc 91       	ld	r31, X
    36da:	02 80       	ldd	r0, Z+2	; 0x02
    36dc:	f3 81       	ldd	r31, Z+3	; 0x03
    36de:	e0 2d       	mov	r30, r0
    36e0:	69 e0       	ldi	r22, 0x09	; 9
    36e2:	c8 01       	movw	r24, r16
    36e4:	19 95       	eicall
	if (strlen ((const char*)(pcTaskGetTaskName (handle))) < 8)
    36e6:	8a 81       	ldd	r24, Y+2	; 0x02
    36e8:	9b 81       	ldd	r25, Y+3	; 0x03
    36ea:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <pcTaskGetTaskName>
    36ee:	fc 01       	movw	r30, r24
    36f0:	01 90       	ld	r0, Z+
    36f2:	00 20       	and	r0, r0
    36f4:	e9 f7       	brne	.-6      	; 0x36f0 <_ZN8frt_task12print_statusER8emstream+0x48>
    36f6:	31 97       	sbiw	r30, 0x01	; 1
    36f8:	e8 1b       	sub	r30, r24
    36fa:	f9 0b       	sbc	r31, r25
    36fc:	38 97       	sbiw	r30, 0x08	; 8
    36fe:	48 f4       	brcc	.+18     	; 0x3712 <_ZN8frt_task12print_statusER8emstream+0x6a>
	{
		ser_dev.putchar ('\t');
    3700:	d8 01       	movw	r26, r16
    3702:	ed 91       	ld	r30, X+
    3704:	fc 91       	ld	r31, X
    3706:	02 80       	ldd	r0, Z+2	; 0x02
    3708:	f3 81       	ldd	r31, Z+3	; 0x03
    370a:	e0 2d       	mov	r30, r0
    370c:	69 e0       	ldi	r22, 0x09	; 9
    370e:	c8 01       	movw	r24, r16
    3710:	19 95       	eicall
			<< get_state ()
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\t") << uxTaskGetStackHighWaterMark(handle) << PMS ("/") 
			<< get_total_stack () << PMS ("\t")
		#endif
			<< PMS ("\t") << runs;
    3712:	ce 84       	ldd	r12, Y+14	; 0x0e
    3714:	df 84       	ldd	r13, Y+15	; 0x0f
    3716:	e8 88       	ldd	r14, Y+16	; 0x10
    3718:	f9 88       	ldd	r15, Y+17	; 0x11
		 *  constructor call.
		 *  @return The task's total stack size in bytes
		 */
		size_t get_total_stack (void)
		{
			return (total_stack);
    371a:	a8 84       	ldd	r10, Y+8	; 0x08
    371c:	b9 84       	ldd	r11, Y+9	; 0x09
		ser_dev.putchar ('\t');
	}
	ser_dev << uxTaskPriorityGet (handle) << PMS ("\t")
			<< get_state ()
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\t") << uxTaskGetStackHighWaterMark(handle) << PMS ("/") 
    371e:	8a 81       	ldd	r24, Y+2	; 0x02
    3720:	9b 81       	ldd	r25, Y+3	; 0x03
    3722:	0e 94 45 19 	call	0x328a	; 0x328a <uxTaskGetStackHighWaterMark>
    3726:	98 2e       	mov	r9, r24
		 *  manipulated by the user within the run() method to cause state transitions.
		 *  @return The current state
		 */
		uint8_t get_state (void)
		{
			return (state);
    3728:	8c 84       	ldd	r8, Y+12	; 0x0c
	ser_dev.putchar ('\t');
	if (strlen ((const char*)(pcTaskGetTaskName (handle))) < 8)
	{
		ser_dev.putchar ('\t');
	}
	ser_dev << uxTaskPriorityGet (handle) << PMS ("\t")
    372a:	8a 81       	ldd	r24, Y+2	; 0x02
    372c:	9b 81       	ldd	r25, Y+3	; 0x03
    372e:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <uxTaskPriorityGet>
    3732:	68 2f       	mov	r22, r24
    3734:	c8 01       	movw	r24, r16
    3736:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN8emstreamlsEh>
    373a:	6a e0       	ldi	r22, 0x0A	; 10
    373c:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    3740:	ec 01       	movw	r28, r24
    3742:	67 e5       	ldi	r22, 0x57	; 87
    3744:	76 e0       	ldi	r23, 0x06	; 6
    3746:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
			<< get_state ()
    374a:	68 2d       	mov	r22, r8
    374c:	ce 01       	movw	r24, r28
    374e:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN8emstreamlsEh>
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\t") << uxTaskGetStackHighWaterMark(handle) << PMS ("/") 
    3752:	6a e0       	ldi	r22, 0x0A	; 10
    3754:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    3758:	ec 01       	movw	r28, r24
    375a:	65 e5       	ldi	r22, 0x55	; 85
    375c:	76 e0       	ldi	r23, 0x06	; 6
    375e:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    3762:	69 2d       	mov	r22, r9
    3764:	ce 01       	movw	r24, r28
    3766:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN8emstreamlsEh>
    376a:	6a e0       	ldi	r22, 0x0A	; 10
    376c:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    3770:	ec 01       	movw	r28, r24
    3772:	63 e5       	ldi	r22, 0x53	; 83
    3774:	76 e0       	ldi	r23, 0x06	; 6
    3776:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
			<< get_total_stack () << PMS ("\t")
    377a:	b5 01       	movw	r22, r10
    377c:	ce 01       	movw	r24, r28
    377e:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_ZN8emstreamlsEj>
    3782:	6a e0       	ldi	r22, 0x0A	; 10
    3784:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    3788:	ec 01       	movw	r28, r24
    378a:	61 e5       	ldi	r22, 0x51	; 81
    378c:	76 e0       	ldi	r23, 0x06	; 6
    378e:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
		#endif
			<< PMS ("\t") << runs;
    3792:	6a e0       	ldi	r22, 0x0A	; 10
    3794:	ce 01       	movw	r24, r28
    3796:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    379a:	ec 01       	movw	r28, r24
    379c:	6f e4       	ldi	r22, 0x4F	; 79
    379e:	76 e0       	ldi	r23, 0x06	; 6
    37a0:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    37a4:	b7 01       	movw	r22, r14
    37a6:	a6 01       	movw	r20, r12
    37a8:	ce 01       	movw	r24, r28
    37aa:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <_ZN8emstreamlsEm>
}
    37ae:	df 91       	pop	r29
    37b0:	cf 91       	pop	r28
    37b2:	1f 91       	pop	r17
    37b4:	0f 91       	pop	r16
    37b6:	ff 90       	pop	r15
    37b8:	ef 90       	pop	r14
    37ba:	df 90       	pop	r13
    37bc:	cf 90       	pop	r12
    37be:	bf 90       	pop	r11
    37c0:	af 90       	pop	r10
    37c2:	9f 90       	pop	r9
    37c4:	8f 90       	pop	r8
    37c6:	08 95       	ret

000037c8 <_ZlsR8emstreamR8frt_task>:
 *  @return A reference to the same serial device on which we write information.
 *          This is used to string together things to write with "<<" operators
 */

emstream& operator << (emstream& ser_dev, frt_task& a_task)
{
    37c8:	cf 93       	push	r28
    37ca:	df 93       	push	r29
    37cc:	ec 01       	movw	r28, r24
    37ce:	cb 01       	movw	r24, r22
	a_task.print_status (ser_dev);
    37d0:	db 01       	movw	r26, r22
    37d2:	ed 91       	ld	r30, X+
    37d4:	fc 91       	ld	r31, X
    37d6:	02 80       	ldd	r0, Z+2	; 0x02
    37d8:	f3 81       	ldd	r31, Z+3	; 0x03
    37da:	e0 2d       	mov	r30, r0
    37dc:	be 01       	movw	r22, r28
    37de:	19 95       	eicall
	return (ser_dev);
}
    37e0:	ce 01       	movw	r24, r28
    37e2:	df 91       	pop	r29
    37e4:	cf 91       	pop	r28
    37e6:	08 95       	ret

000037e8 <_ZN8frt_task20print_status_in_listEP8emstream>:
 *  tasks to do so. The list is kept by the tasks, each having a pointer to another.
 *  @param ser_device The serial device to which each task prints its status
 */

void frt_task::print_status_in_list (emstream* ser_device)
{
    37e8:	0f 93       	push	r16
    37ea:	1f 93       	push	r17
    37ec:	cf 93       	push	r28
    37ee:	df 93       	push	r29
    37f0:	ec 01       	movw	r28, r24
    37f2:	8b 01       	movw	r16, r22
	*ser_device << *this << endl;
    37f4:	bc 01       	movw	r22, r24
    37f6:	c8 01       	movw	r24, r16
    37f8:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <_ZlsR8emstreamR8frt_task>
    37fc:	66 e0       	ldi	r22, 0x06	; 6
    37fe:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>

	if (prev_task_pointer != NULL)
    3802:	8c 81       	ldd	r24, Y+4	; 0x04
    3804:	9d 81       	ldd	r25, Y+5	; 0x05
    3806:	00 97       	sbiw	r24, 0x00	; 0
    3808:	19 f0       	breq	.+6      	; 0x3810 <_ZN8frt_task20print_status_in_listEP8emstream+0x28>
	{
		prev_task_pointer->print_status_in_list (ser_device);
    380a:	b8 01       	movw	r22, r16
    380c:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <_ZN8frt_task20print_status_in_listEP8emstream>
	}
}
    3810:	df 91       	pop	r29
    3812:	cf 91       	pop	r28
    3814:	1f 91       	pop	r17
    3816:	0f 91       	pop	r16
    3818:	08 95       	ret

0000381a <_Z15print_task_listP8emstream>:
 *  The author isn't sure if it can always be trusted. 
 *  @param ser_dev Pointer to a serial device on which the information will be printed
 */

void print_task_list (emstream* ser_dev)
{
    381a:	0f 93       	push	r16
    381c:	1f 93       	push	r17
    381e:	cf 93       	push	r28
    3820:	df 93       	push	r29
    3822:	ec 01       	movw	r28, r24
	// Print the first line with the top of the headings
	*ser_dev << PMS ("Task\t\t  \t ")
    3824:	6a e0       	ldi	r22, 0x0A	; 10
    3826:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    382a:	8c 01       	movw	r16, r24
    382c:	64 e4       	ldi	r22, 0x44	; 68
    382e:	76 e0       	ldi	r23, 0x06	; 6
    3830:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\tStack")
    3834:	6a e0       	ldi	r22, 0x0A	; 10
    3836:	c8 01       	movw	r24, r16
    3838:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    383c:	8c 01       	movw	r16, r24
    383e:	6d e3       	ldi	r22, 0x3D	; 61
    3840:	76 e0       	ldi	r23, 0x06	; 6
    3842:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
		#endif
			<< endl;
    3846:	66 e0       	ldi	r22, 0x06	; 6
    3848:	c8 01       	movw	r24, r16
    384a:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>

	// Print the second line with the rest of the headings
	*ser_dev << PMS ("Name\t\tPri.\tState")
    384e:	6a e0       	ldi	r22, 0x0A	; 10
    3850:	ce 01       	movw	r24, r28
    3852:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    3856:	8c 01       	movw	r16, r24
    3858:	6c e2       	ldi	r22, 0x2C	; 44
    385a:	76 e0       	ldi	r23, 0x06	; 6
    385c:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\tFree/Total")
    3860:	6a e0       	ldi	r22, 0x0A	; 10
    3862:	c8 01       	movw	r24, r16
    3864:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    3868:	8c 01       	movw	r16, r24
    386a:	60 e2       	ldi	r22, 0x20	; 32
    386c:	76 e0       	ldi	r23, 0x06	; 6
    386e:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
		#endif
			<< PMS ("\tRuns") << endl;
    3872:	6a e0       	ldi	r22, 0x0A	; 10
    3874:	c8 01       	movw	r24, r16
    3876:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    387a:	8c 01       	movw	r16, r24
    387c:	6a e1       	ldi	r22, 0x1A	; 26
    387e:	76 e0       	ldi	r23, 0x06	; 6
    3880:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    3884:	66 e0       	ldi	r22, 0x06	; 6
    3886:	c8 01       	movw	r24, r16
    3888:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>

	// Print the third line which shows separators between headers and data
	*ser_dev << PMS ("----\t\t----\t-----")
    388c:	6a e0       	ldi	r22, 0x0A	; 10
    388e:	ce 01       	movw	r24, r28
    3890:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    3894:	8c 01       	movw	r16, r24
    3896:	69 e0       	ldi	r22, 0x09	; 9
    3898:	76 e0       	ldi	r23, 0x06	; 6
    389a:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< PMS ("\t----------")
    389e:	6a e0       	ldi	r22, 0x0A	; 10
    38a0:	c8 01       	movw	r24, r16
    38a2:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    38a6:	8c 01       	movw	r16, r24
    38a8:	6d ef       	ldi	r22, 0xFD	; 253
    38aa:	75 e0       	ldi	r23, 0x05	; 5
    38ac:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
		#endif
			<< PMS ("\t----") << endl;
    38b0:	6a e0       	ldi	r22, 0x0A	; 10
    38b2:	c8 01       	movw	r24, r16
    38b4:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    38b8:	8c 01       	movw	r16, r24
    38ba:	67 ef       	ldi	r22, 0xF7	; 247
    38bc:	75 e0       	ldi	r23, 0x05	; 5
    38be:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    38c2:	66 e0       	ldi	r22, 0x06	; 6
    38c4:	c8 01       	movw	r24, r16
    38c6:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>

	// Now have the tasks each print out their status. Tasks form a linked list, so
	// we only need to get the last task started and it will call the next, etc.
	if (last_created_task_pointer != NULL)
    38ca:	80 91 a0 32 	lds	r24, 0x32A0	; 0x8032a0 <last_created_task_pointer>
    38ce:	90 91 a1 32 	lds	r25, 0x32A1	; 0x8032a1 <last_created_task_pointer+0x1>
    38d2:	00 97       	sbiw	r24, 0x00	; 0
    38d4:	19 f0       	breq	.+6      	; 0x38dc <_Z15print_task_listP8emstream+0xc2>
	{
		last_created_task_pointer->print_status_in_list (ser_dev);
    38d6:	be 01       	movw	r22, r28
    38d8:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <_ZN8frt_task20print_status_in_listEP8emstream>
	}

	// Have the idle task print out its information
	*ser_dev << PMS ("IDLE\t\t0\t-\t")
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< uxTaskGetStackHighWaterMark (xTaskGetIdleTaskHandle ())
    38dc:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <xTaskGetIdleTaskHandle>
    38e0:	0e 94 45 19 	call	0x328a	; 0x328a <uxTaskGetStackHighWaterMark>
    38e4:	18 2f       	mov	r17, r24
	{
		last_created_task_pointer->print_status_in_list (ser_dev);
	}

	// Have the idle task print out its information
	*ser_dev << PMS ("IDLE\t\t0\t-\t")
    38e6:	6a e0       	ldi	r22, 0x0A	; 10
    38e8:	ce 01       	movw	r24, r28
    38ea:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    38ee:	ec 01       	movw	r28, r24
    38f0:	6c ee       	ldi	r22, 0xEC	; 236
    38f2:	75 e0       	ldi	r23, 0x05	; 5
    38f4:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
		#if (INCLUDE_uxTaskGetStackHighWaterMark == 1)
			<< uxTaskGetStackHighWaterMark (xTaskGetIdleTaskHandle ())
    38f8:	61 2f       	mov	r22, r17
    38fa:	ce 01       	movw	r24, r28
    38fc:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN8emstreamlsEh>
			<< PMS ("/") << configMINIMAL_STACK_SIZE << PMS ("\t\t")
    3900:	6a e0       	ldi	r22, 0x0A	; 10
    3902:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    3906:	ec 01       	movw	r28, r24
    3908:	6a ee       	ldi	r22, 0xEA	; 234
    390a:	75 e0       	ldi	r23, 0x05	; 5
    390c:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    3910:	64 e6       	ldi	r22, 0x64	; 100
    3912:	70 e0       	ldi	r23, 0x00	; 0
    3914:	ce 01       	movw	r24, r28
    3916:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_ZN8emstreamlsEj>
    391a:	6a e0       	ldi	r22, 0x0A	; 10
    391c:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    3920:	ec 01       	movw	r28, r24
    3922:	67 ee       	ldi	r22, 0xE7	; 231
    3924:	75 e0       	ldi	r23, 0x05	; 5
    3926:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
		#endif
		#ifdef TASK_SETUP_AND_LOOP
			<< PMS ("-")
		#endif
			<< endl;
    392a:	66 e0       	ldi	r22, 0x06	; 6
    392c:	ce 01       	movw	r24, r28
    392e:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
}
    3932:	df 91       	pop	r29
    3934:	cf 91       	pop	r28
    3936:	1f 91       	pop	r17
    3938:	0f 91       	pop	r16
    393a:	08 95       	ret

0000393c <_ZN14frt_text_queue7getcharEv>:
 *  the queue, it blocks until a character is received.
 *  @return The character which was received from the queue
 */

inline int16_t frt_text_queue::getchar (void)
{
    393c:	0f 93       	push	r16
    393e:	cf 93       	push	r28
    3940:	df 93       	push	r29
    3942:	1f 92       	push	r1
    3944:	cd b7       	in	r28, 0x3d	; 61
    3946:	de b7       	in	r29, 0x3e	; 62
	char recv_char;							// Character read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue
	if (xQueueReceive (the_queue, &recv_char, portMAX_DELAY) != pdTRUE)
    3948:	00 e0       	ldi	r16, 0x00	; 0
    394a:	2f ef       	ldi	r18, 0xFF	; 255
    394c:	3f ef       	ldi	r19, 0xFF	; 255
    394e:	a9 01       	movw	r20, r18
    3950:	be 01       	movw	r22, r28
    3952:	6f 5f       	subi	r22, 0xFF	; 255
    3954:	7f 4f       	sbci	r23, 0xFF	; 255
    3956:	fc 01       	movw	r30, r24
    3958:	80 85       	ldd	r24, Z+8	; 0x08
    395a:	91 85       	ldd	r25, Z+9	; 0x09
    395c:	0e 94 96 13 	call	0x272c	; 0x272c <xQueueGenericReceive>
    3960:	81 30       	cpi	r24, 0x01	; 1
    3962:	19 f4       	brne	.+6      	; 0x396a <_ZN14frt_text_queue7getcharEv+0x2e>
	{
		return (-1);
	}

	// OK, we got good data from the queue, so return it
	return (recv_char);
    3964:	89 81       	ldd	r24, Y+1	; 0x01
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	02 c0       	rjmp	.+4      	; 0x396e <_ZN14frt_text_queue7getcharEv+0x32>
	char recv_char;							// Character read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue
	if (xQueueReceive (the_queue, &recv_char, portMAX_DELAY) != pdTRUE)
	{
		return (-1);
    396a:	8f ef       	ldi	r24, 0xFF	; 255
    396c:	9f ef       	ldi	r25, 0xFF	; 255
	}

	// OK, we got good data from the queue, so return it
	return (recv_char);
}
    396e:	0f 90       	pop	r0
    3970:	df 91       	pop	r29
    3972:	cf 91       	pop	r28
    3974:	0f 91       	pop	r16
    3976:	08 95       	ret

00003978 <_ZN14frt_text_queue14check_for_charEv>:
 *  @return True for character available, false for no character available
 */

inline bool frt_text_queue::check_for_char (void)
{
	if (uxQueueMessagesWaiting (the_queue) == 0)
    3978:	fc 01       	movw	r30, r24
    397a:	80 85       	ldd	r24, Z+8	; 0x08
    397c:	91 85       	ldd	r25, Z+9	; 0x09
    397e:	0e 94 87 14 	call	0x290e	; 0x290e <uxQueueMessagesWaiting>
    3982:	91 e0       	ldi	r25, 0x01	; 1
    3984:	81 11       	cpse	r24, r1
    3986:	01 c0       	rjmp	.+2      	; 0x398a <_ZN14frt_text_queue14check_for_charEv+0x12>
    3988:	90 e0       	ldi	r25, 0x00	; 0
	{
		return (false);
	}
	return (true);
}
    398a:	89 2f       	mov	r24, r25
    398c:	08 95       	ret

0000398e <_ZN14frt_text_queue7putcharEc>:
 *  @param a_char The character to be sent to the queue
 *  @return True if the character was successfully sent, false if something went wrong
 */

inline bool frt_text_queue::putchar (char a_char)
{
    398e:	0f 93       	push	r16
    3990:	cf 93       	push	r28
    3992:	df 93       	push	r29
    3994:	1f 92       	push	r1
    3996:	cd b7       	in	r28, 0x3d	; 61
    3998:	de b7       	in	r29, 0x3e	; 62
    399a:	69 83       	std	Y+1, r22	; 0x01
	// If the data is successfully put in the queue, return true
	if (xQueueSendToBack (the_queue, &a_char, ticks_to_wait))
    399c:	fc 01       	movw	r30, r24
    399e:	22 85       	ldd	r18, Z+10	; 0x0a
    39a0:	33 85       	ldd	r19, Z+11	; 0x0b
    39a2:	44 85       	ldd	r20, Z+12	; 0x0c
    39a4:	55 85       	ldd	r21, Z+13	; 0x0d
    39a6:	00 e0       	ldi	r16, 0x00	; 0
    39a8:	be 01       	movw	r22, r28
    39aa:	6f 5f       	subi	r22, 0xFF	; 255
    39ac:	7f 4f       	sbci	r23, 0xFF	; 255
    39ae:	80 85       	ldd	r24, Z+8	; 0x08
    39b0:	91 85       	ldd	r25, Z+9	; 0x09
    39b2:	0e 94 cf 12 	call	0x259e	; 0x259e <xQueueGenericSend>
    39b6:	91 e0       	ldi	r25, 0x01	; 1
    39b8:	81 11       	cpse	r24, r1
    39ba:	01 c0       	rjmp	.+2      	; 0x39be <_ZN14frt_text_queue7putcharEc+0x30>
    39bc:	90 e0       	ldi	r25, 0x00	; 0
		return (true);
	}

	// If we get here, something went wrong (probably a timeout), so return false
	return (false);
}
    39be:	89 2f       	mov	r24, r25
    39c0:	0f 90       	pop	r0
    39c2:	df 91       	pop	r29
    39c4:	cf 91       	pop	r28
    39c6:	0f 91       	pop	r16
    39c8:	08 95       	ret

000039ca <_ZN14frt_text_queueC1EjP8emstreamm>:
 *                     portMAX_DELAY causes a send to block indefinitely
 *  @param p_ser_dev A pointer which points to a serial device which can be used for
 *                   diagnostic logging or printing
 */

frt_text_queue::frt_text_queue (uint16_t queue_size, emstream* p_ser_dev,
    39ca:	8f 92       	push	r8
    39cc:	9f 92       	push	r9
    39ce:	bf 92       	push	r11
    39d0:	cf 92       	push	r12
    39d2:	df 92       	push	r13
    39d4:	ef 92       	push	r14
    39d6:	ff 92       	push	r15
    39d8:	0f 93       	push	r16
    39da:	1f 93       	push	r17
    39dc:	cf 93       	push	r28
    39de:	df 93       	push	r29
    39e0:	ec 01       	movw	r28, r24
    39e2:	b6 2e       	mov	r11, r22
    39e4:	4a 01       	movw	r8, r20
    39e6:	68 01       	movw	r12, r16
    39e8:	79 01       	movw	r14, r18
							   portTickType a_wait_time)
    39ea:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <_ZN8emstreamC1Ev>
    39ee:	84 e9       	ldi	r24, 0x94	; 148
    39f0:	91 e2       	ldi	r25, 0x21	; 33
    39f2:	88 83       	st	Y, r24
    39f4:	99 83       	std	Y+1, r25	; 0x01
{
	// Save the pointer to the serial device which is used for debugging
	p_serial = p_ser_dev;
    39f6:	8e 86       	std	Y+14, r8	; 0x0e
    39f8:	9f 86       	std	Y+15, r9	; 0x0f

	// Create a FreeRTOS queue object which holds the given number of characters
	the_queue = xQueueCreate (queue_size, sizeof (char));
    39fa:	40 e0       	ldi	r20, 0x00	; 0
    39fc:	61 e0       	ldi	r22, 0x01	; 1
    39fe:	8b 2d       	mov	r24, r11
    3a00:	0e 94 a1 12 	call	0x2542	; 0x2542 <xQueueGenericCreate>
    3a04:	88 87       	std	Y+8, r24	; 0x08
    3a06:	99 87       	std	Y+9, r25	; 0x09

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = a_wait_time;
    3a08:	ca 86       	std	Y+10, r12	; 0x0a
    3a0a:	db 86       	std	Y+11, r13	; 0x0b
    3a0c:	ec 86       	std	Y+12, r14	; 0x0c
    3a0e:	fd 86       	std	Y+13, r15	; 0x0d
}
    3a10:	df 91       	pop	r29
    3a12:	cf 91       	pop	r28
    3a14:	1f 91       	pop	r17
    3a16:	0f 91       	pop	r16
    3a18:	ff 90       	pop	r15
    3a1a:	ef 90       	pop	r14
    3a1c:	df 90       	pop	r13
    3a1e:	cf 90       	pop	r12
    3a20:	bf 90       	pop	r11
    3a22:	9f 90       	pop	r9
    3a24:	8f 90       	pop	r8
    3a26:	08 95       	ret

00003a28 <_ZN10time_stamp12get_microsecEv>:
 *  integer number of ticks per second.
 *  @return The number of microseconds in time stamp
 */

uint32_t time_stamp::get_microsec (void)
{
    3a28:	cf 92       	push	r12
    3a2a:	df 92       	push	r13
    3a2c:	ef 92       	push	r14
    3a2e:	ff 92       	push	r15
    3a30:	cf 93       	push	r28
    3a32:	df 93       	push	r29
    3a34:	ec 01       	movw	r28, r24
	return 
	(
		(int32_t)(tick_count % configTICK_RATE_HZ) * 1000000L / configTICK_RATE_HZ
			+ (int32_t)hardware_count * 1000000L 
				/ (configCPU_CLOCK_HZ / portCLOCK_PRESCALER)
	);
    3a36:	68 81       	ld	r22, Y
    3a38:	79 81       	ldd	r23, Y+1	; 0x01
    3a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a3e:	0f 2e       	mov	r0, r31
    3a40:	f8 ee       	ldi	r31, 0xE8	; 232
    3a42:	cf 2e       	mov	r12, r31
    3a44:	f3 e0       	ldi	r31, 0x03	; 3
    3a46:	df 2e       	mov	r13, r31
    3a48:	e1 2c       	mov	r14, r1
    3a4a:	f1 2c       	mov	r15, r1
    3a4c:	f0 2d       	mov	r31, r0
    3a4e:	a7 01       	movw	r20, r14
    3a50:	96 01       	movw	r18, r12
    3a52:	0e 94 93 26 	call	0x4d26	; 0x4d26 <__udivmodsi4>
    3a56:	9b 01       	movw	r18, r22
    3a58:	ac 01       	movw	r20, r24
    3a5a:	60 e4       	ldi	r22, 0x40	; 64
    3a5c:	72 e4       	ldi	r23, 0x42	; 66
    3a5e:	8f e0       	ldi	r24, 0x0F	; 15
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	0e 94 83 26 	call	0x4d06	; 0x4d06 <__mulsi3>
    3a66:	a7 01       	movw	r20, r14
    3a68:	96 01       	movw	r18, r12
    3a6a:	0e 94 93 26 	call	0x4d26	; 0x4d26 <__udivmodsi4>
    3a6e:	69 01       	movw	r12, r18
    3a70:	7a 01       	movw	r14, r20
    3a72:	ac 81       	ldd	r26, Y+4	; 0x04
    3a74:	bd 81       	ldd	r27, Y+5	; 0x05
    3a76:	20 e4       	ldi	r18, 0x40	; 64
    3a78:	32 e4       	ldi	r19, 0x42	; 66
    3a7a:	4f e0       	ldi	r20, 0x0F	; 15
    3a7c:	50 e0       	ldi	r21, 0x00	; 0
    3a7e:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__muluhisi3>
    3a82:	20 e0       	ldi	r18, 0x00	; 0
    3a84:	38 e4       	ldi	r19, 0x48	; 72
    3a86:	48 ee       	ldi	r20, 0xE8	; 232
    3a88:	51 e0       	ldi	r21, 0x01	; 1
    3a8a:	0e 94 93 26 	call	0x4d26	; 0x4d26 <__udivmodsi4>
    3a8e:	c7 01       	movw	r24, r14
    3a90:	b6 01       	movw	r22, r12
    3a92:	62 0f       	add	r22, r18
    3a94:	73 1f       	adc	r23, r19
    3a96:	84 1f       	adc	r24, r20
    3a98:	95 1f       	adc	r25, r21
}
    3a9a:	df 91       	pop	r29
    3a9c:	cf 91       	pop	r28
    3a9e:	ff 90       	pop	r15
    3aa0:	ef 90       	pop	r14
    3aa2:	df 90       	pop	r13
    3aa4:	cf 90       	pop	r12
    3aa6:	08 95       	ret

00003aa8 <_ZlsR8emstreamR10time_stamp>:
 *  @return A reference to the serial device to which the data was printed. This
 *          reference is used to string printable items together with "<<" operators
 */

emstream& operator<< (emstream& serial, time_stamp& stamp)
{
    3aa8:	cf 92       	push	r12
    3aaa:	df 92       	push	r13
    3aac:	ef 92       	push	r14
    3aae:	ff 92       	push	r15
    3ab0:	0f 93       	push	r16
    3ab2:	1f 93       	push	r17
    3ab4:	cf 93       	push	r28
    3ab6:	df 93       	push	r29
    3ab8:	cd b7       	in	r28, 0x3d	; 61
    3aba:	de b7       	in	r29, 0x3e	; 62
    3abc:	2f 97       	sbiw	r28, 0x0f	; 15
    3abe:	cd bf       	out	0x3d, r28	; 61
    3ac0:	de bf       	out	0x3e, r29	; 62
    3ac2:	6c 01       	movw	r12, r24
    3ac4:	8b 01       	movw	r16, r22
	char dig_buffer[7];						// Holds digits we compute
	ldiv_t div_result;						// Holds results of long integer division

	// First write the seconds in the time stamp, then a decimal
	serial << stamp.get_seconds ();
    3ac6:	db 01       	movw	r26, r22
    3ac8:	6d 91       	ld	r22, X+
    3aca:	7d 91       	ld	r23, X+
    3acc:	8d 91       	ld	r24, X+
    3ace:	9c 91       	ld	r25, X
    3ad0:	28 ee       	ldi	r18, 0xE8	; 232
    3ad2:	33 e0       	ldi	r19, 0x03	; 3
    3ad4:	40 e0       	ldi	r20, 0x00	; 0
    3ad6:	50 e0       	ldi	r21, 0x00	; 0
    3ad8:	0e 94 93 26 	call	0x4d26	; 0x4d26 <__udivmodsi4>
    3adc:	ba 01       	movw	r22, r20
    3ade:	a9 01       	movw	r20, r18
    3ae0:	c6 01       	movw	r24, r12
    3ae2:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <_ZN8emstreamlsEm>
	serial.putchar ('.');
    3ae6:	d6 01       	movw	r26, r12
    3ae8:	ed 91       	ld	r30, X+
    3aea:	fc 91       	ld	r31, X
    3aec:	02 80       	ldd	r0, Z+2	; 0x02
    3aee:	f3 81       	ldd	r31, Z+3	; 0x03
    3af0:	e0 2d       	mov	r30, r0
    3af2:	6e e2       	ldi	r22, 0x2E	; 46
    3af4:	c6 01       	movw	r24, r12
    3af6:	19 95       	eicall

	// Now get the microseconds; these will be written with leading zeros as needed
	div_result.quot = stamp.get_microsec ();
    3af8:	c8 01       	movw	r24, r16
    3afa:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <_ZN10time_stamp12get_microsecEv>
    3afe:	8e 01       	movw	r16, r28
    3b00:	09 5f       	subi	r16, 0xF9	; 249
    3b02:	1f 4f       	sbci	r17, 0xFF	; 255
    3b04:	fe 01       	movw	r30, r28
    3b06:	31 96       	adiw	r30, 0x01	; 1
    3b08:	7f 01       	movw	r14, r30
	for (int8_t index = 5; index >= 0; index--)
	{
		div_result = ldiv (div_result.quot, 10);
    3b0a:	2a e0       	ldi	r18, 0x0A	; 10
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	40 e0       	ldi	r20, 0x00	; 0
    3b10:	50 e0       	ldi	r21, 0x00	; 0
    3b12:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <__divmodsi4>
    3b16:	e6 2f       	mov	r30, r22
    3b18:	28 87       	std	Y+8, r18	; 0x08
    3b1a:	39 87       	std	Y+9, r19	; 0x09
    3b1c:	4a 87       	std	Y+10, r20	; 0x0a
    3b1e:	5b 87       	std	Y+11, r21	; 0x0b
    3b20:	68 85       	ldd	r22, Y+8	; 0x08
    3b22:	79 85       	ldd	r23, Y+9	; 0x09
    3b24:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b26:	9b 85       	ldd	r25, Y+11	; 0x0b
		dig_buffer[index] = div_result.rem + '0';
    3b28:	20 e3       	ldi	r18, 0x30	; 48
    3b2a:	2e 0f       	add	r18, r30
    3b2c:	d8 01       	movw	r26, r16
    3b2e:	2e 93       	st	-X, r18
    3b30:	8d 01       	movw	r16, r26
	serial << stamp.get_seconds ();
	serial.putchar ('.');

	// Now get the microseconds; these will be written with leading zeros as needed
	div_result.quot = stamp.get_microsec ();
	for (int8_t index = 5; index >= 0; index--)
    3b32:	ae 15       	cp	r26, r14
    3b34:	bf 05       	cpc	r27, r15
    3b36:	49 f7       	brne	.-46     	; 0x3b0a <_ZlsR8emstreamR10time_stamp+0x62>
		div_result = ldiv (div_result.quot, 10);
		dig_buffer[index] = div_result.rem + '0';
	}

	// The last item in the string must be a '\0' null character
	dig_buffer[6] = '\0';
    3b38:	1f 82       	std	Y+7, r1	; 0x07
    3b3a:	be 01       	movw	r22, r28
    3b3c:	6f 5f       	subi	r22, 0xFF	; 255
    3b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b40:	c6 01       	movw	r24, r12
    3b42:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>

	// Write the buffer, which now contains microsecond digits
	serial << dig_buffer;

	return (serial);
}
    3b46:	c6 01       	movw	r24, r12
    3b48:	2f 96       	adiw	r28, 0x0f	; 15
    3b4a:	cd bf       	out	0x3d, r28	; 61
    3b4c:	de bf       	out	0x3e, r29	; 62
    3b4e:	df 91       	pop	r29
    3b50:	cf 91       	pop	r28
    3b52:	1f 91       	pop	r17
    3b54:	0f 91       	pop	r16
    3b56:	ff 90       	pop	r15
    3b58:	ef 90       	pop	r14
    3b5a:	df 90       	pop	r13
    3b5c:	cf 90       	pop	r12
    3b5e:	08 95       	ret

00003b60 <_ZN10time_stamp10set_to_nowEv>:
 *  tick count. Still trying to figure out how to detect and fix this problem... 
 *  @return A reference to this time_stamp object, useful for printing the current time
 */

time_stamp& time_stamp::set_to_now (void)
{
    3b60:	cf 93       	push	r28
    3b62:	df 93       	push	r29
    3b64:	ec 01       	movw	r28, r24
	// First disable interrupts so that if the hardware timer hits its maximum value
	// after this point and before we're done, the RTOS tick count won't be incremented
	// and also this function won't be interrupted by a task switch
	portENTER_CRITICAL ();
    3b66:	0f b6       	in	r0, 0x3f	; 63
    3b68:	f8 94       	cli
    3b6a:	0f 92       	push	r0
	#elif (defined TIMER3_COMPA_vect)
		hardware_count = TCNT3;
	#elif (defined TIMER1_COMPA_vect)
	hardware_count = TCNT1;
	#else
		hardware_count = TCC0.CNT;
    3b6c:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    3b70:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    3b74:	8c 83       	std	Y+4, r24	; 0x04
    3b76:	9d 83       	std	Y+5, r25	; 0x05
	#endif

	// Now get the tick count (interrupts are still disabled)
	tick_count = xTaskGetTickCount ();
    3b78:	0e 94 31 16 	call	0x2c62	; 0x2c62 <xTaskGetTickCount>
    3b7c:	68 83       	st	Y, r22
    3b7e:	79 83       	std	Y+1, r23	; 0x01
    3b80:	8a 83       	std	Y+2, r24	; 0x02
    3b82:	9b 83       	std	Y+3, r25	; 0x03

	// Re-enable interrupts here; if the tick count is incremented now, that's fine
	portEXIT_CRITICAL ();
    3b84:	0f 90       	pop	r0
    3b86:	0f be       	out	0x3f, r0	; 63

	// Return a reference to this object
	return (*this);
}
    3b88:	ce 01       	movw	r24, r28
    3b8a:	df 91       	pop	r29
    3b8c:	cf 91       	pop	r28
    3b8e:	08 95       	ret

00003b90 <_Z15hex_dump_memoryPhS_P8emstreambh>:
 *      of a task's stack memory space. 
 */

void hex_dump_memory (uint8_t* start_address, uint8_t* end_address,
					  emstream* p_ser_dev, bool highlight, uint8_t empty_code)
{
    3b90:	5f 92       	push	r5
    3b92:	6f 92       	push	r6
    3b94:	7f 92       	push	r7
    3b96:	8f 92       	push	r8
    3b98:	9f 92       	push	r9
    3b9a:	af 92       	push	r10
    3b9c:	bf 92       	push	r11
    3b9e:	cf 92       	push	r12
    3ba0:	df 92       	push	r13
    3ba2:	ef 92       	push	r14
    3ba4:	ff 92       	push	r15
    3ba6:	0f 93       	push	r16
    3ba8:	1f 93       	push	r17
    3baa:	cf 93       	push	r28
    3bac:	df 93       	push	r29
    3bae:	5c 01       	movw	r10, r24
    3bb0:	4b 01       	movw	r8, r22
    3bb2:	7a 01       	movw	r14, r20
    3bb4:	12 2f       	mov	r17, r18
    3bb6:	70 2e       	mov	r7, r16
	// pointers together, we convert the pointers into equivalent integers (this is
	// non-portable and may need to be changed for other processors!), add those
	// together, then convert back into a pointer

	// Print DUMP_BYTES_PER_LINE bytes on each line
	*p_ser_dev << hex;
    3bb8:	63 e0       	ldi	r22, 0x03	; 3
    3bba:	ca 01       	movw	r24, r20
    3bbc:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
	while (start_address < end_address)
    3bc0:	a8 14       	cp	r10, r8
    3bc2:	b9 04       	cpc	r11, r9
    3bc4:	08 f0       	brcs	.+2      	; 0x3bc8 <_Z15hex_dump_memoryPhS_P8emstreambh+0x38>
    3bc6:	7d c0       	rjmp	.+250    	; 0x3cc2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x132>
    3bc8:	65 01       	movw	r12, r10
    3bca:	84 e1       	ldi	r24, 0x14	; 20
    3bcc:	c8 0e       	add	r12, r24
    3bce:	d1 1c       	adc	r13, r1
    3bd0:	00 e0       	ldi	r16, 0x00	; 0
	{
		// Print the line address 
		*p_ser_dev << (size_t)(start_address) << PMS ("  ");
    3bd2:	6a 2c       	mov	r6, r10
    3bd4:	5b 2c       	mov	r5, r11
    3bd6:	b5 01       	movw	r22, r10
    3bd8:	c7 01       	movw	r24, r14
    3bda:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_ZN8emstreamlsEj>
    3bde:	6a e0       	ldi	r22, 0x0A	; 10
    3be0:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    3be4:	69 e6       	ldi	r22, 0x69	; 105
    3be6:	76 e0       	ldi	r23, 0x06	; 6
    3be8:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>

		// Show a line full of data in hexadecimal format. If the memory has not been
		// changed from its original value, show it non-highlighted
		if (highlight && found_changes)
    3bec:	11 23       	and	r17, r17
    3bee:	09 f4       	brne	.+2      	; 0x3bf2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x62>
    3bf0:	6d c0       	rjmp	.+218    	; 0x3ccc <_Z15hex_dump_memoryPhS_P8emstreambh+0x13c>
    3bf2:	00 23       	and	r16, r16
    3bf4:	09 f4       	brne	.+2      	; 0x3bf8 <_Z15hex_dump_memoryPhS_P8emstreambh+0x68>
    3bf6:	6a c0       	rjmp	.+212    	; 0x3ccc <_Z15hex_dump_memoryPhS_P8emstreambh+0x13c>
		{
			*p_ser_dev << ATERM_BOLD;
    3bf8:	6a e0       	ldi	r22, 0x0A	; 10
    3bfa:	c7 01       	movw	r24, r14
    3bfc:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    3c00:	64 e6       	ldi	r22, 0x64	; 100
    3c02:	76 e0       	ldi	r23, 0x06	; 6
    3c04:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    3c08:	61 c0       	rjmp	.+194    	; 0x3ccc <_Z15hex_dump_memoryPhS_P8emstreambh+0x13c>
		}
		for (byte_count = 0; byte_count < DUMP_BYTES_PER_LINE; byte_count++)
		{
			if (highlight && (!found_changes) && ((*start_address) != empty_code))
    3c0a:	11 23       	and	r17, r17
    3c0c:	71 f0       	breq	.+28     	; 0x3c2a <_Z15hex_dump_memoryPhS_P8emstreambh+0x9a>
    3c0e:	01 11       	cpse	r16, r1
    3c10:	0c c0       	rjmp	.+24     	; 0x3c2a <_Z15hex_dump_memoryPhS_P8emstreambh+0x9a>
    3c12:	88 81       	ld	r24, Y
    3c14:	87 15       	cp	r24, r7
    3c16:	49 f0       	breq	.+18     	; 0x3c2a <_Z15hex_dump_memoryPhS_P8emstreambh+0x9a>
			{
				found_changes = true;
				*p_ser_dev << ATERM_BOLD;
    3c18:	6a e0       	ldi	r22, 0x0A	; 10
    3c1a:	c7 01       	movw	r24, r14
    3c1c:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    3c20:	6f e5       	ldi	r22, 0x5F	; 95
    3c22:	76 e0       	ldi	r23, 0x06	; 6
    3c24:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
		}
		for (byte_count = 0; byte_count < DUMP_BYTES_PER_LINE; byte_count++)
		{
			if (highlight && (!found_changes) && ((*start_address) != empty_code))
			{
				found_changes = true;
    3c28:	01 e0       	ldi	r16, 0x01	; 1
				*p_ser_dev << ATERM_BOLD;
			}
			*p_ser_dev << (uint8_t)(*start_address++) << (char)(' ');
    3c2a:	69 91       	ld	r22, Y+
    3c2c:	c7 01       	movw	r24, r14
    3c2e:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN8emstreamlsEh>
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    3c32:	dc 01       	movw	r26, r24
    3c34:	ed 91       	ld	r30, X+
    3c36:	fc 91       	ld	r31, X
    3c38:	02 80       	ldd	r0, Z+2	; 0x02
    3c3a:	f3 81       	ldd	r31, Z+3	; 0x03
    3c3c:	e0 2d       	mov	r30, r0
    3c3e:	60 e2       	ldi	r22, 0x20	; 32
    3c40:	19 95       	eicall
		// changed from its original value, show it non-highlighted
		if (highlight && found_changes)
		{
			*p_ser_dev << ATERM_BOLD;
		}
		for (byte_count = 0; byte_count < DUMP_BYTES_PER_LINE; byte_count++)
    3c42:	cc 16       	cp	r12, r28
    3c44:	dd 06       	cpc	r13, r29
    3c46:	09 f7       	brne	.-62     	; 0x3c0a <_Z15hex_dump_memoryPhS_P8emstreambh+0x7a>
			}
			*p_ser_dev << (uint8_t)(*start_address++) << (char)(' ');
		}

		// Show the same line full of data in text format
		if (highlight)
    3c48:	11 23       	and	r17, r17
    3c4a:	89 f0       	breq	.+34     	; 0x3c6e <_Z15hex_dump_memoryPhS_P8emstreambh+0xde>
		{
			*p_ser_dev << ATERM_NORM_INT << (char)(' ');
    3c4c:	6a e0       	ldi	r22, 0x0A	; 10
    3c4e:	c7 01       	movw	r24, r14
    3c50:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    3c54:	ec 01       	movw	r28, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    3c56:	69 e5       	ldi	r22, 0x59	; 89
    3c58:	76 e0       	ldi	r23, 0x06	; 6
    3c5a:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    3c5e:	e8 81       	ld	r30, Y
    3c60:	f9 81       	ldd	r31, Y+1	; 0x01
    3c62:	02 80       	ldd	r0, Z+2	; 0x02
    3c64:	f3 81       	ldd	r31, Z+3	; 0x03
    3c66:	e0 2d       	mov	r30, r0
    3c68:	60 e2       	ldi	r22, 0x20	; 32
    3c6a:	ce 01       	movw	r24, r28
    3c6c:	19 95       	eicall
		}
		for (byte_count = 0; byte_count < DUMP_BYTES_PER_LINE; byte_count++)
		{
			if (highlight && (!found_changes) && ((*start_address) != empty_code))
			{
				found_changes = true;
    3c6e:	c6 2d       	mov	r28, r6
    3c70:	d5 2d       	mov	r29, r5
		{
			*p_ser_dev << ATERM_NORM_INT << (char)(' ');
		}
		for (start_address -= DUMP_BYTES_PER_LINE; byte_count > 0; byte_count--)
		{
			temp_byte = *start_address++;
    3c72:	69 91       	ld	r22, Y+
			if (temp_byte >= ' ' && temp_byte <= '~')
    3c74:	80 ee       	ldi	r24, 0xE0	; 224
    3c76:	86 0f       	add	r24, r22
    3c78:	8f 35       	cpi	r24, 0x5F	; 95
    3c7a:	48 f4       	brcc	.+18     	; 0x3c8e <_Z15hex_dump_memoryPhS_P8emstreambh+0xfe>
				p_ser_dev->putchar (temp_byte);
    3c7c:	d7 01       	movw	r26, r14
    3c7e:	ed 91       	ld	r30, X+
    3c80:	fc 91       	ld	r31, X
    3c82:	02 80       	ldd	r0, Z+2	; 0x02
    3c84:	f3 81       	ldd	r31, Z+3	; 0x03
    3c86:	e0 2d       	mov	r30, r0
    3c88:	c7 01       	movw	r24, r14
    3c8a:	19 95       	eicall
    3c8c:	09 c0       	rjmp	.+18     	; 0x3ca0 <_Z15hex_dump_memoryPhS_P8emstreambh+0x110>
			else
				p_ser_dev->putchar ('.');
    3c8e:	d7 01       	movw	r26, r14
    3c90:	ed 91       	ld	r30, X+
    3c92:	fc 91       	ld	r31, X
    3c94:	02 80       	ldd	r0, Z+2	; 0x02
    3c96:	f3 81       	ldd	r31, Z+3	; 0x03
    3c98:	e0 2d       	mov	r30, r0
    3c9a:	6e e2       	ldi	r22, 0x2E	; 46
    3c9c:	c7 01       	movw	r24, r14
    3c9e:	19 95       	eicall
		// Show the same line full of data in text format
		if (highlight)
		{
			*p_ser_dev << ATERM_NORM_INT << (char)(' ');
		}
		for (start_address -= DUMP_BYTES_PER_LINE; byte_count > 0; byte_count--)
    3ca0:	cc 16       	cp	r12, r28
    3ca2:	dd 06       	cpc	r13, r29
    3ca4:	31 f7       	brne	.-52     	; 0x3c72 <_Z15hex_dump_memoryPhS_P8emstreambh+0xe2>
    3ca6:	b4 e1       	ldi	r27, 0x14	; 20
    3ca8:	ab 0e       	add	r10, r27
    3caa:	b1 1c       	adc	r11, r1
			else
				p_ser_dev->putchar ('.');
		}

		// Put a return at the end of the line
		*p_ser_dev << endl;
    3cac:	66 e0       	ldi	r22, 0x06	; 6
    3cae:	c7 01       	movw	r24, r14
    3cb0:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    3cb4:	84 e1       	ldi	r24, 0x14	; 20
    3cb6:	c8 0e       	add	r12, r24
    3cb8:	d1 1c       	adc	r13, r1
	// non-portable and may need to be changed for other processors!), add those
	// together, then convert back into a pointer

	// Print DUMP_BYTES_PER_LINE bytes on each line
	*p_ser_dev << hex;
	while (start_address < end_address)
    3cba:	a8 14       	cp	r10, r8
    3cbc:	b9 04       	cpc	r11, r9
    3cbe:	08 f4       	brcc	.+2      	; 0x3cc2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x132>
    3cc0:	88 cf       	rjmp	.-240    	; 0x3bd2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x42>
		}

		// Put a return at the end of the line
		*p_ser_dev << endl;
	}
	*p_ser_dev << dec;
    3cc2:	62 e0       	ldi	r22, 0x02	; 2
    3cc4:	c7 01       	movw	r24, r14
    3cc6:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
}
    3cca:	03 c0       	rjmp	.+6      	; 0x3cd2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x142>
	// non-portable and may need to be changed for other processors!), add those
	// together, then convert back into a pointer

	// Print DUMP_BYTES_PER_LINE bytes on each line
	*p_ser_dev << hex;
	while (start_address < end_address)
    3ccc:	c6 2d       	mov	r28, r6
    3cce:	d5 2d       	mov	r29, r5
    3cd0:	9c cf       	rjmp	.-200    	; 0x3c0a <_Z15hex_dump_memoryPhS_P8emstreambh+0x7a>

		// Put a return at the end of the line
		*p_ser_dev << endl;
	}
	*p_ser_dev << dec;
}
    3cd2:	df 91       	pop	r29
    3cd4:	cf 91       	pop	r28
    3cd6:	1f 91       	pop	r17
    3cd8:	0f 91       	pop	r16
    3cda:	ff 90       	pop	r15
    3cdc:	ef 90       	pop	r14
    3cde:	df 90       	pop	r13
    3ce0:	cf 90       	pop	r12
    3ce2:	bf 90       	pop	r11
    3ce4:	af 90       	pop	r10
    3ce6:	9f 90       	pop	r9
    3ce8:	8f 90       	pop	r8
    3cea:	7f 90       	pop	r7
    3cec:	6f 90       	pop	r6
    3cee:	5f 90       	pop	r5
    3cf0:	08 95       	ret

00003cf2 <_Znwj>:
 *  @param g A pointer to some random thing
 */
extern "C"
{
void __cxa_guard_abort (__guard *g)
    {
    3cf2:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <pvPortMalloc>
    3cf6:	08 95       	ret

00003cf8 <_Znaj>:
    3cf8:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <pvPortMalloc>
    3cfc:	08 95       	ret

00003cfe <__cxa_pure_virtual>:
 */

extern "C"
{    
void __cxa_pure_virtual (void)
    {
    3cfe:	08 95       	ret

00003d00 <_ZN7base232C1EjP12USART_struct>:
 *  @param baud_rate The desired baud rate for serial communications. Default is 9600
 *  @param port_number The number of the serial port, 0 or 1 (the second port numbered
 *                     1 only exists on some processors). The default is port 0 
 */

base232::base232 (unsigned int baud_rate, USART_t* p_usart)
    3d00:	cf 93       	push	r28
    3d02:	df 93       	push	r29
    3d04:	fc 01       	movw	r30, r24
    3d06:	da 01       	movw	r26, r20
{
	// Store pointers to usart struct and port struct
	p_usart = p_usart;
	p_port = p_port;
	
	if(p_usart == &USARTC0)
    3d08:	40 3a       	cpi	r20, 0xA0	; 160
    3d0a:	68 e0       	ldi	r22, 0x08	; 8
    3d0c:	56 07       	cpc	r21, r22
    3d0e:	49 f4       	brne	.+18     	; 0x3d22 <_ZN7base232C1EjP12USART_struct+0x22>
	{
		p_port = &PORTC;
    3d10:	80 e4       	ldi	r24, 0x40	; 64
    3d12:	96 e0       	ldi	r25, 0x06	; 6
    3d14:	82 83       	std	Z+2, r24	; 0x02
    3d16:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 2;
    3d18:	82 e0       	ldi	r24, 0x02	; 2
    3d1a:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 3;
    3d1c:	83 e0       	ldi	r24, 0x03	; 3
    3d1e:	85 83       	std	Z+5, r24	; 0x05
    3d20:	32 c0       	rjmp	.+100    	; 0x3d86 <_ZN7base232C1EjP12USART_struct+0x86>
	}
#ifdef USARTC1 
	else if(p_usart == &USARTC1)
    3d22:	40 3b       	cpi	r20, 0xB0	; 176
    3d24:	78 e0       	ldi	r23, 0x08	; 8
    3d26:	57 07       	cpc	r21, r23
    3d28:	49 f4       	brne	.+18     	; 0x3d3c <_ZN7base232C1EjP12USART_struct+0x3c>
	{
		p_port = &PORTC;
    3d2a:	80 e4       	ldi	r24, 0x40	; 64
    3d2c:	96 e0       	ldi	r25, 0x06	; 6
    3d2e:	82 83       	std	Z+2, r24	; 0x02
    3d30:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 6;
    3d32:	86 e0       	ldi	r24, 0x06	; 6
    3d34:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 7;
    3d36:	87 e0       	ldi	r24, 0x07	; 7
    3d38:	85 83       	std	Z+5, r24	; 0x05
    3d3a:	25 c0       	rjmp	.+74     	; 0x3d86 <_ZN7base232C1EjP12USART_struct+0x86>
	}
#endif
#ifdef USARTD0
	else if(p_usart == &USARTD0)
    3d3c:	40 3a       	cpi	r20, 0xA0	; 160
    3d3e:	89 e0       	ldi	r24, 0x09	; 9
    3d40:	58 07       	cpc	r21, r24
    3d42:	49 f4       	brne	.+18     	; 0x3d56 <_ZN7base232C1EjP12USART_struct+0x56>
	{
		p_port = &PORTD;
    3d44:	80 e6       	ldi	r24, 0x60	; 96
    3d46:	96 e0       	ldi	r25, 0x06	; 6
    3d48:	82 83       	std	Z+2, r24	; 0x02
    3d4a:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 2;
    3d4c:	82 e0       	ldi	r24, 0x02	; 2
    3d4e:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 3;
    3d50:	83 e0       	ldi	r24, 0x03	; 3
    3d52:	85 83       	std	Z+5, r24	; 0x05
    3d54:	18 c0       	rjmp	.+48     	; 0x3d86 <_ZN7base232C1EjP12USART_struct+0x86>
	}
#endif
#ifdef USARTD1 
	else if(p_usart == &USARTD1)
    3d56:	40 3b       	cpi	r20, 0xB0	; 176
    3d58:	69 e0       	ldi	r22, 0x09	; 9
    3d5a:	56 07       	cpc	r21, r22
    3d5c:	49 f4       	brne	.+18     	; 0x3d70 <_ZN7base232C1EjP12USART_struct+0x70>
	{
		p_port = &PORTD;
    3d5e:	80 e6       	ldi	r24, 0x60	; 96
    3d60:	96 e0       	ldi	r25, 0x06	; 6
    3d62:	82 83       	std	Z+2, r24	; 0x02
    3d64:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 6;
    3d66:	86 e0       	ldi	r24, 0x06	; 6
    3d68:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 7;
    3d6a:	87 e0       	ldi	r24, 0x07	; 7
    3d6c:	85 83       	std	Z+5, r24	; 0x05
    3d6e:	0b c0       	rjmp	.+22     	; 0x3d86 <_ZN7base232C1EjP12USART_struct+0x86>
	}
#endif
#ifdef USARTE0
	else if(p_usart == &USARTE0)
    3d70:	40 3a       	cpi	r20, 0xA0	; 160
    3d72:	5a 40       	sbci	r21, 0x0A	; 10
    3d74:	41 f4       	brne	.+16     	; 0x3d86 <_ZN7base232C1EjP12USART_struct+0x86>
	{
		p_port = &PORTE;
    3d76:	80 e8       	ldi	r24, 0x80	; 128
    3d78:	96 e0       	ldi	r25, 0x06	; 6
    3d7a:	82 83       	std	Z+2, r24	; 0x02
    3d7c:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 2;
    3d7e:	82 e0       	ldi	r24, 0x02	; 2
    3d80:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 3;
    3d82:	83 e0       	ldi	r24, 0x03	; 3
    3d84:	85 83       	std	Z+5, r24	; 0x05
	else
	{
	}
	
	// Store pointers to data, status, config registers
	p_UDR = &(p_usart->DATA);
    3d86:	a6 83       	std	Z+6, r26	; 0x06
    3d88:	b7 83       	std	Z+7, r27	; 0x07
	p_USR = &(p_usart->STATUS);
    3d8a:	cd 01       	movw	r24, r26
    3d8c:	01 96       	adiw	r24, 0x01	; 1
    3d8e:	80 87       	std	Z+8, r24	; 0x08
    3d90:	91 87       	std	Z+9, r25	; 0x09
	p_UCR = &(p_usart->CTRLB);
    3d92:	03 96       	adiw	r24, 0x03	; 3
    3d94:	82 87       	std	Z+10, r24	; 0x0a
    3d96:	93 87       	std	Z+11, r25	; 0x0b
	
	// Set up TXD as an output that is high
	p_port->OUT |= (1 << txd_pin);
    3d98:	25 81       	ldd	r18, Z+5	; 0x05
    3d9a:	c2 81       	ldd	r28, Z+2	; 0x02
    3d9c:	d3 81       	ldd	r29, Z+3	; 0x03
    3d9e:	4c 81       	ldd	r20, Y+4	; 0x04
    3da0:	81 e0       	ldi	r24, 0x01	; 1
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	bc 01       	movw	r22, r24
    3da6:	02 c0       	rjmp	.+4      	; 0x3dac <_ZN7base232C1EjP12USART_struct+0xac>
    3da8:	66 0f       	add	r22, r22
    3daa:	77 1f       	adc	r23, r23
    3dac:	2a 95       	dec	r18
    3dae:	e2 f7       	brpl	.-8      	; 0x3da8 <_ZN7base232C1EjP12USART_struct+0xa8>
    3db0:	9b 01       	movw	r18, r22
    3db2:	24 2b       	or	r18, r20
    3db4:	2c 83       	std	Y+4, r18	; 0x04
	p_port->DIR |= (1 << txd_pin);
    3db6:	25 81       	ldd	r18, Z+5	; 0x05
    3db8:	c2 81       	ldd	r28, Z+2	; 0x02
    3dba:	d3 81       	ldd	r29, Z+3	; 0x03
    3dbc:	48 81       	ld	r20, Y
    3dbe:	bc 01       	movw	r22, r24
    3dc0:	02 c0       	rjmp	.+4      	; 0x3dc6 <_ZN7base232C1EjP12USART_struct+0xc6>
    3dc2:	66 0f       	add	r22, r22
    3dc4:	77 1f       	adc	r23, r23
    3dc6:	2a 95       	dec	r18
    3dc8:	e2 f7       	brpl	.-8      	; 0x3dc2 <_ZN7base232C1EjP12USART_struct+0xc2>
    3dca:	9b 01       	movw	r18, r22
    3dcc:	24 2b       	or	r18, r20
    3dce:	28 83       	st	Y, r18
	
	// Set up RXD as an input
	p_port->DIR &= ~(1 << rxd_pin);
    3dd0:	34 81       	ldd	r19, Z+4	; 0x04
    3dd2:	c2 81       	ldd	r28, Z+2	; 0x02
    3dd4:	d3 81       	ldd	r29, Z+3	; 0x03
    3dd6:	28 81       	ld	r18, Y
    3dd8:	02 c0       	rjmp	.+4      	; 0x3dde <_ZN7base232C1EjP12USART_struct+0xde>
    3dda:	88 0f       	add	r24, r24
    3ddc:	99 1f       	adc	r25, r25
    3dde:	3a 95       	dec	r19
    3de0:	e2 f7       	brpl	.-8      	; 0x3dda <_ZN7base232C1EjP12USART_struct+0xda>
    3de2:	80 95       	com	r24
    3de4:	90 95       	com	r25
    3de6:	82 23       	and	r24, r18
    3de8:	88 83       	st	Y, r24
	
	// Enable interrupts for RX at high priority
	p_usart->CTRLA = (0 << USART_RXCINTLVL1_bp | 1 << USART_RXCINTLVL0_bp);
    3dea:	80 e1       	ldi	r24, 0x10	; 16
    3dec:	13 96       	adiw	r26, 0x03	; 3
    3dee:	8c 93       	st	X, r24
    3df0:	13 97       	sbiw	r26, 0x03	; 3
	
	// Select USART Asynchronous Mode and choose character size
	p_usart->CTRLC = (1 << USART_CHSIZE0_bp | 1 << USART_CHSIZE1_bp );
    3df2:	83 e0       	ldi	r24, 0x03	; 3
    3df4:	15 96       	adiw	r26, 0x05	; 5
    3df6:	8c 93       	st	X, r24
    3df8:	15 97       	sbiw	r26, 0x05	; 5

	// Select the baudrate according to Table 23-5 in the datasheet
	p_usart->BAUDCTRLB = (-1 << USART_BSCALE0_bp);
    3dfa:	80 ef       	ldi	r24, 0xF0	; 240
    3dfc:	17 96       	adiw	r26, 0x07	; 7
    3dfe:	8c 93       	st	X, r24
    3e00:	17 97       	sbiw	r26, 0x07	; 7
	p_usart->BAUDCTRLA = (33 << USART_BSEL0_bp);
    3e02:	81 e2       	ldi	r24, 0x21	; 33
    3e04:	16 96       	adiw	r26, 0x06	; 6
    3e06:	8c 93       	st	X, r24
    3e08:	16 97       	sbiw	r26, 0x06	; 6

	// Enable the RX and TX devices
	p_usart->CTRLB = (1 << USART_RXEN_bp | 1<< USART_TXEN_bp);
    3e0a:	88 e1       	ldi	r24, 0x18	; 24
    3e0c:	14 96       	adiw	r26, 0x04	; 4
    3e0e:	8c 93       	st	X, r24

	// Save some masks
	mask_RXC = USART_RXCIF_bm;
    3e10:	80 e8       	ldi	r24, 0x80	; 128
    3e12:	85 87       	std	Z+13, r24	; 0x0d
	mask_TXC = USART_TXCIF_bm;
    3e14:	80 e4       	ldi	r24, 0x40	; 64
    3e16:	86 87       	std	Z+14, r24	; 0x0e
	mask_UDRE = USART_DREIF_bm;
    3e18:	80 e2       	ldi	r24, 0x20	; 32
    3e1a:	84 87       	std	Z+12, r24	; 0x0c
	
	// Read the data register to ensure that it's empty
	p_UDR[0]; p_UDR[0];
    3e1c:	06 80       	ldd	r0, Z+6	; 0x06
    3e1e:	f7 81       	ldd	r31, Z+7	; 0x07
    3e20:	e0 2d       	mov	r30, r0
    3e22:	80 81       	ld	r24, Z
    3e24:	80 81       	ld	r24, Z
}
    3e26:	df 91       	pop	r29
    3e28:	cf 91       	pop	r28
    3e2a:	08 95       	ret

00003e2c <_ZN8emstream13ready_to_sendEv>:
		digits = 7;
	}
	bts_glob_prec = digits;

	return (manip_set_precision);
}
    3e2c:	81 e0       	ldi	r24, 0x01	; 1
    3e2e:	08 95       	ret

00003e30 <_ZN8emstream7getcharEv>:
    3e30:	80 e0       	ldi	r24, 0x00	; 0
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	08 95       	ret

00003e36 <_ZN8emstream14check_for_charEv>:
    3e36:	80 e0       	ldi	r24, 0x00	; 0
    3e38:	08 95       	ret

00003e3a <_ZN8emstream12transmit_nowEv>:
    3e3a:	08 95       	ret

00003e3c <_ZN8emstream12clear_screenEv>:
    3e3c:	08 95       	ret

00003e3e <_ZN8emstreamC1Ev>:
    3e3e:	fc 01       	movw	r30, r24
    3e40:	84 ea       	ldi	r24, 0xA4	; 164
    3e42:	91 e2       	ldi	r25, 0x21	; 33
    3e44:	80 83       	st	Z, r24
    3e46:	91 83       	std	Z+1, r25	; 0x01
    3e48:	8a e0       	ldi	r24, 0x0A	; 10
    3e4a:	82 83       	std	Z+2, r24	; 0x02
    3e4c:	13 82       	std	Z+3, r1	; 0x03
    3e4e:	83 e0       	ldi	r24, 0x03	; 3
    3e50:	85 83       	std	Z+5, r24	; 0x05
    3e52:	14 82       	std	Z+4, r1	; 0x04
    3e54:	16 82       	std	Z+6, r1	; 0x06
    3e56:	17 82       	std	Z+7, r1	; 0x07
    3e58:	08 95       	ret

00003e5a <_ZN8emstream4putsEPKc>:
    3e5a:	0f 93       	push	r16
    3e5c:	1f 93       	push	r17
    3e5e:	cf 93       	push	r28
    3e60:	df 93       	push	r29
    3e62:	8c 01       	movw	r16, r24
    3e64:	fb 01       	movw	r30, r22
    3e66:	dc 01       	movw	r26, r24
    3e68:	14 96       	adiw	r26, 0x04	; 4
    3e6a:	8c 91       	ld	r24, X
    3e6c:	81 11       	cpse	r24, r1
    3e6e:	04 c0       	rjmp	.+8      	; 0x3e78 <_ZN8emstream4putsEPKc+0x1e>
    3e70:	60 81       	ld	r22, Z
    3e72:	61 11       	cpse	r22, r1
    3e74:	17 c0       	rjmp	.+46     	; 0x3ea4 <_ZN8emstream4putsEPKc+0x4a>
    3e76:	23 c0       	rjmp	.+70     	; 0x3ebe <_ZN8emstream4putsEPKc+0x64>
    3e78:	d8 01       	movw	r26, r16
    3e7a:	14 96       	adiw	r26, 0x04	; 4
    3e7c:	1c 92       	st	X, r1
    3e7e:	eb 01       	movw	r28, r22
    3e80:	21 96       	adiw	r28, 0x01	; 1
    3e82:	64 91       	lpm	r22, Z
    3e84:	66 23       	and	r22, r22
    3e86:	d9 f0       	breq	.+54     	; 0x3ebe <_ZN8emstream4putsEPKc+0x64>
    3e88:	d8 01       	movw	r26, r16
    3e8a:	ed 91       	ld	r30, X+
    3e8c:	fc 91       	ld	r31, X
    3e8e:	02 80       	ldd	r0, Z+2	; 0x02
    3e90:	f3 81       	ldd	r31, Z+3	; 0x03
    3e92:	e0 2d       	mov	r30, r0
    3e94:	c8 01       	movw	r24, r16
    3e96:	19 95       	eicall
    3e98:	fe 01       	movw	r30, r28
    3e9a:	64 91       	lpm	r22, Z
    3e9c:	21 96       	adiw	r28, 0x01	; 1
    3e9e:	61 11       	cpse	r22, r1
    3ea0:	f3 cf       	rjmp	.-26     	; 0x3e88 <_ZN8emstream4putsEPKc+0x2e>
    3ea2:	0d c0       	rjmp	.+26     	; 0x3ebe <_ZN8emstream4putsEPKc+0x64>
    3ea4:	ef 01       	movw	r28, r30
    3ea6:	21 96       	adiw	r28, 0x01	; 1
    3ea8:	d8 01       	movw	r26, r16
    3eaa:	ed 91       	ld	r30, X+
    3eac:	fc 91       	ld	r31, X
    3eae:	02 80       	ldd	r0, Z+2	; 0x02
    3eb0:	f3 81       	ldd	r31, Z+3	; 0x03
    3eb2:	e0 2d       	mov	r30, r0
    3eb4:	c8 01       	movw	r24, r16
    3eb6:	19 95       	eicall
    3eb8:	69 91       	ld	r22, Y+
    3eba:	61 11       	cpse	r22, r1
    3ebc:	f5 cf       	rjmp	.-22     	; 0x3ea8 <_ZN8emstream4putsEPKc+0x4e>
    3ebe:	df 91       	pop	r29
    3ec0:	cf 91       	pop	r28
    3ec2:	1f 91       	pop	r17
    3ec4:	0f 91       	pop	r16
    3ec6:	08 95       	ret

00003ec8 <_ZN8emstreamlsE15ser_manipulator>:
 *  @return A reference to the serial device to which the data was printed. This
 *          reference is used to string printable items together with "<<" operators
 */

emstream& emstream::operator<< (ser_manipulator new_manip)
{
    3ec8:	cf 93       	push	r28
    3eca:	df 93       	push	r29
    3ecc:	ec 01       	movw	r28, r24
	switch (new_manip)
    3ece:	86 2f       	mov	r24, r22
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	8b 30       	cpi	r24, 0x0B	; 11
    3ed4:	91 05       	cpc	r25, r1
    3ed6:	d8 f5       	brcc	.+118    	; 0x3f4e <_ZN8emstreamlsE15ser_manipulator+0x86>
    3ed8:	fc 01       	movw	r30, r24
    3eda:	88 27       	eor	r24, r24
    3edc:	e2 50       	subi	r30, 0x02	; 2
    3ede:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee0:	8f 4f       	sbci	r24, 0xFF	; 255
    3ee2:	0c 94 d4 26 	jmp	0x4da8	; 0x4da8 <__tablejump2__>
	{
		case (bin):                         // Print integers in binary
			base = 2;
    3ee6:	82 e0       	ldi	r24, 0x02	; 2
    3ee8:	8a 83       	std	Y+2, r24	; 0x02
			break;
    3eea:	31 c0       	rjmp	.+98     	; 0x3f4e <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (oct):                         // Print integers in octal
			base = 8;
    3eec:	88 e0       	ldi	r24, 0x08	; 8
    3eee:	8a 83       	std	Y+2, r24	; 0x02
			break;
    3ef0:	2e c0       	rjmp	.+92     	; 0x3f4e <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (dec):                         // Print integers in decimal
			base = 10;
    3ef2:	8a e0       	ldi	r24, 0x0A	; 10
    3ef4:	8a 83       	std	Y+2, r24	; 0x02
			break;
    3ef6:	2b c0       	rjmp	.+86     	; 0x3f4e <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (hex):                         // Print integers in hexadecimal
			base = 16;
    3ef8:	80 e1       	ldi	r24, 0x10	; 16
    3efa:	8a 83       	std	Y+2, r24	; 0x02
			break;
    3efc:	28 c0       	rjmp	.+80     	; 0x3f4e <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (ascii):                       // Print chars as ASCII letters, etc.
			print_ascii = true;
    3efe:	81 e0       	ldi	r24, 0x01	; 1
    3f00:	8b 83       	std	Y+3, r24	; 0x03
			break;
    3f02:	25 c0       	rjmp	.+74     	; 0x3f4e <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (numeric):                     // Print chars as numbers
			print_ascii = false;
    3f04:	1b 82       	std	Y+3, r1	; 0x03
			break;
    3f06:	23 c0       	rjmp	.+70     	; 0x3f4e <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (endl):                        // Send an end-of-line
			ENDL_STYLE ();
    3f08:	e8 81       	ld	r30, Y
    3f0a:	f9 81       	ldd	r31, Y+1	; 0x01
    3f0c:	02 80       	ldd	r0, Z+2	; 0x02
    3f0e:	f3 81       	ldd	r31, Z+3	; 0x03
    3f10:	e0 2d       	mov	r30, r0
    3f12:	6d e0       	ldi	r22, 0x0D	; 13
    3f14:	ce 01       	movw	r24, r28
    3f16:	19 95       	eicall
    3f18:	e8 81       	ld	r30, Y
    3f1a:	f9 81       	ldd	r31, Y+1	; 0x01
    3f1c:	02 80       	ldd	r0, Z+2	; 0x02
    3f1e:	f3 81       	ldd	r31, Z+3	; 0x03
    3f20:	e0 2d       	mov	r30, r0
    3f22:	6a e0       	ldi	r22, 0x0A	; 10
    3f24:	ce 01       	movw	r24, r28
    3f26:	19 95       	eicall
			break;
    3f28:	12 c0       	rjmp	.+36     	; 0x3f4e <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (clrscr):                      // Send a clear-screen code
			clear_screen ();
    3f2a:	e8 81       	ld	r30, Y
    3f2c:	f9 81       	ldd	r31, Y+1	; 0x01
    3f2e:	02 84       	ldd	r0, Z+10	; 0x0a
    3f30:	f3 85       	ldd	r31, Z+11	; 0x0b
    3f32:	e0 2d       	mov	r30, r0
    3f34:	ce 01       	movw	r24, r28
    3f36:	19 95       	eicall
			break;
    3f38:	0a c0       	rjmp	.+20     	; 0x3f4e <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (send_now):                    // Send whatever's in the send buffer
			transmit_now ();
    3f3a:	e8 81       	ld	r30, Y
    3f3c:	f9 81       	ldd	r31, Y+1	; 0x01
    3f3e:	00 84       	ldd	r0, Z+8	; 0x08
    3f40:	f1 85       	ldd	r31, Z+9	; 0x09
    3f42:	e0 2d       	mov	r30, r0
    3f44:	ce 01       	movw	r24, r28
    3f46:	19 95       	eicall
			break;
    3f48:	02 c0       	rjmp	.+4      	; 0x3f4e <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (_p_str):                      // The next string is in program memory
			pgm_string = true;
    3f4a:	81 e0       	ldi	r24, 0x01	; 1
    3f4c:	8c 83       	std	Y+4, r24	; 0x04
		case (manip_set_precision):         // Set precision for printing floats
			break;
	};

	return (*this);
}
    3f4e:	ce 01       	movw	r24, r28
    3f50:	df 91       	pop	r29
    3f52:	cf 91       	pop	r28
    3f54:	08 95       	ret

00003f56 <_ZN8emstreamlsEj>:
 *          reference is used to string printable items together with "<<" operators
 *  @param num The 16-bit number to be sent out
 */

emstream& emstream::operator<< (uint16_t num)
{
    3f56:	ff 92       	push	r15
    3f58:	0f 93       	push	r16
    3f5a:	1f 93       	push	r17
    3f5c:	cf 93       	push	r28
    3f5e:	df 93       	push	r29
    3f60:	cd b7       	in	r28, 0x3d	; 61
    3f62:	de b7       	in	r29, 0x3e	; 62
    3f64:	61 97       	sbiw	r28, 0x11	; 17
    3f66:	cd bf       	out	0x3d, r28	; 61
    3f68:	de bf       	out	0x3e, r29	; 62
    3f6a:	8c 01       	movw	r16, r24
    3f6c:	f6 2e       	mov	r15, r22
    3f6e:	97 2f       	mov	r25, r23
	if (base == 16 || base == 8 || base == 2)
    3f70:	f8 01       	movw	r30, r16
    3f72:	42 81       	ldd	r20, Z+2	; 0x02
    3f74:	40 31       	cpi	r20, 0x10	; 16
    3f76:	21 f0       	breq	.+8      	; 0x3f80 <_ZN8emstreamlsEj+0x2a>
    3f78:	48 30       	cpi	r20, 0x08	; 8
    3f7a:	11 f0       	breq	.+4      	; 0x3f80 <_ZN8emstreamlsEj+0x2a>
    3f7c:	42 30       	cpi	r20, 0x02	; 2
    3f7e:	41 f4       	brne	.+16     	; 0x3f90 <_ZN8emstreamlsEj+0x3a>
		{
			uint16_t whole;
			uint8_t bits[2];
		} parts;
		parts.whole = num;
		*this << parts.bits[1] << parts.bits[0];
    3f80:	69 2f       	mov	r22, r25
    3f82:	c8 01       	movw	r24, r16
    3f84:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN8emstreamlsEh>
    3f88:	6f 2d       	mov	r22, r15
    3f8a:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN8emstreamlsEh>
    3f8e:	0d c0       	rjmp	.+26     	; 0x3faa <_ZN8emstreamlsEj+0x54>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    3f90:	50 e0       	ldi	r21, 0x00	; 0
    3f92:	be 01       	movw	r22, r28
    3f94:	6f 5f       	subi	r22, 0xFF	; 255
    3f96:	7f 4f       	sbci	r23, 0xFF	; 255
    3f98:	8f 2d       	mov	r24, r15
    3f9a:	0e 94 43 27 	call	0x4e86	; 0x4e86 <utoa>
	}
	else
	{
		char out_str[17];
		utoa (num, out_str, base);
		puts (out_str);
    3f9e:	be 01       	movw	r22, r28
    3fa0:	6f 5f       	subi	r22, 0xFF	; 255
    3fa2:	7f 4f       	sbci	r23, 0xFF	; 255
    3fa4:	c8 01       	movw	r24, r16
    3fa6:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
	}

	return (*this);
}
    3faa:	c8 01       	movw	r24, r16
    3fac:	61 96       	adiw	r28, 0x11	; 17
    3fae:	cd bf       	out	0x3d, r28	; 61
    3fb0:	de bf       	out	0x3e, r29	; 62
    3fb2:	df 91       	pop	r29
    3fb4:	cf 91       	pop	r28
    3fb6:	1f 91       	pop	r17
    3fb8:	0f 91       	pop	r16
    3fba:	ff 90       	pop	r15
    3fbc:	08 95       	ret

00003fbe <_ZN8emstreamlsEm>:
 *          reference is used to string printable items together with "<<" operators
 *  @param num The 32-bit number to be sent out
 */

emstream& emstream::operator<< (uint32_t num)
{
    3fbe:	df 92       	push	r13
    3fc0:	ef 92       	push	r14
    3fc2:	ff 92       	push	r15
    3fc4:	0f 93       	push	r16
    3fc6:	1f 93       	push	r17
    3fc8:	cf 93       	push	r28
    3fca:	df 93       	push	r29
    3fcc:	cd b7       	in	r28, 0x3d	; 61
    3fce:	de b7       	in	r29, 0x3e	; 62
    3fd0:	a1 97       	sbiw	r28, 0x21	; 33
    3fd2:	cd bf       	out	0x3d, r28	; 61
    3fd4:	de bf       	out	0x3e, r29	; 62
    3fd6:	8c 01       	movw	r16, r24
    3fd8:	d4 2e       	mov	r13, r20
    3fda:	e5 2e       	mov	r14, r21
    3fdc:	f6 2e       	mov	r15, r22
    3fde:	97 2f       	mov	r25, r23
	if (base == 16 || base == 8 || base == 2)
    3fe0:	f8 01       	movw	r30, r16
    3fe2:	22 81       	ldd	r18, Z+2	; 0x02
    3fe4:	20 31       	cpi	r18, 0x10	; 16
    3fe6:	21 f0       	breq	.+8      	; 0x3ff0 <_ZN8emstreamlsEm+0x32>
    3fe8:	28 30       	cpi	r18, 0x08	; 8
    3fea:	11 f0       	breq	.+4      	; 0x3ff0 <_ZN8emstreamlsEm+0x32>
    3fec:	22 30       	cpi	r18, 0x02	; 2
    3fee:	71 f4       	brne	.+28     	; 0x400c <__stack+0xd>
		{
			uint32_t whole;
			uint8_t bits[4];
		} parts;
		parts.whole = num;
		*this << parts.bits[3] << parts.bits[2] << parts.bits[1] << parts.bits[0];
    3ff0:	69 2f       	mov	r22, r25
    3ff2:	c8 01       	movw	r24, r16
    3ff4:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN8emstreamlsEh>
    3ff8:	6f 2d       	mov	r22, r15
    3ffa:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN8emstreamlsEh>
    3ffe:	6e 2d       	mov	r22, r14
    4000:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN8emstreamlsEh>
    4004:	6d 2d       	mov	r22, r13
    4006:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN8emstreamlsEh>
    400a:	0f c0       	rjmp	.+30     	; 0x402a <__stack+0x2b>
extern __inline__ __ATTR_GNU_INLINE__
char *ultoa (unsigned long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__ultoa (unsigned long, char *, int);
	return __ultoa (__val, __s, __radix);
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	ae 01       	movw	r20, r28
    4010:	4f 5f       	subi	r20, 0xFF	; 255
    4012:	5f 4f       	sbci	r21, 0xFF	; 255
    4014:	6d 2d       	mov	r22, r13
    4016:	7e 2d       	mov	r23, r14
    4018:	8f 2d       	mov	r24, r15
    401a:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <ultoa>
	}
	else
	{
		char out_str[33];
		ultoa ((long)num, out_str, base);
		puts (out_str);
    401e:	be 01       	movw	r22, r28
    4020:	6f 5f       	subi	r22, 0xFF	; 255
    4022:	7f 4f       	sbci	r23, 0xFF	; 255
    4024:	c8 01       	movw	r24, r16
    4026:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
	}

	return (*this);
}
    402a:	c8 01       	movw	r24, r16
    402c:	a1 96       	adiw	r28, 0x21	; 33
    402e:	cd bf       	out	0x3d, r28	; 61
    4030:	de bf       	out	0x3e, r29	; 62
    4032:	df 91       	pop	r29
    4034:	cf 91       	pop	r28
    4036:	1f 91       	pop	r17
    4038:	0f 91       	pop	r16
    403a:	ff 90       	pop	r15
    403c:	ef 90       	pop	r14
    403e:	df 90       	pop	r13
    4040:	08 95       	ret

00004042 <_ZN8emstreamlsEh>:
 *          reference is used to string printable items together with "<<" operators
 *  @param num The 8-bit number or character to be sent out
 */

emstream& emstream::operator<< (uint8_t num)
{
    4042:	cf 92       	push	r12
    4044:	df 92       	push	r13
    4046:	ef 92       	push	r14
    4048:	ff 92       	push	r15
    404a:	0f 93       	push	r16
    404c:	1f 93       	push	r17
    404e:	cf 93       	push	r28
    4050:	df 93       	push	r29
    4052:	cd b7       	in	r28, 0x3d	; 61
    4054:	de b7       	in	r29, 0x3e	; 62
    4056:	29 97       	sbiw	r28, 0x09	; 9
    4058:	cd bf       	out	0x3d, r28	; 61
    405a:	de bf       	out	0x3e, r29	; 62
    405c:	8c 01       	movw	r16, r24
    405e:	e6 2e       	mov	r14, r22
	uint8_t temp_char;                      // Temporary storage for a nibble

	if (print_ascii)
    4060:	dc 01       	movw	r26, r24
    4062:	13 96       	adiw	r26, 0x03	; 3
    4064:	8c 91       	ld	r24, X
    4066:	13 97       	sbiw	r26, 0x03	; 3
    4068:	88 23       	and	r24, r24
    406a:	41 f0       	breq	.+16     	; 0x407c <_ZN8emstreamlsEh+0x3a>
	{
		putchar (num);
    406c:	ed 91       	ld	r30, X+
    406e:	fc 91       	ld	r31, X
    4070:	02 80       	ldd	r0, Z+2	; 0x02
    4072:	f3 81       	ldd	r31, Z+3	; 0x03
    4074:	e0 2d       	mov	r30, r0
    4076:	c8 01       	movw	r24, r16
    4078:	19 95       	eicall
    407a:	56 c0       	rjmp	.+172    	; 0x4128 <_ZN8emstreamlsEh+0xe6>
	}
	else if (base == 2)
    407c:	f8 01       	movw	r30, r16
    407e:	42 81       	ldd	r20, Z+2	; 0x02
    4080:	42 30       	cpi	r20, 0x02	; 2
    4082:	19 f5       	brne	.+70     	; 0x40ca <_ZN8emstreamlsEh+0x88>
    4084:	68 94       	set
    4086:	cc 24       	eor	r12, r12
    4088:	c3 f8       	bld	r12, 3
    408a:	d1 2c       	mov	r13, r1
    408c:	68 94       	set
    408e:	ff 24       	eor	r15, r15
    4090:	f7 f8       	bld	r15, 7
	{
		for (uint8_t bmask = 0x80; bmask != 0; bmask >>= 1)
		{
			if (num & bmask) putchar ('1');
    4092:	8e 2d       	mov	r24, r14
    4094:	8f 21       	and	r24, r15
    4096:	51 f0       	breq	.+20     	; 0x40ac <_ZN8emstreamlsEh+0x6a>
    4098:	d8 01       	movw	r26, r16
    409a:	ed 91       	ld	r30, X+
    409c:	fc 91       	ld	r31, X
    409e:	02 80       	ldd	r0, Z+2	; 0x02
    40a0:	f3 81       	ldd	r31, Z+3	; 0x03
    40a2:	e0 2d       	mov	r30, r0
    40a4:	61 e3       	ldi	r22, 0x31	; 49
    40a6:	c8 01       	movw	r24, r16
    40a8:	19 95       	eicall
    40aa:	09 c0       	rjmp	.+18     	; 0x40be <_ZN8emstreamlsEh+0x7c>
			else             putchar ('0');
    40ac:	d8 01       	movw	r26, r16
    40ae:	ed 91       	ld	r30, X+
    40b0:	fc 91       	ld	r31, X
    40b2:	02 80       	ldd	r0, Z+2	; 0x02
    40b4:	f3 81       	ldd	r31, Z+3	; 0x03
    40b6:	e0 2d       	mov	r30, r0
    40b8:	60 e3       	ldi	r22, 0x30	; 48
    40ba:	c8 01       	movw	r24, r16
    40bc:	19 95       	eicall
	{
		putchar (num);
	}
	else if (base == 2)
	{
		for (uint8_t bmask = 0x80; bmask != 0; bmask >>= 1)
    40be:	f6 94       	lsr	r15
    40c0:	b1 e0       	ldi	r27, 0x01	; 1
    40c2:	cb 1a       	sub	r12, r27
    40c4:	d1 08       	sbc	r13, r1
    40c6:	29 f7       	brne	.-54     	; 0x4092 <_ZN8emstreamlsEh+0x50>
    40c8:	2f c0       	rjmp	.+94     	; 0x4128 <_ZN8emstreamlsEh+0xe6>
		{
			if (num & bmask) putchar ('1');
			else             putchar ('0');
		}
	}
	else if (base == 16)
    40ca:	40 31       	cpi	r20, 0x10	; 16
    40cc:	f9 f4       	brne	.+62     	; 0x410c <_ZN8emstreamlsEh+0xca>
	{
		temp_char = (num >> 4) & 0x0F;
    40ce:	62 95       	swap	r22
    40d0:	6f 70       	andi	r22, 0x0F	; 15
		putchar ((temp_char > 9) ? temp_char + ('A' - 10) : temp_char + '0');
    40d2:	01 90       	ld	r0, Z+
    40d4:	f0 81       	ld	r31, Z
    40d6:	e0 2d       	mov	r30, r0
    40d8:	02 80       	ldd	r0, Z+2	; 0x02
    40da:	f3 81       	ldd	r31, Z+3	; 0x03
    40dc:	e0 2d       	mov	r30, r0
    40de:	6a 30       	cpi	r22, 0x0A	; 10
    40e0:	10 f0       	brcs	.+4      	; 0x40e6 <_ZN8emstreamlsEh+0xa4>
    40e2:	69 5c       	subi	r22, 0xC9	; 201
    40e4:	01 c0       	rjmp	.+2      	; 0x40e8 <_ZN8emstreamlsEh+0xa6>
    40e6:	60 5d       	subi	r22, 0xD0	; 208
    40e8:	c8 01       	movw	r24, r16
    40ea:	19 95       	eicall
		temp_char = num & 0x0F;
    40ec:	6e 2d       	mov	r22, r14
    40ee:	6f 70       	andi	r22, 0x0F	; 15
		putchar ((temp_char > 9) ? temp_char + ('A' - 10) : temp_char + '0');
    40f0:	d8 01       	movw	r26, r16
    40f2:	ed 91       	ld	r30, X+
    40f4:	fc 91       	ld	r31, X
    40f6:	02 80       	ldd	r0, Z+2	; 0x02
    40f8:	f3 81       	ldd	r31, Z+3	; 0x03
    40fa:	e0 2d       	mov	r30, r0
    40fc:	6a 30       	cpi	r22, 0x0A	; 10
    40fe:	10 f0       	brcs	.+4      	; 0x4104 <_ZN8emstreamlsEh+0xc2>
    4100:	69 5c       	subi	r22, 0xC9	; 201
    4102:	01 c0       	rjmp	.+2      	; 0x4106 <_ZN8emstreamlsEh+0xc4>
    4104:	60 5d       	subi	r22, 0xD0	; 208
    4106:	c8 01       	movw	r24, r16
    4108:	19 95       	eicall
    410a:	0e c0       	rjmp	.+28     	; 0x4128 <_ZN8emstreamlsEh+0xe6>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    410c:	50 e0       	ldi	r21, 0x00	; 0
    410e:	be 01       	movw	r22, r28
    4110:	6f 5f       	subi	r22, 0xFF	; 255
    4112:	7f 4f       	sbci	r23, 0xFF	; 255
    4114:	8e 2d       	mov	r24, r14
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	0e 94 43 27 	call	0x4e86	; 0x4e86 <utoa>
	}
	else
	{
		char out_str[9];
		utoa ((uint16_t)num, out_str, base);
		puts (out_str);
    411c:	be 01       	movw	r22, r28
    411e:	6f 5f       	subi	r22, 0xFF	; 255
    4120:	7f 4f       	sbci	r23, 0xFF	; 255
    4122:	c8 01       	movw	r24, r16
    4124:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
	}
	return (*this);
}
    4128:	c8 01       	movw	r24, r16
    412a:	29 96       	adiw	r28, 0x09	; 9
    412c:	cd bf       	out	0x3d, r28	; 61
    412e:	de bf       	out	0x3e, r29	; 62
    4130:	df 91       	pop	r29
    4132:	cf 91       	pop	r28
    4134:	1f 91       	pop	r17
    4136:	0f 91       	pop	r16
    4138:	ff 90       	pop	r15
    413a:	ef 90       	pop	r14
    413c:	df 90       	pop	r13
    413e:	cf 90       	pop	r12
    4140:	08 95       	ret

00004142 <_ZN5rs2327putcharEc>:
 *  @param chout The character to be sent out
 *  @return True if everything was OK and false if there was a timeout
 */

bool rs232::putchar (char chout)
{
    4142:	dc 01       	movw	r26, r24
	// Now wait for the serial port transmitter buffer to be empty	 
	for (uint16_t count = 0; ((*p_USR & mask_UDRE) == 0); count++)
    4144:	50 96       	adiw	r26, 0x10	; 16
    4146:	ed 91       	ld	r30, X+
    4148:	fc 91       	ld	r31, X
    414a:	51 97       	sbiw	r26, 0x11	; 17
    414c:	80 81       	ld	r24, Z
    414e:	54 96       	adiw	r26, 0x14	; 20
    4150:	4c 91       	ld	r20, X
    4152:	54 97       	sbiw	r26, 0x14	; 20
    4154:	84 23       	and	r24, r20
    4156:	29 f0       	breq	.+10     	; 0x4162 <_ZN5rs2327putcharEc+0x20>
    4158:	09 c0       	rjmp	.+18     	; 0x416c <_ZN5rs2327putcharEc+0x2a>
    415a:	21 50       	subi	r18, 0x01	; 1
    415c:	31 09       	sbc	r19, r1
	{
		if (count > UART_TX_TOUT)
    415e:	19 f4       	brne	.+6      	; 0x4166 <_ZN5rs2327putcharEc+0x24>
    4160:	12 c0       	rjmp	.+36     	; 0x4186 <_ZN5rs2327putcharEc+0x44>
 */

bool rs232::putchar (char chout)
{
	// Now wait for the serial port transmitter buffer to be empty	 
	for (uint16_t count = 0; ((*p_USR & mask_UDRE) == 0); count++)
    4162:	21 e2       	ldi	r18, 0x21	; 33
    4164:	3e e4       	ldi	r19, 0x4E	; 78
    4166:	90 81       	ld	r25, Z
    4168:	94 23       	and	r25, r20
    416a:	b9 f3       	breq	.-18     	; 0x415a <_ZN5rs2327putcharEc+0x18>
	}

	// Clear the TXCn bit so it can be used to check if the serial port is busy.  This
	// check needs to be done prior to putting the processor into sleep mode.  Oddly,
	// the TXCn bit is cleared by writing a one to its bit location
	*p_USR |= mask_TXC;
    416c:	90 81       	ld	r25, Z
    416e:	56 96       	adiw	r26, 0x16	; 22
    4170:	8c 91       	ld	r24, X
    4172:	56 97       	sbiw	r26, 0x16	; 22
    4174:	89 2b       	or	r24, r25
    4176:	80 83       	st	Z, r24

	// The CTS line is 0 and the transmitter buffer is empty, so send the character
	*p_UDR = chout;
    4178:	1e 96       	adiw	r26, 0x0e	; 14
    417a:	ed 91       	ld	r30, X+
    417c:	fc 91       	ld	r31, X
    417e:	1f 97       	sbiw	r26, 0x0f	; 15
    4180:	60 83       	st	Z, r22
	return (true);
    4182:	81 e0       	ldi	r24, 0x01	; 1
    4184:	08 95       	ret
{
	// Now wait for the serial port transmitter buffer to be empty	 
	for (uint16_t count = 0; ((*p_USR & mask_UDRE) == 0); count++)
	{
		if (count > UART_TX_TOUT)
			return (false);
    4186:	80 e0       	ldi	r24, 0x00	; 0
	*p_USR |= mask_TXC;

	// The CTS line is 0 and the transmitter buffer is empty, so send the character
	*p_UDR = chout;
	return (true);
}
    4188:	08 95       	ret

0000418a <_ZN5rs2327getcharEv>:
 *  check_for_char() to ensure that there's data available first. 
 *  @return The character which was found in the serial port receive buffer
 */

int16_t rs232::getchar (void)
{
    418a:	cf 93       	push	r28
    418c:	df 93       	push	r29
    418e:	fc 01       	movw	r30, r24
	uint8_t recv_char;						// Character read from the queue

	// Wait until there's a character in the receiver queue
	while (*p_rcv_read_index == *p_rcv_write_index);
    4190:	c1 8d       	ldd	r28, Z+25	; 0x19
    4192:	d2 8d       	ldd	r29, Z+26	; 0x1a
    4194:	28 81       	ld	r18, Y
    4196:	39 81       	ldd	r19, Y+1	; 0x01
    4198:	a3 8d       	ldd	r26, Z+27	; 0x1b
    419a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    419c:	4d 91       	ld	r20, X+
    419e:	5c 91       	ld	r21, X
    41a0:	24 17       	cp	r18, r20
    41a2:	35 07       	cpc	r19, r21
    41a4:	e9 f3       	breq	.-6      	; 0x41a0 <_ZN5rs2327getcharEv+0x16>
	recv_char = (*p_rcv_buffer)[*p_rcv_read_index];
    41a6:	a7 89       	ldd	r26, Z+23	; 0x17
    41a8:	b0 8d       	ldd	r27, Z+24	; 0x18
    41aa:	0d 90       	ld	r0, X+
    41ac:	bc 91       	ld	r27, X
    41ae:	a0 2d       	mov	r26, r0
    41b0:	a2 0f       	add	r26, r18
    41b2:	b3 1f       	adc	r27, r19
    41b4:	8c 91       	ld	r24, X
	if (++(*p_rcv_read_index) >= RSINT_BUF_SIZE)
    41b6:	2f 5f       	subi	r18, 0xFF	; 255
    41b8:	3f 4f       	sbci	r19, 0xFF	; 255
    41ba:	28 83       	st	Y, r18
    41bc:	39 83       	std	Y+1, r19	; 0x01
    41be:	24 36       	cpi	r18, 0x64	; 100
    41c0:	31 05       	cpc	r19, r1
    41c2:	28 f0       	brcs	.+10     	; 0x41ce <_ZN5rs2327getcharEv+0x44>
		*p_rcv_read_index = 0;
    41c4:	01 8c       	ldd	r0, Z+25	; 0x19
    41c6:	f2 8d       	ldd	r31, Z+26	; 0x1a
    41c8:	e0 2d       	mov	r30, r0
    41ca:	10 82       	st	Z, r1
    41cc:	11 82       	std	Z+1, r1	; 0x01

	return (recv_char);
}
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	df 91       	pop	r29
    41d2:	cf 91       	pop	r28
    41d4:	08 95       	ret

000041d6 <_ZN5rs23214check_for_charEv>:
 *  caused an interrupt. 
 *  @return True for character available, false for no character available
 */

bool rs232::check_for_char (void)
{
    41d6:	cf 93       	push	r28
    41d8:	df 93       	push	r29
	return (*p_rcv_read_index != *p_rcv_write_index);
    41da:	ec 01       	movw	r28, r24
    41dc:	a9 8d       	ldd	r26, Y+25	; 0x19
    41de:	ba 8d       	ldd	r27, Y+26	; 0x1a
    41e0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    41e2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	4d 91       	ld	r20, X+
    41e8:	5c 91       	ld	r21, X
    41ea:	20 81       	ld	r18, Z
    41ec:	31 81       	ldd	r19, Z+1	; 0x01
    41ee:	42 17       	cp	r20, r18
    41f0:	53 07       	cpc	r21, r19
    41f2:	09 f4       	brne	.+2      	; 0x41f6 <_ZN5rs23214check_for_charEv+0x20>
    41f4:	80 e0       	ldi	r24, 0x00	; 0
}
    41f6:	df 91       	pop	r29
    41f8:	cf 91       	pop	r28
    41fa:	08 95       	ret

000041fc <_ZN5rs23212clear_screenEv>:
 *  format modifier 'clrscr' is inserted in a line of "<<" stuff.
 */

void rs232::clear_screen (void)
{
	putchar (CLRSCR_STYLE);
    41fc:	dc 01       	movw	r26, r24
    41fe:	ed 91       	ld	r30, X+
    4200:	fc 91       	ld	r31, X
    4202:	02 80       	ldd	r0, Z+2	; 0x02
    4204:	f3 81       	ldd	r31, Z+3	; 0x03
    4206:	e0 2d       	mov	r30, r0
    4208:	6c e0       	ldi	r22, 0x0C	; 12
    420a:	19 95       	eicall
    420c:	08 95       	ret

0000420e <_ZN5rs232C1EjP12USART_struct>:
 *  @param baud_rate The desired baud rate for serial communications. Default is 9600
 *  @param p_usart A pointer to the desired USART c-struct. The default is USARTC0. On an
 *                 XMGEGA choices are C0, C1, D0, D1, E0, E1, F0  
 */

rs232::rs232 (uint16_t baud_rate, USART_t* p_usart)
    420e:	ef 92       	push	r14
    4210:	ff 92       	push	r15
    4212:	0f 93       	push	r16
    4214:	1f 93       	push	r17
    4216:	cf 93       	push	r28
    4218:	df 93       	push	r29
    421a:	ec 01       	movw	r28, r24
    421c:	7b 01       	movw	r14, r22
    421e:	8a 01       	movw	r16, r20
	: emstream (), base232 (baud_rate, p_usart)
    4220:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <_ZN8emstreamC1Ev>
    4224:	a8 01       	movw	r20, r16
    4226:	b7 01       	movw	r22, r14
    4228:	ce 01       	movw	r24, r28
    422a:	08 96       	adiw	r24, 0x08	; 8
    422c:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_ZN7base232C1EjP12USART_struct>
    4230:	84 eb       	ldi	r24, 0xB4	; 180
    4232:	91 e2       	ldi	r25, 0x21	; 33
    4234:	88 83       	st	Y, r24
    4236:	99 83       	std	Y+1, r25	; 0x01
{
	if(p_usart == &USARTC0)
    4238:	00 3a       	cpi	r16, 0xA0	; 160
    423a:	88 e0       	ldi	r24, 0x08	; 8
    423c:	18 07       	cpc	r17, r24
    423e:	69 f4       	brne	.+26     	; 0x425a <_ZN5rs232C1EjP12USART_struct+0x4c>
	{
		p_rcv_buffer		= &rcvC0_buffer;
    4240:	8e eb       	ldi	r24, 0xBE	; 190
    4242:	92 e3       	ldi	r25, 0x32	; 50
    4244:	8f 8b       	std	Y+23, r24	; 0x17
    4246:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvC0_read_index;
    4248:	84 eb       	ldi	r24, 0xB4	; 180
    424a:	92 e3       	ldi	r25, 0x32	; 50
    424c:	89 8f       	std	Y+25, r24	; 0x19
    424e:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvC0_write_index;
    4250:	8a ea       	ldi	r24, 0xAA	; 170
    4252:	92 e3       	ldi	r25, 0x32	; 50
    4254:	8b 8f       	std	Y+27, r24	; 0x1b
    4256:	9c 8f       	std	Y+28, r25	; 0x1c
    4258:	42 c0       	rjmp	.+132    	; 0x42de <_ZN5rs232C1EjP12USART_struct+0xd0>
	}
#ifdef USARTC1
	else if(p_usart == &USARTC1)
    425a:	00 3b       	cpi	r16, 0xB0	; 176
    425c:	e8 e0       	ldi	r30, 0x08	; 8
    425e:	1e 07       	cpc	r17, r30
    4260:	69 f4       	brne	.+26     	; 0x427c <_ZN5rs232C1EjP12USART_struct+0x6e>
	{
		p_rcv_buffer		= &rcvC1_buffer;
    4262:	8c eb       	ldi	r24, 0xBC	; 188
    4264:	92 e3       	ldi	r25, 0x32	; 50
    4266:	8f 8b       	std	Y+23, r24	; 0x17
    4268:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvC1_read_index;
    426a:	82 eb       	ldi	r24, 0xB2	; 178
    426c:	92 e3       	ldi	r25, 0x32	; 50
    426e:	89 8f       	std	Y+25, r24	; 0x19
    4270:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvC1_write_index;
    4272:	88 ea       	ldi	r24, 0xA8	; 168
    4274:	92 e3       	ldi	r25, 0x32	; 50
    4276:	8b 8f       	std	Y+27, r24	; 0x1b
    4278:	9c 8f       	std	Y+28, r25	; 0x1c
    427a:	31 c0       	rjmp	.+98     	; 0x42de <_ZN5rs232C1EjP12USART_struct+0xd0>
	}
#endif
#ifdef USARTD0
	else if(p_usart == &USARTD0)
    427c:	00 3a       	cpi	r16, 0xA0	; 160
    427e:	f9 e0       	ldi	r31, 0x09	; 9
    4280:	1f 07       	cpc	r17, r31
    4282:	69 f4       	brne	.+26     	; 0x429e <_ZN5rs232C1EjP12USART_struct+0x90>
	{
		p_rcv_buffer		= &rcvD0_buffer;
    4284:	8a eb       	ldi	r24, 0xBA	; 186
    4286:	92 e3       	ldi	r25, 0x32	; 50
    4288:	8f 8b       	std	Y+23, r24	; 0x17
    428a:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvD0_read_index;
    428c:	80 eb       	ldi	r24, 0xB0	; 176
    428e:	92 e3       	ldi	r25, 0x32	; 50
    4290:	89 8f       	std	Y+25, r24	; 0x19
    4292:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvD0_write_index;
    4294:	86 ea       	ldi	r24, 0xA6	; 166
    4296:	92 e3       	ldi	r25, 0x32	; 50
    4298:	8b 8f       	std	Y+27, r24	; 0x1b
    429a:	9c 8f       	std	Y+28, r25	; 0x1c
    429c:	20 c0       	rjmp	.+64     	; 0x42de <_ZN5rs232C1EjP12USART_struct+0xd0>
	}
#endif
#ifdef USARTD1
	else if(p_usart == &USARTD1)
    429e:	00 3b       	cpi	r16, 0xB0	; 176
    42a0:	89 e0       	ldi	r24, 0x09	; 9
    42a2:	18 07       	cpc	r17, r24
    42a4:	69 f4       	brne	.+26     	; 0x42c0 <_ZN5rs232C1EjP12USART_struct+0xb2>
	{
		p_rcv_buffer		= &rcvD1_buffer;
    42a6:	88 eb       	ldi	r24, 0xB8	; 184
    42a8:	92 e3       	ldi	r25, 0x32	; 50
    42aa:	8f 8b       	std	Y+23, r24	; 0x17
    42ac:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvD1_read_index;
    42ae:	8e ea       	ldi	r24, 0xAE	; 174
    42b0:	92 e3       	ldi	r25, 0x32	; 50
    42b2:	89 8f       	std	Y+25, r24	; 0x19
    42b4:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvD1_write_index;
    42b6:	84 ea       	ldi	r24, 0xA4	; 164
    42b8:	92 e3       	ldi	r25, 0x32	; 50
    42ba:	8b 8f       	std	Y+27, r24	; 0x1b
    42bc:	9c 8f       	std	Y+28, r25	; 0x1c
    42be:	0f c0       	rjmp	.+30     	; 0x42de <_ZN5rs232C1EjP12USART_struct+0xd0>
	}
#endif
#ifdef USARTE0
	else if(p_usart == &USARTE0)
    42c0:	00 3a       	cpi	r16, 0xA0	; 160
    42c2:	1a 40       	sbci	r17, 0x0A	; 10
    42c4:	61 f4       	brne	.+24     	; 0x42de <_ZN5rs232C1EjP12USART_struct+0xd0>
	{
		p_rcv_buffer		= &rcvE0_buffer;
    42c6:	86 eb       	ldi	r24, 0xB6	; 182
    42c8:	92 e3       	ldi	r25, 0x32	; 50
    42ca:	8f 8b       	std	Y+23, r24	; 0x17
    42cc:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvE0_read_index;
    42ce:	8c ea       	ldi	r24, 0xAC	; 172
    42d0:	92 e3       	ldi	r25, 0x32	; 50
    42d2:	89 8f       	std	Y+25, r24	; 0x19
    42d4:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvE0_write_index;
    42d6:	82 ea       	ldi	r24, 0xA2	; 162
    42d8:	92 e3       	ldi	r25, 0x32	; 50
    42da:	8b 8f       	std	Y+27, r24	; 0x1b
    42dc:	9c 8f       	std	Y+28, r25	; 0x1c
#endif
	else
	{
	}
	
	*p_rcv_buffer = new uint8_t[RSINT_BUF_SIZE];
    42de:	0f 89       	ldd	r16, Y+23	; 0x17
    42e0:	18 8d       	ldd	r17, Y+24	; 0x18
    42e2:	84 e6       	ldi	r24, 0x64	; 100
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <_Znaj>
    42ea:	f8 01       	movw	r30, r16
    42ec:	80 83       	st	Z, r24
    42ee:	91 83       	std	Z+1, r25	; 0x01
	*p_rcv_read_index = 0;
    42f0:	e9 8d       	ldd	r30, Y+25	; 0x19
    42f2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    42f4:	10 82       	st	Z, r1
    42f6:	11 82       	std	Z+1, r1	; 0x01
	*p_rcv_write_index = 0;
    42f8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    42fa:	fc 8d       	ldd	r31, Y+28	; 0x1c
    42fc:	10 82       	st	Z, r1
    42fe:	11 82       	std	Z+1, r1	; 0x01
}
    4300:	df 91       	pop	r29
    4302:	cf 91       	pop	r28
    4304:	1f 91       	pop	r17
    4306:	0f 91       	pop	r16
    4308:	ff 90       	pop	r15
    430a:	ef 90       	pop	r14
    430c:	08 95       	ret

0000430e <__vector_25>:
 *  first serial port (number 0).  It saves that character into the receiver buffer.
 */

#ifdef USARTC0_RXC_vect
ISR (USARTC0_RXC_vect)
{
    430e:	1f 92       	push	r1
    4310:	0f 92       	push	r0
    4312:	0f b6       	in	r0, 0x3f	; 63
    4314:	0f 92       	push	r0
    4316:	11 24       	eor	r1, r1
    4318:	08 b6       	in	r0, 0x38	; 56
    431a:	0f 92       	push	r0
    431c:	18 be       	out	0x38, r1	; 56
    431e:	0b b6       	in	r0, 0x3b	; 59
    4320:	0f 92       	push	r0
    4322:	1b be       	out	0x3b, r1	; 59
    4324:	2f 93       	push	r18
    4326:	3f 93       	push	r19
    4328:	8f 93       	push	r24
    432a:	9f 93       	push	r25
    432c:	ef 93       	push	r30
    432e:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvC0_buffer[rcvC0_write_index] = USARTC0.DATA;
    4330:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    4334:	e0 91 be 32 	lds	r30, 0x32BE	; 0x8032be <rcvC0_buffer>
    4338:	f0 91 bf 32 	lds	r31, 0x32BF	; 0x8032bf <rcvC0_buffer+0x1>
    433c:	80 91 aa 32 	lds	r24, 0x32AA	; 0x8032aa <rcvC0_write_index>
    4340:	90 91 ab 32 	lds	r25, 0x32AB	; 0x8032ab <rcvC0_write_index+0x1>
    4344:	e8 0f       	add	r30, r24
    4346:	f9 1f       	adc	r31, r25
    4348:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvC0_write_index >= RSINT_BUF_SIZE)
    434a:	80 91 aa 32 	lds	r24, 0x32AA	; 0x8032aa <rcvC0_write_index>
    434e:	90 91 ab 32 	lds	r25, 0x32AB	; 0x8032ab <rcvC0_write_index+0x1>
    4352:	01 96       	adiw	r24, 0x01	; 1
    4354:	84 36       	cpi	r24, 0x64	; 100
    4356:	91 05       	cpc	r25, r1
    4358:	60 f4       	brcc	.+24     	; 0x4372 <__vector_25+0x64>
    435a:	80 93 aa 32 	sts	0x32AA, r24	; 0x8032aa <rcvC0_write_index>
    435e:	90 93 ab 32 	sts	0x32AB, r25	; 0x8032ab <rcvC0_write_index+0x1>
		rcvC0_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC0_write_index == rcvC0_read_index)
    4362:	20 91 b4 32 	lds	r18, 0x32B4	; 0x8032b4 <rcvC0_read_index>
    4366:	30 91 b5 32 	lds	r19, 0x32B5	; 0x8032b5 <rcvC0_read_index+0x1>
    436a:	82 17       	cp	r24, r18
    436c:	93 07       	cpc	r25, r19
    436e:	f1 f4       	brne	.+60     	; 0x43ac <__vector_25+0x9e>
    4370:	0c c0       	rjmp	.+24     	; 0x438a <__vector_25+0x7c>

	rcvC0_buffer[rcvC0_write_index] = USARTC0.DATA;

	// Increment the write pointer
	if (++rcvC0_write_index >= RSINT_BUF_SIZE)
		rcvC0_write_index = 0;
    4372:	10 92 aa 32 	sts	0x32AA, r1	; 0x8032aa <rcvC0_write_index>
    4376:	10 92 ab 32 	sts	0x32AB, r1	; 0x8032ab <rcvC0_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC0_write_index == rcvC0_read_index)
    437a:	80 91 b4 32 	lds	r24, 0x32B4	; 0x8032b4 <rcvC0_read_index>
    437e:	90 91 b5 32 	lds	r25, 0x32B5	; 0x8032b5 <rcvC0_read_index+0x1>
    4382:	18 16       	cp	r1, r24
    4384:	19 06       	cpc	r1, r25
    4386:	91 f4       	brne	.+36     	; 0x43ac <__vector_25+0x9e>
    4388:	0e c0       	rjmp	.+28     	; 0x43a6 <__vector_25+0x98>
		if (++rcvC0_read_index >= RSINT_BUF_SIZE)
    438a:	01 96       	adiw	r24, 0x01	; 1
    438c:	84 36       	cpi	r24, 0x64	; 100
    438e:	91 05       	cpc	r25, r1
    4390:	28 f4       	brcc	.+10     	; 0x439c <__vector_25+0x8e>
    4392:	80 93 b4 32 	sts	0x32B4, r24	; 0x8032b4 <rcvC0_read_index>
    4396:	90 93 b5 32 	sts	0x32B5, r25	; 0x8032b5 <rcvC0_read_index+0x1>
    439a:	08 c0       	rjmp	.+16     	; 0x43ac <__vector_25+0x9e>
			rcvC0_read_index = 0;
    439c:	10 92 b4 32 	sts	0x32B4, r1	; 0x8032b4 <rcvC0_read_index>
    43a0:	10 92 b5 32 	sts	0x32B5, r1	; 0x8032b5 <rcvC0_read_index+0x1>
}
    43a4:	03 c0       	rjmp	.+6      	; 0x43ac <__vector_25+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC0_write_index == rcvC0_read_index)
		if (++rcvC0_read_index >= RSINT_BUF_SIZE)
    43a6:	81 e0       	ldi	r24, 0x01	; 1
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	f3 cf       	rjmp	.-26     	; 0x4392 <__vector_25+0x84>
			rcvC0_read_index = 0;
}
    43ac:	ff 91       	pop	r31
    43ae:	ef 91       	pop	r30
    43b0:	9f 91       	pop	r25
    43b2:	8f 91       	pop	r24
    43b4:	3f 91       	pop	r19
    43b6:	2f 91       	pop	r18
    43b8:	0f 90       	pop	r0
    43ba:	0b be       	out	0x3b, r0	; 59
    43bc:	0f 90       	pop	r0
    43be:	08 be       	out	0x38, r0	; 56
    43c0:	0f 90       	pop	r0
    43c2:	0f be       	out	0x3f, r0	; 63
    43c4:	0f 90       	pop	r0
    43c6:	1f 90       	pop	r1
    43c8:	18 95       	reti

000043ca <__vector_28>:
#endif

#ifdef USARTC1_RXC_vect
ISR (USARTC1_RXC_vect)
{
    43ca:	1f 92       	push	r1
    43cc:	0f 92       	push	r0
    43ce:	0f b6       	in	r0, 0x3f	; 63
    43d0:	0f 92       	push	r0
    43d2:	11 24       	eor	r1, r1
    43d4:	08 b6       	in	r0, 0x38	; 56
    43d6:	0f 92       	push	r0
    43d8:	18 be       	out	0x38, r1	; 56
    43da:	0b b6       	in	r0, 0x3b	; 59
    43dc:	0f 92       	push	r0
    43de:	1b be       	out	0x3b, r1	; 59
    43e0:	2f 93       	push	r18
    43e2:	3f 93       	push	r19
    43e4:	8f 93       	push	r24
    43e6:	9f 93       	push	r25
    43e8:	ef 93       	push	r30
    43ea:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvC1_buffer[rcvC1_write_index] = USARTC1.DATA;
    43ec:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    43f0:	e0 91 bc 32 	lds	r30, 0x32BC	; 0x8032bc <rcvC1_buffer>
    43f4:	f0 91 bd 32 	lds	r31, 0x32BD	; 0x8032bd <rcvC1_buffer+0x1>
    43f8:	80 91 a8 32 	lds	r24, 0x32A8	; 0x8032a8 <rcvC1_write_index>
    43fc:	90 91 a9 32 	lds	r25, 0x32A9	; 0x8032a9 <rcvC1_write_index+0x1>
    4400:	e8 0f       	add	r30, r24
    4402:	f9 1f       	adc	r31, r25
    4404:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvC1_write_index >= RSINT_BUF_SIZE)
    4406:	80 91 a8 32 	lds	r24, 0x32A8	; 0x8032a8 <rcvC1_write_index>
    440a:	90 91 a9 32 	lds	r25, 0x32A9	; 0x8032a9 <rcvC1_write_index+0x1>
    440e:	01 96       	adiw	r24, 0x01	; 1
    4410:	84 36       	cpi	r24, 0x64	; 100
    4412:	91 05       	cpc	r25, r1
    4414:	60 f4       	brcc	.+24     	; 0x442e <__vector_28+0x64>
    4416:	80 93 a8 32 	sts	0x32A8, r24	; 0x8032a8 <rcvC1_write_index>
    441a:	90 93 a9 32 	sts	0x32A9, r25	; 0x8032a9 <rcvC1_write_index+0x1>
	rcvC1_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC1_write_index == rcvC1_read_index)
    441e:	20 91 b2 32 	lds	r18, 0x32B2	; 0x8032b2 <rcvC1_read_index>
    4422:	30 91 b3 32 	lds	r19, 0x32B3	; 0x8032b3 <rcvC1_read_index+0x1>
    4426:	82 17       	cp	r24, r18
    4428:	93 07       	cpc	r25, r19
    442a:	f1 f4       	brne	.+60     	; 0x4468 <__vector_28+0x9e>
    442c:	0c c0       	rjmp	.+24     	; 0x4446 <__vector_28+0x7c>

	rcvC1_buffer[rcvC1_write_index] = USARTC1.DATA;

	// Increment the write pointer
	if (++rcvC1_write_index >= RSINT_BUF_SIZE)
	rcvC1_write_index = 0;
    442e:	10 92 a8 32 	sts	0x32A8, r1	; 0x8032a8 <rcvC1_write_index>
    4432:	10 92 a9 32 	sts	0x32A9, r1	; 0x8032a9 <rcvC1_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC1_write_index == rcvC1_read_index)
    4436:	80 91 b2 32 	lds	r24, 0x32B2	; 0x8032b2 <rcvC1_read_index>
    443a:	90 91 b3 32 	lds	r25, 0x32B3	; 0x8032b3 <rcvC1_read_index+0x1>
    443e:	18 16       	cp	r1, r24
    4440:	19 06       	cpc	r1, r25
    4442:	91 f4       	brne	.+36     	; 0x4468 <__vector_28+0x9e>
    4444:	0e c0       	rjmp	.+28     	; 0x4462 <__vector_28+0x98>
	if (++rcvC1_read_index >= RSINT_BUF_SIZE)
    4446:	01 96       	adiw	r24, 0x01	; 1
    4448:	84 36       	cpi	r24, 0x64	; 100
    444a:	91 05       	cpc	r25, r1
    444c:	28 f4       	brcc	.+10     	; 0x4458 <__vector_28+0x8e>
    444e:	80 93 b2 32 	sts	0x32B2, r24	; 0x8032b2 <rcvC1_read_index>
    4452:	90 93 b3 32 	sts	0x32B3, r25	; 0x8032b3 <rcvC1_read_index+0x1>
    4456:	08 c0       	rjmp	.+16     	; 0x4468 <__vector_28+0x9e>
	rcvC1_read_index = 0;
    4458:	10 92 b2 32 	sts	0x32B2, r1	; 0x8032b2 <rcvC1_read_index>
    445c:	10 92 b3 32 	sts	0x32B3, r1	; 0x8032b3 <rcvC1_read_index+0x1>
}
    4460:	03 c0       	rjmp	.+6      	; 0x4468 <__vector_28+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC1_write_index == rcvC1_read_index)
	if (++rcvC1_read_index >= RSINT_BUF_SIZE)
    4462:	81 e0       	ldi	r24, 0x01	; 1
    4464:	90 e0       	ldi	r25, 0x00	; 0
    4466:	f3 cf       	rjmp	.-26     	; 0x444e <__vector_28+0x84>
	rcvC1_read_index = 0;
}
    4468:	ff 91       	pop	r31
    446a:	ef 91       	pop	r30
    446c:	9f 91       	pop	r25
    446e:	8f 91       	pop	r24
    4470:	3f 91       	pop	r19
    4472:	2f 91       	pop	r18
    4474:	0f 90       	pop	r0
    4476:	0b be       	out	0x3b, r0	; 59
    4478:	0f 90       	pop	r0
    447a:	08 be       	out	0x38, r0	; 56
    447c:	0f 90       	pop	r0
    447e:	0f be       	out	0x3f, r0	; 63
    4480:	0f 90       	pop	r0
    4482:	1f 90       	pop	r1
    4484:	18 95       	reti

00004486 <__vector_88>:
#endif

#ifdef USARTD0_RXC_vect
ISR (USARTD0_RXC_vect)
{
    4486:	1f 92       	push	r1
    4488:	0f 92       	push	r0
    448a:	0f b6       	in	r0, 0x3f	; 63
    448c:	0f 92       	push	r0
    448e:	11 24       	eor	r1, r1
    4490:	08 b6       	in	r0, 0x38	; 56
    4492:	0f 92       	push	r0
    4494:	18 be       	out	0x38, r1	; 56
    4496:	0b b6       	in	r0, 0x3b	; 59
    4498:	0f 92       	push	r0
    449a:	1b be       	out	0x3b, r1	; 59
    449c:	2f 93       	push	r18
    449e:	3f 93       	push	r19
    44a0:	8f 93       	push	r24
    44a2:	9f 93       	push	r25
    44a4:	ef 93       	push	r30
    44a6:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvD0_buffer[rcvC0_write_index] = USARTD0.DATA;
    44a8:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    44ac:	e0 91 ba 32 	lds	r30, 0x32BA	; 0x8032ba <rcvD0_buffer>
    44b0:	f0 91 bb 32 	lds	r31, 0x32BB	; 0x8032bb <rcvD0_buffer+0x1>
    44b4:	80 91 aa 32 	lds	r24, 0x32AA	; 0x8032aa <rcvC0_write_index>
    44b8:	90 91 ab 32 	lds	r25, 0x32AB	; 0x8032ab <rcvC0_write_index+0x1>
    44bc:	e8 0f       	add	r30, r24
    44be:	f9 1f       	adc	r31, r25
    44c0:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvD0_write_index >= RSINT_BUF_SIZE)
    44c2:	80 91 a6 32 	lds	r24, 0x32A6	; 0x8032a6 <rcvD0_write_index>
    44c6:	90 91 a7 32 	lds	r25, 0x32A7	; 0x8032a7 <rcvD0_write_index+0x1>
    44ca:	01 96       	adiw	r24, 0x01	; 1
    44cc:	84 36       	cpi	r24, 0x64	; 100
    44ce:	91 05       	cpc	r25, r1
    44d0:	60 f4       	brcc	.+24     	; 0x44ea <__vector_88+0x64>
    44d2:	80 93 a6 32 	sts	0x32A6, r24	; 0x8032a6 <rcvD0_write_index>
    44d6:	90 93 a7 32 	sts	0x32A7, r25	; 0x8032a7 <rcvD0_write_index+0x1>
	rcvD0_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD0_write_index == rcvD0_read_index)
    44da:	20 91 b0 32 	lds	r18, 0x32B0	; 0x8032b0 <rcvD0_read_index>
    44de:	30 91 b1 32 	lds	r19, 0x32B1	; 0x8032b1 <rcvD0_read_index+0x1>
    44e2:	82 17       	cp	r24, r18
    44e4:	93 07       	cpc	r25, r19
    44e6:	f1 f4       	brne	.+60     	; 0x4524 <__vector_88+0x9e>
    44e8:	0c c0       	rjmp	.+24     	; 0x4502 <__vector_88+0x7c>

	rcvD0_buffer[rcvC0_write_index] = USARTD0.DATA;

	// Increment the write pointer
	if (++rcvD0_write_index >= RSINT_BUF_SIZE)
	rcvD0_write_index = 0;
    44ea:	10 92 a6 32 	sts	0x32A6, r1	; 0x8032a6 <rcvD0_write_index>
    44ee:	10 92 a7 32 	sts	0x32A7, r1	; 0x8032a7 <rcvD0_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD0_write_index == rcvD0_read_index)
    44f2:	80 91 b0 32 	lds	r24, 0x32B0	; 0x8032b0 <rcvD0_read_index>
    44f6:	90 91 b1 32 	lds	r25, 0x32B1	; 0x8032b1 <rcvD0_read_index+0x1>
    44fa:	18 16       	cp	r1, r24
    44fc:	19 06       	cpc	r1, r25
    44fe:	91 f4       	brne	.+36     	; 0x4524 <__vector_88+0x9e>
    4500:	0e c0       	rjmp	.+28     	; 0x451e <__vector_88+0x98>
	if (++rcvD0_read_index >= RSINT_BUF_SIZE)
    4502:	01 96       	adiw	r24, 0x01	; 1
    4504:	84 36       	cpi	r24, 0x64	; 100
    4506:	91 05       	cpc	r25, r1
    4508:	28 f4       	brcc	.+10     	; 0x4514 <__vector_88+0x8e>
    450a:	80 93 b0 32 	sts	0x32B0, r24	; 0x8032b0 <rcvD0_read_index>
    450e:	90 93 b1 32 	sts	0x32B1, r25	; 0x8032b1 <rcvD0_read_index+0x1>
    4512:	08 c0       	rjmp	.+16     	; 0x4524 <__vector_88+0x9e>
	rcvD0_read_index = 0;
    4514:	10 92 b0 32 	sts	0x32B0, r1	; 0x8032b0 <rcvD0_read_index>
    4518:	10 92 b1 32 	sts	0x32B1, r1	; 0x8032b1 <rcvD0_read_index+0x1>
}
    451c:	03 c0       	rjmp	.+6      	; 0x4524 <__vector_88+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD0_write_index == rcvD0_read_index)
	if (++rcvD0_read_index >= RSINT_BUF_SIZE)
    451e:	81 e0       	ldi	r24, 0x01	; 1
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	f3 cf       	rjmp	.-26     	; 0x450a <__vector_88+0x84>
	rcvD0_read_index = 0;
}
    4524:	ff 91       	pop	r31
    4526:	ef 91       	pop	r30
    4528:	9f 91       	pop	r25
    452a:	8f 91       	pop	r24
    452c:	3f 91       	pop	r19
    452e:	2f 91       	pop	r18
    4530:	0f 90       	pop	r0
    4532:	0b be       	out	0x3b, r0	; 59
    4534:	0f 90       	pop	r0
    4536:	08 be       	out	0x38, r0	; 56
    4538:	0f 90       	pop	r0
    453a:	0f be       	out	0x3f, r0	; 63
    453c:	0f 90       	pop	r0
    453e:	1f 90       	pop	r1
    4540:	18 95       	reti

00004542 <__vector_91>:
#endif

#ifdef USARTD1_RXC_vect
ISR (USARTD1_RXC_vect)
{
    4542:	1f 92       	push	r1
    4544:	0f 92       	push	r0
    4546:	0f b6       	in	r0, 0x3f	; 63
    4548:	0f 92       	push	r0
    454a:	11 24       	eor	r1, r1
    454c:	08 b6       	in	r0, 0x38	; 56
    454e:	0f 92       	push	r0
    4550:	18 be       	out	0x38, r1	; 56
    4552:	0b b6       	in	r0, 0x3b	; 59
    4554:	0f 92       	push	r0
    4556:	1b be       	out	0x3b, r1	; 59
    4558:	2f 93       	push	r18
    455a:	3f 93       	push	r19
    455c:	8f 93       	push	r24
    455e:	9f 93       	push	r25
    4560:	ef 93       	push	r30
    4562:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvD1_buffer[rcvD1_write_index] = USARTD1.DATA;
    4564:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    4568:	e0 91 b8 32 	lds	r30, 0x32B8	; 0x8032b8 <rcvD1_buffer>
    456c:	f0 91 b9 32 	lds	r31, 0x32B9	; 0x8032b9 <rcvD1_buffer+0x1>
    4570:	80 91 a4 32 	lds	r24, 0x32A4	; 0x8032a4 <rcvD1_write_index>
    4574:	90 91 a5 32 	lds	r25, 0x32A5	; 0x8032a5 <rcvD1_write_index+0x1>
    4578:	e8 0f       	add	r30, r24
    457a:	f9 1f       	adc	r31, r25
    457c:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvD1_write_index >= RSINT_BUF_SIZE)
    457e:	80 91 a4 32 	lds	r24, 0x32A4	; 0x8032a4 <rcvD1_write_index>
    4582:	90 91 a5 32 	lds	r25, 0x32A5	; 0x8032a5 <rcvD1_write_index+0x1>
    4586:	01 96       	adiw	r24, 0x01	; 1
    4588:	84 36       	cpi	r24, 0x64	; 100
    458a:	91 05       	cpc	r25, r1
    458c:	60 f4       	brcc	.+24     	; 0x45a6 <__vector_91+0x64>
    458e:	80 93 a4 32 	sts	0x32A4, r24	; 0x8032a4 <rcvD1_write_index>
    4592:	90 93 a5 32 	sts	0x32A5, r25	; 0x8032a5 <rcvD1_write_index+0x1>
	rcvD1_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD1_write_index == rcvD1_read_index)
    4596:	20 91 ae 32 	lds	r18, 0x32AE	; 0x8032ae <rcvD1_read_index>
    459a:	30 91 af 32 	lds	r19, 0x32AF	; 0x8032af <rcvD1_read_index+0x1>
    459e:	82 17       	cp	r24, r18
    45a0:	93 07       	cpc	r25, r19
    45a2:	f1 f4       	brne	.+60     	; 0x45e0 <__vector_91+0x9e>
    45a4:	0c c0       	rjmp	.+24     	; 0x45be <__vector_91+0x7c>

	rcvD1_buffer[rcvD1_write_index] = USARTD1.DATA;

	// Increment the write pointer
	if (++rcvD1_write_index >= RSINT_BUF_SIZE)
	rcvD1_write_index = 0;
    45a6:	10 92 a4 32 	sts	0x32A4, r1	; 0x8032a4 <rcvD1_write_index>
    45aa:	10 92 a5 32 	sts	0x32A5, r1	; 0x8032a5 <rcvD1_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD1_write_index == rcvD1_read_index)
    45ae:	80 91 ae 32 	lds	r24, 0x32AE	; 0x8032ae <rcvD1_read_index>
    45b2:	90 91 af 32 	lds	r25, 0x32AF	; 0x8032af <rcvD1_read_index+0x1>
    45b6:	18 16       	cp	r1, r24
    45b8:	19 06       	cpc	r1, r25
    45ba:	91 f4       	brne	.+36     	; 0x45e0 <__vector_91+0x9e>
    45bc:	0e c0       	rjmp	.+28     	; 0x45da <__vector_91+0x98>
	if (++rcvD1_read_index >= RSINT_BUF_SIZE)
    45be:	01 96       	adiw	r24, 0x01	; 1
    45c0:	84 36       	cpi	r24, 0x64	; 100
    45c2:	91 05       	cpc	r25, r1
    45c4:	28 f4       	brcc	.+10     	; 0x45d0 <__vector_91+0x8e>
    45c6:	80 93 ae 32 	sts	0x32AE, r24	; 0x8032ae <rcvD1_read_index>
    45ca:	90 93 af 32 	sts	0x32AF, r25	; 0x8032af <rcvD1_read_index+0x1>
    45ce:	08 c0       	rjmp	.+16     	; 0x45e0 <__vector_91+0x9e>
	rcvD1_read_index = 0;
    45d0:	10 92 ae 32 	sts	0x32AE, r1	; 0x8032ae <rcvD1_read_index>
    45d4:	10 92 af 32 	sts	0x32AF, r1	; 0x8032af <rcvD1_read_index+0x1>
}
    45d8:	03 c0       	rjmp	.+6      	; 0x45e0 <__vector_91+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD1_write_index == rcvD1_read_index)
	if (++rcvD1_read_index >= RSINT_BUF_SIZE)
    45da:	81 e0       	ldi	r24, 0x01	; 1
    45dc:	90 e0       	ldi	r25, 0x00	; 0
    45de:	f3 cf       	rjmp	.-26     	; 0x45c6 <__vector_91+0x84>
	rcvD1_read_index = 0;
}
    45e0:	ff 91       	pop	r31
    45e2:	ef 91       	pop	r30
    45e4:	9f 91       	pop	r25
    45e6:	8f 91       	pop	r24
    45e8:	3f 91       	pop	r19
    45ea:	2f 91       	pop	r18
    45ec:	0f 90       	pop	r0
    45ee:	0b be       	out	0x3b, r0	; 59
    45f0:	0f 90       	pop	r0
    45f2:	08 be       	out	0x38, r0	; 56
    45f4:	0f 90       	pop	r0
    45f6:	0f be       	out	0x3f, r0	; 63
    45f8:	0f 90       	pop	r0
    45fa:	1f 90       	pop	r1
    45fc:	18 95       	reti

000045fe <__vector_58>:
#endif

#ifdef USARTE0_RXC_vect
ISR (USARTE0_RXC_vect)
{
    45fe:	1f 92       	push	r1
    4600:	0f 92       	push	r0
    4602:	0f b6       	in	r0, 0x3f	; 63
    4604:	0f 92       	push	r0
    4606:	11 24       	eor	r1, r1
    4608:	08 b6       	in	r0, 0x38	; 56
    460a:	0f 92       	push	r0
    460c:	18 be       	out	0x38, r1	; 56
    460e:	0b b6       	in	r0, 0x3b	; 59
    4610:	0f 92       	push	r0
    4612:	1b be       	out	0x3b, r1	; 59
    4614:	2f 93       	push	r18
    4616:	3f 93       	push	r19
    4618:	8f 93       	push	r24
    461a:	9f 93       	push	r25
    461c:	ef 93       	push	r30
    461e:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvE0_buffer[rcvE0_write_index] = USARTE0.DATA;
    4620:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    4624:	e0 91 b6 32 	lds	r30, 0x32B6	; 0x8032b6 <rcvE0_buffer>
    4628:	f0 91 b7 32 	lds	r31, 0x32B7	; 0x8032b7 <rcvE0_buffer+0x1>
    462c:	80 91 a2 32 	lds	r24, 0x32A2	; 0x8032a2 <rcvE0_write_index>
    4630:	90 91 a3 32 	lds	r25, 0x32A3	; 0x8032a3 <rcvE0_write_index+0x1>
    4634:	e8 0f       	add	r30, r24
    4636:	f9 1f       	adc	r31, r25
    4638:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvE0_write_index >= RSINT_BUF_SIZE)
    463a:	80 91 a2 32 	lds	r24, 0x32A2	; 0x8032a2 <rcvE0_write_index>
    463e:	90 91 a3 32 	lds	r25, 0x32A3	; 0x8032a3 <rcvE0_write_index+0x1>
    4642:	01 96       	adiw	r24, 0x01	; 1
    4644:	84 36       	cpi	r24, 0x64	; 100
    4646:	91 05       	cpc	r25, r1
    4648:	60 f4       	brcc	.+24     	; 0x4662 <__vector_58+0x64>
    464a:	80 93 a2 32 	sts	0x32A2, r24	; 0x8032a2 <rcvE0_write_index>
    464e:	90 93 a3 32 	sts	0x32A3, r25	; 0x8032a3 <rcvE0_write_index+0x1>
	rcvE0_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvE0_write_index == rcvE0_read_index)
    4652:	20 91 ac 32 	lds	r18, 0x32AC	; 0x8032ac <rcvE0_read_index>
    4656:	30 91 ad 32 	lds	r19, 0x32AD	; 0x8032ad <rcvE0_read_index+0x1>
    465a:	82 17       	cp	r24, r18
    465c:	93 07       	cpc	r25, r19
    465e:	f1 f4       	brne	.+60     	; 0x469c <__vector_58+0x9e>
    4660:	0c c0       	rjmp	.+24     	; 0x467a <__vector_58+0x7c>

	rcvE0_buffer[rcvE0_write_index] = USARTE0.DATA;

	// Increment the write pointer
	if (++rcvE0_write_index >= RSINT_BUF_SIZE)
	rcvE0_write_index = 0;
    4662:	10 92 a2 32 	sts	0x32A2, r1	; 0x8032a2 <rcvE0_write_index>
    4666:	10 92 a3 32 	sts	0x32A3, r1	; 0x8032a3 <rcvE0_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvE0_write_index == rcvE0_read_index)
    466a:	80 91 ac 32 	lds	r24, 0x32AC	; 0x8032ac <rcvE0_read_index>
    466e:	90 91 ad 32 	lds	r25, 0x32AD	; 0x8032ad <rcvE0_read_index+0x1>
    4672:	18 16       	cp	r1, r24
    4674:	19 06       	cpc	r1, r25
    4676:	91 f4       	brne	.+36     	; 0x469c <__vector_58+0x9e>
    4678:	0e c0       	rjmp	.+28     	; 0x4696 <__vector_58+0x98>
	if (++rcvE0_read_index >= RSINT_BUF_SIZE)
    467a:	01 96       	adiw	r24, 0x01	; 1
    467c:	84 36       	cpi	r24, 0x64	; 100
    467e:	91 05       	cpc	r25, r1
    4680:	28 f4       	brcc	.+10     	; 0x468c <__vector_58+0x8e>
    4682:	80 93 ac 32 	sts	0x32AC, r24	; 0x8032ac <rcvE0_read_index>
    4686:	90 93 ad 32 	sts	0x32AD, r25	; 0x8032ad <rcvE0_read_index+0x1>
    468a:	08 c0       	rjmp	.+16     	; 0x469c <__vector_58+0x9e>
	rcvE0_read_index = 0;
    468c:	10 92 ac 32 	sts	0x32AC, r1	; 0x8032ac <rcvE0_read_index>
    4690:	10 92 ad 32 	sts	0x32AD, r1	; 0x8032ad <rcvE0_read_index+0x1>
}
    4694:	03 c0       	rjmp	.+6      	; 0x469c <__vector_58+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvE0_write_index == rcvE0_read_index)
	if (++rcvE0_read_index >= RSINT_BUF_SIZE)
    4696:	81 e0       	ldi	r24, 0x01	; 1
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	f3 cf       	rjmp	.-26     	; 0x4682 <__vector_58+0x84>
	rcvE0_read_index = 0;
}
    469c:	ff 91       	pop	r31
    469e:	ef 91       	pop	r30
    46a0:	9f 91       	pop	r25
    46a2:	8f 91       	pop	r24
    46a4:	3f 91       	pop	r19
    46a6:	2f 91       	pop	r18
    46a8:	0f 90       	pop	r0
    46aa:	0b be       	out	0x3b, r0	; 59
    46ac:	0f 90       	pop	r0
    46ae:	08 be       	out	0x38, r0	; 56
    46b0:	0f 90       	pop	r0
    46b2:	0f be       	out	0x3f, r0	; 63
    46b4:	0f 90       	pop	r0
    46b6:	1f 90       	pop	r1
    46b8:	18 95       	reti

000046ba <_ZN9frt_queueIjE16ISR_num_items_inEv>:
		 *  called only from within an interrupt service routine.
		 *  @return The number of items in the queue
		 */
		size_t ISR_num_items_in (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle));
    46ba:	fc 01       	movw	r30, r24
    46bc:	84 81       	ldd	r24, Z+4	; 0x04
    46be:	95 81       	ldd	r25, Z+5	; 0x05
    46c0:	0e 94 8f 14 	call	0x291e	; 0x291e <uxQueueMessagesWaitingFromISR>
		}
    46c4:	90 e0       	ldi	r25, 0x00	; 0
    46c6:	08 95       	ret

000046c8 <_ZN9frt_queueIjE13ISR_not_emptyEv>:
		 *  an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool ISR_not_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) != 0);
    46c8:	fc 01       	movw	r30, r24
    46ca:	84 81       	ldd	r24, Z+4	; 0x04
    46cc:	95 81       	ldd	r25, Z+5	; 0x05
    46ce:	0e 94 8f 14 	call	0x291e	; 0x291e <uxQueueMessagesWaitingFromISR>
    46d2:	91 e0       	ldi	r25, 0x01	; 1
    46d4:	81 11       	cpse	r24, r1
    46d6:	01 c0       	rjmp	.+2      	; 0x46da <_ZN9frt_queueIjE13ISR_not_emptyEv+0x12>
    46d8:	90 e0       	ldi	r25, 0x00	; 0
		}
    46da:	89 2f       	mov	r24, r25
    46dc:	08 95       	ret

000046de <_ZN9frt_queueIjE12ISR_is_emptyEv>:
		 *  routine. It must not be used in normal non-ISR code. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool ISR_is_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) == 0);
    46de:	fc 01       	movw	r30, r24
    46e0:	84 81       	ldd	r24, Z+4	; 0x04
    46e2:	95 81       	ldd	r25, Z+5	; 0x05
    46e4:	0e 94 8f 14 	call	0x291e	; 0x291e <uxQueueMessagesWaitingFromISR>
    46e8:	91 e0       	ldi	r25, 0x01	; 1
    46ea:	81 11       	cpse	r24, r1
    46ec:	90 e0       	ldi	r25, 0x00	; 0
		}
    46ee:	89 2f       	mov	r24, r25
    46f0:	08 95       	ret

000046f2 <_ZN9frt_queueIiE16ISR_num_items_inEv>:
		 *  called only from within an interrupt service routine.
		 *  @return The number of items in the queue
		 */
		size_t ISR_num_items_in (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle));
    46f2:	fc 01       	movw	r30, r24
    46f4:	84 81       	ldd	r24, Z+4	; 0x04
    46f6:	95 81       	ldd	r25, Z+5	; 0x05
    46f8:	0e 94 8f 14 	call	0x291e	; 0x291e <uxQueueMessagesWaitingFromISR>
		}
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	08 95       	ret

00004700 <_ZN9frt_queueIiE13ISR_not_emptyEv>:
		 *  an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool ISR_not_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) != 0);
    4700:	fc 01       	movw	r30, r24
    4702:	84 81       	ldd	r24, Z+4	; 0x04
    4704:	95 81       	ldd	r25, Z+5	; 0x05
    4706:	0e 94 8f 14 	call	0x291e	; 0x291e <uxQueueMessagesWaitingFromISR>
    470a:	91 e0       	ldi	r25, 0x01	; 1
    470c:	81 11       	cpse	r24, r1
    470e:	01 c0       	rjmp	.+2      	; 0x4712 <_ZN9frt_queueIiE13ISR_not_emptyEv+0x12>
    4710:	90 e0       	ldi	r25, 0x00	; 0
		}
    4712:	89 2f       	mov	r24, r25
    4714:	08 95       	ret

00004716 <_ZN9frt_queueIiE12ISR_is_emptyEv>:
		 *  routine. It must not be used in normal non-ISR code. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool ISR_is_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) == 0);
    4716:	fc 01       	movw	r30, r24
    4718:	84 81       	ldd	r24, Z+4	; 0x04
    471a:	95 81       	ldd	r25, Z+5	; 0x05
    471c:	0e 94 8f 14 	call	0x291e	; 0x291e <uxQueueMessagesWaitingFromISR>
    4720:	91 e0       	ldi	r25, 0x01	; 1
    4722:	81 11       	cpse	r24, r1
    4724:	90 e0       	ldi	r25, 0x00	; 0
		}
    4726:	89 2f       	mov	r24, r25
    4728:	08 95       	ret

0000472a <_ZN9frt_queueIjE12num_items_inEv>:
		 *  ISR_num_items_in() can be called from within an ISR. 
		 *  @return The number of items in the queue
		 */
		size_t num_items_in (void)
		{
			return (uxQueueMessagesWaiting (handle));
    472a:	fc 01       	movw	r30, r24
    472c:	84 81       	ldd	r24, Z+4	; 0x04
    472e:	95 81       	ldd	r25, Z+5	; 0x05
    4730:	0e 94 87 14 	call	0x290e	; 0x290e <uxQueueMessagesWaiting>
		}
    4734:	90 e0       	ldi	r25, 0x00	; 0
    4736:	08 95       	ret

00004738 <_ZN9frt_queueIjE9not_emptyEv>:
		 *  \b not be called from within an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool not_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) != 0);
    4738:	fc 01       	movw	r30, r24
    473a:	84 81       	ldd	r24, Z+4	; 0x04
    473c:	95 81       	ldd	r25, Z+5	; 0x05
    473e:	0e 94 87 14 	call	0x290e	; 0x290e <uxQueueMessagesWaiting>
    4742:	91 e0       	ldi	r25, 0x01	; 1
    4744:	81 11       	cpse	r24, r1
    4746:	01 c0       	rjmp	.+2      	; 0x474a <_ZN9frt_queueIjE9not_emptyEv+0x12>
    4748:	90 e0       	ldi	r25, 0x00	; 0
		}
    474a:	89 2f       	mov	r24, r25
    474c:	08 95       	ret

0000474e <_ZN9frt_queueIjE8is_emptyEv>:
		/** This method checks if the queue is empty. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool is_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) == 0);
    474e:	fc 01       	movw	r30, r24
    4750:	84 81       	ldd	r24, Z+4	; 0x04
    4752:	95 81       	ldd	r25, Z+5	; 0x05
    4754:	0e 94 87 14 	call	0x290e	; 0x290e <uxQueueMessagesWaiting>
    4758:	91 e0       	ldi	r25, 0x01	; 1
    475a:	81 11       	cpse	r24, r1
    475c:	90 e0       	ldi	r25, 0x00	; 0
		}
    475e:	89 2f       	mov	r24, r25
    4760:	08 95       	ret

00004762 <_ZN9frt_queueIiE12num_items_inEv>:
		 *  ISR_num_items_in() can be called from within an ISR. 
		 *  @return The number of items in the queue
		 */
		size_t num_items_in (void)
		{
			return (uxQueueMessagesWaiting (handle));
    4762:	fc 01       	movw	r30, r24
    4764:	84 81       	ldd	r24, Z+4	; 0x04
    4766:	95 81       	ldd	r25, Z+5	; 0x05
    4768:	0e 94 87 14 	call	0x290e	; 0x290e <uxQueueMessagesWaiting>
		}
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	08 95       	ret

00004770 <_ZN9frt_queueIiE9not_emptyEv>:
		 *  \b not be called from within an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool not_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) != 0);
    4770:	fc 01       	movw	r30, r24
    4772:	84 81       	ldd	r24, Z+4	; 0x04
    4774:	95 81       	ldd	r25, Z+5	; 0x05
    4776:	0e 94 87 14 	call	0x290e	; 0x290e <uxQueueMessagesWaiting>
    477a:	91 e0       	ldi	r25, 0x01	; 1
    477c:	81 11       	cpse	r24, r1
    477e:	01 c0       	rjmp	.+2      	; 0x4782 <_ZN9frt_queueIiE9not_emptyEv+0x12>
    4780:	90 e0       	ldi	r25, 0x00	; 0
		}
    4782:	89 2f       	mov	r24, r25
    4784:	08 95       	ret

00004786 <_ZN9frt_queueIiE8is_emptyEv>:
		/** This method checks if the queue is empty. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool is_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) == 0);
    4786:	fc 01       	movw	r30, r24
    4788:	84 81       	ldd	r24, Z+4	; 0x04
    478a:	95 81       	ldd	r25, Z+5	; 0x05
    478c:	0e 94 87 14 	call	0x290e	; 0x290e <uxQueueMessagesWaiting>
    4790:	91 e0       	ldi	r25, 0x01	; 1
    4792:	81 11       	cpse	r24, r1
    4794:	90 e0       	ldi	r25, 0x00	; 0
		}
    4796:	89 2f       	mov	r24, r25
    4798:	08 95       	ret

0000479a <_ZN9frt_queueIjE10get_a_copyERj>:
 *  \c xQueuePeekFromISR() which would allow copying items from a queue in an ISR. 
 *  @param item A reference to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get_a_copy (data_type& item)
    479a:	0f 93       	push	r16
{
	xQueuePeek (handle, &item, portMAX_DELAY);
    479c:	01 e0       	ldi	r16, 0x01	; 1
    479e:	2f ef       	ldi	r18, 0xFF	; 255
    47a0:	3f ef       	ldi	r19, 0xFF	; 255
    47a2:	a9 01       	movw	r20, r18
    47a4:	fc 01       	movw	r30, r24
    47a6:	84 81       	ldd	r24, Z+4	; 0x04
    47a8:	95 81       	ldd	r25, Z+5	; 0x05
    47aa:	0e 94 96 13 	call	0x272c	; 0x272c <xQueueGenericReceive>
}
    47ae:	0f 91       	pop	r16
    47b0:	08 95       	ret

000047b2 <_ZN9frt_queueIjE10get_a_copyEv>:
 *          data type if we couldn't get any data from the queue and the attempt
 *          timed out
 */

template <class data_type>
inline data_type frt_queue<data_type>::get_a_copy (void)
    47b2:	0f 93       	push	r16
    47b4:	cf 93       	push	r28
    47b6:	df 93       	push	r29
    47b8:	1f 92       	push	r1
    47ba:	1f 92       	push	r1
    47bc:	cd b7       	in	r28, 0x3d	; 61
    47be:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueuePeek (handle, &recv_item, portMAX_DELAY);
    47c0:	01 e0       	ldi	r16, 0x01	; 1
    47c2:	2f ef       	ldi	r18, 0xFF	; 255
    47c4:	3f ef       	ldi	r19, 0xFF	; 255
    47c6:	a9 01       	movw	r20, r18
    47c8:	be 01       	movw	r22, r28
    47ca:	6f 5f       	subi	r22, 0xFF	; 255
    47cc:	7f 4f       	sbci	r23, 0xFF	; 255
    47ce:	fc 01       	movw	r30, r24
    47d0:	84 81       	ldd	r24, Z+4	; 0x04
    47d2:	95 81       	ldd	r25, Z+5	; 0x05
    47d4:	0e 94 96 13 	call	0x272c	; 0x272c <xQueueGenericReceive>
	return (recv_item);
}
    47d8:	89 81       	ldd	r24, Y+1	; 0x01
    47da:	9a 81       	ldd	r25, Y+2	; 0x02
    47dc:	0f 90       	pop	r0
    47de:	0f 90       	pop	r0
    47e0:	df 91       	pop	r29
    47e2:	cf 91       	pop	r28
    47e4:	0f 91       	pop	r16
    47e6:	08 95       	ret

000047e8 <_ZN9frt_queueIjE3getEPj>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get (data_type* p_item)
    47e8:	0f 93       	push	r16
{
	xQueueReceive (handle, p_item, portMAX_DELAY);
    47ea:	00 e0       	ldi	r16, 0x00	; 0
    47ec:	2f ef       	ldi	r18, 0xFF	; 255
    47ee:	3f ef       	ldi	r19, 0xFF	; 255
    47f0:	a9 01       	movw	r20, r18
    47f2:	fc 01       	movw	r30, r24
    47f4:	84 81       	ldd	r24, Z+4	; 0x04
    47f6:	95 81       	ldd	r25, Z+5	; 0x05
    47f8:	0e 94 96 13 	call	0x272c	; 0x272c <xQueueGenericReceive>
}
    47fc:	0f 91       	pop	r16
    47fe:	08 95       	ret

00004800 <_ZN9frt_queueIjE3getEv>:
 *  up. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::get (void)
    4800:	0f 93       	push	r16
    4802:	cf 93       	push	r28
    4804:	df 93       	push	r29
    4806:	1f 92       	push	r1
    4808:	1f 92       	push	r1
    480a:	cd b7       	in	r28, 0x3d	; 61
    480c:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceive (handle, &recv_item, portMAX_DELAY);
    480e:	00 e0       	ldi	r16, 0x00	; 0
    4810:	2f ef       	ldi	r18, 0xFF	; 255
    4812:	3f ef       	ldi	r19, 0xFF	; 255
    4814:	a9 01       	movw	r20, r18
    4816:	be 01       	movw	r22, r28
    4818:	6f 5f       	subi	r22, 0xFF	; 255
    481a:	7f 4f       	sbci	r23, 0xFF	; 255
    481c:	fc 01       	movw	r30, r24
    481e:	84 81       	ldd	r24, Z+4	; 0x04
    4820:	95 81       	ldd	r25, Z+5	; 0x05
    4822:	0e 94 96 13 	call	0x272c	; 0x272c <xQueueGenericReceive>
	return (recv_item);
}
    4826:	89 81       	ldd	r24, Y+1	; 0x01
    4828:	9a 81       	ldd	r25, Y+2	; 0x02
    482a:	0f 90       	pop	r0
    482c:	0f 90       	pop	r0
    482e:	df 91       	pop	r29
    4830:	cf 91       	pop	r28
    4832:	0f 91       	pop	r16
    4834:	08 95       	ret

00004836 <_ZN9frt_queueIiE10get_a_copyERi>:
 *  \c xQueuePeekFromISR() which would allow copying items from a queue in an ISR. 
 *  @param item A reference to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get_a_copy (data_type& item)
    4836:	0f 93       	push	r16
{
	xQueuePeek (handle, &item, portMAX_DELAY);
    4838:	01 e0       	ldi	r16, 0x01	; 1
    483a:	2f ef       	ldi	r18, 0xFF	; 255
    483c:	3f ef       	ldi	r19, 0xFF	; 255
    483e:	a9 01       	movw	r20, r18
    4840:	fc 01       	movw	r30, r24
    4842:	84 81       	ldd	r24, Z+4	; 0x04
    4844:	95 81       	ldd	r25, Z+5	; 0x05
    4846:	0e 94 96 13 	call	0x272c	; 0x272c <xQueueGenericReceive>
}
    484a:	0f 91       	pop	r16
    484c:	08 95       	ret

0000484e <_ZN9frt_queueIiE10get_a_copyEv>:
 *          data type if we couldn't get any data from the queue and the attempt
 *          timed out
 */

template <class data_type>
inline data_type frt_queue<data_type>::get_a_copy (void)
    484e:	0f 93       	push	r16
    4850:	cf 93       	push	r28
    4852:	df 93       	push	r29
    4854:	1f 92       	push	r1
    4856:	1f 92       	push	r1
    4858:	cd b7       	in	r28, 0x3d	; 61
    485a:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueuePeek (handle, &recv_item, portMAX_DELAY);
    485c:	01 e0       	ldi	r16, 0x01	; 1
    485e:	2f ef       	ldi	r18, 0xFF	; 255
    4860:	3f ef       	ldi	r19, 0xFF	; 255
    4862:	a9 01       	movw	r20, r18
    4864:	be 01       	movw	r22, r28
    4866:	6f 5f       	subi	r22, 0xFF	; 255
    4868:	7f 4f       	sbci	r23, 0xFF	; 255
    486a:	fc 01       	movw	r30, r24
    486c:	84 81       	ldd	r24, Z+4	; 0x04
    486e:	95 81       	ldd	r25, Z+5	; 0x05
    4870:	0e 94 96 13 	call	0x272c	; 0x272c <xQueueGenericReceive>
	return (recv_item);
}
    4874:	89 81       	ldd	r24, Y+1	; 0x01
    4876:	9a 81       	ldd	r25, Y+2	; 0x02
    4878:	0f 90       	pop	r0
    487a:	0f 90       	pop	r0
    487c:	df 91       	pop	r29
    487e:	cf 91       	pop	r28
    4880:	0f 91       	pop	r16
    4882:	08 95       	ret

00004884 <_ZN9frt_queueIiE3getEPi>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get (data_type* p_item)
    4884:	0f 93       	push	r16
{
	xQueueReceive (handle, p_item, portMAX_DELAY);
    4886:	00 e0       	ldi	r16, 0x00	; 0
    4888:	2f ef       	ldi	r18, 0xFF	; 255
    488a:	3f ef       	ldi	r19, 0xFF	; 255
    488c:	a9 01       	movw	r20, r18
    488e:	fc 01       	movw	r30, r24
    4890:	84 81       	ldd	r24, Z+4	; 0x04
    4892:	95 81       	ldd	r25, Z+5	; 0x05
    4894:	0e 94 96 13 	call	0x272c	; 0x272c <xQueueGenericReceive>
}
    4898:	0f 91       	pop	r16
    489a:	08 95       	ret

0000489c <_ZN9frt_queueIiE3getEv>:
 *  up. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::get (void)
    489c:	0f 93       	push	r16
    489e:	cf 93       	push	r28
    48a0:	df 93       	push	r29
    48a2:	1f 92       	push	r1
    48a4:	1f 92       	push	r1
    48a6:	cd b7       	in	r28, 0x3d	; 61
    48a8:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceive (handle, &recv_item, portMAX_DELAY);
    48aa:	00 e0       	ldi	r16, 0x00	; 0
    48ac:	2f ef       	ldi	r18, 0xFF	; 255
    48ae:	3f ef       	ldi	r19, 0xFF	; 255
    48b0:	a9 01       	movw	r20, r18
    48b2:	be 01       	movw	r22, r28
    48b4:	6f 5f       	subi	r22, 0xFF	; 255
    48b6:	7f 4f       	sbci	r23, 0xFF	; 255
    48b8:	fc 01       	movw	r30, r24
    48ba:	84 81       	ldd	r24, Z+4	; 0x04
    48bc:	95 81       	ldd	r25, Z+5	; 0x05
    48be:	0e 94 96 13 	call	0x272c	; 0x272c <xQueueGenericReceive>
	return (recv_item);
}
    48c2:	89 81       	ldd	r24, Y+1	; 0x01
    48c4:	9a 81       	ldd	r25, Y+2	; 0x02
    48c6:	0f 90       	pop	r0
    48c8:	0f 90       	pop	r0
    48ca:	df 91       	pop	r29
    48cc:	cf 91       	pop	r28
    48ce:	0f 91       	pop	r16
    48d0:	08 95       	ret

000048d2 <_ZN9frt_queueIjE7ISR_getEPj>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::ISR_get (data_type* p_item)
    48d2:	cf 93       	push	r28
    48d4:	df 93       	push	r29
    48d6:	1f 92       	push	r1
    48d8:	cd b7       	in	r28, 0x3d	; 61
    48da:	de b7       	in	r29, 0x3e	; 62
{
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, and
	// nothing will actually be copied
	xQueueReceiveFromISR (handle, p_item, &task_awakened);
    48dc:	ae 01       	movw	r20, r28
    48de:	4f 5f       	subi	r20, 0xFF	; 255
    48e0:	5f 4f       	sbci	r21, 0xFF	; 255
    48e2:	fc 01       	movw	r30, r24
    48e4:	84 81       	ldd	r24, Z+4	; 0x04
    48e6:	95 81       	ldd	r25, Z+5	; 0x05
    48e8:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <xQueueReceiveFromISR>
}
    48ec:	0f 90       	pop	r0
    48ee:	df 91       	pop	r29
    48f0:	cf 91       	pop	r28
    48f2:	08 95       	ret

000048f4 <_ZN9frt_queueIjE7ISR_getEv>:
 *  service routine. This method must not be called from within normal non-ISR code. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::ISR_get (void)
    48f4:	cf 93       	push	r28
    48f6:	df 93       	push	r29
    48f8:	00 d0       	rcall	.+0      	; 0x48fa <_ZN9frt_queueIjE7ISR_getEv+0x6>
    48fa:	cd b7       	in	r28, 0x3d	; 61
    48fc:	de b7       	in	r29, 0x3e	; 62
	data_type recv_item;                    // Data item read from the queue
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceiveFromISR (handle, &recv_item, &task_awakened);
    48fe:	ae 01       	movw	r20, r28
    4900:	4d 5f       	subi	r20, 0xFD	; 253
    4902:	5f 4f       	sbci	r21, 0xFF	; 255
    4904:	be 01       	movw	r22, r28
    4906:	6f 5f       	subi	r22, 0xFF	; 255
    4908:	7f 4f       	sbci	r23, 0xFF	; 255
    490a:	fc 01       	movw	r30, r24
    490c:	84 81       	ldd	r24, Z+4	; 0x04
    490e:	95 81       	ldd	r25, Z+5	; 0x05
    4910:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <xQueueReceiveFromISR>
	return (recv_item);
}
    4914:	89 81       	ldd	r24, Y+1	; 0x01
    4916:	9a 81       	ldd	r25, Y+2	; 0x02
    4918:	23 96       	adiw	r28, 0x03	; 3
    491a:	cd bf       	out	0x3d, r28	; 61
    491c:	de bf       	out	0x3e, r29	; 62
    491e:	df 91       	pop	r29
    4920:	cf 91       	pop	r28
    4922:	08 95       	ret

00004924 <_ZN9frt_queueIiE7ISR_getEPi>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::ISR_get (data_type* p_item)
    4924:	cf 93       	push	r28
    4926:	df 93       	push	r29
    4928:	1f 92       	push	r1
    492a:	cd b7       	in	r28, 0x3d	; 61
    492c:	de b7       	in	r29, 0x3e	; 62
{
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, and
	// nothing will actually be copied
	xQueueReceiveFromISR (handle, p_item, &task_awakened);
    492e:	ae 01       	movw	r20, r28
    4930:	4f 5f       	subi	r20, 0xFF	; 255
    4932:	5f 4f       	sbci	r21, 0xFF	; 255
    4934:	fc 01       	movw	r30, r24
    4936:	84 81       	ldd	r24, Z+4	; 0x04
    4938:	95 81       	ldd	r25, Z+5	; 0x05
    493a:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <xQueueReceiveFromISR>
}
    493e:	0f 90       	pop	r0
    4940:	df 91       	pop	r29
    4942:	cf 91       	pop	r28
    4944:	08 95       	ret

00004946 <_ZN9frt_queueIiE7ISR_getEv>:
 *  service routine. This method must not be called from within normal non-ISR code. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::ISR_get (void)
    4946:	cf 93       	push	r28
    4948:	df 93       	push	r29
    494a:	00 d0       	rcall	.+0      	; 0x494c <_ZN9frt_queueIiE7ISR_getEv+0x6>
    494c:	cd b7       	in	r28, 0x3d	; 61
    494e:	de b7       	in	r29, 0x3e	; 62
	data_type recv_item;                    // Data item read from the queue
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceiveFromISR (handle, &recv_item, &task_awakened);
    4950:	ae 01       	movw	r20, r28
    4952:	4d 5f       	subi	r20, 0xFD	; 253
    4954:	5f 4f       	sbci	r21, 0xFF	; 255
    4956:	be 01       	movw	r22, r28
    4958:	6f 5f       	subi	r22, 0xFF	; 255
    495a:	7f 4f       	sbci	r23, 0xFF	; 255
    495c:	fc 01       	movw	r30, r24
    495e:	84 81       	ldd	r24, Z+4	; 0x04
    4960:	95 81       	ldd	r25, Z+5	; 0x05
    4962:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <xQueueReceiveFromISR>
	return (recv_item);
}
    4966:	89 81       	ldd	r24, Y+1	; 0x01
    4968:	9a 81       	ldd	r25, Y+2	; 0x02
    496a:	23 96       	adiw	r28, 0x03	; 3
    496c:	cd bf       	out	0x3d, r28	; 61
    496e:	de bf       	out	0x3e, r29	; 62
    4970:	df 91       	pop	r29
    4972:	cf 91       	pop	r28
    4974:	08 95       	ret

00004976 <_ZN9frt_queueIjE11ISR_butt_inERKj>:
 *              the front of the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
bool frt_queue<data_type>::ISR_butt_in (const data_type& item)
    4976:	cf 93       	push	r28
    4978:	df 93       	push	r29
    497a:	1f 92       	push	r1
    497c:	cd b7       	in	r28, 0x3d	; 61
    497e:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    4980:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;                      // Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToFrontFromISR (handle, &item, &shouldSwitch));
    4982:	21 e0       	ldi	r18, 0x01	; 1
    4984:	ae 01       	movw	r20, r28
    4986:	4f 5f       	subi	r20, 0xFF	; 255
    4988:	5f 4f       	sbci	r21, 0xFF	; 255
    498a:	fc 01       	movw	r30, r24
    498c:	84 81       	ldd	r24, Z+4	; 0x04
    498e:	95 81       	ldd	r25, Z+5	; 0x05
    4990:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    4994:	91 e0       	ldi	r25, 0x01	; 1
    4996:	81 11       	cpse	r24, r1
    4998:	01 c0       	rjmp	.+2      	; 0x499c <_ZN9frt_queueIjE11ISR_butt_inERKj+0x26>
    499a:	90 e0       	ldi	r25, 0x00	; 0
}
    499c:	89 2f       	mov	r24, r25
    499e:	0f 90       	pop	r0
    49a0:	df 91       	pop	r29
    49a2:	cf 91       	pop	r28
    49a4:	08 95       	ret

000049a6 <_ZN9frt_queueIjE7ISR_putERKj>:
 *  @param item Reference to the item which is going to be put into the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
inline bool frt_queue<data_type>::ISR_put (const data_type& item)
    49a6:	cf 93       	push	r28
    49a8:	df 93       	push	r29
    49aa:	1f 92       	push	r1
    49ac:	cd b7       	in	r28, 0x3d	; 61
    49ae:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    49b0:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;						// Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToBackFromISR (handle, &item, &shouldSwitch));
    49b2:	20 e0       	ldi	r18, 0x00	; 0
    49b4:	ae 01       	movw	r20, r28
    49b6:	4f 5f       	subi	r20, 0xFF	; 255
    49b8:	5f 4f       	sbci	r21, 0xFF	; 255
    49ba:	fc 01       	movw	r30, r24
    49bc:	84 81       	ldd	r24, Z+4	; 0x04
    49be:	95 81       	ldd	r25, Z+5	; 0x05
    49c0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    49c4:	91 e0       	ldi	r25, 0x01	; 1
    49c6:	81 11       	cpse	r24, r1
    49c8:	01 c0       	rjmp	.+2      	; 0x49cc <_ZN9frt_queueIjE7ISR_putERKj+0x26>
    49ca:	90 e0       	ldi	r25, 0x00	; 0
}
    49cc:	89 2f       	mov	r24, r25
    49ce:	0f 90       	pop	r0
    49d0:	df 91       	pop	r29
    49d2:	cf 91       	pop	r28
    49d4:	08 95       	ret

000049d6 <_ZN9frt_queueIiE11ISR_butt_inERKi>:
 *              the front of the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
bool frt_queue<data_type>::ISR_butt_in (const data_type& item)
    49d6:	cf 93       	push	r28
    49d8:	df 93       	push	r29
    49da:	1f 92       	push	r1
    49dc:	cd b7       	in	r28, 0x3d	; 61
    49de:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    49e0:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;                      // Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToFrontFromISR (handle, &item, &shouldSwitch));
    49e2:	21 e0       	ldi	r18, 0x01	; 1
    49e4:	ae 01       	movw	r20, r28
    49e6:	4f 5f       	subi	r20, 0xFF	; 255
    49e8:	5f 4f       	sbci	r21, 0xFF	; 255
    49ea:	fc 01       	movw	r30, r24
    49ec:	84 81       	ldd	r24, Z+4	; 0x04
    49ee:	95 81       	ldd	r25, Z+5	; 0x05
    49f0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    49f4:	91 e0       	ldi	r25, 0x01	; 1
    49f6:	81 11       	cpse	r24, r1
    49f8:	01 c0       	rjmp	.+2      	; 0x49fc <_ZN9frt_queueIiE11ISR_butt_inERKi+0x26>
    49fa:	90 e0       	ldi	r25, 0x00	; 0
}
    49fc:	89 2f       	mov	r24, r25
    49fe:	0f 90       	pop	r0
    4a00:	df 91       	pop	r29
    4a02:	cf 91       	pop	r28
    4a04:	08 95       	ret

00004a06 <_ZN9frt_queueIiE7ISR_putERKi>:
 *  @param item Reference to the item which is going to be put into the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
inline bool frt_queue<data_type>::ISR_put (const data_type& item)
    4a06:	cf 93       	push	r28
    4a08:	df 93       	push	r29
    4a0a:	1f 92       	push	r1
    4a0c:	cd b7       	in	r28, 0x3d	; 61
    4a0e:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    4a10:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;						// Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToBackFromISR (handle, &item, &shouldSwitch));
    4a12:	20 e0       	ldi	r18, 0x00	; 0
    4a14:	ae 01       	movw	r20, r28
    4a16:	4f 5f       	subi	r20, 0xFF	; 255
    4a18:	5f 4f       	sbci	r21, 0xFF	; 255
    4a1a:	fc 01       	movw	r30, r24
    4a1c:	84 81       	ldd	r24, Z+4	; 0x04
    4a1e:	95 81       	ldd	r25, Z+5	; 0x05
    4a20:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    4a24:	91 e0       	ldi	r25, 0x01	; 1
    4a26:	81 11       	cpse	r24, r1
    4a28:	01 c0       	rjmp	.+2      	; 0x4a2c <_ZN9frt_queueIiE7ISR_putERKi+0x26>
    4a2a:	90 e0       	ldi	r25, 0x00	; 0
}
    4a2c:	89 2f       	mov	r24, r25
    4a2e:	0f 90       	pop	r0
    4a30:	df 91       	pop	r29
    4a32:	cf 91       	pop	r28
    4a34:	08 95       	ret

00004a36 <_ZN9frt_queueIjE7butt_inERKj>:
		 *  \b not be used within an interrupt service routine. 
		 *  @param item Reference to the item which is going to be (rudely) put into 
		 *              the front of the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool butt_in (const data_type& item)
    4a36:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToFront (handle, &item, ticks_to_wait)));
    4a38:	fc 01       	movw	r30, r24
    4a3a:	26 81       	ldd	r18, Z+6	; 0x06
    4a3c:	37 81       	ldd	r19, Z+7	; 0x07
    4a3e:	40 85       	ldd	r20, Z+8	; 0x08
    4a40:	51 85       	ldd	r21, Z+9	; 0x09
    4a42:	01 e0       	ldi	r16, 0x01	; 1
    4a44:	84 81       	ldd	r24, Z+4	; 0x04
    4a46:	95 81       	ldd	r25, Z+5	; 0x05
    4a48:	0e 94 cf 12 	call	0x259e	; 0x259e <xQueueGenericSend>
    4a4c:	91 e0       	ldi	r25, 0x01	; 1
    4a4e:	81 11       	cpse	r24, r1
    4a50:	01 c0       	rjmp	.+2      	; 0x4a54 <_ZN9frt_queueIjE7butt_inERKj+0x1e>
    4a52:	90 e0       	ldi	r25, 0x00	; 0
		}
    4a54:	89 2f       	mov	r24, r25
    4a56:	0f 91       	pop	r16
    4a58:	08 95       	ret

00004a5a <_ZN9frt_queueIjE3putERKj>:
		 *  an item into the front of the queue so it will be retreived first, use 
		 *  \c butt_in() instead. This method must \b not be used within an ISR.
		 *  @param item Reference to the item which is going to be put into the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool put (const data_type& item)
    4a5a:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToBack (handle, &item, ticks_to_wait)));
    4a5c:	fc 01       	movw	r30, r24
    4a5e:	26 81       	ldd	r18, Z+6	; 0x06
    4a60:	37 81       	ldd	r19, Z+7	; 0x07
    4a62:	40 85       	ldd	r20, Z+8	; 0x08
    4a64:	51 85       	ldd	r21, Z+9	; 0x09
    4a66:	00 e0       	ldi	r16, 0x00	; 0
    4a68:	84 81       	ldd	r24, Z+4	; 0x04
    4a6a:	95 81       	ldd	r25, Z+5	; 0x05
    4a6c:	0e 94 cf 12 	call	0x259e	; 0x259e <xQueueGenericSend>
    4a70:	91 e0       	ldi	r25, 0x01	; 1
    4a72:	81 11       	cpse	r24, r1
    4a74:	01 c0       	rjmp	.+2      	; 0x4a78 <_ZN9frt_queueIjE3putERKj+0x1e>
    4a76:	90 e0       	ldi	r25, 0x00	; 0
		}
    4a78:	89 2f       	mov	r24, r25
    4a7a:	0f 91       	pop	r16
    4a7c:	08 95       	ret

00004a7e <_ZN9frt_queueIiE7butt_inERKi>:
		 *  \b not be used within an interrupt service routine. 
		 *  @param item Reference to the item which is going to be (rudely) put into 
		 *              the front of the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool butt_in (const data_type& item)
    4a7e:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToFront (handle, &item, ticks_to_wait)));
    4a80:	fc 01       	movw	r30, r24
    4a82:	26 81       	ldd	r18, Z+6	; 0x06
    4a84:	37 81       	ldd	r19, Z+7	; 0x07
    4a86:	40 85       	ldd	r20, Z+8	; 0x08
    4a88:	51 85       	ldd	r21, Z+9	; 0x09
    4a8a:	01 e0       	ldi	r16, 0x01	; 1
    4a8c:	84 81       	ldd	r24, Z+4	; 0x04
    4a8e:	95 81       	ldd	r25, Z+5	; 0x05
    4a90:	0e 94 cf 12 	call	0x259e	; 0x259e <xQueueGenericSend>
    4a94:	91 e0       	ldi	r25, 0x01	; 1
    4a96:	81 11       	cpse	r24, r1
    4a98:	01 c0       	rjmp	.+2      	; 0x4a9c <_ZN9frt_queueIiE7butt_inERKi+0x1e>
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
		}
    4a9c:	89 2f       	mov	r24, r25
    4a9e:	0f 91       	pop	r16
    4aa0:	08 95       	ret

00004aa2 <_ZN9frt_queueIiE3putERKi>:
		 *  an item into the front of the queue so it will be retreived first, use 
		 *  \c butt_in() instead. This method must \b not be used within an ISR.
		 *  @param item Reference to the item which is going to be put into the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool put (const data_type& item)
    4aa2:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToBack (handle, &item, ticks_to_wait)));
    4aa4:	fc 01       	movw	r30, r24
    4aa6:	26 81       	ldd	r18, Z+6	; 0x06
    4aa8:	37 81       	ldd	r19, Z+7	; 0x07
    4aaa:	40 85       	ldd	r20, Z+8	; 0x08
    4aac:	51 85       	ldd	r21, Z+9	; 0x09
    4aae:	00 e0       	ldi	r16, 0x00	; 0
    4ab0:	84 81       	ldd	r24, Z+4	; 0x04
    4ab2:	95 81       	ldd	r25, Z+5	; 0x05
    4ab4:	0e 94 cf 12 	call	0x259e	; 0x259e <xQueueGenericSend>
    4ab8:	91 e0       	ldi	r25, 0x01	; 1
    4aba:	81 11       	cpse	r24, r1
    4abc:	01 c0       	rjmp	.+2      	; 0x4ac0 <_ZN9frt_queueIiE3putERKi+0x1e>
    4abe:	90 e0       	ldi	r25, 0x00	; 0
		}
    4ac0:	89 2f       	mov	r24, r25
    4ac2:	0f 91       	pop	r16
    4ac4:	08 95       	ret

00004ac6 <_Z8CCPWritePVhh>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    4ac6:	0f 93       	push	r16
    4ac8:	cf 93       	push	r28
    4aca:	df 93       	push	r29
    4acc:	1f 92       	push	r1
    4ace:	cd b7       	in	r28, 0x3d	; 61
    4ad0:	de b7       	in	r29, 0x3e	; 62
	#if defined __GNUC__
	uint8_t volatile saved_sreg = SREG;
    4ad2:	2f b7       	in	r18, 0x3f	; 63
    4ad4:	29 83       	std	Y+1, r18	; 0x01
	cli();
    4ad6:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
	#ifdef RAMPZ
	RAMPZ = 0;
    4ad8:	1b be       	out	0x3b, r1	; 59
	"out   %3, r16"	      "\n\t"
	"st     Z,  %1"       "\n\t"
	:
	: "r" (tmpAddr), "r" (value), "M" (0xD8), "i" (&CCP)
	: "r16", "r30", "r31"
	);
    4ada:	fc 01       	movw	r30, r24
    4adc:	08 ed       	ldi	r16, 0xD8	; 216
    4ade:	04 bf       	out	0x34, r16	; 52
    4ae0:	60 83       	st	Z, r22

	SREG = saved_sreg;
    4ae2:	89 81       	ldd	r24, Y+1	; 0x01
    4ae4:	8f bf       	out	0x3f, r24	; 63
	#endif
}
    4ae6:	0f 90       	pop	r0
    4ae8:	df 91       	pop	r29
    4aea:	cf 91       	pop	r28
    4aec:	0f 91       	pop	r16
    4aee:	08 95       	ret

00004af0 <main>:
 *  reset.
 *  @return This is a real-time microcontroller program which doesn't return. Ever.
 */

int main (void)
{
    4af0:	ef 92       	push	r14
    4af2:	ff 92       	push	r15
    4af4:	0f 93       	push	r16
    4af6:	1f 93       	push	r17
    4af8:	cf 93       	push	r28
    4afa:	df 93       	push	r29
    4afc:	cd b7       	in	r28, 0x3d	; 61
    4afe:	de b7       	in	r29, 0x3e	; 62
    4b00:	c8 55       	subi	r28, 0x58	; 88
    4b02:	d1 09       	sbc	r29, r1
    4b04:	cd bf       	out	0x3d, r28	; 61
    4b06:	de bf       	out	0x3e, r29	; 62
	cli();
    4b08:	f8 94       	cli
	// Configure the system clock
	{	
		// Enable the 32MHz internal RC oscillator and the external 32KHz oscillator
		OSC.CTRL |= (1 << OSC_RC32MEN_bp);
    4b0a:	e0 e5       	ldi	r30, 0x50	; 80
    4b0c:	f0 e0       	ldi	r31, 0x00	; 0
    4b0e:	80 81       	ld	r24, Z
    4b10:	82 60       	ori	r24, 0x02	; 2
    4b12:	80 83       	st	Z, r24
		do {} while((OSC.STATUS & (1 << OSC_RC32MRDY_bp)) != (1 << OSC_RC32MRDY_bp));
    4b14:	81 81       	ldd	r24, Z+1	; 0x01
    4b16:	81 ff       	sbrs	r24, 1
    4b18:	fd cf       	rjmp	.-6      	; 0x4b14 <main+0x24>
		// Enable the DFLL auto-calibration
//		DFLLRC32M.CTRL = (1 << DFLL_ENABLE_bp);
//		DFLLRC2M.CTRL = (1 << DFLL_ENABLE_bp);

		// Select the clock
		CCPWrite(&(CLK.CTRL),((CLK.CTRL & ~CLK_SCLKSEL_gm) | (1 << CLK_SCLKSEL0_bp)));
    4b1a:	60 91 40 00 	lds	r22, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    4b1e:	68 7f       	andi	r22, 0xF8	; 248
    4b20:	61 60       	ori	r22, 0x01	; 1
    4b22:	80 e4       	ldi	r24, 0x40	; 64
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <_Z8CCPWritePVhh>
		// Enable the RTC as an external oscillator
		//CLK.RTCCTRL = (CLK_RTCSRC_TOSC_gc | CLK_RTCEN_bm);
		// CCPWrite(&(CLK.RTCCTRL),(CLK_RTCSRC_TOSC_gc | CLK_RTCEN_bm));
		
		// Disable the 2MHz internal RC oscillator
		OSC.CTRL &= ~(1 << OSC_RC2MEN_bp);
    4b2a:	e0 e5       	ldi	r30, 0x50	; 80
    4b2c:	f0 e0       	ldi	r31, 0x00	; 0
    4b2e:	80 81       	ld	r24, Z
    4b30:	8e 7f       	andi	r24, 0xFE	; 254
    4b32:	80 83       	st	Z, r24
	}
	
	// Disable the watchdog timer unless it's needed later. This is important because
	// sometimes the watchdog timer may have been left on...and it tends to stay on	 
	wdt_disable ();
    4b34:	9d ef       	ldi	r25, 0xFD	; 253
    4b36:	88 ed       	ldi	r24, 0xD8	; 216
    4b38:	08 b6       	in	r0, 0x38	; 56
    4b3a:	18 be       	out	0x38, r1	; 56
    4b3c:	84 bf       	out	0x34, r24	; 52
    4b3e:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    4b42:	08 be       	out	0x38, r0	; 56

	// Configure a serial port which can be used by a task to print debugging infor-
	// mation, or to allow user interaction, or for whatever use is appropriate.  The
	// serial port will be used by the user interface task after setup is complete and
	// the task scheduler has been started by the function vTaskStartScheduler()
	rs232 ser_dev(0,&USARTE0); // Create a serial device on USART E0
    4b44:	40 ea       	ldi	r20, 0xA0	; 160
    4b46:	5a e0       	ldi	r21, 0x0A	; 10
    4b48:	60 e0       	ldi	r22, 0x00	; 0
    4b4a:	70 e0       	ldi	r23, 0x00	; 0
    4b4c:	ce 01       	movw	r24, r28
    4b4e:	01 96       	adiw	r24, 0x01	; 1
    4b50:	0e 94 07 21 	call	0x420e	; 0x420e <_ZN5rs232C1EjP12USART_struct>
	ser_dev << clrscr << "FreeRTOS Xmega Testing Program" << endl << endl;
    4b54:	67 e0       	ldi	r22, 0x07	; 7
    4b56:	ce 01       	movw	r24, r28
    4b58:	01 96       	adiw	r24, 0x01	; 1
    4b5a:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    4b5e:	8c 01       	movw	r16, r24
    4b60:	60 ec       	ldi	r22, 0xC0	; 192
    4b62:	71 e2       	ldi	r23, 0x21	; 33
    4b64:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN8emstream4putsEPKc>
    4b68:	66 e0       	ldi	r22, 0x06	; 6
    4b6a:	c8 01       	movw	r24, r16
    4b6c:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
    4b70:	66 e0       	ldi	r22, 0x06	; 6
    4b72:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8emstreamlsE15ser_manipulator>
	
	// Create instance of I2C driver to be used by sensor objects
	I2CMaster i2c(&TWIE, 62000, &ser_dev);
    4b76:	8e 01       	movw	r16, r28
    4b78:	0f 5f       	subi	r16, 0xFF	; 255
    4b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b7c:	20 e3       	ldi	r18, 0x30	; 48
    4b7e:	32 ef       	ldi	r19, 0xF2	; 242
    4b80:	40 e0       	ldi	r20, 0x00	; 0
    4b82:	50 e0       	ldi	r21, 0x00	; 0
    4b84:	60 ea       	ldi	r22, 0xA0	; 160
    4b86:	74 e0       	ldi	r23, 0x04	; 4
    4b88:	ce 01       	movw	r24, r28
    4b8a:	4e 96       	adiw	r24, 0x1e	; 30
    4b8c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN9I2CMasterC1EP10TWI_structmP8emstream>
	
	// Create instance of IMU class and pass in a pointer to the I2C driver
	MMA8451 mma8451(&i2c, &ser_dev);
    4b90:	a8 01       	movw	r20, r16
    4b92:	be 01       	movw	r22, r28
    4b94:	62 5e       	subi	r22, 0xE2	; 226
    4b96:	7f 4f       	sbci	r23, 0xFF	; 255
    4b98:	ce 01       	movw	r24, r28
    4b9a:	c7 96       	adiw	r24, 0x37	; 55
    4b9c:	0e 94 30 0a 	call	0x1460	; 0x1460 <_ZN7MMA8451C1EP9I2CMasterP8emstream>

	//Create instance of Sonar class and pass in a pointer to the I2C driver
	MB1202 mb1202(&i2c, &ser_dev);
    4ba0:	a8 01       	movw	r20, r16
    4ba2:	be 01       	movw	r22, r28
    4ba4:	62 5e       	subi	r22, 0xE2	; 226
    4ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    4ba8:	ce 01       	movw	r24, r28
    4baa:	88 5b       	subi	r24, 0xB8	; 184
    4bac:	9f 4f       	sbci	r25, 0xFF	; 255
    4bae:	0e 94 4a 09 	call	0x1294	; 0x1294 <_ZN6MB1202C1EP9I2CMasterP8emstream>
	
	// The user interface is at low priority; it could have been run in the idle task
	// but it is desired to exercise the RTOS more thoroughly in this test program
	new task_user ("UserInt", task_priority (0), 128, &ser_dev);
    4bb2:	82 e1       	ldi	r24, 0x12	; 18
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
    4bba:	20 e8       	ldi	r18, 0x80	; 128
    4bbc:	30 e0       	ldi	r19, 0x00	; 0
    4bbe:	40 e0       	ldi	r20, 0x00	; 0
    4bc0:	6f ed       	ldi	r22, 0xDF	; 223
    4bc2:	71 e2       	ldi	r23, 0x21	; 33
    4bc4:	0e 94 4b 0c 	call	0x1896	; 0x1896 <_ZN9task_userC1EPKchjP8emstream>
	// new task_sonar( "Sonar", task_priority(2), 128, &ser_dev, &mb1202 );	
	new task_sensor ("Sensor", task_priority (2), 128, &ser_dev, &mma8451);
    4bc8:	88 e1       	ldi	r24, 0x18	; 24
    4bca:	90 e0       	ldi	r25, 0x00	; 0
    4bcc:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_Znwj>
    4bd0:	9e 01       	movw	r18, r28
    4bd2:	29 5c       	subi	r18, 0xC9	; 201
    4bd4:	3f 4f       	sbci	r19, 0xFF	; 255
    4bd6:	79 01       	movw	r14, r18
    4bd8:	20 e8       	ldi	r18, 0x80	; 128
    4bda:	30 e0       	ldi	r19, 0x00	; 0
    4bdc:	42 e0       	ldi	r20, 0x02	; 2
    4bde:	67 ee       	ldi	r22, 0xE7	; 231
    4be0:	71 e2       	ldi	r23, 0x21	; 33
    4be2:	0e 94 2e 0c 	call	0x185c	; 0x185c <_ZN11task_sensorC1EPKchjP8emstreamP7MMA8451>
	
	// Enable high level interrupts and global interrupts
	PMIC_CTRL = (1 << PMIC_HILVLEN_bp | 1 << PMIC_MEDLVLEN_bp | 1 << PMIC_LOLVLEN_bp);
    4be6:	87 e0       	ldi	r24, 0x07	; 7
    4be8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    4bec:	78 94       	sei
	
	// Here's where the RTOS scheduler is started up. It should never exit as long as
	// power is on and the microcontroller isn't rebooted
	vTaskStartScheduler ();
    4bee:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <vTaskStartScheduler>
}
    4bf2:	80 e0       	ldi	r24, 0x00	; 0
    4bf4:	90 e0       	ldi	r25, 0x00	; 0
    4bf6:	c8 5a       	subi	r28, 0xA8	; 168
    4bf8:	df 4f       	sbci	r29, 0xFF	; 255
    4bfa:	cd bf       	out	0x3d, r28	; 61
    4bfc:	de bf       	out	0x3e, r29	; 62
    4bfe:	df 91       	pop	r29
    4c00:	cf 91       	pop	r28
    4c02:	1f 91       	pop	r17
    4c04:	0f 91       	pop	r16
    4c06:	ff 90       	pop	r15
    4c08:	ef 90       	pop	r14
    4c0a:	08 95       	ret

00004c0c <_GLOBAL__sub_I_counter>:
    4c0c:	cf 92       	push	r12
    4c0e:	df 92       	push	r13
    4c10:	ef 92       	push	r14
    4c12:	ff 92       	push	r15
    4c14:	0f 93       	push	r16
    4c16:	1f 93       	push	r17
    4c18:	cf 93       	push	r28
    4c1a:	df 93       	push	r29
#include "task_user.h"                      // Header for user interface task
#include "task_sensor.h"
#include "task_sonar.h"

volatile int counter;
frt_text_queue print_ser_queue (32, NULL, 10);
    4c1c:	0a e0       	ldi	r16, 0x0A	; 10
    4c1e:	10 e0       	ldi	r17, 0x00	; 0
    4c20:	20 e0       	ldi	r18, 0x00	; 0
    4c22:	30 e0       	ldi	r19, 0x00	; 0
    4c24:	40 e0       	ldi	r20, 0x00	; 0
    4c26:	50 e0       	ldi	r21, 0x00	; 0
    4c28:	60 e2       	ldi	r22, 0x20	; 32
    4c2a:	70 e0       	ldi	r23, 0x00	; 0
    4c2c:	82 ef       	ldi	r24, 0xF2	; 242
    4c2e:	92 e3       	ldi	r25, 0x32	; 50
    4c30:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <_ZN14frt_text_queueC1EjP8emstreamm>
    4c34:	c8 ee       	ldi	r28, 0xE8	; 232
    4c36:	d2 e3       	ldi	r29, 0x32	; 50
    4c38:	1a 82       	std	Y+2, r1	; 0x02
    4c3a:	1b 82       	std	Y+3, r1	; 0x03
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    4c3c:	82 ef       	ldi	r24, 0xF2	; 242
    4c3e:	91 e2       	ldi	r25, 0x21	; 33
    4c40:	88 83       	st	Y, r24
    4c42:	99 83       	std	Y+1, r25	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    4c44:	40 e0       	ldi	r20, 0x00	; 0
    4c46:	62 e0       	ldi	r22, 0x02	; 2
    4c48:	8f ef       	ldi	r24, 0xFF	; 255
    4c4a:	0e 94 a1 12 	call	0x2542	; 0x2542 <xQueueGenericCreate>
    4c4e:	8c 83       	std	Y+4, r24	; 0x04
    4c50:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    4c52:	0f 2e       	mov	r0, r31
    4c54:	fa e0       	ldi	r31, 0x0A	; 10
    4c56:	cf 2e       	mov	r12, r31
    4c58:	d1 2c       	mov	r13, r1
    4c5a:	e1 2c       	mov	r14, r1
    4c5c:	f1 2c       	mov	r15, r1
    4c5e:	f0 2d       	mov	r31, r0
    4c60:	ce 82       	std	Y+6, r12	; 0x06
    4c62:	df 82       	std	Y+7, r13	; 0x07
    4c64:	e8 86       	std	Y+8, r14	; 0x08
    4c66:	f9 86       	std	Y+9, r15	; 0x09
    4c68:	ce ed       	ldi	r28, 0xDE	; 222
    4c6a:	d2 e3       	ldi	r29, 0x32	; 50
    4c6c:	1a 82       	std	Y+2, r1	; 0x02
    4c6e:	1b 82       	std	Y+3, r1	; 0x03
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    4c70:	06 e1       	ldi	r16, 0x16	; 22
    4c72:	12 e2       	ldi	r17, 0x22	; 34
    4c74:	08 83       	st	Y, r16
    4c76:	19 83       	std	Y+1, r17	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    4c78:	40 e0       	ldi	r20, 0x00	; 0
    4c7a:	62 e0       	ldi	r22, 0x02	; 2
    4c7c:	8f ef       	ldi	r24, 0xFF	; 255
    4c7e:	0e 94 a1 12 	call	0x2542	; 0x2542 <xQueueGenericCreate>
    4c82:	8c 83       	std	Y+4, r24	; 0x04
    4c84:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    4c86:	ce 82       	std	Y+6, r12	; 0x06
    4c88:	df 82       	std	Y+7, r13	; 0x07
    4c8a:	e8 86       	std	Y+8, r14	; 0x08
    4c8c:	f9 86       	std	Y+9, r15	; 0x09
    4c8e:	c4 ed       	ldi	r28, 0xD4	; 212
    4c90:	d2 e3       	ldi	r29, 0x32	; 50
    4c92:	1a 82       	std	Y+2, r1	; 0x02
    4c94:	1b 82       	std	Y+3, r1	; 0x03
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    4c96:	08 83       	st	Y, r16
    4c98:	19 83       	std	Y+1, r17	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    4c9a:	40 e0       	ldi	r20, 0x00	; 0
    4c9c:	62 e0       	ldi	r22, 0x02	; 2
    4c9e:	8f ef       	ldi	r24, 0xFF	; 255
    4ca0:	0e 94 a1 12 	call	0x2542	; 0x2542 <xQueueGenericCreate>
    4ca4:	8c 83       	std	Y+4, r24	; 0x04
    4ca6:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    4ca8:	ce 82       	std	Y+6, r12	; 0x06
    4caa:	df 82       	std	Y+7, r13	; 0x07
    4cac:	e8 86       	std	Y+8, r14	; 0x08
    4cae:	f9 86       	std	Y+9, r15	; 0x09
    4cb0:	ca ec       	ldi	r28, 0xCA	; 202
    4cb2:	d2 e3       	ldi	r29, 0x32	; 50
    4cb4:	1a 82       	std	Y+2, r1	; 0x02
    4cb6:	1b 82       	std	Y+3, r1	; 0x03
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    4cb8:	08 83       	st	Y, r16
    4cba:	19 83       	std	Y+1, r17	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    4cbc:	40 e0       	ldi	r20, 0x00	; 0
    4cbe:	62 e0       	ldi	r22, 0x02	; 2
    4cc0:	8f ef       	ldi	r24, 0xFF	; 255
    4cc2:	0e 94 a1 12 	call	0x2542	; 0x2542 <xQueueGenericCreate>
    4cc6:	8c 83       	std	Y+4, r24	; 0x04
    4cc8:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    4cca:	ce 82       	std	Y+6, r12	; 0x06
    4ccc:	df 82       	std	Y+7, r13	; 0x07
    4cce:	e8 86       	std	Y+8, r14	; 0x08
    4cd0:	f9 86       	std	Y+9, r15	; 0x09
    4cd2:	c0 ec       	ldi	r28, 0xC0	; 192
    4cd4:	d2 e3       	ldi	r29, 0x32	; 50
    4cd6:	1a 82       	std	Y+2, r1	; 0x02
    4cd8:	1b 82       	std	Y+3, r1	; 0x03
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    4cda:	08 83       	st	Y, r16
    4cdc:	19 83       	std	Y+1, r17	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    4cde:	40 e0       	ldi	r20, 0x00	; 0
    4ce0:	62 e0       	ldi	r22, 0x02	; 2
    4ce2:	8f ef       	ldi	r24, 0xFF	; 255
    4ce4:	0e 94 a1 12 	call	0x2542	; 0x2542 <xQueueGenericCreate>
    4ce8:	8c 83       	std	Y+4, r24	; 0x04
    4cea:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    4cec:	ce 82       	std	Y+6, r12	; 0x06
    4cee:	df 82       	std	Y+7, r13	; 0x07
    4cf0:	e8 86       	std	Y+8, r14	; 0x08
    4cf2:	f9 86       	std	Y+9, r15	; 0x09
	sei();
	
	// Here's where the RTOS scheduler is started up. It should never exit as long as
	// power is on and the microcontroller isn't rebooted
	vTaskStartScheduler ();
}
    4cf4:	df 91       	pop	r29
    4cf6:	cf 91       	pop	r28
    4cf8:	1f 91       	pop	r17
    4cfa:	0f 91       	pop	r16
    4cfc:	ff 90       	pop	r15
    4cfe:	ef 90       	pop	r14
    4d00:	df 90       	pop	r13
    4d02:	cf 90       	pop	r12
    4d04:	08 95       	ret

00004d06 <__mulsi3>:
    4d06:	db 01       	movw	r26, r22
    4d08:	8f 93       	push	r24
    4d0a:	9f 93       	push	r25
    4d0c:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__muluhisi3>
    4d10:	bf 91       	pop	r27
    4d12:	af 91       	pop	r26
    4d14:	a2 9f       	mul	r26, r18
    4d16:	80 0d       	add	r24, r0
    4d18:	91 1d       	adc	r25, r1
    4d1a:	a3 9f       	mul	r26, r19
    4d1c:	90 0d       	add	r25, r0
    4d1e:	b2 9f       	mul	r27, r18
    4d20:	90 0d       	add	r25, r0
    4d22:	11 24       	eor	r1, r1
    4d24:	08 95       	ret

00004d26 <__udivmodsi4>:
    4d26:	a1 e2       	ldi	r26, 0x21	; 33
    4d28:	1a 2e       	mov	r1, r26
    4d2a:	aa 1b       	sub	r26, r26
    4d2c:	bb 1b       	sub	r27, r27
    4d2e:	fd 01       	movw	r30, r26
    4d30:	0d c0       	rjmp	.+26     	; 0x4d4c <__udivmodsi4_ep>

00004d32 <__udivmodsi4_loop>:
    4d32:	aa 1f       	adc	r26, r26
    4d34:	bb 1f       	adc	r27, r27
    4d36:	ee 1f       	adc	r30, r30
    4d38:	ff 1f       	adc	r31, r31
    4d3a:	a2 17       	cp	r26, r18
    4d3c:	b3 07       	cpc	r27, r19
    4d3e:	e4 07       	cpc	r30, r20
    4d40:	f5 07       	cpc	r31, r21
    4d42:	20 f0       	brcs	.+8      	; 0x4d4c <__udivmodsi4_ep>
    4d44:	a2 1b       	sub	r26, r18
    4d46:	b3 0b       	sbc	r27, r19
    4d48:	e4 0b       	sbc	r30, r20
    4d4a:	f5 0b       	sbc	r31, r21

00004d4c <__udivmodsi4_ep>:
    4d4c:	66 1f       	adc	r22, r22
    4d4e:	77 1f       	adc	r23, r23
    4d50:	88 1f       	adc	r24, r24
    4d52:	99 1f       	adc	r25, r25
    4d54:	1a 94       	dec	r1
    4d56:	69 f7       	brne	.-38     	; 0x4d32 <__udivmodsi4_loop>
    4d58:	60 95       	com	r22
    4d5a:	70 95       	com	r23
    4d5c:	80 95       	com	r24
    4d5e:	90 95       	com	r25
    4d60:	9b 01       	movw	r18, r22
    4d62:	ac 01       	movw	r20, r24
    4d64:	bd 01       	movw	r22, r26
    4d66:	cf 01       	movw	r24, r30
    4d68:	08 95       	ret

00004d6a <__divmodsi4>:
    4d6a:	05 2e       	mov	r0, r21
    4d6c:	97 fb       	bst	r25, 7
    4d6e:	1e f4       	brtc	.+6      	; 0x4d76 <__divmodsi4+0xc>
    4d70:	00 94       	com	r0
    4d72:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <__negsi2>
    4d76:	57 fd       	sbrc	r21, 7
    4d78:	07 d0       	rcall	.+14     	; 0x4d88 <__divmodsi4_neg2>
    4d7a:	0e 94 93 26 	call	0x4d26	; 0x4d26 <__udivmodsi4>
    4d7e:	07 fc       	sbrc	r0, 7
    4d80:	03 d0       	rcall	.+6      	; 0x4d88 <__divmodsi4_neg2>
    4d82:	4e f4       	brtc	.+18     	; 0x4d96 <__divmodsi4_exit>
    4d84:	0c 94 cc 26 	jmp	0x4d98	; 0x4d98 <__negsi2>

00004d88 <__divmodsi4_neg2>:
    4d88:	50 95       	com	r21
    4d8a:	40 95       	com	r20
    4d8c:	30 95       	com	r19
    4d8e:	21 95       	neg	r18
    4d90:	3f 4f       	sbci	r19, 0xFF	; 255
    4d92:	4f 4f       	sbci	r20, 0xFF	; 255
    4d94:	5f 4f       	sbci	r21, 0xFF	; 255

00004d96 <__divmodsi4_exit>:
    4d96:	08 95       	ret

00004d98 <__negsi2>:
    4d98:	90 95       	com	r25
    4d9a:	80 95       	com	r24
    4d9c:	70 95       	com	r23
    4d9e:	61 95       	neg	r22
    4da0:	7f 4f       	sbci	r23, 0xFF	; 255
    4da2:	8f 4f       	sbci	r24, 0xFF	; 255
    4da4:	9f 4f       	sbci	r25, 0xFF	; 255
    4da6:	08 95       	ret

00004da8 <__tablejump2__>:
    4da8:	ee 0f       	add	r30, r30
    4daa:	ff 1f       	adc	r31, r31
    4dac:	88 1f       	adc	r24, r24
    4dae:	8b bf       	out	0x3b, r24	; 59
    4db0:	07 90       	elpm	r0, Z+
    4db2:	f6 91       	elpm	r31, Z
    4db4:	e0 2d       	mov	r30, r0
    4db6:	1b be       	out	0x3b, r1	; 59
    4db8:	19 94       	eijmp

00004dba <__muluhisi3>:
    4dba:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <__umulhisi3>
    4dbe:	a5 9f       	mul	r26, r21
    4dc0:	90 0d       	add	r25, r0
    4dc2:	b4 9f       	mul	r27, r20
    4dc4:	90 0d       	add	r25, r0
    4dc6:	a4 9f       	mul	r26, r20
    4dc8:	80 0d       	add	r24, r0
    4dca:	91 1d       	adc	r25, r1
    4dcc:	11 24       	eor	r1, r1
    4dce:	08 95       	ret

00004dd0 <__umulhisi3>:
    4dd0:	a2 9f       	mul	r26, r18
    4dd2:	b0 01       	movw	r22, r0
    4dd4:	b3 9f       	mul	r27, r19
    4dd6:	c0 01       	movw	r24, r0
    4dd8:	a3 9f       	mul	r26, r19
    4dda:	70 0d       	add	r23, r0
    4ddc:	81 1d       	adc	r24, r1
    4dde:	11 24       	eor	r1, r1
    4de0:	91 1d       	adc	r25, r1
    4de2:	b2 9f       	mul	r27, r18
    4de4:	70 0d       	add	r23, r0
    4de6:	81 1d       	adc	r24, r1
    4de8:	11 24       	eor	r1, r1
    4dea:	91 1d       	adc	r25, r1
    4dec:	08 95       	ret

00004dee <memcpy>:
    4dee:	fb 01       	movw	r30, r22
    4df0:	dc 01       	movw	r26, r24
    4df2:	02 c0       	rjmp	.+4      	; 0x4df8 <memcpy+0xa>
    4df4:	01 90       	ld	r0, Z+
    4df6:	0d 92       	st	X+, r0
    4df8:	41 50       	subi	r20, 0x01	; 1
    4dfa:	50 40       	sbci	r21, 0x00	; 0
    4dfc:	d8 f7       	brcc	.-10     	; 0x4df4 <memcpy+0x6>
    4dfe:	08 95       	ret

00004e00 <memset>:
    4e00:	dc 01       	movw	r26, r24
    4e02:	01 c0       	rjmp	.+2      	; 0x4e06 <memset+0x6>
    4e04:	6d 93       	st	X+, r22
    4e06:	41 50       	subi	r20, 0x01	; 1
    4e08:	50 40       	sbci	r21, 0x00	; 0
    4e0a:	e0 f7       	brcc	.-8      	; 0x4e04 <memset+0x4>
    4e0c:	08 95       	ret

00004e0e <strncpy>:
    4e0e:	fb 01       	movw	r30, r22
    4e10:	dc 01       	movw	r26, r24
    4e12:	41 50       	subi	r20, 0x01	; 1
    4e14:	50 40       	sbci	r21, 0x00	; 0
    4e16:	48 f0       	brcs	.+18     	; 0x4e2a <strncpy+0x1c>
    4e18:	01 90       	ld	r0, Z+
    4e1a:	0d 92       	st	X+, r0
    4e1c:	00 20       	and	r0, r0
    4e1e:	c9 f7       	brne	.-14     	; 0x4e12 <strncpy+0x4>
    4e20:	01 c0       	rjmp	.+2      	; 0x4e24 <strncpy+0x16>
    4e22:	1d 92       	st	X+, r1
    4e24:	41 50       	subi	r20, 0x01	; 1
    4e26:	50 40       	sbci	r21, 0x00	; 0
    4e28:	e0 f7       	brcc	.-8      	; 0x4e22 <strncpy+0x14>
    4e2a:	08 95       	ret

00004e2c <ultoa>:
    4e2c:	25 32       	cpi	r18, 0x25	; 37
    4e2e:	31 05       	cpc	r19, r1
    4e30:	20 f4       	brcc	.+8      	; 0x4e3a <ultoa+0xe>
    4e32:	22 30       	cpi	r18, 0x02	; 2
    4e34:	10 f0       	brcs	.+4      	; 0x4e3a <ultoa+0xe>
    4e36:	0c 94 21 27 	jmp	0x4e42	; 0x4e42 <__ultoa_ncheck>
    4e3a:	fa 01       	movw	r30, r20
    4e3c:	10 82       	st	Z, r1
    4e3e:	ca 01       	movw	r24, r20
    4e40:	08 95       	ret

00004e42 <__ultoa_ncheck>:
    4e42:	bb 27       	eor	r27, r27

00004e44 <__ultoa_common>:
    4e44:	fa 01       	movw	r30, r20
    4e46:	a6 2f       	mov	r26, r22
    4e48:	62 17       	cp	r22, r18
    4e4a:	71 05       	cpc	r23, r1
    4e4c:	81 05       	cpc	r24, r1
    4e4e:	91 05       	cpc	r25, r1
    4e50:	33 0b       	sbc	r19, r19
    4e52:	30 fb       	bst	r19, 0
    4e54:	66 f0       	brts	.+24     	; 0x4e6e <__ultoa_common+0x2a>
    4e56:	aa 27       	eor	r26, r26
    4e58:	66 0f       	add	r22, r22
    4e5a:	77 1f       	adc	r23, r23
    4e5c:	88 1f       	adc	r24, r24
    4e5e:	99 1f       	adc	r25, r25
    4e60:	aa 1f       	adc	r26, r26
    4e62:	a2 17       	cp	r26, r18
    4e64:	10 f0       	brcs	.+4      	; 0x4e6a <__ultoa_common+0x26>
    4e66:	a2 1b       	sub	r26, r18
    4e68:	63 95       	inc	r22
    4e6a:	38 50       	subi	r19, 0x08	; 8
    4e6c:	a9 f7       	brne	.-22     	; 0x4e58 <__ultoa_common+0x14>
    4e6e:	a0 5d       	subi	r26, 0xD0	; 208
    4e70:	aa 33       	cpi	r26, 0x3A	; 58
    4e72:	08 f0       	brcs	.+2      	; 0x4e76 <__ultoa_common+0x32>
    4e74:	a9 5d       	subi	r26, 0xD9	; 217
    4e76:	a1 93       	st	Z+, r26
    4e78:	36 f7       	brtc	.-52     	; 0x4e46 <__ultoa_common+0x2>
    4e7a:	b1 11       	cpse	r27, r1
    4e7c:	b1 93       	st	Z+, r27
    4e7e:	10 82       	st	Z, r1
    4e80:	ca 01       	movw	r24, r20
    4e82:	0c 94 68 27 	jmp	0x4ed0	; 0x4ed0 <strrev>

00004e86 <utoa>:
    4e86:	45 32       	cpi	r20, 0x25	; 37
    4e88:	51 05       	cpc	r21, r1
    4e8a:	20 f4       	brcc	.+8      	; 0x4e94 <utoa+0xe>
    4e8c:	42 30       	cpi	r20, 0x02	; 2
    4e8e:	10 f0       	brcs	.+4      	; 0x4e94 <utoa+0xe>
    4e90:	0c 94 4e 27 	jmp	0x4e9c	; 0x4e9c <__utoa_ncheck>
    4e94:	fb 01       	movw	r30, r22
    4e96:	10 82       	st	Z, r1
    4e98:	cb 01       	movw	r24, r22
    4e9a:	08 95       	ret

00004e9c <__utoa_ncheck>:
    4e9c:	bb 27       	eor	r27, r27

00004e9e <__utoa_common>:
    4e9e:	fb 01       	movw	r30, r22
    4ea0:	55 27       	eor	r21, r21
    4ea2:	aa 27       	eor	r26, r26
    4ea4:	88 0f       	add	r24, r24
    4ea6:	99 1f       	adc	r25, r25
    4ea8:	aa 1f       	adc	r26, r26
    4eaa:	a4 17       	cp	r26, r20
    4eac:	10 f0       	brcs	.+4      	; 0x4eb2 <__utoa_common+0x14>
    4eae:	a4 1b       	sub	r26, r20
    4eb0:	83 95       	inc	r24
    4eb2:	50 51       	subi	r21, 0x10	; 16
    4eb4:	b9 f7       	brne	.-18     	; 0x4ea4 <__utoa_common+0x6>
    4eb6:	a0 5d       	subi	r26, 0xD0	; 208
    4eb8:	aa 33       	cpi	r26, 0x3A	; 58
    4eba:	08 f0       	brcs	.+2      	; 0x4ebe <__utoa_common+0x20>
    4ebc:	a9 5d       	subi	r26, 0xD9	; 217
    4ebe:	a1 93       	st	Z+, r26
    4ec0:	00 97       	sbiw	r24, 0x00	; 0
    4ec2:	79 f7       	brne	.-34     	; 0x4ea2 <__utoa_common+0x4>
    4ec4:	b1 11       	cpse	r27, r1
    4ec6:	b1 93       	st	Z+, r27
    4ec8:	11 92       	st	Z+, r1
    4eca:	cb 01       	movw	r24, r22
    4ecc:	0c 94 68 27 	jmp	0x4ed0	; 0x4ed0 <strrev>

00004ed0 <strrev>:
    4ed0:	dc 01       	movw	r26, r24
    4ed2:	fc 01       	movw	r30, r24
    4ed4:	67 2f       	mov	r22, r23
    4ed6:	71 91       	ld	r23, Z+
    4ed8:	77 23       	and	r23, r23
    4eda:	e1 f7       	brne	.-8      	; 0x4ed4 <strrev+0x4>
    4edc:	32 97       	sbiw	r30, 0x02	; 2
    4ede:	04 c0       	rjmp	.+8      	; 0x4ee8 <strrev+0x18>
    4ee0:	7c 91       	ld	r23, X
    4ee2:	6d 93       	st	X+, r22
    4ee4:	70 83       	st	Z, r23
    4ee6:	62 91       	ld	r22, -Z
    4ee8:	ae 17       	cp	r26, r30
    4eea:	bf 07       	cpc	r27, r31
    4eec:	c8 f3       	brcs	.-14     	; 0x4ee0 <strrev+0x10>
    4eee:	08 95       	ret

00004ef0 <_exit>:
    4ef0:	f8 94       	cli

00004ef2 <__stop_program>:
    4ef2:	ff cf       	rjmp	.-2      	; 0x4ef2 <__stop_program>
